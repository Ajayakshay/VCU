
vcu_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2f8  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800b5c4  0800b5c4  0000c5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b5dc  0800b5dc  0000c5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800b5e0  0800b5e0  0000c5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  0800b5e4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000448  24000020  0800b5f4  0000d020  2**5
                  ALLOC
  7 ._user_heap_stack 00000600  24000468  0800b5f4  0000d468  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001973e  00000000  00000000  0000d03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000031e4  00000000  00000000  0002677c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000014b0  00000000  00000000  00029960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000fef  00000000  00000000  0002ae10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00003e91  00000000  00000000  0002bdff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001c3f4  00000000  00000000  0002fc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015f070  00000000  00000000  0004c084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001ab0f4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005854  00000000  00000000  001ab138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000053  00000000  00000000  001b098c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000020 	.word	0x24000020
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800b5ac 	.word	0x0800b5ac

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000024 	.word	0x24000024
 8000308:	0800b5ac 	.word	0x0800b5ac

0800030c <HAL_TIM_PeriodElapsedCallback>:
	HAL_TIM_Base_Start(&htim3);
	HAL_TIM_Base_Start(&htim4);
}

// Callback function (executes every 1 second)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a14      	ldr	r2, [pc, #80]	@ (800036c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800031a:	4293      	cmp	r3, r2
 800031c:	d114      	bne.n	8000348 <HAL_TIM_PeriodElapsedCallback+0x3c>
    //encoder function
	  uint32_t Wheelspeed_Count_1 = __HAL_TIM_GET_COUNTER(&htim3);
 800031e:	4b14      	ldr	r3, [pc, #80]	@ (8000370 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000324:	60fb      	str	r3, [r7, #12]
	  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000326:	4b12      	ldr	r3, [pc, #72]	@ (8000370 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	2200      	movs	r2, #0
 800032c:	625a      	str	r2, [r3, #36]	@ 0x24
	  uint32_t Wheelspeed_Count_2 = __HAL_TIM_GET_COUNTER(&htim4);
 800032e:	4b11      	ldr	r3, [pc, #68]	@ (8000374 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000334:	60bb      	str	r3, [r7, #8]
	  __HAL_TIM_SET_COUNTER(&htim4, 0);
 8000336:	4b0f      	ldr	r3, [pc, #60]	@ (8000374 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2200      	movs	r2, #0
 800033c:	625a      	str	r2, [r3, #36]	@ 0x24
	  RPM(Wheelspeed_Count_1,Wheelspeed_Count_2);
 800033e:	68b9      	ldr	r1, [r7, #8]
 8000340:	68f8      	ldr	r0, [r7, #12]
 8000342:	f000 f81d 	bl	8000380 <RPM>
  else if (htim->Instance == TIM7)  {
	  HAL_TIM_Base_Stop_IT(&htim7);
	  __HAL_TIM_SET_COUNTER(&htim7, 0);
	  APPS_SD_Check();
  }
}
 8000346:	e00d      	b.n	8000364 <HAL_TIM_PeriodElapsedCallback+0x58>
  else if (htim->Instance == TIM7)  {
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a0a      	ldr	r2, [pc, #40]	@ (8000378 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d108      	bne.n	8000364 <HAL_TIM_PeriodElapsedCallback+0x58>
	  HAL_TIM_Base_Stop_IT(&htim7);
 8000352:	480a      	ldr	r0, [pc, #40]	@ (800037c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000354:	f00a fc88 	bl	800ac68 <HAL_TIM_Base_Stop_IT>
	  __HAL_TIM_SET_COUNTER(&htim7, 0);
 8000358:	4b08      	ldr	r3, [pc, #32]	@ (800037c <HAL_TIM_PeriodElapsedCallback+0x70>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	2200      	movs	r2, #0
 800035e:	625a      	str	r2, [r3, #36]	@ 0x24
	  APPS_SD_Check();
 8000360:	f000 f86e 	bl	8000440 <APPS_SD_Check>
}
 8000364:	bf00      	nop
 8000366:	3710      	adds	r7, #16
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40001000 	.word	0x40001000
 8000370:	24000334 	.word	0x24000334
 8000374:	24000380 	.word	0x24000380
 8000378:	40001400 	.word	0x40001400
 800037c:	24000418 	.word	0x24000418

08000380 <RPM>:


#ifdef FECU
void RPM(uint32_t Wheelspeed_Count_1,uint32_t Wheelspeed_Count_2){
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
	Wheel_speed_val_1 = (float)(Wheelspeed_Count_1/Gears);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4a15      	ldr	r2, [pc, #84]	@ (80003e4 <RPM+0x64>)
 800038e:	fba2 2303 	umull	r2, r3, r2, r3
 8000392:	095b      	lsrs	r3, r3, #5
 8000394:	ee07 3a90 	vmov	s15, r3
 8000398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800039c:	4b12      	ldr	r3, [pc, #72]	@ (80003e8 <RPM+0x68>)
 800039e:	edc3 7a00 	vstr	s15, [r3]
	Wheel_speed_val_2 = (float)(Wheelspeed_Count_2/Gears);
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	4a0f      	ldr	r2, [pc, #60]	@ (80003e4 <RPM+0x64>)
 80003a6:	fba2 2303 	umull	r2, r3, r2, r3
 80003aa:	095b      	lsrs	r3, r3, #5
 80003ac:	ee07 3a90 	vmov	s15, r3
 80003b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003b4:	4b0d      	ldr	r3, [pc, #52]	@ (80003ec <RPM+0x6c>)
 80003b6:	edc3 7a00 	vstr	s15, [r3]
	Transmit_SensorVals(Wheel_speed_1, Wheel_speed_val_1);
 80003ba:	4b0b      	ldr	r3, [pc, #44]	@ (80003e8 <RPM+0x68>)
 80003bc:	edd3 7a00 	vldr	s15, [r3]
 80003c0:	eeb0 0a67 	vmov.f32	s0, s15
 80003c4:	2004      	movs	r0, #4
 80003c6:	f000 f899 	bl	80004fc <Transmit_SensorVals>
	Transmit_SensorVals(Wheel_speed_2, Wheel_speed_val_2);
 80003ca:	4b08      	ldr	r3, [pc, #32]	@ (80003ec <RPM+0x6c>)
 80003cc:	edd3 7a00 	vldr	s15, [r3]
 80003d0:	eeb0 0a67 	vmov.f32	s0, s15
 80003d4:	2005      	movs	r0, #5
 80003d6:	f000 f891 	bl	80004fc <Transmit_SensorVals>

}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	88888889 	.word	0x88888889
 80003e8:	2400003c 	.word	0x2400003c
 80003ec:	24000040 	.word	0x24000040

080003f0 <APPS_SCS>:
float Damper_pot_3_val = 0.0f;
float Damper_pot_4_val = 0.0f;

uint8_t APPS_Err;

void APPS_SCS(uint16_t APPS_1,uint16_t APPS_2){
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	460a      	mov	r2, r1
 80003fa:	80fb      	strh	r3, [r7, #6]
 80003fc:	4613      	mov	r3, r2
 80003fe:	80bb      	strh	r3, [r7, #4]
	uint16_t deviation = abs(APPS_1-APPS_2);
 8000400:	88fa      	ldrh	r2, [r7, #6]
 8000402:	88bb      	ldrh	r3, [r7, #4]
 8000404:	1ad3      	subs	r3, r2, r3
 8000406:	2b00      	cmp	r3, #0
 8000408:	bfb8      	it	lt
 800040a:	425b      	neglt	r3, r3
 800040c:	81fb      	strh	r3, [r7, #14]
	uint16_t limit = 6553;
 800040e:	f641 1399 	movw	r3, #6553	@ 0x1999
 8000412:	81bb      	strh	r3, [r7, #12]
	if(deviation>limit){
 8000414:	89fa      	ldrh	r2, [r7, #14]
 8000416:	89bb      	ldrh	r3, [r7, #12]
 8000418:	429a      	cmp	r2, r3
 800041a:	d906      	bls.n	800042a <APPS_SCS+0x3a>
		HAL_TIM_Base_Start_IT(&htim7);
 800041c:	4806      	ldr	r0, [pc, #24]	@ (8000438 <APPS_SCS+0x48>)
 800041e:	f00a fb9d 	bl	800ab5c <HAL_TIM_Base_Start_IT>
		APPS_Err = 1;
 8000422:	4b06      	ldr	r3, [pc, #24]	@ (800043c <APPS_SCS+0x4c>)
 8000424:	2201      	movs	r2, #1
 8000426:	701a      	strb	r2, [r3, #0]
	}
	else{
		APPS_Err = 0;
	}
	//TO MC THRU CAN
}
 8000428:	e002      	b.n	8000430 <APPS_SCS+0x40>
		APPS_Err = 0;
 800042a:	4b04      	ldr	r3, [pc, #16]	@ (800043c <APPS_SCS+0x4c>)
 800042c:	2200      	movs	r2, #0
 800042e:	701a      	strb	r2, [r3, #0]
}
 8000430:	bf00      	nop
 8000432:	3710      	adds	r7, #16
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	24000418 	.word	0x24000418
 800043c:	24000044 	.word	0x24000044

08000440 <APPS_SD_Check>:

void APPS_SD_Check(){
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	if(APPS_Err==1){
 8000444:	4b03      	ldr	r3, [pc, #12]	@ (8000454 <APPS_SD_Check+0x14>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d101      	bne.n	8000450 <APPS_SD_Check+0x10>
		Error_Handler();
 800044c:	f000 fcb8 	bl	8000dc0 <Error_Handler>
	}
}
 8000450:	bf00      	nop
 8000452:	bd80      	pop	{r7, pc}
 8000454:	24000044 	.word	0x24000044

08000458 <HAL_ADC_ConvCpltCallback>:
        ADC_V[i] = (float)ADC_raw.samples[i] * VCNF ;
    }
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	4b18      	ldr	r3, [pc, #96]	@ (80004c4 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000462:	617b      	str	r3, [r7, #20]
 8000464:	2320      	movs	r3, #32
 8000466:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000468:	693b      	ldr	r3, [r7, #16]
 800046a:	2b00      	cmp	r3, #0
 800046c:	dd1d      	ble.n	80004aa <HAL_ADC_ConvCpltCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	f003 021f 	and.w	r2, r3, #31
 8000474:	693b      	ldr	r3, [r7, #16]
 8000476:	4413      	add	r3, r2
 8000478:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	60bb      	str	r3, [r7, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800047e:	f3bf 8f4f 	dsb	sy
}
 8000482:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000484:	4a10      	ldr	r2, [pc, #64]	@ (80004c8 <HAL_ADC_ConvCpltCallback+0x70>)
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	3320      	adds	r3, #32
 8000490:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	3b20      	subs	r3, #32
 8000496:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	2b00      	cmp	r3, #0
 800049c:	dcf2      	bgt.n	8000484 <HAL_ADC_ConvCpltCallback+0x2c>
  __ASM volatile ("dsb 0xF":::"memory");
 800049e:	f3bf 8f4f 	dsb	sy
}
 80004a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004a4:	f3bf 8f6f 	isb	sy
}
 80004a8:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80004aa:	bf00      	nop
	SCB_InvalidateDCache_by_Addr((uint16_t*)&ADC_raw, sizeof(ADC_raw));
	APPS_SCS(ADC_raw.samples[0], ADC_raw.samples[1]);
 80004ac:	4b05      	ldr	r3, [pc, #20]	@ (80004c4 <HAL_ADC_ConvCpltCallback+0x6c>)
 80004ae:	881b      	ldrh	r3, [r3, #0]
 80004b0:	4a04      	ldr	r2, [pc, #16]	@ (80004c4 <HAL_ADC_ConvCpltCallback+0x6c>)
 80004b2:	8852      	ldrh	r2, [r2, #2]
 80004b4:	4611      	mov	r1, r2
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff ff9a 	bl	80003f0 <APPS_SCS>
}
 80004bc:	bf00      	nop
 80004be:	3718      	adds	r7, #24
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	24000060 	.word	0x24000060
 80004c8:	e000ed00 	.word	0xe000ed00

080004cc <SPI_CS_Enable>:
volatile SPI_Message SPI_queue[SPI_QUEUE_SIZE];
volatile uint8_t queue_head = 0;
volatile uint8_t queue_tail = 0;
volatile uint8_t is_transmitting = 0;

void SPI_CS_Enable(void) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI_CS_GPIO_PORT, SPI_CS_PIN, GPIO_PIN_RESET); // Active LOW
 80004d0:	2200      	movs	r2, #0
 80004d2:	2108      	movs	r1, #8
 80004d4:	4802      	ldr	r0, [pc, #8]	@ (80004e0 <SPI_CS_Enable+0x14>)
 80004d6:	f006 f889 	bl	80065ec <HAL_GPIO_WritePin>
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	58020000 	.word	0x58020000

080004e4 <SPI_CS_Disable>:

void SPI_CS_Disable(void) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI_CS_GPIO_PORT, SPI_CS_PIN, GPIO_PIN_SET); // Inactive HIGH
 80004e8:	2201      	movs	r2, #1
 80004ea:	2108      	movs	r1, #8
 80004ec:	4802      	ldr	r0, [pc, #8]	@ (80004f8 <SPI_CS_Disable+0x14>)
 80004ee:	f006 f87d 	bl	80065ec <HAL_GPIO_WritePin>
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	58020000 	.word	0x58020000

080004fc <Transmit_SensorVals>:


// For sending floats with type prefix
HAL_StatusTypeDef Transmit_SensorVals(uint8_t val_type, float value) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	ed87 0a00 	vstr	s0, [r7]
 8000508:	71fb      	strb	r3, [r7, #7]
    if ((queue_tail + 1) % SPI_QUEUE_SIZE == queue_head) return HAL_BUSY;
 800050a:	4b2c      	ldr	r3, [pc, #176]	@ (80005bc <Transmit_SensorVals+0xc0>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	b2db      	uxtb	r3, r3
 8000510:	3301      	adds	r3, #1
 8000512:	425a      	negs	r2, r3
 8000514:	f003 030f 	and.w	r3, r3, #15
 8000518:	f002 020f 	and.w	r2, r2, #15
 800051c:	bf58      	it	pl
 800051e:	4253      	negpl	r3, r2
 8000520:	4a27      	ldr	r2, [pc, #156]	@ (80005c0 <Transmit_SensorVals+0xc4>)
 8000522:	7812      	ldrb	r2, [r2, #0]
 8000524:	b2d2      	uxtb	r2, r2
 8000526:	4293      	cmp	r3, r2
 8000528:	d101      	bne.n	800052e <Transmit_SensorVals+0x32>
 800052a:	2302      	movs	r3, #2
 800052c:	e041      	b.n	80005b2 <Transmit_SensorVals+0xb6>
  __ASM volatile ("cpsid i" : : : "memory");
 800052e:	b672      	cpsid	i
}
 8000530:	bf00      	nop

    __disable_irq();
    SPI_queue[queue_tail].msg_type = MSG_FLOAT_WITH_TYPE;
 8000532:	4b22      	ldr	r3, [pc, #136]	@ (80005bc <Transmit_SensorVals+0xc0>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	4619      	mov	r1, r3
 800053a:	4a22      	ldr	r2, [pc, #136]	@ (80005c4 <Transmit_SensorVals+0xc8>)
 800053c:	460b      	mov	r3, r1
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	440b      	add	r3, r1
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	4413      	add	r3, r2
 8000546:	2200      	movs	r2, #0
 8000548:	701a      	strb	r2, [r3, #0]
    SPI_queue[queue_tail].payload.float_msg.val_type = val_type;
 800054a:	4b1c      	ldr	r3, [pc, #112]	@ (80005bc <Transmit_SensorVals+0xc0>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	b2db      	uxtb	r3, r3
 8000550:	4619      	mov	r1, r3
 8000552:	4a1c      	ldr	r2, [pc, #112]	@ (80005c4 <Transmit_SensorVals+0xc8>)
 8000554:	460b      	mov	r3, r1
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	440b      	add	r3, r1
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	4413      	add	r3, r2
 800055e:	3304      	adds	r3, #4
 8000560:	79fa      	ldrb	r2, [r7, #7]
 8000562:	701a      	strb	r2, [r3, #0]
    SPI_queue[queue_tail].payload.float_msg.value = value;
 8000564:	4b15      	ldr	r3, [pc, #84]	@ (80005bc <Transmit_SensorVals+0xc0>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	4619      	mov	r1, r3
 800056c:	4a15      	ldr	r2, [pc, #84]	@ (80005c4 <Transmit_SensorVals+0xc8>)
 800056e:	460b      	mov	r3, r1
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	440b      	add	r3, r1
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	4413      	add	r3, r2
 8000578:	3308      	adds	r3, #8
 800057a:	683a      	ldr	r2, [r7, #0]
 800057c:	601a      	str	r2, [r3, #0]
    queue_tail = (queue_tail + 1) % SPI_QUEUE_SIZE;
 800057e:	4b0f      	ldr	r3, [pc, #60]	@ (80005bc <Transmit_SensorVals+0xc0>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	b2db      	uxtb	r3, r3
 8000584:	3301      	adds	r3, #1
 8000586:	425a      	negs	r2, r3
 8000588:	f003 030f 	and.w	r3, r3, #15
 800058c:	f002 020f 	and.w	r2, r2, #15
 8000590:	bf58      	it	pl
 8000592:	4253      	negpl	r3, r2
 8000594:	b2da      	uxtb	r2, r3
 8000596:	4b09      	ldr	r3, [pc, #36]	@ (80005bc <Transmit_SensorVals+0xc0>)
 8000598:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800059a:	b662      	cpsie	i
}
 800059c:	bf00      	nop
    __enable_irq();

    if (!is_transmitting) return Process_SPI_Queue();
 800059e:	4b0a      	ldr	r3, [pc, #40]	@ (80005c8 <Transmit_SensorVals+0xcc>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d103      	bne.n	80005b0 <Transmit_SensorVals+0xb4>
 80005a8:	f000 f810 	bl	80005cc <Process_SPI_Queue>
 80005ac:	4603      	mov	r3, r0
 80005ae:	e000      	b.n	80005b2 <Transmit_SensorVals+0xb6>
    return HAL_OK;
 80005b0:	2300      	movs	r3, #0
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	24000141 	.word	0x24000141
 80005c0:	24000140 	.word	0x24000140
 80005c4:	24000080 	.word	0x24000080
 80005c8:	24000142 	.word	0x24000142

080005cc <Process_SPI_Queue>:
    return HAL_OK;
}

//Add to Queue if busy

HAL_StatusTypeDef Process_SPI_Queue(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
    if (queue_head == queue_tail) {
 80005d2:	4b3e      	ldr	r3, [pc, #248]	@ (80006cc <Process_SPI_Queue+0x100>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b3d      	ldr	r3, [pc, #244]	@ (80006d0 <Process_SPI_Queue+0x104>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	429a      	cmp	r2, r3
 80005e0:	d104      	bne.n	80005ec <Process_SPI_Queue+0x20>
        is_transmitting = 0;
 80005e2:	4b3c      	ldr	r3, [pc, #240]	@ (80006d4 <Process_SPI_Queue+0x108>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
        return HAL_OK;
 80005e8:	2300      	movs	r3, #0
 80005ea:	e06b      	b.n	80006c4 <Process_SPI_Queue+0xf8>
    }

    is_transmitting = 1;
 80005ec:	4b39      	ldr	r3, [pc, #228]	@ (80006d4 <Process_SPI_Queue+0x108>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	701a      	strb	r2, [r3, #0]
    __attribute__((aligned(4))) static uint8_t tx_buffer[5];
    uint8_t data_size;

    switch(SPI_queue[queue_head].msg_type) {
 80005f2:	4b36      	ldr	r3, [pc, #216]	@ (80006cc <Process_SPI_Queue+0x100>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	4619      	mov	r1, r3
 80005fa:	4a37      	ldr	r2, [pc, #220]	@ (80006d8 <Process_SPI_Queue+0x10c>)
 80005fc:	460b      	mov	r3, r1
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	440b      	add	r3, r1
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	4413      	add	r3, r2
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	b2db      	uxtb	r3, r3
 800060a:	2b00      	cmp	r3, #0
 800060c:	d002      	beq.n	8000614 <Process_SPI_Queue+0x48>
 800060e:	2b01      	cmp	r3, #1
 8000610:	d022      	beq.n	8000658 <Process_SPI_Queue+0x8c>
 8000612:	e033      	b.n	800067c <Process_SPI_Queue+0xb0>
        case MSG_FLOAT_WITH_TYPE:
            tx_buffer[0] = SPI_queue[queue_head].payload.float_msg.val_type;
 8000614:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <Process_SPI_Queue+0x100>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	4619      	mov	r1, r3
 800061c:	4a2e      	ldr	r2, [pc, #184]	@ (80006d8 <Process_SPI_Queue+0x10c>)
 800061e:	460b      	mov	r3, r1
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	440b      	add	r3, r1
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	4413      	add	r3, r2
 8000628:	3304      	adds	r3, #4
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b2b      	ldr	r3, [pc, #172]	@ (80006dc <Process_SPI_Queue+0x110>)
 8000630:	701a      	strb	r2, [r3, #0]
            memcpy(&tx_buffer[1], (const void*)&SPI_queue[queue_head].payload.float_msg.value, 4);
 8000632:	4b26      	ldr	r3, [pc, #152]	@ (80006cc <Process_SPI_Queue+0x100>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	461a      	mov	r2, r3
 800063a:	4613      	mov	r3, r2
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	4413      	add	r3, r2
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	4a25      	ldr	r2, [pc, #148]	@ (80006d8 <Process_SPI_Queue+0x10c>)
 8000644:	4413      	add	r3, r2
 8000646:	3308      	adds	r3, #8
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	461a      	mov	r2, r3
 800064c:	4b23      	ldr	r3, [pc, #140]	@ (80006dc <Process_SPI_Queue+0x110>)
 800064e:	f8c3 2001 	str.w	r2, [r3, #1]
            data_size = 5;
 8000652:	2305      	movs	r3, #5
 8000654:	71fb      	strb	r3, [r7, #7]
            break;
 8000656:	e013      	b.n	8000680 <Process_SPI_Queue+0xb4>

        case MSG_RAW_16BIT:
            memcpy(tx_buffer, (const void*)&SPI_queue[queue_head].payload.raw_16bit, 2);
 8000658:	4b1c      	ldr	r3, [pc, #112]	@ (80006cc <Process_SPI_Queue+0x100>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	461a      	mov	r2, r3
 8000660:	4613      	mov	r3, r2
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4413      	add	r3, r2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	4a1b      	ldr	r2, [pc, #108]	@ (80006d8 <Process_SPI_Queue+0x10c>)
 800066a:	4413      	add	r3, r2
 800066c:	3304      	adds	r3, #4
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	b29a      	uxth	r2, r3
 8000672:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <Process_SPI_Queue+0x110>)
 8000674:	801a      	strh	r2, [r3, #0]
            data_size = 2;
 8000676:	2302      	movs	r3, #2
 8000678:	71fb      	strb	r3, [r7, #7]
            break;
 800067a:	e001      	b.n	8000680 <Process_SPI_Queue+0xb4>

        default:
            return HAL_ERROR;
 800067c:	2301      	movs	r3, #1
 800067e:	e021      	b.n	80006c4 <Process_SPI_Queue+0xf8>
    }

    queue_head = (queue_head + 1) % SPI_QUEUE_SIZE;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <Process_SPI_Queue+0x100>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	3301      	adds	r3, #1
 8000688:	425a      	negs	r2, r3
 800068a:	f003 030f 	and.w	r3, r3, #15
 800068e:	f002 020f 	and.w	r2, r2, #15
 8000692:	bf58      	it	pl
 8000694:	4253      	negpl	r3, r2
 8000696:	b2da      	uxtb	r2, r3
 8000698:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <Process_SPI_Queue+0x100>)
 800069a:	701a      	strb	r2, [r3, #0]

    SPI_CS_Enable();
 800069c:	f7ff ff16 	bl	80004cc <SPI_CS_Enable>
    HAL_StatusTypeDef status = HAL_SPI_Transmit_DMA(SPI, tx_buffer, data_size);
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	461a      	mov	r2, r3
 80006a6:	490d      	ldr	r1, [pc, #52]	@ (80006dc <Process_SPI_Queue+0x110>)
 80006a8:	480d      	ldr	r0, [pc, #52]	@ (80006e0 <Process_SPI_Queue+0x114>)
 80006aa:	f009 fc4d 	bl	8009f48 <HAL_SPI_Transmit_DMA>
 80006ae:	4603      	mov	r3, r0
 80006b0:	71bb      	strb	r3, [r7, #6]
    if (status != HAL_OK) {
 80006b2:	79bb      	ldrb	r3, [r7, #6]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d004      	beq.n	80006c2 <Process_SPI_Queue+0xf6>
        SPI_CS_Disable();
 80006b8:	f7ff ff14 	bl	80004e4 <SPI_CS_Disable>
        is_transmitting = 0;
 80006bc:	4b05      	ldr	r3, [pc, #20]	@ (80006d4 <Process_SPI_Queue+0x108>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
    }
    return status;
 80006c2:	79bb      	ldrb	r3, [r7, #6]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	24000140 	.word	0x24000140
 80006d0:	24000141 	.word	0x24000141
 80006d4:	24000142 	.word	0x24000142
 80006d8:	24000080 	.word	0x24000080
 80006dc:	24000144 	.word	0x24000144
 80006e0:	24000234 	.word	0x24000234

080006e4 <HAL_SPI_TxCpltCallback>:

// --- SPI Transmission Complete Callback ---
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    if (hspi == SPI) {
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4a05      	ldr	r2, [pc, #20]	@ (8000704 <HAL_SPI_TxCpltCallback+0x20>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d103      	bne.n	80006fc <HAL_SPI_TxCpltCallback+0x18>
        // Process next message
    	SPI_CS_Disable();
 80006f4:	f7ff fef6 	bl	80004e4 <SPI_CS_Disable>
        Process_SPI_Queue();
 80006f8:	f7ff ff68 	bl	80005cc <Process_SPI_Queue>
    }
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	24000234 	.word	0x24000234

08000708 <HAL_SPI_ErrorCallback>:

// --- SPI Error Handling ---
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	if (hspi == SPI) {
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4a07      	ldr	r2, [pc, #28]	@ (8000730 <HAL_SPI_ErrorCallback+0x28>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d107      	bne.n	8000728 <HAL_SPI_ErrorCallback+0x20>
		HAL_SPI_Abort(SPI);  // Force-release SPI bus
 8000718:	4805      	ldr	r0, [pc, #20]	@ (8000730 <HAL_SPI_ErrorCallback+0x28>)
 800071a:	f009 fd57 	bl	800a1cc <HAL_SPI_Abort>
	    is_transmitting = 0;
 800071e:	4b05      	ldr	r3, [pc, #20]	@ (8000734 <HAL_SPI_ErrorCallback+0x2c>)
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
	    Process_SPI_Queue();  // Retry
 8000724:	f7ff ff52 	bl	80005cc <Process_SPI_Queue>
	}
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	24000234 	.word	0x24000234
 8000734:	24000142 	.word	0x24000142

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800073c:	f000 fb14 	bl	8000d68 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000740:	f000 ff18 	bl	8001574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000744:	f000 f812 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000748:	f000 fa8e 	bl	8000c68 <MX_GPIO_Init>
  MX_DMA_Init();
 800074c:	f000 fa64 	bl	8000c18 <MX_DMA_Init>
  MX_ADC1_Init();
 8000750:	f000 f87c 	bl	800084c <MX_ADC1_Init>
  MX_SPI1_Init();
 8000754:	f000 f8f4 	bl	8000940 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000758:	f000 f948 	bl	80009ec <MX_TIM3_Init>
  MX_TIM4_Init();
 800075c:	f000 f99a 	bl	8000a94 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000760:	f000 f9ec 	bl	8000b3c <MX_TIM6_Init>
  MX_TIM7_Init();
 8000764:	f000 fa22 	bl	8000bac <MX_TIM7_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <main+0x30>

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b09c      	sub	sp, #112	@ 0x70
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000776:	224c      	movs	r2, #76	@ 0x4c
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f00a feea 	bl	800b554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2220      	movs	r2, #32
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f00a fee4 	bl	800b554 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800078c:	2002      	movs	r0, #2
 800078e:	f005 ff47 	bl	8006620 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b2c      	ldr	r3, [pc, #176]	@ (8000848 <SystemClock_Config+0xdc>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800079e:	4a2a      	ldr	r2, [pc, #168]	@ (8000848 <SystemClock_Config+0xdc>)
 80007a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007a4:	6193      	str	r3, [r2, #24]
 80007a6:	4b28      	ldr	r3, [pc, #160]	@ (8000848 <SystemClock_Config+0xdc>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007b2:	bf00      	nop
 80007b4:	4b24      	ldr	r3, [pc, #144]	@ (8000848 <SystemClock_Config+0xdc>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007c0:	d1f8      	bne.n	80007b4 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c2:	2302      	movs	r3, #2
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007c6:	2301      	movs	r3, #1
 80007c8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80007ca:	2340      	movs	r3, #64	@ 0x40
 80007cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ce:	2302      	movs	r3, #2
 80007d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d2:	2300      	movs	r3, #0
 80007d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007d6:	2304      	movs	r3, #4
 80007d8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80007da:	230c      	movs	r3, #12
 80007dc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007de:	2302      	movs	r3, #2
 80007e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007e2:	2303      	movs	r3, #3
 80007e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007ea:	230c      	movs	r3, #12
 80007ec:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fa:	4618      	mov	r0, r3
 80007fc:	f005 ff4a 	bl	8006694 <HAL_RCC_OscConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000806:	f000 fadb 	bl	8000dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080a:	233f      	movs	r3, #63	@ 0x3f
 800080c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2101      	movs	r1, #1
 800082e:	4618      	mov	r0, r3
 8000830:	f006 fb0a 	bl	8006e48 <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800083a:	f000 fac1 	bl	8000dc0 <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	3770      	adds	r7, #112	@ 0x70
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	58024800 	.word	0x58024800

0800084c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	@ 0x30
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000852:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800085e:	463b      	mov	r3, r7
 8000860:	2224      	movs	r2, #36	@ 0x24
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f00a fe75 	bl	800b554 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800086a:	4b32      	ldr	r3, [pc, #200]	@ (8000934 <MX_ADC1_Init+0xe8>)
 800086c:	4a32      	ldr	r2, [pc, #200]	@ (8000938 <MX_ADC1_Init+0xec>)
 800086e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000870:	4b30      	ldr	r3, [pc, #192]	@ (8000934 <MX_ADC1_Init+0xe8>)
 8000872:	2200      	movs	r2, #0
 8000874:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000876:	4b2f      	ldr	r3, [pc, #188]	@ (8000934 <MX_ADC1_Init+0xe8>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800087c:	4b2d      	ldr	r3, [pc, #180]	@ (8000934 <MX_ADC1_Init+0xe8>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000882:	4b2c      	ldr	r3, [pc, #176]	@ (8000934 <MX_ADC1_Init+0xe8>)
 8000884:	2204      	movs	r2, #4
 8000886:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000888:	4b2a      	ldr	r3, [pc, #168]	@ (8000934 <MX_ADC1_Init+0xe8>)
 800088a:	2200      	movs	r2, #0
 800088c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800088e:	4b29      	ldr	r3, [pc, #164]	@ (8000934 <MX_ADC1_Init+0xe8>)
 8000890:	2200      	movs	r2, #0
 8000892:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000894:	4b27      	ldr	r3, [pc, #156]	@ (8000934 <MX_ADC1_Init+0xe8>)
 8000896:	2201      	movs	r2, #1
 8000898:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800089a:	4b26      	ldr	r3, [pc, #152]	@ (8000934 <MX_ADC1_Init+0xe8>)
 800089c:	2200      	movs	r2, #0
 800089e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a2:	4b24      	ldr	r3, [pc, #144]	@ (8000934 <MX_ADC1_Init+0xe8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008a8:	4b22      	ldr	r3, [pc, #136]	@ (8000934 <MX_ADC1_Init+0xe8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008ae:	4b21      	ldr	r3, [pc, #132]	@ (8000934 <MX_ADC1_Init+0xe8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000934 <MX_ADC1_Init+0xe8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000934 <MX_ADC1_Init+0xe8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80008c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000934 <MX_ADC1_Init+0xe8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <MX_ADC1_Init+0xe8>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ce:	4819      	ldr	r0, [pc, #100]	@ (8000934 <MX_ADC1_Init+0xe8>)
 80008d0:	f001 f96a 	bl	8001ba8 <HAL_ADC_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80008da:	f000 fa71 	bl	8000dc0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e6:	4619      	mov	r1, r3
 80008e8:	4812      	ldr	r0, [pc, #72]	@ (8000934 <MX_ADC1_Init+0xe8>)
 80008ea:	f002 fc29 	bl	8003140 <HAL_ADCEx_MultiModeConfigChannel>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008f4:	f000 fa64 	bl	8000dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008f8:	4b10      	ldr	r3, [pc, #64]	@ (800093c <MX_ADC1_Init+0xf0>)
 80008fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008fc:	2306      	movs	r3, #6
 80008fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000904:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000908:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800090a:	2304      	movs	r3, #4
 800090c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	@ (8000934 <MX_ADC1_Init+0xe8>)
 800091e:	f001 fd99 	bl	8002454 <HAL_ADC_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000928:	f000 fa4a 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	3730      	adds	r7, #48	@ 0x30
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	2400014c 	.word	0x2400014c
 8000938:	40022000 	.word	0x40022000
 800093c:	08600004 	.word	0x08600004

08000940 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000944:	4b27      	ldr	r3, [pc, #156]	@ (80009e4 <MX_SPI1_Init+0xa4>)
 8000946:	4a28      	ldr	r2, [pc, #160]	@ (80009e8 <MX_SPI1_Init+0xa8>)
 8000948:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800094a:	4b26      	ldr	r3, [pc, #152]	@ (80009e4 <MX_SPI1_Init+0xa4>)
 800094c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000950:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000952:	4b24      	ldr	r3, [pc, #144]	@ (80009e4 <MX_SPI1_Init+0xa4>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000958:	4b22      	ldr	r3, [pc, #136]	@ (80009e4 <MX_SPI1_Init+0xa4>)
 800095a:	2203      	movs	r2, #3
 800095c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800095e:	4b21      	ldr	r3, [pc, #132]	@ (80009e4 <MX_SPI1_Init+0xa4>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000964:	4b1f      	ldr	r3, [pc, #124]	@ (80009e4 <MX_SPI1_Init+0xa4>)
 8000966:	2200      	movs	r2, #0
 8000968:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800096a:	4b1e      	ldr	r3, [pc, #120]	@ (80009e4 <MX_SPI1_Init+0xa4>)
 800096c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000970:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000972:	4b1c      	ldr	r3, [pc, #112]	@ (80009e4 <MX_SPI1_Init+0xa4>)
 8000974:	2200      	movs	r2, #0
 8000976:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000978:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <MX_SPI1_Init+0xa4>)
 800097a:	2200      	movs	r2, #0
 800097c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800097e:	4b19      	ldr	r3, [pc, #100]	@ (80009e4 <MX_SPI1_Init+0xa4>)
 8000980:	2200      	movs	r2, #0
 8000982:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000984:	4b17      	ldr	r3, [pc, #92]	@ (80009e4 <MX_SPI1_Init+0xa4>)
 8000986:	2200      	movs	r2, #0
 8000988:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800098a:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <MX_SPI1_Init+0xa4>)
 800098c:	2200      	movs	r2, #0
 800098e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000990:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <MX_SPI1_Init+0xa4>)
 8000992:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000996:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000998:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <MX_SPI1_Init+0xa4>)
 800099a:	2200      	movs	r2, #0
 800099c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800099e:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <MX_SPI1_Init+0xa4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <MX_SPI1_Init+0xa4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <MX_SPI1_Init+0xa4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <MX_SPI1_Init+0xa4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	@ (80009e4 <MX_SPI1_Init+0xa4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009bc:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <MX_SPI1_Init+0xa4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <MX_SPI1_Init+0xa4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <MX_SPI1_Init+0xa4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_SPI1_Init+0xa4>)
 80009d0:	f009 f996 	bl	8009d00 <HAL_SPI_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80009da:	f000 f9f1 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	24000234 	.word	0x24000234
 80009e8:	40013000 	.word	0x40013000

080009ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a02:	463b      	mov	r3, r7
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a8c <MX_TIM3_Init+0xa0>)
 8000a0e:	4a20      	ldr	r2, [pc, #128]	@ (8000a90 <MX_TIM3_Init+0xa4>)
 8000a10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a12:	4b1e      	ldr	r3, [pc, #120]	@ (8000a8c <MX_TIM3_Init+0xa0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a18:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <MX_TIM3_Init+0xa0>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a8c <MX_TIM3_Init+0xa0>)
 8000a20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a24:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a26:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <MX_TIM3_Init+0xa0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2c:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <MX_TIM3_Init+0xa0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a32:	4816      	ldr	r0, [pc, #88]	@ (8000a8c <MX_TIM3_Init+0xa0>)
 8000a34:	f00a f83b 	bl	800aaae <HAL_TIM_Base_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000a3e:	f000 f9bf 	bl	8000dc0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000a42:	2307      	movs	r3, #7
 8000a44:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000a46:	2350      	movs	r3, #80	@ 0x50
 8000a48:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	4619      	mov	r1, r3
 8000a58:	480c      	ldr	r0, [pc, #48]	@ (8000a8c <MX_TIM3_Init+0xa0>)
 8000a5a:	f00a fa3b 	bl	800aed4 <HAL_TIM_SlaveConfigSynchro>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000a64:	f000 f9ac 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a70:	463b      	mov	r3, r7
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <MX_TIM3_Init+0xa0>)
 8000a76:	f00a fcb3 	bl	800b3e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000a80:	f000 f99e 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	3720      	adds	r7, #32
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	24000334 	.word	0x24000334
 8000a90:	40000400 	.word	0x40000400

08000a94 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aaa:	463b      	mov	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b34 <MX_TIM4_Init+0xa0>)
 8000ab6:	4a20      	ldr	r2, [pc, #128]	@ (8000b38 <MX_TIM4_Init+0xa4>)
 8000ab8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000aba:	4b1e      	ldr	r3, [pc, #120]	@ (8000b34 <MX_TIM4_Init+0xa0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b34 <MX_TIM4_Init+0xa0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b34 <MX_TIM4_Init+0xa0>)
 8000ac8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000acc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ace:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <MX_TIM4_Init+0xa0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad4:	4b17      	ldr	r3, [pc, #92]	@ (8000b34 <MX_TIM4_Init+0xa0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ada:	4816      	ldr	r0, [pc, #88]	@ (8000b34 <MX_TIM4_Init+0xa0>)
 8000adc:	f009 ffe7 	bl	800aaae <HAL_TIM_Base_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000ae6:	f000 f96b 	bl	8000dc0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000aea:	2307      	movs	r3, #7
 8000aec:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000aee:	2350      	movs	r3, #80	@ 0x50
 8000af0:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	4619      	mov	r1, r3
 8000b00:	480c      	ldr	r0, [pc, #48]	@ (8000b34 <MX_TIM4_Init+0xa0>)
 8000b02:	f00a f9e7 	bl	800aed4 <HAL_TIM_SlaveConfigSynchro>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000b0c:	f000 f958 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b10:	2300      	movs	r3, #0
 8000b12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <MX_TIM4_Init+0xa0>)
 8000b1e:	f00a fc5f 	bl	800b3e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000b28:	f000 f94a 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3720      	adds	r7, #32
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	24000380 	.word	0x24000380
 8000b38:	40000800 	.word	0x40000800

08000b3c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ba4 <MX_TIM6_Init+0x68>)
 8000b4e:	4a16      	ldr	r2, [pc, #88]	@ (8000ba8 <MX_TIM6_Init+0x6c>)
 8000b50:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64000-1;
 8000b52:	4b14      	ldr	r3, [pc, #80]	@ (8000ba4 <MX_TIM6_Init+0x68>)
 8000b54:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000b58:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <MX_TIM6_Init+0x68>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8000b60:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <MX_TIM6_Init+0x68>)
 8000b62:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b66:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <MX_TIM6_Init+0x68>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b6e:	480d      	ldr	r0, [pc, #52]	@ (8000ba4 <MX_TIM6_Init+0x68>)
 8000b70:	f009 ff9d 	bl	800aaae <HAL_TIM_Base_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000b7a:	f000 f921 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4806      	ldr	r0, [pc, #24]	@ (8000ba4 <MX_TIM6_Init+0x68>)
 8000b8c:	f00a fc28 	bl	800b3e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000b96:	f000 f913 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	240003cc 	.word	0x240003cc
 8000ba8:	40001000 	.word	0x40001000

08000bac <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <MX_TIM7_Init+0x64>)
 8000bbe:	4a15      	ldr	r2, [pc, #84]	@ (8000c14 <MX_TIM7_Init+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 64000-1;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <MX_TIM7_Init+0x64>)
 8000bc4:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000bc8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <MX_TIM7_Init+0x64>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <MX_TIM7_Init+0x64>)
 8000bd2:	2263      	movs	r2, #99	@ 0x63
 8000bd4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <MX_TIM7_Init+0x64>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000bdc:	480c      	ldr	r0, [pc, #48]	@ (8000c10 <MX_TIM7_Init+0x64>)
 8000bde:	f009 ff66 	bl	800aaae <HAL_TIM_Base_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000be8:	f000 f8ea 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bec:	2300      	movs	r3, #0
 8000bee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <MX_TIM7_Init+0x64>)
 8000bfa:	f00a fbf1 	bl	800b3e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000c04:	f000 f8dc 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	24000418 	.word	0x24000418
 8000c14:	40001400 	.word	0x40001400

08000c18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c1e:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <MX_DMA_Init+0x4c>)
 8000c20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c24:	4a0f      	ldr	r2, [pc, #60]	@ (8000c64 <MX_DMA_Init+0x4c>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c64 <MX_DMA_Init+0x4c>)
 8000c30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	200b      	movs	r0, #11
 8000c42:	f002 fc3a 	bl	80034ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c46:	200b      	movs	r0, #11
 8000c48:	f002 fc51 	bl	80034ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2100      	movs	r1, #0
 8000c50:	200c      	movs	r0, #12
 8000c52:	f002 fc32 	bl	80034ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c56:	200c      	movs	r0, #12
 8000c58:	f002 fc49 	bl	80034ee <HAL_NVIC_EnableIRQ>

}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	58024400 	.word	0x58024400

08000c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08c      	sub	sp, #48	@ 0x30
 8000c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b38      	ldr	r3, [pc, #224]	@ (8000d60 <MX_GPIO_Init+0xf8>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c84:	4a36      	ldr	r2, [pc, #216]	@ (8000d60 <MX_GPIO_Init+0xf8>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c8e:	4b34      	ldr	r3, [pc, #208]	@ (8000d60 <MX_GPIO_Init+0xf8>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	61bb      	str	r3, [r7, #24]
 8000c9a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9c:	4b30      	ldr	r3, [pc, #192]	@ (8000d60 <MX_GPIO_Init+0xf8>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca2:	4a2f      	ldr	r2, [pc, #188]	@ (8000d60 <MX_GPIO_Init+0xf8>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cac:	4b2c      	ldr	r3, [pc, #176]	@ (8000d60 <MX_GPIO_Init+0xf8>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	4b29      	ldr	r3, [pc, #164]	@ (8000d60 <MX_GPIO_Init+0xf8>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc0:	4a27      	ldr	r2, [pc, #156]	@ (8000d60 <MX_GPIO_Init+0xf8>)
 8000cc2:	f043 0302 	orr.w	r3, r3, #2
 8000cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cca:	4b25      	ldr	r3, [pc, #148]	@ (8000d60 <MX_GPIO_Init+0xf8>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cd8:	4b21      	ldr	r3, [pc, #132]	@ (8000d60 <MX_GPIO_Init+0xf8>)
 8000cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cde:	4a20      	ldr	r2, [pc, #128]	@ (8000d60 <MX_GPIO_Init+0xf8>)
 8000ce0:	f043 0320 	orr.w	r3, r3, #32
 8000ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d60 <MX_GPIO_Init+0xf8>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cee:	f003 0320 	and.w	r3, r3, #32
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d60 <MX_GPIO_Init+0xf8>)
 8000cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cfc:	4a18      	ldr	r2, [pc, #96]	@ (8000d60 <MX_GPIO_Init+0xf8>)
 8000cfe:	f043 0308 	orr.w	r3, r3, #8
 8000d02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d06:	4b16      	ldr	r3, [pc, #88]	@ (8000d60 <MX_GPIO_Init+0xf8>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d0c:	f003 0308 	and.w	r3, r3, #8
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <MX_GPIO_Init+0xf8>)
 8000d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1a:	4a11      	ldr	r2, [pc, #68]	@ (8000d60 <MX_GPIO_Init+0xf8>)
 8000d1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d24:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <MX_GPIO_Init+0xf8>)
 8000d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2108      	movs	r1, #8
 8000d36:	480b      	ldr	r0, [pc, #44]	@ (8000d64 <MX_GPIO_Init+0xfc>)
 8000d38:	f005 fc58 	bl	80065ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4619      	mov	r1, r3
 8000d52:	4804      	ldr	r0, [pc, #16]	@ (8000d64 <MX_GPIO_Init+0xfc>)
 8000d54:	f005 faa2 	bl	800629c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d58:	bf00      	nop
 8000d5a:	3730      	adds	r7, #48	@ 0x30
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	58024400 	.word	0x58024400
 8000d64:	58020000 	.word	0x58020000

08000d68 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d6e:	463b      	mov	r3, r7
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d7a:	f002 fbd3 	bl	8003524 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d8a:	231f      	movs	r3, #31
 8000d8c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d8e:	2387      	movs	r3, #135	@ 0x87
 8000d90:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d96:	2300      	movs	r3, #0
 8000d98:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000daa:	463b      	mov	r3, r7
 8000dac:	4618      	mov	r0, r3
 8000dae:	f002 fbf1 	bl	8003594 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000db2:	2004      	movs	r0, #4
 8000db4:	f002 fbce 	bl	8003554 <HAL_MPU_Enable>

}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <Error_Handler+0x8>

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <HAL_MspInit+0x30>)
 8000dd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dd8:	4a08      	ldr	r2, [pc, #32]	@ (8000dfc <HAL_MspInit+0x30>)
 8000dda:	f043 0302 	orr.w	r3, r3, #2
 8000dde:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000de2:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <HAL_MspInit+0x30>)
 8000de4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	58024400 	.word	0x58024400

08000e00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b0bc      	sub	sp, #240	@ 0xf0
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e18:	f107 0320 	add.w	r3, r7, #32
 8000e1c:	22b8      	movs	r2, #184	@ 0xb8
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f00a fb97 	bl	800b554 <memset>
  if(hadc->Instance==ADC1)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a75      	ldr	r2, [pc, #468]	@ (8001000 <HAL_ADC_MspInit+0x200>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	f040 80e3 	bne.w	8000ff8 <HAL_ADC_MspInit+0x1f8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e32:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e36:	f04f 0300 	mov.w	r3, #0
 8000e3a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000e3e:	2304      	movs	r3, #4
 8000e40:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000e42:	230c      	movs	r3, #12
 8000e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000e46:	2305      	movs	r3, #5
 8000e48:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e52:	23c0      	movs	r3, #192	@ 0xc0
 8000e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f006 fb63 	bl	8007534 <HAL_RCCEx_PeriphCLKConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000e74:	f7ff ffa4 	bl	8000dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e78:	4b62      	ldr	r3, [pc, #392]	@ (8001004 <HAL_ADC_MspInit+0x204>)
 8000e7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e7e:	4a61      	ldr	r2, [pc, #388]	@ (8001004 <HAL_ADC_MspInit+0x204>)
 8000e80:	f043 0320 	orr.w	r3, r3, #32
 8000e84:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e88:	4b5e      	ldr	r3, [pc, #376]	@ (8001004 <HAL_ADC_MspInit+0x204>)
 8000e8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e8e:	f003 0320 	and.w	r3, r3, #32
 8000e92:	61fb      	str	r3, [r7, #28]
 8000e94:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	4b5b      	ldr	r3, [pc, #364]	@ (8001004 <HAL_ADC_MspInit+0x204>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9c:	4a59      	ldr	r2, [pc, #356]	@ (8001004 <HAL_ADC_MspInit+0x204>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea6:	4b57      	ldr	r3, [pc, #348]	@ (8001004 <HAL_ADC_MspInit+0x204>)
 8000ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	61bb      	str	r3, [r7, #24]
 8000eb2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb4:	4b53      	ldr	r3, [pc, #332]	@ (8001004 <HAL_ADC_MspInit+0x204>)
 8000eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eba:	4a52      	ldr	r2, [pc, #328]	@ (8001004 <HAL_ADC_MspInit+0x204>)
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ec4:	4b4f      	ldr	r3, [pc, #316]	@ (8001004 <HAL_ADC_MspInit+0x204>)
 8000ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	4b4c      	ldr	r3, [pc, #304]	@ (8001004 <HAL_ADC_MspInit+0x204>)
 8000ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed8:	4a4a      	ldr	r2, [pc, #296]	@ (8001004 <HAL_ADC_MspInit+0x204>)
 8000eda:	f043 0302 	orr.w	r3, r3, #2
 8000ede:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee2:	4b48      	ldr	r3, [pc, #288]	@ (8001004 <HAL_ADC_MspInit+0x204>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ef0:	4b44      	ldr	r3, [pc, #272]	@ (8001004 <HAL_ADC_MspInit+0x204>)
 8000ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef6:	4a43      	ldr	r2, [pc, #268]	@ (8001004 <HAL_ADC_MspInit+0x204>)
 8000ef8:	f043 0320 	orr.w	r3, r3, #32
 8000efc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f00:	4b40      	ldr	r3, [pc, #256]	@ (8001004 <HAL_ADC_MspInit+0x204>)
 8000f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f06:	f003 0320 	and.w	r3, r3, #32
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_INP4
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f0e:	23c0      	movs	r3, #192	@ 0xc0
 8000f10:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f14:	2303      	movs	r3, #3
 8000f16:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f24:	4619      	mov	r1, r3
 8000f26:	4838      	ldr	r0, [pc, #224]	@ (8001008 <HAL_ADC_MspInit+0x208>)
 8000f28:	f005 f9b8 	bl	800629c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f2c:	2310      	movs	r3, #16
 8000f2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f32:	2303      	movs	r3, #3
 8000f34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f42:	4619      	mov	r1, r3
 8000f44:	4831      	ldr	r0, [pc, #196]	@ (800100c <HAL_ADC_MspInit+0x20c>)
 8000f46:	f005 f9a9 	bl	800629c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f50:	2303      	movs	r3, #3
 8000f52:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f60:	4619      	mov	r1, r3
 8000f62:	482b      	ldr	r0, [pc, #172]	@ (8001010 <HAL_ADC_MspInit+0x210>)
 8000f64:	f005 f99a 	bl	800629c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f68:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f6c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f70:	2303      	movs	r3, #3
 8000f72:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f7c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f80:	4619      	mov	r1, r3
 8000f82:	4824      	ldr	r0, [pc, #144]	@ (8001014 <HAL_ADC_MspInit+0x214>)
 8000f84:	f005 f98a 	bl	800629c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream1;
 8000f88:	4b23      	ldr	r3, [pc, #140]	@ (8001018 <HAL_ADC_MspInit+0x218>)
 8000f8a:	4a24      	ldr	r2, [pc, #144]	@ (800101c <HAL_ADC_MspInit+0x21c>)
 8000f8c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f8e:	4b22      	ldr	r3, [pc, #136]	@ (8001018 <HAL_ADC_MspInit+0x218>)
 8000f90:	2209      	movs	r2, #9
 8000f92:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f94:	4b20      	ldr	r3, [pc, #128]	@ (8001018 <HAL_ADC_MspInit+0x218>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001018 <HAL_ADC_MspInit+0x218>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8001018 <HAL_ADC_MspInit+0x218>)
 8000fa2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fa6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001018 <HAL_ADC_MspInit+0x218>)
 8000faa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fb0:	4b19      	ldr	r3, [pc, #100]	@ (8001018 <HAL_ADC_MspInit+0x218>)
 8000fb2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fb6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fb8:	4b17      	ldr	r3, [pc, #92]	@ (8001018 <HAL_ADC_MspInit+0x218>)
 8000fba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fbe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fc0:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <HAL_ADC_MspInit+0x218>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fc6:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <HAL_ADC_MspInit+0x218>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fcc:	4812      	ldr	r0, [pc, #72]	@ (8001018 <HAL_ADC_MspInit+0x218>)
 8000fce:	f002 fb21 	bl	8003614 <HAL_DMA_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <HAL_ADC_MspInit+0x1dc>
    {
      Error_Handler();
 8000fd8:	f7ff fef2 	bl	8000dc0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a0e      	ldr	r2, [pc, #56]	@ (8001018 <HAL_ADC_MspInit+0x218>)
 8000fe0:	659a      	str	r2, [r3, #88]	@ 0x58
 8000fe2:	4a0d      	ldr	r2, [pc, #52]	@ (8001018 <HAL_ADC_MspInit+0x218>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2100      	movs	r1, #0
 8000fec:	2012      	movs	r0, #18
 8000fee:	f002 fa64 	bl	80034ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ff2:	2012      	movs	r0, #18
 8000ff4:	f002 fa7b 	bl	80034ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ff8:	bf00      	nop
 8000ffa:	37f0      	adds	r7, #240	@ 0xf0
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40022000 	.word	0x40022000
 8001004:	58024400 	.word	0x58024400
 8001008:	58020000 	.word	0x58020000
 800100c:	58020800 	.word	0x58020800
 8001010:	58020400 	.word	0x58020400
 8001014:	58021400 	.word	0x58021400
 8001018:	240001bc 	.word	0x240001bc
 800101c:	40020028 	.word	0x40020028

08001020 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b0ba      	sub	sp, #232	@ 0xe8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001038:	f107 0318 	add.w	r3, r7, #24
 800103c:	22b8      	movs	r2, #184	@ 0xb8
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f00a fa87 	bl	800b554 <memset>
  if(hspi->Instance==SPI1)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a65      	ldr	r2, [pc, #404]	@ (80011e0 <HAL_SPI_MspInit+0x1c0>)
 800104c:	4293      	cmp	r3, r2
 800104e:	f040 80c3 	bne.w	80011d8 <HAL_SPI_MspInit+0x1b8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001052:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001056:	f04f 0300 	mov.w	r3, #0
 800105a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800105e:	2300      	movs	r3, #0
 8001060:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001062:	f107 0318 	add.w	r3, r7, #24
 8001066:	4618      	mov	r0, r3
 8001068:	f006 fa64 	bl	8007534 <HAL_RCCEx_PeriphCLKConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001072:	f7ff fea5 	bl	8000dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001076:	4b5b      	ldr	r3, [pc, #364]	@ (80011e4 <HAL_SPI_MspInit+0x1c4>)
 8001078:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800107c:	4a59      	ldr	r2, [pc, #356]	@ (80011e4 <HAL_SPI_MspInit+0x1c4>)
 800107e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001082:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001086:	4b57      	ldr	r3, [pc, #348]	@ (80011e4 <HAL_SPI_MspInit+0x1c4>)
 8001088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800108c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001094:	4b53      	ldr	r3, [pc, #332]	@ (80011e4 <HAL_SPI_MspInit+0x1c4>)
 8001096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109a:	4a52      	ldr	r2, [pc, #328]	@ (80011e4 <HAL_SPI_MspInit+0x1c4>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a4:	4b4f      	ldr	r3, [pc, #316]	@ (80011e4 <HAL_SPI_MspInit+0x1c4>)
 80010a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b2:	4b4c      	ldr	r3, [pc, #304]	@ (80011e4 <HAL_SPI_MspInit+0x1c4>)
 80010b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b8:	4a4a      	ldr	r2, [pc, #296]	@ (80011e4 <HAL_SPI_MspInit+0x1c4>)
 80010ba:	f043 0308 	orr.w	r3, r3, #8
 80010be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010c2:	4b48      	ldr	r3, [pc, #288]	@ (80011e4 <HAL_SPI_MspInit+0x1c4>)
 80010c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c8:	f003 0308 	and.w	r3, r3, #8
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010d0:	4b44      	ldr	r3, [pc, #272]	@ (80011e4 <HAL_SPI_MspInit+0x1c4>)
 80010d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d6:	4a43      	ldr	r2, [pc, #268]	@ (80011e4 <HAL_SPI_MspInit+0x1c4>)
 80010d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e0:	4b40      	ldr	r3, [pc, #256]	@ (80011e4 <HAL_SPI_MspInit+0x1c4>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010ee:	2320      	movs	r3, #32
 80010f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001106:	2305      	movs	r3, #5
 8001108:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001110:	4619      	mov	r1, r3
 8001112:	4835      	ldr	r0, [pc, #212]	@ (80011e8 <HAL_SPI_MspInit+0x1c8>)
 8001114:	f005 f8c2 	bl	800629c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001118:	2380      	movs	r3, #128	@ 0x80
 800111a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001130:	2305      	movs	r3, #5
 8001132:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001136:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800113a:	4619      	mov	r1, r3
 800113c:	482b      	ldr	r0, [pc, #172]	@ (80011ec <HAL_SPI_MspInit+0x1cc>)
 800113e:	f005 f8ad 	bl	800629c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001142:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001146:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800115c:	2305      	movs	r3, #5
 800115e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001162:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001166:	4619      	mov	r1, r3
 8001168:	4821      	ldr	r0, [pc, #132]	@ (80011f0 <HAL_SPI_MspInit+0x1d0>)
 800116a:	f005 f897 	bl	800629c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 800116e:	4b21      	ldr	r3, [pc, #132]	@ (80011f4 <HAL_SPI_MspInit+0x1d4>)
 8001170:	4a21      	ldr	r2, [pc, #132]	@ (80011f8 <HAL_SPI_MspInit+0x1d8>)
 8001172:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001174:	4b1f      	ldr	r3, [pc, #124]	@ (80011f4 <HAL_SPI_MspInit+0x1d4>)
 8001176:	2225      	movs	r2, #37	@ 0x25
 8001178:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800117a:	4b1e      	ldr	r3, [pc, #120]	@ (80011f4 <HAL_SPI_MspInit+0x1d4>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001180:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <HAL_SPI_MspInit+0x1d4>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001186:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <HAL_SPI_MspInit+0x1d4>)
 8001188:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800118c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800118e:	4b19      	ldr	r3, [pc, #100]	@ (80011f4 <HAL_SPI_MspInit+0x1d4>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001194:	4b17      	ldr	r3, [pc, #92]	@ (80011f4 <HAL_SPI_MspInit+0x1d4>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800119a:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <HAL_SPI_MspInit+0x1d4>)
 800119c:	2200      	movs	r2, #0
 800119e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011a0:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <HAL_SPI_MspInit+0x1d4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011a6:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <HAL_SPI_MspInit+0x1d4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80011ac:	4811      	ldr	r0, [pc, #68]	@ (80011f4 <HAL_SPI_MspInit+0x1d4>)
 80011ae:	f002 fa31 	bl	8003614 <HAL_DMA_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <HAL_SPI_MspInit+0x19c>
    {
      Error_Handler();
 80011b8:	f7ff fe02 	bl	8000dc0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a0d      	ldr	r2, [pc, #52]	@ (80011f4 <HAL_SPI_MspInit+0x1d4>)
 80011c0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80011c2:	4a0c      	ldr	r2, [pc, #48]	@ (80011f4 <HAL_SPI_MspInit+0x1d4>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2100      	movs	r1, #0
 80011cc:	2023      	movs	r0, #35	@ 0x23
 80011ce:	f002 f974 	bl	80034ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80011d2:	2023      	movs	r0, #35	@ 0x23
 80011d4:	f002 f98b 	bl	80034ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80011d8:	bf00      	nop
 80011da:	37e8      	adds	r7, #232	@ 0xe8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40013000 	.word	0x40013000
 80011e4:	58024400 	.word	0x58024400
 80011e8:	58020000 	.word	0x58020000
 80011ec:	58020c00 	.word	0x58020c00
 80011f0:	58021800 	.word	0x58021800
 80011f4:	240002bc 	.word	0x240002bc
 80011f8:	40020010 	.word	0x40020010

080011fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08e      	sub	sp, #56	@ 0x38
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a4d      	ldr	r2, [pc, #308]	@ (8001350 <HAL_TIM_Base_MspInit+0x154>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d12e      	bne.n	800127c <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800121e:	4b4d      	ldr	r3, [pc, #308]	@ (8001354 <HAL_TIM_Base_MspInit+0x158>)
 8001220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001224:	4a4b      	ldr	r2, [pc, #300]	@ (8001354 <HAL_TIM_Base_MspInit+0x158>)
 8001226:	f043 0302 	orr.w	r3, r3, #2
 800122a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800122e:	4b49      	ldr	r3, [pc, #292]	@ (8001354 <HAL_TIM_Base_MspInit+0x158>)
 8001230:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	623b      	str	r3, [r7, #32]
 800123a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123c:	4b45      	ldr	r3, [pc, #276]	@ (8001354 <HAL_TIM_Base_MspInit+0x158>)
 800123e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001242:	4a44      	ldr	r2, [pc, #272]	@ (8001354 <HAL_TIM_Base_MspInit+0x158>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800124c:	4b41      	ldr	r3, [pc, #260]	@ (8001354 <HAL_TIM_Base_MspInit+0x158>)
 800124e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	61fb      	str	r3, [r7, #28]
 8001258:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800125a:	2340      	movs	r3, #64	@ 0x40
 800125c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800126a:	2302      	movs	r3, #2
 800126c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001272:	4619      	mov	r1, r3
 8001274:	4838      	ldr	r0, [pc, #224]	@ (8001358 <HAL_TIM_Base_MspInit+0x15c>)
 8001276:	f005 f811 	bl	800629c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800127a:	e065      	b.n	8001348 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM4)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a36      	ldr	r2, [pc, #216]	@ (800135c <HAL_TIM_Base_MspInit+0x160>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d12f      	bne.n	80012e6 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001286:	4b33      	ldr	r3, [pc, #204]	@ (8001354 <HAL_TIM_Base_MspInit+0x158>)
 8001288:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800128c:	4a31      	ldr	r2, [pc, #196]	@ (8001354 <HAL_TIM_Base_MspInit+0x158>)
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001296:	4b2f      	ldr	r3, [pc, #188]	@ (8001354 <HAL_TIM_Base_MspInit+0x158>)
 8001298:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001354 <HAL_TIM_Base_MspInit+0x158>)
 80012a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001354 <HAL_TIM_Base_MspInit+0x158>)
 80012ac:	f043 0308 	orr.w	r3, r3, #8
 80012b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012b4:	4b27      	ldr	r3, [pc, #156]	@ (8001354 <HAL_TIM_Base_MspInit+0x158>)
 80012b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012d4:	2302      	movs	r3, #2
 80012d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012dc:	4619      	mov	r1, r3
 80012de:	4820      	ldr	r0, [pc, #128]	@ (8001360 <HAL_TIM_Base_MspInit+0x164>)
 80012e0:	f004 ffdc 	bl	800629c <HAL_GPIO_Init>
}
 80012e4:	e030      	b.n	8001348 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM6)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001364 <HAL_TIM_Base_MspInit+0x168>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d117      	bne.n	8001320 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012f0:	4b18      	ldr	r3, [pc, #96]	@ (8001354 <HAL_TIM_Base_MspInit+0x158>)
 80012f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012f6:	4a17      	ldr	r2, [pc, #92]	@ (8001354 <HAL_TIM_Base_MspInit+0x158>)
 80012f8:	f043 0310 	orr.w	r3, r3, #16
 80012fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001300:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <HAL_TIM_Base_MspInit+0x158>)
 8001302:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	2036      	movs	r0, #54	@ 0x36
 8001314:	f002 f8d1 	bl	80034ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001318:	2036      	movs	r0, #54	@ 0x36
 800131a:	f002 f8e8 	bl	80034ee <HAL_NVIC_EnableIRQ>
}
 800131e:	e013      	b.n	8001348 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM7)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a10      	ldr	r2, [pc, #64]	@ (8001368 <HAL_TIM_Base_MspInit+0x16c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d10e      	bne.n	8001348 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800132a:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <HAL_TIM_Base_MspInit+0x158>)
 800132c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001330:	4a08      	ldr	r2, [pc, #32]	@ (8001354 <HAL_TIM_Base_MspInit+0x158>)
 8001332:	f043 0320 	orr.w	r3, r3, #32
 8001336:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_TIM_Base_MspInit+0x158>)
 800133c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001340:	f003 0320 	and.w	r3, r3, #32
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
}
 8001348:	bf00      	nop
 800134a:	3738      	adds	r7, #56	@ 0x38
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40000400 	.word	0x40000400
 8001354:	58024400 	.word	0x58024400
 8001358:	58020800 	.word	0x58020800
 800135c:	40000800 	.word	0x40000800
 8001360:	58020c00 	.word	0x58020c00
 8001364:	40001000 	.word	0x40001000
 8001368:	40001400 	.word	0x40001400

0800136c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <NMI_Handler+0x4>

08001374 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <HardFault_Handler+0x4>

0800137c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <MemManage_Handler+0x4>

08001384 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <UsageFault_Handler+0x4>

08001394 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c2:	f000 f949 	bl	8001658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80013d0:	4802      	ldr	r0, [pc, #8]	@ (80013dc <DMA1_Stream0_IRQHandler+0x10>)
 80013d2:	f003 fc45 	bl	8004c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	240002bc 	.word	0x240002bc

080013e0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013e4:	4802      	ldr	r0, [pc, #8]	@ (80013f0 <DMA1_Stream1_IRQHandler+0x10>)
 80013e6:	f003 fc3b 	bl	8004c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	240001bc 	.word	0x240001bc

080013f4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013f8:	4802      	ldr	r0, [pc, #8]	@ (8001404 <ADC_IRQHandler+0x10>)
 80013fa:	f000 fddd 	bl	8001fb8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2400014c 	.word	0x2400014c

08001408 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800140c:	4802      	ldr	r0, [pc, #8]	@ (8001418 <SPI1_IRQHandler+0x10>)
 800140e:	f008 ffcb 	bl	800a3a8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	24000234 	.word	0x24000234

0800141c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001420:	4802      	ldr	r0, [pc, #8]	@ (800142c <TIM6_DAC_IRQHandler+0x10>)
 8001422:	f009 fc50 	bl	800acc6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	240003cc 	.word	0x240003cc

08001430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001434:	4b32      	ldr	r3, [pc, #200]	@ (8001500 <SystemInit+0xd0>)
 8001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800143a:	4a31      	ldr	r2, [pc, #196]	@ (8001500 <SystemInit+0xd0>)
 800143c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001440:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001444:	4b2f      	ldr	r3, [pc, #188]	@ (8001504 <SystemInit+0xd4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 030f 	and.w	r3, r3, #15
 800144c:	2b06      	cmp	r3, #6
 800144e:	d807      	bhi.n	8001460 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001450:	4b2c      	ldr	r3, [pc, #176]	@ (8001504 <SystemInit+0xd4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f023 030f 	bic.w	r3, r3, #15
 8001458:	4a2a      	ldr	r2, [pc, #168]	@ (8001504 <SystemInit+0xd4>)
 800145a:	f043 0307 	orr.w	r3, r3, #7
 800145e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001460:	4b29      	ldr	r3, [pc, #164]	@ (8001508 <SystemInit+0xd8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a28      	ldr	r2, [pc, #160]	@ (8001508 <SystemInit+0xd8>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800146c:	4b26      	ldr	r3, [pc, #152]	@ (8001508 <SystemInit+0xd8>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001472:	4b25      	ldr	r3, [pc, #148]	@ (8001508 <SystemInit+0xd8>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4924      	ldr	r1, [pc, #144]	@ (8001508 <SystemInit+0xd8>)
 8001478:	4b24      	ldr	r3, [pc, #144]	@ (800150c <SystemInit+0xdc>)
 800147a:	4013      	ands	r3, r2
 800147c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800147e:	4b21      	ldr	r3, [pc, #132]	@ (8001504 <SystemInit+0xd4>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800148a:	4b1e      	ldr	r3, [pc, #120]	@ (8001504 <SystemInit+0xd4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f023 030f 	bic.w	r3, r3, #15
 8001492:	4a1c      	ldr	r2, [pc, #112]	@ (8001504 <SystemInit+0xd4>)
 8001494:	f043 0307 	orr.w	r3, r3, #7
 8001498:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800149a:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <SystemInit+0xd8>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014a0:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <SystemInit+0xd8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014a6:	4b18      	ldr	r3, [pc, #96]	@ (8001508 <SystemInit+0xd8>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014ac:	4b16      	ldr	r3, [pc, #88]	@ (8001508 <SystemInit+0xd8>)
 80014ae:	4a18      	ldr	r2, [pc, #96]	@ (8001510 <SystemInit+0xe0>)
 80014b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014b2:	4b15      	ldr	r3, [pc, #84]	@ (8001508 <SystemInit+0xd8>)
 80014b4:	4a17      	ldr	r2, [pc, #92]	@ (8001514 <SystemInit+0xe4>)
 80014b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014b8:	4b13      	ldr	r3, [pc, #76]	@ (8001508 <SystemInit+0xd8>)
 80014ba:	4a17      	ldr	r2, [pc, #92]	@ (8001518 <SystemInit+0xe8>)
 80014bc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014be:	4b12      	ldr	r3, [pc, #72]	@ (8001508 <SystemInit+0xd8>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014c4:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <SystemInit+0xd8>)
 80014c6:	4a14      	ldr	r2, [pc, #80]	@ (8001518 <SystemInit+0xe8>)
 80014c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <SystemInit+0xd8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001508 <SystemInit+0xd8>)
 80014d2:	4a11      	ldr	r2, [pc, #68]	@ (8001518 <SystemInit+0xe8>)
 80014d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <SystemInit+0xd8>)
 80014d8:	2200      	movs	r2, #0
 80014da:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001508 <SystemInit+0xd8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a09      	ldr	r2, [pc, #36]	@ (8001508 <SystemInit+0xd8>)
 80014e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014e8:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <SystemInit+0xd8>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <SystemInit+0xec>)
 80014f0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80014f4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00
 8001504:	52002000 	.word	0x52002000
 8001508:	58024400 	.word	0x58024400
 800150c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001510:	02020200 	.word	0x02020200
 8001514:	01ff0000 	.word	0x01ff0000
 8001518:	01010280 	.word	0x01010280
 800151c:	52004000 	.word	0x52004000

08001520 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001520:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001558 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001524:	f7ff ff84 	bl	8001430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001528:	480c      	ldr	r0, [pc, #48]	@ (800155c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800152a:	490d      	ldr	r1, [pc, #52]	@ (8001560 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800152c:	4a0d      	ldr	r2, [pc, #52]	@ (8001564 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001530:	e002      	b.n	8001538 <LoopCopyDataInit>

08001532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001536:	3304      	adds	r3, #4

08001538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800153c:	d3f9      	bcc.n	8001532 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153e:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001540:	4c0a      	ldr	r4, [pc, #40]	@ (800156c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001544:	e001      	b.n	800154a <LoopFillZerobss>

08001546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001548:	3204      	adds	r2, #4

0800154a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800154c:	d3fb      	bcc.n	8001546 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800154e:	f00a f809 	bl	800b564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001552:	f7ff f8f1 	bl	8000738 <main>
  bx  lr
 8001556:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001558:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800155c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001560:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001564:	0800b5e4 	.word	0x0800b5e4
  ldr r2, =_sbss
 8001568:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 800156c:	24000468 	.word	0x24000468

08001570 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001570:	e7fe      	b.n	8001570 <ADC3_IRQHandler>
	...

08001574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157a:	2003      	movs	r0, #3
 800157c:	f001 ff92 	bl	80034a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001580:	f005 fe18 	bl	80071b4 <HAL_RCC_GetSysClockFreq>
 8001584:	4602      	mov	r2, r0
 8001586:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <HAL_Init+0x68>)
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	0a1b      	lsrs	r3, r3, #8
 800158c:	f003 030f 	and.w	r3, r3, #15
 8001590:	4913      	ldr	r1, [pc, #76]	@ (80015e0 <HAL_Init+0x6c>)
 8001592:	5ccb      	ldrb	r3, [r1, r3]
 8001594:	f003 031f 	and.w	r3, r3, #31
 8001598:	fa22 f303 	lsr.w	r3, r2, r3
 800159c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800159e:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <HAL_Init+0x68>)
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	4a0e      	ldr	r2, [pc, #56]	@ (80015e0 <HAL_Init+0x6c>)
 80015a8:	5cd3      	ldrb	r3, [r2, r3]
 80015aa:	f003 031f 	and.w	r3, r3, #31
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	fa22 f303 	lsr.w	r3, r2, r3
 80015b4:	4a0b      	ldr	r2, [pc, #44]	@ (80015e4 <HAL_Init+0x70>)
 80015b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015b8:	4a0b      	ldr	r2, [pc, #44]	@ (80015e8 <HAL_Init+0x74>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015be:	200f      	movs	r0, #15
 80015c0:	f000 f814 	bl	80015ec <HAL_InitTick>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e002      	b.n	80015d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015ce:	f7ff fbfd 	bl	8000dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	58024400 	.word	0x58024400
 80015e0:	0800b5c4 	.word	0x0800b5c4
 80015e4:	24000004 	.word	0x24000004
 80015e8:	24000000 	.word	0x24000000

080015ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015f4:	4b15      	ldr	r3, [pc, #84]	@ (800164c <HAL_InitTick+0x60>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e021      	b.n	8001644 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001600:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <HAL_InitTick+0x64>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b11      	ldr	r3, [pc, #68]	@ (800164c <HAL_InitTick+0x60>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800160e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001612:	fbb2 f3f3 	udiv	r3, r2, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f001 ff77 	bl	800350a <HAL_SYSTICK_Config>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e00e      	b.n	8001644 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b0f      	cmp	r3, #15
 800162a:	d80a      	bhi.n	8001642 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800162c:	2200      	movs	r2, #0
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	f04f 30ff 	mov.w	r0, #4294967295
 8001634:	f001 ff41 	bl	80034ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001638:	4a06      	ldr	r2, [pc, #24]	@ (8001654 <HAL_InitTick+0x68>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	2400000c 	.word	0x2400000c
 8001650:	24000000 	.word	0x24000000
 8001654:	24000008 	.word	0x24000008

08001658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <HAL_IncTick+0x20>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <HAL_IncTick+0x24>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4413      	add	r3, r2
 8001668:	4a04      	ldr	r2, [pc, #16]	@ (800167c <HAL_IncTick+0x24>)
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	2400000c 	.word	0x2400000c
 800167c:	24000464 	.word	0x24000464

08001680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;
 8001684:	4b03      	ldr	r3, [pc, #12]	@ (8001694 <HAL_GetTick+0x14>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	24000464 	.word	0x24000464

08001698 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	609a      	str	r2, [r3, #8]
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	609a      	str	r2, [r3, #8]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	3360      	adds	r3, #96	@ 0x60
 8001712:	461a      	mov	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4a10      	ldr	r2, [pc, #64]	@ (8001760 <LL_ADC_SetOffset+0x60>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d10b      	bne.n	800173c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	4313      	orrs	r3, r2
 8001732:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800173a:	e00b      	b.n	8001754 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	430b      	orrs	r3, r1
 800174e:	431a      	orrs	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	601a      	str	r2, [r3, #0]
}
 8001754:	bf00      	nop
 8001756:	371c      	adds	r7, #28
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	58026000 	.word	0x58026000

08001764 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3360      	adds	r3, #96	@ 0x60
 8001772:	461a      	mov	r2, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001784:	4618      	mov	r0, r3
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	f003 031f 	and.w	r3, r3, #31
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	fa01 f303 	lsl.w	r3, r1, r3
 80017b0:	431a      	orrs	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	611a      	str	r2, [r3, #16]
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001804 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d00e      	beq.n	80017f6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	3360      	adds	r3, #96	@ 0x60
 80017dc:	461a      	mov	r2, r3
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	431a      	orrs	r2, r3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	601a      	str	r2, [r3, #0]
  }
}
 80017f6:	bf00      	nop
 80017f8:	371c      	adds	r7, #28
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	58026000 	.word	0x58026000

08001808 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001808:	b480      	push	{r7}
 800180a:	b087      	sub	sp, #28
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4a0c      	ldr	r2, [pc, #48]	@ (8001848 <LL_ADC_SetOffsetSaturation+0x40>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d10e      	bne.n	800183a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3360      	adds	r3, #96	@ 0x60
 8001820:	461a      	mov	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	431a      	orrs	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800183a:	bf00      	nop
 800183c:	371c      	adds	r7, #28
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	58026000 	.word	0x58026000

0800184c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800184c:	b480      	push	{r7}
 800184e:	b087      	sub	sp, #28
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4a0c      	ldr	r2, [pc, #48]	@ (800188c <LL_ADC_SetOffsetSign+0x40>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d10e      	bne.n	800187e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3360      	adds	r3, #96	@ 0x60
 8001864:	461a      	mov	r2, r3
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	431a      	orrs	r2, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800187e:	bf00      	nop
 8001880:	371c      	adds	r7, #28
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	58026000 	.word	0x58026000

08001890 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3360      	adds	r3, #96	@ 0x60
 80018a0:	461a      	mov	r2, r3
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4a0c      	ldr	r2, [pc, #48]	@ (80018e0 <LL_ADC_SetOffsetState+0x50>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d108      	bne.n	80018c4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	431a      	orrs	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80018c2:	e007      	b.n	80018d4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	431a      	orrs	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	601a      	str	r2, [r3, #0]
}
 80018d4:	bf00      	nop
 80018d6:	371c      	adds	r7, #28
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	58026000 	.word	0x58026000

080018e4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800190a:	b480      	push	{r7}
 800190c:	b087      	sub	sp, #28
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	3330      	adds	r3, #48	@ 0x30
 800191a:	461a      	mov	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	0a1b      	lsrs	r3, r3, #8
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	f003 030c 	and.w	r3, r3, #12
 8001926:	4413      	add	r3, r2
 8001928:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	f003 031f 	and.w	r3, r3, #31
 8001934:	211f      	movs	r1, #31
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	401a      	ands	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	0e9b      	lsrs	r3, r3, #26
 8001942:	f003 011f 	and.w	r1, r3, #31
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	f003 031f 	and.w	r3, r3, #31
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	431a      	orrs	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001956:	bf00      	nop
 8001958:	371c      	adds	r7, #28
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	3314      	adds	r3, #20
 8001998:	461a      	mov	r2, r3
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	0e5b      	lsrs	r3, r3, #25
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	4413      	add	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	0d1b      	lsrs	r3, r3, #20
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	2107      	movs	r1, #7
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	401a      	ands	r2, r3
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	0d1b      	lsrs	r3, r3, #20
 80019c2:	f003 031f 	and.w	r3, r3, #31
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	fa01 f303 	lsl.w	r3, r1, r3
 80019cc:	431a      	orrs	r2, r3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019d2:	bf00      	nop
 80019d4:	371c      	adds	r7, #28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001a58 <LL_ADC_SetChannelSingleDiff+0x78>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d115      	bne.n	8001a20 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a00:	43db      	mvns	r3, r3
 8001a02:	401a      	ands	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f003 0318 	and.w	r3, r3, #24
 8001a0a:	4914      	ldr	r1, [pc, #80]	@ (8001a5c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001a0c:	40d9      	lsrs	r1, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	400b      	ands	r3, r1
 8001a12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a16:	431a      	orrs	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001a1e:	e014      	b.n	8001a4a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	401a      	ands	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f003 0318 	and.w	r3, r3, #24
 8001a36:	4909      	ldr	r1, [pc, #36]	@ (8001a5c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001a38:	40d9      	lsrs	r1, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	400b      	ands	r3, r1
 8001a3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a42:	431a      	orrs	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	58026000 	.word	0x58026000
 8001a5c:	000fffff 	.word	0x000fffff

08001a60 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 031f 	and.w	r3, r3, #31
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6093      	str	r3, [r2, #8]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	5fffffc0 	.word	0x5fffffc0

08001abc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001acc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ad0:	d101      	bne.n	8001ad6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <LL_ADC_EnableInternalRegulator+0x24>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	6fffffc0 	.word	0x6fffffc0

08001b0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b20:	d101      	bne.n	8001b26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <LL_ADC_IsEnabled+0x18>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <LL_ADC_IsEnabled+0x1a>
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d101      	bne.n	8001b72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d101      	bne.n	8001b98 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b94:	2301      	movs	r3, #1
 8001b96:	e000      	b.n	8001b9a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b089      	sub	sp, #36	@ 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e1ee      	b.n	8001fa0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d109      	bne.n	8001be4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff f915 	bl	8000e00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff67 	bl	8001abc <LL_ADC_IsDeepPowerDownEnabled>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d004      	beq.n	8001bfe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff4d 	bl	8001a98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff82 	bl	8001b0c <LL_ADC_IsInternalRegulatorEnabled>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d114      	bne.n	8001c38 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ff66 	bl	8001ae4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c18:	4b8e      	ldr	r3, [pc, #568]	@ (8001e54 <HAL_ADC_Init+0x2ac>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	099b      	lsrs	r3, r3, #6
 8001c1e:	4a8e      	ldr	r2, [pc, #568]	@ (8001e58 <HAL_ADC_Init+0x2b0>)
 8001c20:	fba2 2303 	umull	r2, r3, r2, r3
 8001c24:	099b      	lsrs	r3, r3, #6
 8001c26:	3301      	adds	r3, #1
 8001c28:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c2a:	e002      	b.n	8001c32 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f9      	bne.n	8001c2c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff65 	bl	8001b0c <LL_ADC_IsInternalRegulatorEnabled>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10d      	bne.n	8001c64 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c4c:	f043 0210 	orr.w	r2, r3, #16
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c58:	f043 0201 	orr.w	r2, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff76 	bl	8001b5a <LL_ADC_REG_IsConversionOngoing>
 8001c6e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c74:	f003 0310 	and.w	r3, r3, #16
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f040 8188 	bne.w	8001f8e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f040 8184 	bne.w	8001f8e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c8a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c8e:	f043 0202 	orr.w	r2, r3, #2
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff ff4a 	bl	8001b34 <LL_ADC_IsEnabled>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d136      	bne.n	8001d14 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a6c      	ldr	r2, [pc, #432]	@ (8001e5c <HAL_ADC_Init+0x2b4>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d004      	beq.n	8001cba <HAL_ADC_Init+0x112>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a6a      	ldr	r2, [pc, #424]	@ (8001e60 <HAL_ADC_Init+0x2b8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d10e      	bne.n	8001cd8 <HAL_ADC_Init+0x130>
 8001cba:	4868      	ldr	r0, [pc, #416]	@ (8001e5c <HAL_ADC_Init+0x2b4>)
 8001cbc:	f7ff ff3a 	bl	8001b34 <LL_ADC_IsEnabled>
 8001cc0:	4604      	mov	r4, r0
 8001cc2:	4867      	ldr	r0, [pc, #412]	@ (8001e60 <HAL_ADC_Init+0x2b8>)
 8001cc4:	f7ff ff36 	bl	8001b34 <LL_ADC_IsEnabled>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4323      	orrs	r3, r4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bf0c      	ite	eq
 8001cd0:	2301      	moveq	r3, #1
 8001cd2:	2300      	movne	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	e008      	b.n	8001cea <HAL_ADC_Init+0x142>
 8001cd8:	4862      	ldr	r0, [pc, #392]	@ (8001e64 <HAL_ADC_Init+0x2bc>)
 8001cda:	f7ff ff2b 	bl	8001b34 <LL_ADC_IsEnabled>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bf0c      	ite	eq
 8001ce4:	2301      	moveq	r3, #1
 8001ce6:	2300      	movne	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d012      	beq.n	8001d14 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a5a      	ldr	r2, [pc, #360]	@ (8001e5c <HAL_ADC_Init+0x2b4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d004      	beq.n	8001d02 <HAL_ADC_Init+0x15a>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a58      	ldr	r2, [pc, #352]	@ (8001e60 <HAL_ADC_Init+0x2b8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d101      	bne.n	8001d06 <HAL_ADC_Init+0x15e>
 8001d02:	4a59      	ldr	r2, [pc, #356]	@ (8001e68 <HAL_ADC_Init+0x2c0>)
 8001d04:	e000      	b.n	8001d08 <HAL_ADC_Init+0x160>
 8001d06:	4a59      	ldr	r2, [pc, #356]	@ (8001e6c <HAL_ADC_Init+0x2c4>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4610      	mov	r0, r2
 8001d10:	f7ff fcc2 	bl	8001698 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a52      	ldr	r2, [pc, #328]	@ (8001e64 <HAL_ADC_Init+0x2bc>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d129      	bne.n	8001d72 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	7e5b      	ldrb	r3, [r3, #25]
 8001d22:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001d28:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8001d2e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d013      	beq.n	8001d60 <HAL_ADC_Init+0x1b8>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b0c      	cmp	r3, #12
 8001d3e:	d00d      	beq.n	8001d5c <HAL_ADC_Init+0x1b4>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2b1c      	cmp	r3, #28
 8001d46:	d007      	beq.n	8001d58 <HAL_ADC_Init+0x1b0>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b18      	cmp	r3, #24
 8001d4e:	d101      	bne.n	8001d54 <HAL_ADC_Init+0x1ac>
 8001d50:	2318      	movs	r3, #24
 8001d52:	e006      	b.n	8001d62 <HAL_ADC_Init+0x1ba>
 8001d54:	2300      	movs	r3, #0
 8001d56:	e004      	b.n	8001d62 <HAL_ADC_Init+0x1ba>
 8001d58:	2310      	movs	r3, #16
 8001d5a:	e002      	b.n	8001d62 <HAL_ADC_Init+0x1ba>
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	e000      	b.n	8001d62 <HAL_ADC_Init+0x1ba>
 8001d60:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8001d62:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d6a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
 8001d70:	e00e      	b.n	8001d90 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	7e5b      	ldrb	r3, [r3, #25]
 8001d76:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d7c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d82:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d8a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d106      	bne.n	8001da8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	045b      	lsls	r3, r3, #17
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d009      	beq.n	8001dc4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dbc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a26      	ldr	r2, [pc, #152]	@ (8001e64 <HAL_ADC_Init+0x2bc>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d115      	bne.n	8001dfa <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	4b26      	ldr	r3, [pc, #152]	@ (8001e70 <HAL_ADC_Init+0x2c8>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	69b9      	ldr	r1, [r7, #24]
 8001dde:	430b      	orrs	r3, r1
 8001de0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	611a      	str	r2, [r3, #16]
 8001df8:	e009      	b.n	8001e0e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	4b1c      	ldr	r3, [pc, #112]	@ (8001e74 <HAL_ADC_Init+0x2cc>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	69b9      	ldr	r1, [r7, #24]
 8001e0a:	430b      	orrs	r3, r1
 8001e0c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fea1 	bl	8001b5a <LL_ADC_REG_IsConversionOngoing>
 8001e18:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff feae 	bl	8001b80 <LL_ADC_INJ_IsConversionOngoing>
 8001e24:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f040 808e 	bne.w	8001f4a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f040 808a 	bne.w	8001f4a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e64 <HAL_ADC_Init+0x2bc>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d11b      	bne.n	8001e78 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	7e1b      	ldrb	r3, [r3, #24]
 8001e44:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e4c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	e018      	b.n	8001e86 <HAL_ADC_Init+0x2de>
 8001e54:	24000000 	.word	0x24000000
 8001e58:	053e2d63 	.word	0x053e2d63
 8001e5c:	40022000 	.word	0x40022000
 8001e60:	40022100 	.word	0x40022100
 8001e64:	58026000 	.word	0x58026000
 8001e68:	40022300 	.word	0x40022300
 8001e6c:	58026300 	.word	0x58026300
 8001e70:	fff04007 	.word	0xfff04007
 8001e74:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7e1b      	ldrb	r3, [r3, #24]
 8001e7c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	4b46      	ldr	r3, [pc, #280]	@ (8001fa8 <HAL_ADC_Init+0x400>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	69b9      	ldr	r1, [r7, #24]
 8001e96:	430b      	orrs	r3, r1
 8001e98:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d137      	bne.n	8001f14 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a3f      	ldr	r2, [pc, #252]	@ (8001fac <HAL_ADC_Init+0x404>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d116      	bne.n	8001ee2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691a      	ldr	r2, [r3, #16]
 8001eba:	4b3d      	ldr	r3, [pc, #244]	@ (8001fb0 <HAL_ADC_Init+0x408>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001ec6:	4311      	orrs	r1, r2
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ecc:	4311      	orrs	r1, r2
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0201 	orr.w	r2, r2, #1
 8001ede:	611a      	str	r2, [r3, #16]
 8001ee0:	e020      	b.n	8001f24 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	4b32      	ldr	r3, [pc, #200]	@ (8001fb4 <HAL_ADC_Init+0x40c>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ef0:	3a01      	subs	r2, #1
 8001ef2:	0411      	lsls	r1, r2, #16
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001ef8:	4311      	orrs	r1, r2
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001efe:	4311      	orrs	r1, r2
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001f04:	430a      	orrs	r2, r1
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0201 	orr.w	r2, r2, #1
 8001f10:	611a      	str	r2, [r3, #16]
 8001f12:	e007      	b.n	8001f24 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691a      	ldr	r2, [r3, #16]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0201 	bic.w	r2, r2, #1
 8001f22:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001fac <HAL_ADC_Init+0x404>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d002      	beq.n	8001f4a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 ffb5 	bl	8002eb4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d10c      	bne.n	8001f6c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f58:	f023 010f 	bic.w	r1, r3, #15
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	1e5a      	subs	r2, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f6a:	e007      	b.n	8001f7c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 020f 	bic.w	r2, r2, #15
 8001f7a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f80:	f023 0303 	bic.w	r3, r3, #3
 8001f84:	f043 0201 	orr.w	r2, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	661a      	str	r2, [r3, #96]	@ 0x60
 8001f8c:	e007      	b.n	8001f9e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f92:	f043 0210 	orr.w	r2, r3, #16
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3724      	adds	r7, #36	@ 0x24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd90      	pop	{r4, r7, pc}
 8001fa8:	ffffbffc 	.word	0xffffbffc
 8001fac:	58026000 	.word	0x58026000
 8001fb0:	fc00f81f 	.word	0xfc00f81f
 8001fb4:	fc00f81e 	.word	0xfc00f81e

08001fb8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	@ 0x28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a87      	ldr	r2, [pc, #540]	@ (80021f8 <HAL_ADC_IRQHandler+0x240>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d004      	beq.n	8001fe8 <HAL_ADC_IRQHandler+0x30>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a86      	ldr	r2, [pc, #536]	@ (80021fc <HAL_ADC_IRQHandler+0x244>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d101      	bne.n	8001fec <HAL_ADC_IRQHandler+0x34>
 8001fe8:	4b85      	ldr	r3, [pc, #532]	@ (8002200 <HAL_ADC_IRQHandler+0x248>)
 8001fea:	e000      	b.n	8001fee <HAL_ADC_IRQHandler+0x36>
 8001fec:	4b85      	ldr	r3, [pc, #532]	@ (8002204 <HAL_ADC_IRQHandler+0x24c>)
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fd36 	bl	8001a60 <LL_ADC_GetMultimode>
 8001ff4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d017      	beq.n	8002030 <HAL_ADC_IRQHandler+0x78>
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d012      	beq.n	8002030 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800200e:	f003 0310 	and.w	r3, r3, #16
 8002012:	2b00      	cmp	r3, #0
 8002014:	d105      	bne.n	8002022 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800201a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f001 f882 	bl	800312c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2202      	movs	r2, #2
 800202e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	2b00      	cmp	r3, #0
 8002038:	d004      	beq.n	8002044 <HAL_ADC_IRQHandler+0x8c>
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10a      	bne.n	800205a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8083 	beq.w	8002156 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d07d      	beq.n	8002156 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800205e:	f003 0310 	and.w	r3, r3, #16
 8002062:	2b00      	cmp	r3, #0
 8002064:	d105      	bne.n	8002072 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800206a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fc34 	bl	80018e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d062      	beq.n	8002148 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a5d      	ldr	r2, [pc, #372]	@ (80021fc <HAL_ADC_IRQHandler+0x244>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d002      	beq.n	8002092 <HAL_ADC_IRQHandler+0xda>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	e000      	b.n	8002094 <HAL_ADC_IRQHandler+0xdc>
 8002092:	4b59      	ldr	r3, [pc, #356]	@ (80021f8 <HAL_ADC_IRQHandler+0x240>)
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	4293      	cmp	r3, r2
 800209a:	d008      	beq.n	80020ae <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d005      	beq.n	80020ae <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2b05      	cmp	r3, #5
 80020a6:	d002      	beq.n	80020ae <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b09      	cmp	r3, #9
 80020ac:	d104      	bne.n	80020b8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	623b      	str	r3, [r7, #32]
 80020b6:	e00c      	b.n	80020d2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a4f      	ldr	r2, [pc, #316]	@ (80021fc <HAL_ADC_IRQHandler+0x244>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d002      	beq.n	80020c8 <HAL_ADC_IRQHandler+0x110>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	e000      	b.n	80020ca <HAL_ADC_IRQHandler+0x112>
 80020c8:	4b4b      	ldr	r3, [pc, #300]	@ (80021f8 <HAL_ADC_IRQHandler+0x240>)
 80020ca:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d135      	bne.n	8002148 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d12e      	bne.n	8002148 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fd33 	bl	8001b5a <LL_ADC_REG_IsConversionOngoing>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d11a      	bne.n	8002130 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 020c 	bic.w	r2, r2, #12
 8002108:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800210e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800211a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d112      	bne.n	8002148 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002126:	f043 0201 	orr.w	r2, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	661a      	str	r2, [r3, #96]	@ 0x60
 800212e:	e00b      	b.n	8002148 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002134:	f043 0210 	orr.w	r2, r3, #16
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002140:	f043 0201 	orr.w	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7fe f985 	bl	8000458 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	220c      	movs	r2, #12
 8002154:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	f003 0320 	and.w	r3, r3, #32
 800215c:	2b00      	cmp	r3, #0
 800215e:	d004      	beq.n	800216a <HAL_ADC_IRQHandler+0x1b2>
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10b      	bne.n	8002182 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80a0 	beq.w	80022b6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 809a 	beq.w	80022b6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	2b00      	cmp	r3, #0
 800218c:	d105      	bne.n	800219a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002192:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fbdf 	bl	8001962 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80021a4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fb9a 	bl	80018e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021b0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a11      	ldr	r2, [pc, #68]	@ (80021fc <HAL_ADC_IRQHandler+0x244>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d002      	beq.n	80021c2 <HAL_ADC_IRQHandler+0x20a>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	e000      	b.n	80021c4 <HAL_ADC_IRQHandler+0x20c>
 80021c2:	4b0d      	ldr	r3, [pc, #52]	@ (80021f8 <HAL_ADC_IRQHandler+0x240>)
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d008      	beq.n	80021de <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2b06      	cmp	r3, #6
 80021d6:	d002      	beq.n	80021de <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	2b07      	cmp	r3, #7
 80021dc:	d104      	bne.n	80021e8 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	623b      	str	r3, [r7, #32]
 80021e6:	e014      	b.n	8002212 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a03      	ldr	r2, [pc, #12]	@ (80021fc <HAL_ADC_IRQHandler+0x244>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00a      	beq.n	8002208 <HAL_ADC_IRQHandler+0x250>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	e008      	b.n	800220a <HAL_ADC_IRQHandler+0x252>
 80021f8:	40022000 	.word	0x40022000
 80021fc:	40022100 	.word	0x40022100
 8002200:	40022300 	.word	0x40022300
 8002204:	58026300 	.word	0x58026300
 8002208:	4b84      	ldr	r3, [pc, #528]	@ (800241c <HAL_ADC_IRQHandler+0x464>)
 800220a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d047      	beq.n	80022a8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002218:	6a3b      	ldr	r3, [r7, #32]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d007      	beq.n	8002232 <HAL_ADC_IRQHandler+0x27a>
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d03f      	beq.n	80022a8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800222e:	2b00      	cmp	r3, #0
 8002230:	d13a      	bne.n	80022a8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800223c:	2b40      	cmp	r3, #64	@ 0x40
 800223e:	d133      	bne.n	80022a8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d12e      	bne.n	80022a8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fc96 	bl	8001b80 <LL_ADC_INJ_IsConversionOngoing>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d11a      	bne.n	8002290 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002268:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800226e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800227a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d112      	bne.n	80022a8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002286:	f043 0201 	orr.w	r2, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	661a      	str	r2, [r3, #96]	@ 0x60
 800228e:	e00b      	b.n	80022a8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002294:	f043 0210 	orr.w	r2, r3, #16
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022a0:	f043 0201 	orr.w	r2, r3, #1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 ff17 	bl	80030dc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2260      	movs	r2, #96	@ 0x60
 80022b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d011      	beq.n	80022e4 <HAL_ADC_IRQHandler+0x32c>
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00c      	beq.n	80022e4 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f8a8 	bl	800242c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2280      	movs	r2, #128	@ 0x80
 80022e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d012      	beq.n	8002314 <HAL_ADC_IRQHandler+0x35c>
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00d      	beq.n	8002314 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022fc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 fefd 	bl	8003104 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002312:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800231a:	2b00      	cmp	r3, #0
 800231c:	d012      	beq.n	8002344 <HAL_ADC_IRQHandler+0x38c>
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00d      	beq.n	8002344 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800232c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 feef 	bl	8003118 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002342:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 0310 	and.w	r3, r3, #16
 800234a:	2b00      	cmp	r3, #0
 800234c:	d043      	beq.n	80023d6 <HAL_ADC_IRQHandler+0x41e>
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b00      	cmp	r3, #0
 8002356:	d03e      	beq.n	80023d6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800235c:	2b00      	cmp	r3, #0
 800235e:	d102      	bne.n	8002366 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002360:	2301      	movs	r3, #1
 8002362:	627b      	str	r3, [r7, #36]	@ 0x24
 8002364:	e021      	b.n	80023aa <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d015      	beq.n	8002398 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a2a      	ldr	r2, [pc, #168]	@ (800241c <HAL_ADC_IRQHandler+0x464>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d004      	beq.n	8002380 <HAL_ADC_IRQHandler+0x3c8>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a29      	ldr	r2, [pc, #164]	@ (8002420 <HAL_ADC_IRQHandler+0x468>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d101      	bne.n	8002384 <HAL_ADC_IRQHandler+0x3cc>
 8002380:	4b28      	ldr	r3, [pc, #160]	@ (8002424 <HAL_ADC_IRQHandler+0x46c>)
 8002382:	e000      	b.n	8002386 <HAL_ADC_IRQHandler+0x3ce>
 8002384:	4b28      	ldr	r3, [pc, #160]	@ (8002428 <HAL_ADC_IRQHandler+0x470>)
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fb78 	bl	8001a7c <LL_ADC_GetMultiDMATransfer>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00b      	beq.n	80023aa <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002392:	2301      	movs	r3, #1
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24
 8002396:	e008      	b.n	80023aa <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80023a6:	2301      	movs	r3, #1
 80023a8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80023aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d10e      	bne.n	80023ce <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023c0:	f043 0202 	orr.w	r2, r3, #2
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f839 	bl	8002440 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2210      	movs	r2, #16
 80023d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d018      	beq.n	8002412 <HAL_ADC_IRQHandler+0x45a>
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d013      	beq.n	8002412 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ee:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023fa:	f043 0208 	orr.w	r2, r3, #8
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800240a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 fe6f 	bl	80030f0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002412:	bf00      	nop
 8002414:	3728      	adds	r7, #40	@ 0x28
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40022000 	.word	0x40022000
 8002420:	40022100 	.word	0x40022100
 8002424:	40022300 	.word	0x40022300
 8002428:	58026300 	.word	0x58026300

0800242c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b0b9      	sub	sp, #228	@ 0xe4
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800246e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4aab      	ldr	r2, [pc, #684]	@ (8002724 <HAL_ADC_ConfigChannel+0x2d0>)
 8002476:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800247e:	2b01      	cmp	r3, #1
 8002480:	d102      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x34>
 8002482:	2302      	movs	r3, #2
 8002484:	f000 bcfe 	b.w	8002e84 <HAL_ADC_ConfigChannel+0xa30>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fb60 	bl	8001b5a <LL_ADC_REG_IsConversionOngoing>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	f040 84e2 	bne.w	8002e66 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	db38      	blt.n	800251c <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a9e      	ldr	r2, [pc, #632]	@ (8002728 <HAL_ADC_ConfigChannel+0x2d4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d033      	beq.n	800251c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d108      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x7e>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	0e9b      	lsrs	r3, r3, #26
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	2201      	movs	r2, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	e01d      	b.n	800250e <HAL_ADC_ConfigChannel+0xba>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024de:	fa93 f3a3 	rbit	r3, r3
 80024e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 80024f6:	2320      	movs	r3, #32
 80024f8:	e004      	b.n	8002504 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 80024fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	2201      	movs	r2, #1
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6812      	ldr	r2, [r2, #0]
 8002512:	69d1      	ldr	r1, [r2, #28]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	430b      	orrs	r3, r1
 800251a:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	6859      	ldr	r1, [r3, #4]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	f7ff f9ee 	bl	800190a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff fb11 	bl	8001b5a <LL_ADC_REG_IsConversionOngoing>
 8002538:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fb1d 	bl	8001b80 <LL_ADC_INJ_IsConversionOngoing>
 8002546:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800254a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 8270 	bne.w	8002a34 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002554:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002558:	2b00      	cmp	r3, #0
 800255a:	f040 826b 	bne.w	8002a34 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	461a      	mov	r2, r3
 800256c:	f7ff fa0c 	bl	8001988 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a6c      	ldr	r2, [pc, #432]	@ (8002728 <HAL_ADC_ConfigChannel+0x2d4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d10d      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	695a      	ldr	r2, [r3, #20]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	08db      	lsrs	r3, r3, #3
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002594:	e032      	b.n	80025fc <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002596:	4b65      	ldr	r3, [pc, #404]	@ (800272c <HAL_ADC_ConfigChannel+0x2d8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800259e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025a2:	d10b      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x168>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	695a      	ldr	r2, [r3, #20]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	089b      	lsrs	r3, r3, #2
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	e01d      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x1a4>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f003 0310 	and.w	r3, r3, #16
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10b      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x18e>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	695a      	ldr	r2, [r3, #20]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	089b      	lsrs	r3, r3, #2
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	e00a      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x1a4>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	695a      	ldr	r2, [r3, #20]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	089b      	lsrs	r3, r3, #2
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	2b04      	cmp	r3, #4
 8002602:	d048      	beq.n	8002696 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	6919      	ldr	r1, [r3, #16]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002614:	f7ff f874 	bl	8001700 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a42      	ldr	r2, [pc, #264]	@ (8002728 <HAL_ADC_ConfigChannel+0x2d4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d119      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6919      	ldr	r1, [r3, #16]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	461a      	mov	r2, r3
 8002630:	f7ff f90c 	bl	800184c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	6919      	ldr	r1, [r3, #16]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d102      	bne.n	800264c <HAL_ADC_ConfigChannel+0x1f8>
 8002646:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800264a:	e000      	b.n	800264e <HAL_ADC_ConfigChannel+0x1fa>
 800264c:	2300      	movs	r3, #0
 800264e:	461a      	mov	r2, r3
 8002650:	f7ff f8da 	bl	8001808 <LL_ADC_SetOffsetSaturation>
 8002654:	e1ee      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6919      	ldr	r1, [r3, #16]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002664:	2b01      	cmp	r3, #1
 8002666:	d102      	bne.n	800266e <HAL_ADC_ConfigChannel+0x21a>
 8002668:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800266c:	e000      	b.n	8002670 <HAL_ADC_ConfigChannel+0x21c>
 800266e:	2300      	movs	r3, #0
 8002670:	461a      	mov	r2, r3
 8002672:	f7ff f8a7 	bl	80017c4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6919      	ldr	r1, [r3, #16]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	7e1b      	ldrb	r3, [r3, #24]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d102      	bne.n	800268c <HAL_ADC_ConfigChannel+0x238>
 8002686:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800268a:	e000      	b.n	800268e <HAL_ADC_ConfigChannel+0x23a>
 800268c:	2300      	movs	r3, #0
 800268e:	461a      	mov	r2, r3
 8002690:	f7ff f87e 	bl	8001790 <LL_ADC_SetDataRightShift>
 8002694:	e1ce      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a23      	ldr	r2, [pc, #140]	@ (8002728 <HAL_ADC_ConfigChannel+0x2d4>)
 800269c:	4293      	cmp	r3, r2
 800269e:	f040 8181 	bne.w	80029a4 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff f85b 	bl	8001764 <LL_ADC_GetOffsetChannel>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10a      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x27a>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff f850 	bl	8001764 <LL_ADC_GetOffsetChannel>
 80026c4:	4603      	mov	r3, r0
 80026c6:	0e9b      	lsrs	r3, r3, #26
 80026c8:	f003 021f 	and.w	r2, r3, #31
 80026cc:	e01e      	b.n	800270c <HAL_ADC_ConfigChannel+0x2b8>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2100      	movs	r1, #0
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff f845 	bl	8001764 <LL_ADC_GetOffsetChannel>
 80026da:	4603      	mov	r3, r0
 80026dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80026e4:	fa93 f3a3 	rbit	r3, r3
 80026e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80026ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80026f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80026f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80026fc:	2320      	movs	r3, #32
 80026fe:	e004      	b.n	800270a <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8002700:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002704:	fab3 f383 	clz	r3, r3
 8002708:	b2db      	uxtb	r3, r3
 800270a:	461a      	mov	r2, r3
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10b      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x2dc>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	0e9b      	lsrs	r3, r3, #26
 800271e:	f003 031f 	and.w	r3, r3, #31
 8002722:	e01e      	b.n	8002762 <HAL_ADC_ConfigChannel+0x30e>
 8002724:	47ff0000 	.word	0x47ff0000
 8002728:	58026000 	.word	0x58026000
 800272c:	5c001000 	.word	0x5c001000
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002738:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800273c:	fa93 f3a3 	rbit	r3, r3
 8002740:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002744:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002748:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800274c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8002754:	2320      	movs	r3, #32
 8002756:	e004      	b.n	8002762 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8002758:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800275c:	fab3 f383 	clz	r3, r3
 8002760:	b2db      	uxtb	r3, r3
 8002762:	429a      	cmp	r2, r3
 8002764:	d106      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2200      	movs	r2, #0
 800276c:	2100      	movs	r1, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff f88e 	bl	8001890 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2101      	movs	r1, #1
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe fff2 	bl	8001764 <LL_ADC_GetOffsetChannel>
 8002780:	4603      	mov	r3, r0
 8002782:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10a      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x34c>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2101      	movs	r1, #1
 8002790:	4618      	mov	r0, r3
 8002792:	f7fe ffe7 	bl	8001764 <LL_ADC_GetOffsetChannel>
 8002796:	4603      	mov	r3, r0
 8002798:	0e9b      	lsrs	r3, r3, #26
 800279a:	f003 021f 	and.w	r2, r3, #31
 800279e:	e01e      	b.n	80027de <HAL_ADC_ConfigChannel+0x38a>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2101      	movs	r1, #1
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe ffdc 	bl	8001764 <LL_ADC_GetOffsetChannel>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80027be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80027c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80027ce:	2320      	movs	r3, #32
 80027d0:	e004      	b.n	80027dc <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 80027d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d105      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x3a2>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	0e9b      	lsrs	r3, r3, #26
 80027f0:	f003 031f 	and.w	r3, r3, #31
 80027f4:	e018      	b.n	8002828 <HAL_ADC_ConfigChannel+0x3d4>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800280a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800280e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002812:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 800281a:	2320      	movs	r3, #32
 800281c:	e004      	b.n	8002828 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 800281e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	429a      	cmp	r2, r3
 800282a:	d106      	bne.n	800283a <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2200      	movs	r2, #0
 8002832:	2101      	movs	r1, #1
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff f82b 	bl	8001890 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2102      	movs	r1, #2
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe ff8f 	bl	8001764 <LL_ADC_GetOffsetChannel>
 8002846:	4603      	mov	r3, r0
 8002848:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10a      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x412>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2102      	movs	r1, #2
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe ff84 	bl	8001764 <LL_ADC_GetOffsetChannel>
 800285c:	4603      	mov	r3, r0
 800285e:	0e9b      	lsrs	r3, r3, #26
 8002860:	f003 021f 	and.w	r2, r3, #31
 8002864:	e01e      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x450>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2102      	movs	r1, #2
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe ff79 	bl	8001764 <LL_ADC_GetOffsetChannel>
 8002872:	4603      	mov	r3, r0
 8002874:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800287c:	fa93 f3a3 	rbit	r3, r3
 8002880:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002884:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002888:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800288c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8002894:	2320      	movs	r3, #32
 8002896:	e004      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8002898:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800289c:	fab3 f383 	clz	r3, r3
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	461a      	mov	r2, r3
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d105      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x468>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	0e9b      	lsrs	r3, r3, #26
 80028b6:	f003 031f 	and.w	r3, r3, #31
 80028ba:	e014      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x492>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80028ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80028d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80028d8:	2320      	movs	r3, #32
 80028da:	e004      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80028dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028e0:	fab3 f383 	clz	r3, r3
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d106      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2200      	movs	r2, #0
 80028f0:	2102      	movs	r1, #2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe ffcc 	bl	8001890 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2103      	movs	r1, #3
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe ff30 	bl	8001764 <LL_ADC_GetOffsetChannel>
 8002904:	4603      	mov	r3, r0
 8002906:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10a      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x4d0>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2103      	movs	r1, #3
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe ff25 	bl	8001764 <LL_ADC_GetOffsetChannel>
 800291a:	4603      	mov	r3, r0
 800291c:	0e9b      	lsrs	r3, r3, #26
 800291e:	f003 021f 	and.w	r2, r3, #31
 8002922:	e017      	b.n	8002954 <HAL_ADC_ConfigChannel+0x500>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2103      	movs	r1, #3
 800292a:	4618      	mov	r0, r3
 800292c:	f7fe ff1a 	bl	8001764 <LL_ADC_GetOffsetChannel>
 8002930:	4603      	mov	r3, r0
 8002932:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002934:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002936:	fa93 f3a3 	rbit	r3, r3
 800293a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800293c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800293e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002940:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8002946:	2320      	movs	r3, #32
 8002948:	e003      	b.n	8002952 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800294a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800294c:	fab3 f383 	clz	r3, r3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_ADC_ConfigChannel+0x518>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	0e9b      	lsrs	r3, r3, #26
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	e011      	b.n	8002990 <HAL_ADC_ConfigChannel+0x53c>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002974:	fa93 f3a3 	rbit	r3, r3
 8002978:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800297a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800297c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800297e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8002984:	2320      	movs	r3, #32
 8002986:	e003      	b.n	8002990 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8002988:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800298a:	fab3 f383 	clz	r3, r3
 800298e:	b2db      	uxtb	r3, r3
 8002990:	429a      	cmp	r2, r3
 8002992:	d14f      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2200      	movs	r2, #0
 800299a:	2103      	movs	r1, #3
 800299c:	4618      	mov	r0, r3
 800299e:	f7fe ff77 	bl	8001890 <LL_ADC_SetOffsetState>
 80029a2:	e047      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	069b      	lsls	r3, r3, #26
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d107      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80029c6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	069b      	lsls	r3, r3, #26
 80029d8:	429a      	cmp	r2, r3
 80029da:	d107      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80029ea:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	069b      	lsls	r3, r3, #26
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d107      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002a0e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	069b      	lsls	r3, r3, #26
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d107      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002a32:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f87b 	bl	8001b34 <LL_ADC_IsEnabled>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f040 8219 	bne.w	8002e78 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6818      	ldr	r0, [r3, #0]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	6819      	ldr	r1, [r3, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	461a      	mov	r2, r3
 8002a54:	f7fe ffc4 	bl	80019e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4aa1      	ldr	r2, [pc, #644]	@ (8002ce4 <HAL_ADC_ConfigChannel+0x890>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	f040 812e 	bne.w	8002cc0 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10b      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x638>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	0e9b      	lsrs	r3, r3, #26
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	2b09      	cmp	r3, #9
 8002a82:	bf94      	ite	ls
 8002a84:	2301      	movls	r3, #1
 8002a86:	2300      	movhi	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	e019      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x66c>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a94:	fa93 f3a3 	rbit	r3, r3
 8002a98:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002a9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002aa4:	2320      	movs	r3, #32
 8002aa6:	e003      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002aa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aaa:	fab3 f383 	clz	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	2b09      	cmp	r3, #9
 8002ab8:	bf94      	ite	ls
 8002aba:	2301      	movls	r3, #1
 8002abc:	2300      	movhi	r3, #0
 8002abe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d079      	beq.n	8002bb8 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d107      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x68c>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	0e9b      	lsrs	r3, r3, #26
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	069b      	lsls	r3, r3, #26
 8002ada:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ade:	e015      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x6b8>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ae8:	fa93 f3a3 	rbit	r3, r3
 8002aec:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002aee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002af0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8002af8:	2320      	movs	r3, #32
 8002afa:	e003      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8002afc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	3301      	adds	r3, #1
 8002b06:	069b      	lsls	r3, r3, #26
 8002b08:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d109      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x6d8>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	0e9b      	lsrs	r3, r3, #26
 8002b1e:	3301      	adds	r3, #1
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	2101      	movs	r1, #1
 8002b26:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2a:	e017      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x708>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b3c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002b3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8002b44:	2320      	movs	r3, #32
 8002b46:	e003      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8002b48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	3301      	adds	r3, #1
 8002b52:	f003 031f 	and.w	r3, r3, #31
 8002b56:	2101      	movs	r1, #1
 8002b58:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5c:	ea42 0103 	orr.w	r1, r2, r3
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10a      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x72e>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	0e9b      	lsrs	r3, r3, #26
 8002b72:	3301      	adds	r3, #1
 8002b74:	f003 021f 	and.w	r2, r3, #31
 8002b78:	4613      	mov	r3, r2
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	051b      	lsls	r3, r3, #20
 8002b80:	e018      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x760>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b8a:	fa93 f3a3 	rbit	r3, r3
 8002b8e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b92:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8002b9a:	2320      	movs	r3, #32
 8002b9c:	e003      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8002b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba0:	fab3 f383 	clz	r3, r3
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	f003 021f 	and.w	r2, r3, #31
 8002bac:	4613      	mov	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4413      	add	r3, r2
 8002bb2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bb4:	430b      	orrs	r3, r1
 8002bb6:	e07e      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d107      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x780>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	0e9b      	lsrs	r3, r3, #26
 8002bca:	3301      	adds	r3, #1
 8002bcc:	069b      	lsls	r3, r3, #26
 8002bce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bd2:	e015      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x7ac>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8002bec:	2320      	movs	r3, #32
 8002bee:	e003      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8002bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	069b      	lsls	r3, r3, #26
 8002bfc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d109      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x7cc>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	0e9b      	lsrs	r3, r3, #26
 8002c12:	3301      	adds	r3, #1
 8002c14:	f003 031f 	and.w	r3, r3, #31
 8002c18:	2101      	movs	r1, #1
 8002c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1e:	e017      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x7fc>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	fa93 f3a3 	rbit	r3, r3
 8002c2c:	61bb      	str	r3, [r7, #24]
  return result;
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8002c38:	2320      	movs	r3, #32
 8002c3a:	e003      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	fab3 f383 	clz	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	3301      	adds	r3, #1
 8002c46:	f003 031f 	and.w	r3, r3, #31
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c50:	ea42 0103 	orr.w	r1, r2, r3
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10d      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x828>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	0e9b      	lsrs	r3, r3, #26
 8002c66:	3301      	adds	r3, #1
 8002c68:	f003 021f 	and.w	r2, r3, #31
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4413      	add	r3, r2
 8002c72:	3b1e      	subs	r3, #30
 8002c74:	051b      	lsls	r3, r3, #20
 8002c76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c7a:	e01b      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x860>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	fa93 f3a3 	rbit	r3, r3
 8002c88:	60fb      	str	r3, [r7, #12]
  return result;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8002c94:	2320      	movs	r3, #32
 8002c96:	e003      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	f003 021f 	and.w	r2, r3, #31
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	4413      	add	r3, r2
 8002cac:	3b1e      	subs	r3, #30
 8002cae:	051b      	lsls	r3, r3, #20
 8002cb0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	6892      	ldr	r2, [r2, #8]
 8002cba:	4619      	mov	r1, r3
 8002cbc:	f7fe fe64 	bl	8001988 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f280 80d7 	bge.w	8002e78 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a06      	ldr	r2, [pc, #24]	@ (8002ce8 <HAL_ADC_ConfigChannel+0x894>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d004      	beq.n	8002cde <HAL_ADC_ConfigChannel+0x88a>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a04      	ldr	r2, [pc, #16]	@ (8002cec <HAL_ADC_ConfigChannel+0x898>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d10a      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x8a0>
 8002cde:	4b04      	ldr	r3, [pc, #16]	@ (8002cf0 <HAL_ADC_ConfigChannel+0x89c>)
 8002ce0:	e009      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x8a2>
 8002ce2:	bf00      	nop
 8002ce4:	47ff0000 	.word	0x47ff0000
 8002ce8:	40022000 	.word	0x40022000
 8002cec:	40022100 	.word	0x40022100
 8002cf0:	40022300 	.word	0x40022300
 8002cf4:	4b65      	ldr	r3, [pc, #404]	@ (8002e8c <HAL_ADC_ConfigChannel+0xa38>)
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fcf4 	bl	80016e4 <LL_ADC_GetCommonPathInternalCh>
 8002cfc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a62      	ldr	r2, [pc, #392]	@ (8002e90 <HAL_ADC_ConfigChannel+0xa3c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d004      	beq.n	8002d14 <HAL_ADC_ConfigChannel+0x8c0>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a61      	ldr	r2, [pc, #388]	@ (8002e94 <HAL_ADC_ConfigChannel+0xa40>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d10e      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x8de>
 8002d14:	485e      	ldr	r0, [pc, #376]	@ (8002e90 <HAL_ADC_ConfigChannel+0xa3c>)
 8002d16:	f7fe ff0d 	bl	8001b34 <LL_ADC_IsEnabled>
 8002d1a:	4604      	mov	r4, r0
 8002d1c:	485d      	ldr	r0, [pc, #372]	@ (8002e94 <HAL_ADC_ConfigChannel+0xa40>)
 8002d1e:	f7fe ff09 	bl	8001b34 <LL_ADC_IsEnabled>
 8002d22:	4603      	mov	r3, r0
 8002d24:	4323      	orrs	r3, r4
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bf0c      	ite	eq
 8002d2a:	2301      	moveq	r3, #1
 8002d2c:	2300      	movne	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	e008      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x8f0>
 8002d32:	4859      	ldr	r0, [pc, #356]	@ (8002e98 <HAL_ADC_ConfigChannel+0xa44>)
 8002d34:	f7fe fefe 	bl	8001b34 <LL_ADC_IsEnabled>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	bf0c      	ite	eq
 8002d3e:	2301      	moveq	r3, #1
 8002d40:	2300      	movne	r3, #0
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8084 	beq.w	8002e52 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a53      	ldr	r2, [pc, #332]	@ (8002e9c <HAL_ADC_ConfigChannel+0xa48>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d132      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x966>
 8002d54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d12c      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a4c      	ldr	r2, [pc, #304]	@ (8002e98 <HAL_ADC_ConfigChannel+0xa44>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	f040 8086 	bne.w	8002e78 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a47      	ldr	r2, [pc, #284]	@ (8002e90 <HAL_ADC_ConfigChannel+0xa3c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d004      	beq.n	8002d80 <HAL_ADC_ConfigChannel+0x92c>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a46      	ldr	r2, [pc, #280]	@ (8002e94 <HAL_ADC_ConfigChannel+0xa40>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d101      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x930>
 8002d80:	4a47      	ldr	r2, [pc, #284]	@ (8002ea0 <HAL_ADC_ConfigChannel+0xa4c>)
 8002d82:	e000      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x932>
 8002d84:	4a41      	ldr	r2, [pc, #260]	@ (8002e8c <HAL_ADC_ConfigChannel+0xa38>)
 8002d86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d8a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4610      	mov	r0, r2
 8002d92:	f7fe fc94 	bl	80016be <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d96:	4b43      	ldr	r3, [pc, #268]	@ (8002ea4 <HAL_ADC_ConfigChannel+0xa50>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	099b      	lsrs	r3, r3, #6
 8002d9c:	4a42      	ldr	r2, [pc, #264]	@ (8002ea8 <HAL_ADC_ConfigChannel+0xa54>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	099b      	lsrs	r3, r3, #6
 8002da4:	3301      	adds	r3, #1
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002daa:	e002      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f9      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002db8:	e05e      	b.n	8002e78 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a3b      	ldr	r2, [pc, #236]	@ (8002eac <HAL_ADC_ConfigChannel+0xa58>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d120      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x9b2>
 8002dc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002dc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d11a      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a30      	ldr	r2, [pc, #192]	@ (8002e98 <HAL_ADC_ConfigChannel+0xa44>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d14e      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a2c      	ldr	r2, [pc, #176]	@ (8002e90 <HAL_ADC_ConfigChannel+0xa3c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d004      	beq.n	8002dee <HAL_ADC_ConfigChannel+0x99a>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a2a      	ldr	r2, [pc, #168]	@ (8002e94 <HAL_ADC_ConfigChannel+0xa40>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x99e>
 8002dee:	4a2c      	ldr	r2, [pc, #176]	@ (8002ea0 <HAL_ADC_ConfigChannel+0xa4c>)
 8002df0:	e000      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x9a0>
 8002df2:	4a26      	ldr	r2, [pc, #152]	@ (8002e8c <HAL_ADC_ConfigChannel+0xa38>)
 8002df4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002df8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4610      	mov	r0, r2
 8002e00:	f7fe fc5d 	bl	80016be <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e04:	e038      	b.n	8002e78 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a29      	ldr	r2, [pc, #164]	@ (8002eb0 <HAL_ADC_ConfigChannel+0xa5c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d133      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0xa24>
 8002e10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d12d      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1d      	ldr	r2, [pc, #116]	@ (8002e98 <HAL_ADC_ConfigChannel+0xa44>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d128      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a19      	ldr	r2, [pc, #100]	@ (8002e90 <HAL_ADC_ConfigChannel+0xa3c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d004      	beq.n	8002e3a <HAL_ADC_ConfigChannel+0x9e6>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a17      	ldr	r2, [pc, #92]	@ (8002e94 <HAL_ADC_ConfigChannel+0xa40>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d101      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x9ea>
 8002e3a:	4a19      	ldr	r2, [pc, #100]	@ (8002ea0 <HAL_ADC_ConfigChannel+0xa4c>)
 8002e3c:	e000      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x9ec>
 8002e3e:	4a13      	ldr	r2, [pc, #76]	@ (8002e8c <HAL_ADC_ConfigChannel+0xa38>)
 8002e40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	f7fe fc37 	bl	80016be <LL_ADC_SetCommonPathInternalCh>
 8002e50:	e012      	b.n	8002e78 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e56:	f043 0220 	orr.w	r2, r3, #32
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8002e64:	e008      	b.n	8002e78 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e6a:	f043 0220 	orr.w	r2, r3, #32
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002e80:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	37e4      	adds	r7, #228	@ 0xe4
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd90      	pop	{r4, r7, pc}
 8002e8c:	58026300 	.word	0x58026300
 8002e90:	40022000 	.word	0x40022000
 8002e94:	40022100 	.word	0x40022100
 8002e98:	58026000 	.word	0x58026000
 8002e9c:	c7520000 	.word	0xc7520000
 8002ea0:	40022300 	.word	0x40022300
 8002ea4:	24000000 	.word	0x24000000
 8002ea8:	053e2d63 	.word	0x053e2d63
 8002eac:	c3210000 	.word	0xc3210000
 8002eb0:	cb840000 	.word	0xcb840000

08002eb4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a6c      	ldr	r2, [pc, #432]	@ (8003074 <ADC_ConfigureBoostMode+0x1c0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d004      	beq.n	8002ed0 <ADC_ConfigureBoostMode+0x1c>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a6b      	ldr	r2, [pc, #428]	@ (8003078 <ADC_ConfigureBoostMode+0x1c4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d109      	bne.n	8002ee4 <ADC_ConfigureBoostMode+0x30>
 8002ed0:	4b6a      	ldr	r3, [pc, #424]	@ (800307c <ADC_ConfigureBoostMode+0x1c8>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf14      	ite	ne
 8002edc:	2301      	movne	r3, #1
 8002ede:	2300      	moveq	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	e008      	b.n	8002ef6 <ADC_ConfigureBoostMode+0x42>
 8002ee4:	4b66      	ldr	r3, [pc, #408]	@ (8003080 <ADC_ConfigureBoostMode+0x1cc>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf14      	ite	ne
 8002ef0:	2301      	movne	r3, #1
 8002ef2:	2300      	moveq	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d01c      	beq.n	8002f34 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002efa:	f004 fad5 	bl	80074a8 <HAL_RCC_GetHCLKFreq>
 8002efe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f08:	d010      	beq.n	8002f2c <ADC_ConfigureBoostMode+0x78>
 8002f0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f0e:	d873      	bhi.n	8002ff8 <ADC_ConfigureBoostMode+0x144>
 8002f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f14:	d002      	beq.n	8002f1c <ADC_ConfigureBoostMode+0x68>
 8002f16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f1a:	d16d      	bne.n	8002ff8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	0c1b      	lsrs	r3, r3, #16
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f28:	60fb      	str	r3, [r7, #12]
        break;
 8002f2a:	e068      	b.n	8002ffe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	089b      	lsrs	r3, r3, #2
 8002f30:	60fb      	str	r3, [r7, #12]
        break;
 8002f32:	e064      	b.n	8002ffe <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002f34:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002f38:	f04f 0100 	mov.w	r1, #0
 8002f3c:	f005 fc9a 	bl	8008874 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f40:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002f4a:	d051      	beq.n	8002ff0 <ADC_ConfigureBoostMode+0x13c>
 8002f4c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002f50:	d854      	bhi.n	8002ffc <ADC_ConfigureBoostMode+0x148>
 8002f52:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002f56:	d047      	beq.n	8002fe8 <ADC_ConfigureBoostMode+0x134>
 8002f58:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002f5c:	d84e      	bhi.n	8002ffc <ADC_ConfigureBoostMode+0x148>
 8002f5e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002f62:	d03d      	beq.n	8002fe0 <ADC_ConfigureBoostMode+0x12c>
 8002f64:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002f68:	d848      	bhi.n	8002ffc <ADC_ConfigureBoostMode+0x148>
 8002f6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f6e:	d033      	beq.n	8002fd8 <ADC_ConfigureBoostMode+0x124>
 8002f70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f74:	d842      	bhi.n	8002ffc <ADC_ConfigureBoostMode+0x148>
 8002f76:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002f7a:	d029      	beq.n	8002fd0 <ADC_ConfigureBoostMode+0x11c>
 8002f7c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002f80:	d83c      	bhi.n	8002ffc <ADC_ConfigureBoostMode+0x148>
 8002f82:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002f86:	d01a      	beq.n	8002fbe <ADC_ConfigureBoostMode+0x10a>
 8002f88:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002f8c:	d836      	bhi.n	8002ffc <ADC_ConfigureBoostMode+0x148>
 8002f8e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002f92:	d014      	beq.n	8002fbe <ADC_ConfigureBoostMode+0x10a>
 8002f94:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002f98:	d830      	bhi.n	8002ffc <ADC_ConfigureBoostMode+0x148>
 8002f9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f9e:	d00e      	beq.n	8002fbe <ADC_ConfigureBoostMode+0x10a>
 8002fa0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fa4:	d82a      	bhi.n	8002ffc <ADC_ConfigureBoostMode+0x148>
 8002fa6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002faa:	d008      	beq.n	8002fbe <ADC_ConfigureBoostMode+0x10a>
 8002fac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002fb0:	d824      	bhi.n	8002ffc <ADC_ConfigureBoostMode+0x148>
 8002fb2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002fb6:	d002      	beq.n	8002fbe <ADC_ConfigureBoostMode+0x10a>
 8002fb8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002fbc:	d11e      	bne.n	8002ffc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	0c9b      	lsrs	r3, r3, #18
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fcc:	60fb      	str	r3, [r7, #12]
        break;
 8002fce:	e016      	b.n	8002ffe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	091b      	lsrs	r3, r3, #4
 8002fd4:	60fb      	str	r3, [r7, #12]
        break;
 8002fd6:	e012      	b.n	8002ffe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	60fb      	str	r3, [r7, #12]
        break;
 8002fde:	e00e      	b.n	8002ffe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	099b      	lsrs	r3, r3, #6
 8002fe4:	60fb      	str	r3, [r7, #12]
        break;
 8002fe6:	e00a      	b.n	8002ffe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	09db      	lsrs	r3, r3, #7
 8002fec:	60fb      	str	r3, [r7, #12]
        break;
 8002fee:	e006      	b.n	8002ffe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	0a1b      	lsrs	r3, r3, #8
 8002ff4:	60fb      	str	r3, [r7, #12]
        break;
 8002ff6:	e002      	b.n	8002ffe <ADC_ConfigureBoostMode+0x14a>
        break;
 8002ff8:	bf00      	nop
 8002ffa:	e000      	b.n	8002ffe <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002ffc:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	085b      	lsrs	r3, r3, #1
 8003002:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4a1f      	ldr	r2, [pc, #124]	@ (8003084 <ADC_ConfigureBoostMode+0x1d0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d808      	bhi.n	800301e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800301a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800301c:	e025      	b.n	800306a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4a19      	ldr	r2, [pc, #100]	@ (8003088 <ADC_ConfigureBoostMode+0x1d4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d80a      	bhi.n	800303c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003038:	609a      	str	r2, [r3, #8]
}
 800303a:	e016      	b.n	800306a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4a13      	ldr	r2, [pc, #76]	@ (800308c <ADC_ConfigureBoostMode+0x1d8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d80a      	bhi.n	800305a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003056:	609a      	str	r2, [r3, #8]
}
 8003058:	e007      	b.n	800306a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003068:	609a      	str	r2, [r3, #8]
}
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40022000 	.word	0x40022000
 8003078:	40022100 	.word	0x40022100
 800307c:	40022300 	.word	0x40022300
 8003080:	58026300 	.word	0x58026300
 8003084:	005f5e10 	.word	0x005f5e10
 8003088:	00bebc20 	.word	0x00bebc20
 800308c:	017d7840 	.word	0x017d7840

08003090 <LL_ADC_IsEnabled>:
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <LL_ADC_IsEnabled+0x18>
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <LL_ADC_IsEnabled+0x1a>
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <LL_ADC_REG_IsConversionOngoing>:
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d101      	bne.n	80030ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003140:	b590      	push	{r4, r7, lr}
 8003142:	b0a3      	sub	sp, #140	@ 0x8c
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003156:	2b01      	cmp	r3, #1
 8003158:	d101      	bne.n	800315e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800315a:	2302      	movs	r3, #2
 800315c:	e0c1      	b.n	80032e2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003166:	2300      	movs	r3, #0
 8003168:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800316a:	2300      	movs	r3, #0
 800316c:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a5e      	ldr	r2, [pc, #376]	@ (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d102      	bne.n	800317e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003178:	4b5d      	ldr	r3, [pc, #372]	@ (80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	e001      	b.n	8003182 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10b      	bne.n	80031a0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800318c:	f043 0220 	orr.w	r2, r3, #32
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0a0      	b.n	80032e2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff ff87 	bl	80030b6 <LL_ADC_REG_IsConversionOngoing>
 80031a8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ff80 	bl	80030b6 <LL_ADC_REG_IsConversionOngoing>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f040 8081 	bne.w	80032c0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80031be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d17c      	bne.n	80032c0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a48      	ldr	r2, [pc, #288]	@ (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d004      	beq.n	80031da <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a46      	ldr	r2, [pc, #280]	@ (80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d101      	bne.n	80031de <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80031da:	4b46      	ldr	r3, [pc, #280]	@ (80032f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80031dc:	e000      	b.n	80031e0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80031de:	4b46      	ldr	r3, [pc, #280]	@ (80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80031e0:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d039      	beq.n	800325e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80031ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031fa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a3a      	ldr	r2, [pc, #232]	@ (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d004      	beq.n	8003210 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a39      	ldr	r2, [pc, #228]	@ (80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d10e      	bne.n	800322e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003210:	4836      	ldr	r0, [pc, #216]	@ (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003212:	f7ff ff3d 	bl	8003090 <LL_ADC_IsEnabled>
 8003216:	4604      	mov	r4, r0
 8003218:	4835      	ldr	r0, [pc, #212]	@ (80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800321a:	f7ff ff39 	bl	8003090 <LL_ADC_IsEnabled>
 800321e:	4603      	mov	r3, r0
 8003220:	4323      	orrs	r3, r4
 8003222:	2b00      	cmp	r3, #0
 8003224:	bf0c      	ite	eq
 8003226:	2301      	moveq	r3, #1
 8003228:	2300      	movne	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	e008      	b.n	8003240 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800322e:	4833      	ldr	r0, [pc, #204]	@ (80032fc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003230:	f7ff ff2e 	bl	8003090 <LL_ADC_IsEnabled>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	bf0c      	ite	eq
 800323a:	2301      	moveq	r3, #1
 800323c:	2300      	movne	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d047      	beq.n	80032d4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003244:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	4b2d      	ldr	r3, [pc, #180]	@ (8003300 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800324a:	4013      	ands	r3, r2
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	6811      	ldr	r1, [r2, #0]
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	6892      	ldr	r2, [r2, #8]
 8003254:	430a      	orrs	r2, r1
 8003256:	431a      	orrs	r2, r3
 8003258:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800325a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800325c:	e03a      	b.n	80032d4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800325e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003266:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003268:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a1f      	ldr	r2, [pc, #124]	@ (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d004      	beq.n	800327e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a1d      	ldr	r2, [pc, #116]	@ (80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d10e      	bne.n	800329c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800327e:	481b      	ldr	r0, [pc, #108]	@ (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003280:	f7ff ff06 	bl	8003090 <LL_ADC_IsEnabled>
 8003284:	4604      	mov	r4, r0
 8003286:	481a      	ldr	r0, [pc, #104]	@ (80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003288:	f7ff ff02 	bl	8003090 <LL_ADC_IsEnabled>
 800328c:	4603      	mov	r3, r0
 800328e:	4323      	orrs	r3, r4
 8003290:	2b00      	cmp	r3, #0
 8003292:	bf0c      	ite	eq
 8003294:	2301      	moveq	r3, #1
 8003296:	2300      	movne	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	e008      	b.n	80032ae <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800329c:	4817      	ldr	r0, [pc, #92]	@ (80032fc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800329e:	f7ff fef7 	bl	8003090 <LL_ADC_IsEnabled>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	bf0c      	ite	eq
 80032a8:	2301      	moveq	r3, #1
 80032aa:	2300      	movne	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d010      	beq.n	80032d4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	4b12      	ldr	r3, [pc, #72]	@ (8003300 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80032bc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032be:	e009      	b.n	80032d4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c4:	f043 0220 	orr.w	r2, r3, #32
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80032d2:	e000      	b.n	80032d6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80032de:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	378c      	adds	r7, #140	@ 0x8c
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd90      	pop	{r4, r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40022000 	.word	0x40022000
 80032f0:	40022100 	.word	0x40022100
 80032f4:	40022300 	.word	0x40022300
 80032f8:	58026300 	.word	0x58026300
 80032fc:	58026000 	.word	0x58026000
 8003300:	fffff0e0 	.word	0xfffff0e0

08003304 <__NVIC_SetPriorityGrouping>:
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003314:	4b0b      	ldr	r3, [pc, #44]	@ (8003344 <__NVIC_SetPriorityGrouping+0x40>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003320:	4013      	ands	r3, r2
 8003322:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <__NVIC_SetPriorityGrouping+0x44>)
 800332e:	4313      	orrs	r3, r2
 8003330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003332:	4a04      	ldr	r2, [pc, #16]	@ (8003344 <__NVIC_SetPriorityGrouping+0x40>)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	60d3      	str	r3, [r2, #12]
}
 8003338:	bf00      	nop
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	e000ed00 	.word	0xe000ed00
 8003348:	05fa0000 	.word	0x05fa0000

0800334c <__NVIC_GetPriorityGrouping>:
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003350:	4b04      	ldr	r3, [pc, #16]	@ (8003364 <__NVIC_GetPriorityGrouping+0x18>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	0a1b      	lsrs	r3, r3, #8
 8003356:	f003 0307 	and.w	r3, r3, #7
}
 800335a:	4618      	mov	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	e000ed00 	.word	0xe000ed00

08003368 <__NVIC_EnableIRQ>:
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003372:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003376:	2b00      	cmp	r3, #0
 8003378:	db0b      	blt.n	8003392 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800337a:	88fb      	ldrh	r3, [r7, #6]
 800337c:	f003 021f 	and.w	r2, r3, #31
 8003380:	4907      	ldr	r1, [pc, #28]	@ (80033a0 <__NVIC_EnableIRQ+0x38>)
 8003382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003386:	095b      	lsrs	r3, r3, #5
 8003388:	2001      	movs	r0, #1
 800338a:	fa00 f202 	lsl.w	r2, r0, r2
 800338e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	e000e100 	.word	0xe000e100

080033a4 <__NVIC_SetPriority>:
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	6039      	str	r1, [r7, #0]
 80033ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	db0a      	blt.n	80033ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	490c      	ldr	r1, [pc, #48]	@ (80033f0 <__NVIC_SetPriority+0x4c>)
 80033be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033c2:	0112      	lsls	r2, r2, #4
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	440b      	add	r3, r1
 80033c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80033cc:	e00a      	b.n	80033e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	4908      	ldr	r1, [pc, #32]	@ (80033f4 <__NVIC_SetPriority+0x50>)
 80033d4:	88fb      	ldrh	r3, [r7, #6]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	3b04      	subs	r3, #4
 80033dc:	0112      	lsls	r2, r2, #4
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	440b      	add	r3, r1
 80033e2:	761a      	strb	r2, [r3, #24]
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	e000e100 	.word	0xe000e100
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <NVIC_EncodePriority>:
{
 80033f8:	b480      	push	{r7}
 80033fa:	b089      	sub	sp, #36	@ 0x24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f1c3 0307 	rsb	r3, r3, #7
 8003412:	2b04      	cmp	r3, #4
 8003414:	bf28      	it	cs
 8003416:	2304      	movcs	r3, #4
 8003418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	3304      	adds	r3, #4
 800341e:	2b06      	cmp	r3, #6
 8003420:	d902      	bls.n	8003428 <NVIC_EncodePriority+0x30>
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3b03      	subs	r3, #3
 8003426:	e000      	b.n	800342a <NVIC_EncodePriority+0x32>
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800342c:	f04f 32ff 	mov.w	r2, #4294967295
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43da      	mvns	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	401a      	ands	r2, r3
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003440:	f04f 31ff 	mov.w	r1, #4294967295
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	fa01 f303 	lsl.w	r3, r1, r3
 800344a:	43d9      	mvns	r1, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003450:	4313      	orrs	r3, r2
}
 8003452:	4618      	mov	r0, r3
 8003454:	3724      	adds	r7, #36	@ 0x24
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
	...

08003460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3b01      	subs	r3, #1
 800346c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003470:	d301      	bcc.n	8003476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003472:	2301      	movs	r3, #1
 8003474:	e00f      	b.n	8003496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003476:	4a0a      	ldr	r2, [pc, #40]	@ (80034a0 <SysTick_Config+0x40>)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3b01      	subs	r3, #1
 800347c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800347e:	210f      	movs	r1, #15
 8003480:	f04f 30ff 	mov.w	r0, #4294967295
 8003484:	f7ff ff8e 	bl	80033a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003488:	4b05      	ldr	r3, [pc, #20]	@ (80034a0 <SysTick_Config+0x40>)
 800348a:	2200      	movs	r2, #0
 800348c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800348e:	4b04      	ldr	r3, [pc, #16]	@ (80034a0 <SysTick_Config+0x40>)
 8003490:	2207      	movs	r2, #7
 8003492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	e000e010 	.word	0xe000e010

080034a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff ff29 	bl	8003304 <__NVIC_SetPriorityGrouping>
}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b086      	sub	sp, #24
 80034be:	af00      	add	r7, sp, #0
 80034c0:	4603      	mov	r3, r0
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
 80034c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034c8:	f7ff ff40 	bl	800334c <__NVIC_GetPriorityGrouping>
 80034cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	68b9      	ldr	r1, [r7, #8]
 80034d2:	6978      	ldr	r0, [r7, #20]
 80034d4:	f7ff ff90 	bl	80033f8 <NVIC_EncodePriority>
 80034d8:	4602      	mov	r2, r0
 80034da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff ff5f 	bl	80033a4 <__NVIC_SetPriority>
}
 80034e6:	bf00      	nop
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	4603      	mov	r3, r0
 80034f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff ff33 	bl	8003368 <__NVIC_EnableIRQ>
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff ffa4 	bl	8003460 <SysTick_Config>
 8003518:	4603      	mov	r3, r0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
	...

08003524 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003528:	f3bf 8f5f 	dmb	sy
}
 800352c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800352e:	4b07      	ldr	r3, [pc, #28]	@ (800354c <HAL_MPU_Disable+0x28>)
 8003530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003532:	4a06      	ldr	r2, [pc, #24]	@ (800354c <HAL_MPU_Disable+0x28>)
 8003534:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003538:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800353a:	4b05      	ldr	r3, [pc, #20]	@ (8003550 <HAL_MPU_Disable+0x2c>)
 800353c:	2200      	movs	r2, #0
 800353e:	605a      	str	r2, [r3, #4]
}
 8003540:	bf00      	nop
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	e000ed00 	.word	0xe000ed00
 8003550:	e000ed90 	.word	0xe000ed90

08003554 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800355c:	4a0b      	ldr	r2, [pc, #44]	@ (800358c <HAL_MPU_Enable+0x38>)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003566:	4b0a      	ldr	r3, [pc, #40]	@ (8003590 <HAL_MPU_Enable+0x3c>)
 8003568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356a:	4a09      	ldr	r2, [pc, #36]	@ (8003590 <HAL_MPU_Enable+0x3c>)
 800356c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003570:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003572:	f3bf 8f4f 	dsb	sy
}
 8003576:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003578:	f3bf 8f6f 	isb	sy
}
 800357c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	e000ed90 	.word	0xe000ed90
 8003590:	e000ed00 	.word	0xe000ed00

08003594 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	785a      	ldrb	r2, [r3, #1]
 80035a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003610 <HAL_MPU_ConfigRegion+0x7c>)
 80035a2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80035a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003610 <HAL_MPU_ConfigRegion+0x7c>)
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	4a19      	ldr	r2, [pc, #100]	@ (8003610 <HAL_MPU_ConfigRegion+0x7c>)
 80035aa:	f023 0301 	bic.w	r3, r3, #1
 80035ae:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80035b0:	4a17      	ldr	r2, [pc, #92]	@ (8003610 <HAL_MPU_ConfigRegion+0x7c>)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	7b1b      	ldrb	r3, [r3, #12]
 80035bc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	7adb      	ldrb	r3, [r3, #11]
 80035c2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	7a9b      	ldrb	r3, [r3, #10]
 80035ca:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80035cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	7b5b      	ldrb	r3, [r3, #13]
 80035d2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80035d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	7b9b      	ldrb	r3, [r3, #14]
 80035da:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80035dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	7bdb      	ldrb	r3, [r3, #15]
 80035e2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80035e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	7a5b      	ldrb	r3, [r3, #9]
 80035ea:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80035ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	7a1b      	ldrb	r3, [r3, #8]
 80035f2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80035f4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	7812      	ldrb	r2, [r2, #0]
 80035fa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035fc:	4a04      	ldr	r2, [pc, #16]	@ (8003610 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80035fe:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003600:	6113      	str	r3, [r2, #16]
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	e000ed90 	.word	0xe000ed90

08003614 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800361c:	f7fe f830 	bl	8001680 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e312      	b.n	8003c52 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a66      	ldr	r2, [pc, #408]	@ (80037cc <HAL_DMA_Init+0x1b8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d04a      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a65      	ldr	r2, [pc, #404]	@ (80037d0 <HAL_DMA_Init+0x1bc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d045      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a63      	ldr	r2, [pc, #396]	@ (80037d4 <HAL_DMA_Init+0x1c0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d040      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a62      	ldr	r2, [pc, #392]	@ (80037d8 <HAL_DMA_Init+0x1c4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d03b      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a60      	ldr	r2, [pc, #384]	@ (80037dc <HAL_DMA_Init+0x1c8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d036      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a5f      	ldr	r2, [pc, #380]	@ (80037e0 <HAL_DMA_Init+0x1cc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d031      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a5d      	ldr	r2, [pc, #372]	@ (80037e4 <HAL_DMA_Init+0x1d0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d02c      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a5c      	ldr	r2, [pc, #368]	@ (80037e8 <HAL_DMA_Init+0x1d4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d027      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a5a      	ldr	r2, [pc, #360]	@ (80037ec <HAL_DMA_Init+0x1d8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d022      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a59      	ldr	r2, [pc, #356]	@ (80037f0 <HAL_DMA_Init+0x1dc>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d01d      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a57      	ldr	r2, [pc, #348]	@ (80037f4 <HAL_DMA_Init+0x1e0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d018      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a56      	ldr	r2, [pc, #344]	@ (80037f8 <HAL_DMA_Init+0x1e4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d013      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a54      	ldr	r2, [pc, #336]	@ (80037fc <HAL_DMA_Init+0x1e8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00e      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a53      	ldr	r2, [pc, #332]	@ (8003800 <HAL_DMA_Init+0x1ec>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d009      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a51      	ldr	r2, [pc, #324]	@ (8003804 <HAL_DMA_Init+0x1f0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d004      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a50      	ldr	r2, [pc, #320]	@ (8003808 <HAL_DMA_Init+0x1f4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_DMA_Init+0xbc>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <HAL_DMA_Init+0xbe>
 80036d0:	2300      	movs	r3, #0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 813c 	beq.w	8003950 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a37      	ldr	r2, [pc, #220]	@ (80037cc <HAL_DMA_Init+0x1b8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d04a      	beq.n	8003788 <HAL_DMA_Init+0x174>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a36      	ldr	r2, [pc, #216]	@ (80037d0 <HAL_DMA_Init+0x1bc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d045      	beq.n	8003788 <HAL_DMA_Init+0x174>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a34      	ldr	r2, [pc, #208]	@ (80037d4 <HAL_DMA_Init+0x1c0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d040      	beq.n	8003788 <HAL_DMA_Init+0x174>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a33      	ldr	r2, [pc, #204]	@ (80037d8 <HAL_DMA_Init+0x1c4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d03b      	beq.n	8003788 <HAL_DMA_Init+0x174>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a31      	ldr	r2, [pc, #196]	@ (80037dc <HAL_DMA_Init+0x1c8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d036      	beq.n	8003788 <HAL_DMA_Init+0x174>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a30      	ldr	r2, [pc, #192]	@ (80037e0 <HAL_DMA_Init+0x1cc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d031      	beq.n	8003788 <HAL_DMA_Init+0x174>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a2e      	ldr	r2, [pc, #184]	@ (80037e4 <HAL_DMA_Init+0x1d0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d02c      	beq.n	8003788 <HAL_DMA_Init+0x174>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a2d      	ldr	r2, [pc, #180]	@ (80037e8 <HAL_DMA_Init+0x1d4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d027      	beq.n	8003788 <HAL_DMA_Init+0x174>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a2b      	ldr	r2, [pc, #172]	@ (80037ec <HAL_DMA_Init+0x1d8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d022      	beq.n	8003788 <HAL_DMA_Init+0x174>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a2a      	ldr	r2, [pc, #168]	@ (80037f0 <HAL_DMA_Init+0x1dc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d01d      	beq.n	8003788 <HAL_DMA_Init+0x174>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a28      	ldr	r2, [pc, #160]	@ (80037f4 <HAL_DMA_Init+0x1e0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d018      	beq.n	8003788 <HAL_DMA_Init+0x174>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a27      	ldr	r2, [pc, #156]	@ (80037f8 <HAL_DMA_Init+0x1e4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <HAL_DMA_Init+0x174>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a25      	ldr	r2, [pc, #148]	@ (80037fc <HAL_DMA_Init+0x1e8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00e      	beq.n	8003788 <HAL_DMA_Init+0x174>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a24      	ldr	r2, [pc, #144]	@ (8003800 <HAL_DMA_Init+0x1ec>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d009      	beq.n	8003788 <HAL_DMA_Init+0x174>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a22      	ldr	r2, [pc, #136]	@ (8003804 <HAL_DMA_Init+0x1f0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <HAL_DMA_Init+0x174>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a21      	ldr	r2, [pc, #132]	@ (8003808 <HAL_DMA_Init+0x1f4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d108      	bne.n	800379a <HAL_DMA_Init+0x186>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0201 	bic.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	e007      	b.n	80037aa <HAL_DMA_Init+0x196>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0201 	bic.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037aa:	e02f      	b.n	800380c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ac:	f7fd ff68 	bl	8001680 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b05      	cmp	r3, #5
 80037b8:	d928      	bls.n	800380c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2203      	movs	r2, #3
 80037c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e242      	b.n	8003c52 <HAL_DMA_Init+0x63e>
 80037cc:	40020010 	.word	0x40020010
 80037d0:	40020028 	.word	0x40020028
 80037d4:	40020040 	.word	0x40020040
 80037d8:	40020058 	.word	0x40020058
 80037dc:	40020070 	.word	0x40020070
 80037e0:	40020088 	.word	0x40020088
 80037e4:	400200a0 	.word	0x400200a0
 80037e8:	400200b8 	.word	0x400200b8
 80037ec:	40020410 	.word	0x40020410
 80037f0:	40020428 	.word	0x40020428
 80037f4:	40020440 	.word	0x40020440
 80037f8:	40020458 	.word	0x40020458
 80037fc:	40020470 	.word	0x40020470
 8003800:	40020488 	.word	0x40020488
 8003804:	400204a0 	.word	0x400204a0
 8003808:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1c8      	bne.n	80037ac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4b83      	ldr	r3, [pc, #524]	@ (8003a34 <HAL_DMA_Init+0x420>)
 8003826:	4013      	ands	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003832:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800383e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800384a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385c:	2b04      	cmp	r3, #4
 800385e:	d107      	bne.n	8003870 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003868:	4313      	orrs	r3, r2
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b28      	cmp	r3, #40	@ 0x28
 8003876:	d903      	bls.n	8003880 <HAL_DMA_Init+0x26c>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b2e      	cmp	r3, #46	@ 0x2e
 800387e:	d91f      	bls.n	80038c0 <HAL_DMA_Init+0x2ac>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b3e      	cmp	r3, #62	@ 0x3e
 8003886:	d903      	bls.n	8003890 <HAL_DMA_Init+0x27c>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b42      	cmp	r3, #66	@ 0x42
 800388e:	d917      	bls.n	80038c0 <HAL_DMA_Init+0x2ac>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b46      	cmp	r3, #70	@ 0x46
 8003896:	d903      	bls.n	80038a0 <HAL_DMA_Init+0x28c>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b48      	cmp	r3, #72	@ 0x48
 800389e:	d90f      	bls.n	80038c0 <HAL_DMA_Init+0x2ac>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b4e      	cmp	r3, #78	@ 0x4e
 80038a6:	d903      	bls.n	80038b0 <HAL_DMA_Init+0x29c>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b52      	cmp	r3, #82	@ 0x52
 80038ae:	d907      	bls.n	80038c0 <HAL_DMA_Init+0x2ac>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b73      	cmp	r3, #115	@ 0x73
 80038b6:	d905      	bls.n	80038c4 <HAL_DMA_Init+0x2b0>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b77      	cmp	r3, #119	@ 0x77
 80038be:	d801      	bhi.n	80038c4 <HAL_DMA_Init+0x2b0>
 80038c0:	2301      	movs	r3, #1
 80038c2:	e000      	b.n	80038c6 <HAL_DMA_Init+0x2b2>
 80038c4:	2300      	movs	r3, #0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038d0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f023 0307 	bic.w	r3, r3, #7
 80038e8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d117      	bne.n	800392c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	4313      	orrs	r3, r2
 8003904:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00e      	beq.n	800392c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f002 fb3a 	bl	8005f88 <DMA_CheckFifoParam>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d008      	beq.n	800392c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2240      	movs	r2, #64	@ 0x40
 800391e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e192      	b.n	8003c52 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f002 fa75 	bl	8005e24 <DMA_CalcBaseAndBitshift>
 800393a:	4603      	mov	r3, r0
 800393c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003942:	f003 031f 	and.w	r3, r3, #31
 8003946:	223f      	movs	r2, #63	@ 0x3f
 8003948:	409a      	lsls	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	609a      	str	r2, [r3, #8]
 800394e:	e0c8      	b.n	8003ae2 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a38      	ldr	r2, [pc, #224]	@ (8003a38 <HAL_DMA_Init+0x424>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d022      	beq.n	80039a0 <HAL_DMA_Init+0x38c>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a37      	ldr	r2, [pc, #220]	@ (8003a3c <HAL_DMA_Init+0x428>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d01d      	beq.n	80039a0 <HAL_DMA_Init+0x38c>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a35      	ldr	r2, [pc, #212]	@ (8003a40 <HAL_DMA_Init+0x42c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d018      	beq.n	80039a0 <HAL_DMA_Init+0x38c>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a34      	ldr	r2, [pc, #208]	@ (8003a44 <HAL_DMA_Init+0x430>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d013      	beq.n	80039a0 <HAL_DMA_Init+0x38c>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a32      	ldr	r2, [pc, #200]	@ (8003a48 <HAL_DMA_Init+0x434>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00e      	beq.n	80039a0 <HAL_DMA_Init+0x38c>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a31      	ldr	r2, [pc, #196]	@ (8003a4c <HAL_DMA_Init+0x438>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d009      	beq.n	80039a0 <HAL_DMA_Init+0x38c>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a2f      	ldr	r2, [pc, #188]	@ (8003a50 <HAL_DMA_Init+0x43c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d004      	beq.n	80039a0 <HAL_DMA_Init+0x38c>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a2e      	ldr	r2, [pc, #184]	@ (8003a54 <HAL_DMA_Init+0x440>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d101      	bne.n	80039a4 <HAL_DMA_Init+0x390>
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <HAL_DMA_Init+0x392>
 80039a4:	2300      	movs	r3, #0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 8092 	beq.w	8003ad0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a21      	ldr	r2, [pc, #132]	@ (8003a38 <HAL_DMA_Init+0x424>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d021      	beq.n	80039fa <HAL_DMA_Init+0x3e6>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a20      	ldr	r2, [pc, #128]	@ (8003a3c <HAL_DMA_Init+0x428>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d01c      	beq.n	80039fa <HAL_DMA_Init+0x3e6>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a1e      	ldr	r2, [pc, #120]	@ (8003a40 <HAL_DMA_Init+0x42c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d017      	beq.n	80039fa <HAL_DMA_Init+0x3e6>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003a44 <HAL_DMA_Init+0x430>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d012      	beq.n	80039fa <HAL_DMA_Init+0x3e6>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003a48 <HAL_DMA_Init+0x434>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d00d      	beq.n	80039fa <HAL_DMA_Init+0x3e6>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a1a      	ldr	r2, [pc, #104]	@ (8003a4c <HAL_DMA_Init+0x438>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d008      	beq.n	80039fa <HAL_DMA_Init+0x3e6>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a18      	ldr	r2, [pc, #96]	@ (8003a50 <HAL_DMA_Init+0x43c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d003      	beq.n	80039fa <HAL_DMA_Init+0x3e6>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a17      	ldr	r2, [pc, #92]	@ (8003a54 <HAL_DMA_Init+0x440>)
 80039f8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2202      	movs	r2, #2
 80039fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4b10      	ldr	r3, [pc, #64]	@ (8003a58 <HAL_DMA_Init+0x444>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b40      	cmp	r3, #64	@ 0x40
 8003a20:	d01c      	beq.n	8003a5c <HAL_DMA_Init+0x448>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b80      	cmp	r3, #128	@ 0x80
 8003a28:	d102      	bne.n	8003a30 <HAL_DMA_Init+0x41c>
 8003a2a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a2e:	e016      	b.n	8003a5e <HAL_DMA_Init+0x44a>
 8003a30:	2300      	movs	r3, #0
 8003a32:	e014      	b.n	8003a5e <HAL_DMA_Init+0x44a>
 8003a34:	fe10803f 	.word	0xfe10803f
 8003a38:	58025408 	.word	0x58025408
 8003a3c:	5802541c 	.word	0x5802541c
 8003a40:	58025430 	.word	0x58025430
 8003a44:	58025444 	.word	0x58025444
 8003a48:	58025458 	.word	0x58025458
 8003a4c:	5802546c 	.word	0x5802546c
 8003a50:	58025480 	.word	0x58025480
 8003a54:	58025494 	.word	0x58025494
 8003a58:	fffe000f 	.word	0xfffe000f
 8003a5c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68d2      	ldr	r2, [r2, #12]
 8003a62:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a8c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4b6e      	ldr	r3, [pc, #440]	@ (8003c5c <HAL_DMA_Init+0x648>)
 8003aa4:	4413      	add	r3, r2
 8003aa6:	4a6e      	ldr	r2, [pc, #440]	@ (8003c60 <HAL_DMA_Init+0x64c>)
 8003aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	009a      	lsls	r2, r3, #2
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f002 f9b5 	bl	8005e24 <DMA_CalcBaseAndBitshift>
 8003aba:	4603      	mov	r3, r0
 8003abc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac2:	f003 031f 	and.w	r3, r3, #31
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	605a      	str	r2, [r3, #4]
 8003ace:	e008      	b.n	8003ae2 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2240      	movs	r2, #64	@ 0x40
 8003ad4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2203      	movs	r2, #3
 8003ada:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e0b7      	b.n	8003c52 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a5f      	ldr	r2, [pc, #380]	@ (8003c64 <HAL_DMA_Init+0x650>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d072      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a5d      	ldr	r2, [pc, #372]	@ (8003c68 <HAL_DMA_Init+0x654>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d06d      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a5c      	ldr	r2, [pc, #368]	@ (8003c6c <HAL_DMA_Init+0x658>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d068      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a5a      	ldr	r2, [pc, #360]	@ (8003c70 <HAL_DMA_Init+0x65c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d063      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a59      	ldr	r2, [pc, #356]	@ (8003c74 <HAL_DMA_Init+0x660>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d05e      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a57      	ldr	r2, [pc, #348]	@ (8003c78 <HAL_DMA_Init+0x664>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d059      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a56      	ldr	r2, [pc, #344]	@ (8003c7c <HAL_DMA_Init+0x668>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d054      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a54      	ldr	r2, [pc, #336]	@ (8003c80 <HAL_DMA_Init+0x66c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d04f      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a53      	ldr	r2, [pc, #332]	@ (8003c84 <HAL_DMA_Init+0x670>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d04a      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a51      	ldr	r2, [pc, #324]	@ (8003c88 <HAL_DMA_Init+0x674>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d045      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a50      	ldr	r2, [pc, #320]	@ (8003c8c <HAL_DMA_Init+0x678>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d040      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a4e      	ldr	r2, [pc, #312]	@ (8003c90 <HAL_DMA_Init+0x67c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d03b      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a4d      	ldr	r2, [pc, #308]	@ (8003c94 <HAL_DMA_Init+0x680>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d036      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a4b      	ldr	r2, [pc, #300]	@ (8003c98 <HAL_DMA_Init+0x684>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d031      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a4a      	ldr	r2, [pc, #296]	@ (8003c9c <HAL_DMA_Init+0x688>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d02c      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a48      	ldr	r2, [pc, #288]	@ (8003ca0 <HAL_DMA_Init+0x68c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d027      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a47      	ldr	r2, [pc, #284]	@ (8003ca4 <HAL_DMA_Init+0x690>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d022      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a45      	ldr	r2, [pc, #276]	@ (8003ca8 <HAL_DMA_Init+0x694>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d01d      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a44      	ldr	r2, [pc, #272]	@ (8003cac <HAL_DMA_Init+0x698>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d018      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a42      	ldr	r2, [pc, #264]	@ (8003cb0 <HAL_DMA_Init+0x69c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d013      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a41      	ldr	r2, [pc, #260]	@ (8003cb4 <HAL_DMA_Init+0x6a0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00e      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a3f      	ldr	r2, [pc, #252]	@ (8003cb8 <HAL_DMA_Init+0x6a4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d009      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a3e      	ldr	r2, [pc, #248]	@ (8003cbc <HAL_DMA_Init+0x6a8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d004      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a3c      	ldr	r2, [pc, #240]	@ (8003cc0 <HAL_DMA_Init+0x6ac>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d101      	bne.n	8003bd6 <HAL_DMA_Init+0x5c2>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <HAL_DMA_Init+0x5c4>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d032      	beq.n	8003c42 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f002 fa4f 	bl	8006080 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b80      	cmp	r3, #128	@ 0x80
 8003be8:	d102      	bne.n	8003bf0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c04:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d010      	beq.n	8003c30 <HAL_DMA_Init+0x61c>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d80c      	bhi.n	8003c30 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f002 facc 	bl	80061b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	e008      	b.n	8003c42 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	a7fdabf8 	.word	0xa7fdabf8
 8003c60:	cccccccd 	.word	0xcccccccd
 8003c64:	40020010 	.word	0x40020010
 8003c68:	40020028 	.word	0x40020028
 8003c6c:	40020040 	.word	0x40020040
 8003c70:	40020058 	.word	0x40020058
 8003c74:	40020070 	.word	0x40020070
 8003c78:	40020088 	.word	0x40020088
 8003c7c:	400200a0 	.word	0x400200a0
 8003c80:	400200b8 	.word	0x400200b8
 8003c84:	40020410 	.word	0x40020410
 8003c88:	40020428 	.word	0x40020428
 8003c8c:	40020440 	.word	0x40020440
 8003c90:	40020458 	.word	0x40020458
 8003c94:	40020470 	.word	0x40020470
 8003c98:	40020488 	.word	0x40020488
 8003c9c:	400204a0 	.word	0x400204a0
 8003ca0:	400204b8 	.word	0x400204b8
 8003ca4:	58025408 	.word	0x58025408
 8003ca8:	5802541c 	.word	0x5802541c
 8003cac:	58025430 	.word	0x58025430
 8003cb0:	58025444 	.word	0x58025444
 8003cb4:	58025458 	.word	0x58025458
 8003cb8:	5802546c 	.word	0x5802546c
 8003cbc:	58025480 	.word	0x58025480
 8003cc0:	58025494 	.word	0x58025494

08003cc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e226      	b.n	800412e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d101      	bne.n	8003cee <HAL_DMA_Start_IT+0x2a>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e21f      	b.n	800412e <HAL_DMA_Start_IT+0x46a>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	f040 820a 	bne.w	8004118 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a68      	ldr	r2, [pc, #416]	@ (8003eb8 <HAL_DMA_Start_IT+0x1f4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d04a      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a66      	ldr	r2, [pc, #408]	@ (8003ebc <HAL_DMA_Start_IT+0x1f8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d045      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a65      	ldr	r2, [pc, #404]	@ (8003ec0 <HAL_DMA_Start_IT+0x1fc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d040      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a63      	ldr	r2, [pc, #396]	@ (8003ec4 <HAL_DMA_Start_IT+0x200>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d03b      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a62      	ldr	r2, [pc, #392]	@ (8003ec8 <HAL_DMA_Start_IT+0x204>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d036      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a60      	ldr	r2, [pc, #384]	@ (8003ecc <HAL_DMA_Start_IT+0x208>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d031      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a5f      	ldr	r2, [pc, #380]	@ (8003ed0 <HAL_DMA_Start_IT+0x20c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d02c      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ed4 <HAL_DMA_Start_IT+0x210>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d027      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a5c      	ldr	r2, [pc, #368]	@ (8003ed8 <HAL_DMA_Start_IT+0x214>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d022      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a5a      	ldr	r2, [pc, #360]	@ (8003edc <HAL_DMA_Start_IT+0x218>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d01d      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a59      	ldr	r2, [pc, #356]	@ (8003ee0 <HAL_DMA_Start_IT+0x21c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d018      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a57      	ldr	r2, [pc, #348]	@ (8003ee4 <HAL_DMA_Start_IT+0x220>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d013      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a56      	ldr	r2, [pc, #344]	@ (8003ee8 <HAL_DMA_Start_IT+0x224>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00e      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a54      	ldr	r2, [pc, #336]	@ (8003eec <HAL_DMA_Start_IT+0x228>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d009      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a53      	ldr	r2, [pc, #332]	@ (8003ef0 <HAL_DMA_Start_IT+0x22c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d004      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a51      	ldr	r2, [pc, #324]	@ (8003ef4 <HAL_DMA_Start_IT+0x230>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d108      	bne.n	8003dc4 <HAL_DMA_Start_IT+0x100>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0201 	bic.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	e007      	b.n	8003dd4 <HAL_DMA_Start_IT+0x110>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0201 	bic.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	68b9      	ldr	r1, [r7, #8]
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f001 fe76 	bl	8005acc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a34      	ldr	r2, [pc, #208]	@ (8003eb8 <HAL_DMA_Start_IT+0x1f4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d04a      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a33      	ldr	r2, [pc, #204]	@ (8003ebc <HAL_DMA_Start_IT+0x1f8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d045      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a31      	ldr	r2, [pc, #196]	@ (8003ec0 <HAL_DMA_Start_IT+0x1fc>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d040      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a30      	ldr	r2, [pc, #192]	@ (8003ec4 <HAL_DMA_Start_IT+0x200>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d03b      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a2e      	ldr	r2, [pc, #184]	@ (8003ec8 <HAL_DMA_Start_IT+0x204>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d036      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a2d      	ldr	r2, [pc, #180]	@ (8003ecc <HAL_DMA_Start_IT+0x208>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d031      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a2b      	ldr	r2, [pc, #172]	@ (8003ed0 <HAL_DMA_Start_IT+0x20c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d02c      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ed4 <HAL_DMA_Start_IT+0x210>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d027      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a28      	ldr	r2, [pc, #160]	@ (8003ed8 <HAL_DMA_Start_IT+0x214>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d022      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a27      	ldr	r2, [pc, #156]	@ (8003edc <HAL_DMA_Start_IT+0x218>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d01d      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a25      	ldr	r2, [pc, #148]	@ (8003ee0 <HAL_DMA_Start_IT+0x21c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d018      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a24      	ldr	r2, [pc, #144]	@ (8003ee4 <HAL_DMA_Start_IT+0x220>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d013      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a22      	ldr	r2, [pc, #136]	@ (8003ee8 <HAL_DMA_Start_IT+0x224>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00e      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a21      	ldr	r2, [pc, #132]	@ (8003eec <HAL_DMA_Start_IT+0x228>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d009      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a1f      	ldr	r2, [pc, #124]	@ (8003ef0 <HAL_DMA_Start_IT+0x22c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d004      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ef4 <HAL_DMA_Start_IT+0x230>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d101      	bne.n	8003e84 <HAL_DMA_Start_IT+0x1c0>
 8003e80:	2301      	movs	r3, #1
 8003e82:	e000      	b.n	8003e86 <HAL_DMA_Start_IT+0x1c2>
 8003e84:	2300      	movs	r3, #0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d036      	beq.n	8003ef8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f023 021e 	bic.w	r2, r3, #30
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 0216 	orr.w	r2, r2, #22
 8003e9c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d03e      	beq.n	8003f24 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0208 	orr.w	r2, r2, #8
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	e035      	b.n	8003f24 <HAL_DMA_Start_IT+0x260>
 8003eb8:	40020010 	.word	0x40020010
 8003ebc:	40020028 	.word	0x40020028
 8003ec0:	40020040 	.word	0x40020040
 8003ec4:	40020058 	.word	0x40020058
 8003ec8:	40020070 	.word	0x40020070
 8003ecc:	40020088 	.word	0x40020088
 8003ed0:	400200a0 	.word	0x400200a0
 8003ed4:	400200b8 	.word	0x400200b8
 8003ed8:	40020410 	.word	0x40020410
 8003edc:	40020428 	.word	0x40020428
 8003ee0:	40020440 	.word	0x40020440
 8003ee4:	40020458 	.word	0x40020458
 8003ee8:	40020470 	.word	0x40020470
 8003eec:	40020488 	.word	0x40020488
 8003ef0:	400204a0 	.word	0x400204a0
 8003ef4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f023 020e 	bic.w	r2, r3, #14
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 020a 	orr.w	r2, r2, #10
 8003f0a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d007      	beq.n	8003f24 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0204 	orr.w	r2, r2, #4
 8003f22:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a83      	ldr	r2, [pc, #524]	@ (8004138 <HAL_DMA_Start_IT+0x474>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d072      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a82      	ldr	r2, [pc, #520]	@ (800413c <HAL_DMA_Start_IT+0x478>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d06d      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a80      	ldr	r2, [pc, #512]	@ (8004140 <HAL_DMA_Start_IT+0x47c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d068      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a7f      	ldr	r2, [pc, #508]	@ (8004144 <HAL_DMA_Start_IT+0x480>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d063      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a7d      	ldr	r2, [pc, #500]	@ (8004148 <HAL_DMA_Start_IT+0x484>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d05e      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a7c      	ldr	r2, [pc, #496]	@ (800414c <HAL_DMA_Start_IT+0x488>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d059      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a7a      	ldr	r2, [pc, #488]	@ (8004150 <HAL_DMA_Start_IT+0x48c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d054      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a79      	ldr	r2, [pc, #484]	@ (8004154 <HAL_DMA_Start_IT+0x490>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d04f      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a77      	ldr	r2, [pc, #476]	@ (8004158 <HAL_DMA_Start_IT+0x494>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d04a      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a76      	ldr	r2, [pc, #472]	@ (800415c <HAL_DMA_Start_IT+0x498>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d045      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a74      	ldr	r2, [pc, #464]	@ (8004160 <HAL_DMA_Start_IT+0x49c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d040      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a73      	ldr	r2, [pc, #460]	@ (8004164 <HAL_DMA_Start_IT+0x4a0>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d03b      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a71      	ldr	r2, [pc, #452]	@ (8004168 <HAL_DMA_Start_IT+0x4a4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d036      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a70      	ldr	r2, [pc, #448]	@ (800416c <HAL_DMA_Start_IT+0x4a8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d031      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a6e      	ldr	r2, [pc, #440]	@ (8004170 <HAL_DMA_Start_IT+0x4ac>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d02c      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a6d      	ldr	r2, [pc, #436]	@ (8004174 <HAL_DMA_Start_IT+0x4b0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d027      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a6b      	ldr	r2, [pc, #428]	@ (8004178 <HAL_DMA_Start_IT+0x4b4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d022      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a6a      	ldr	r2, [pc, #424]	@ (800417c <HAL_DMA_Start_IT+0x4b8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d01d      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a68      	ldr	r2, [pc, #416]	@ (8004180 <HAL_DMA_Start_IT+0x4bc>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d018      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a67      	ldr	r2, [pc, #412]	@ (8004184 <HAL_DMA_Start_IT+0x4c0>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d013      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a65      	ldr	r2, [pc, #404]	@ (8004188 <HAL_DMA_Start_IT+0x4c4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00e      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a64      	ldr	r2, [pc, #400]	@ (800418c <HAL_DMA_Start_IT+0x4c8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d009      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a62      	ldr	r2, [pc, #392]	@ (8004190 <HAL_DMA_Start_IT+0x4cc>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d004      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a61      	ldr	r2, [pc, #388]	@ (8004194 <HAL_DMA_Start_IT+0x4d0>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d101      	bne.n	8004018 <HAL_DMA_Start_IT+0x354>
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <HAL_DMA_Start_IT+0x356>
 8004018:	2300      	movs	r3, #0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d01a      	beq.n	8004054 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d007      	beq.n	800403c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004036:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800403a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004040:	2b00      	cmp	r3, #0
 8004042:	d007      	beq.n	8004054 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800404e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004052:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a37      	ldr	r2, [pc, #220]	@ (8004138 <HAL_DMA_Start_IT+0x474>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d04a      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a36      	ldr	r2, [pc, #216]	@ (800413c <HAL_DMA_Start_IT+0x478>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d045      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a34      	ldr	r2, [pc, #208]	@ (8004140 <HAL_DMA_Start_IT+0x47c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d040      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a33      	ldr	r2, [pc, #204]	@ (8004144 <HAL_DMA_Start_IT+0x480>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d03b      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a31      	ldr	r2, [pc, #196]	@ (8004148 <HAL_DMA_Start_IT+0x484>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d036      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a30      	ldr	r2, [pc, #192]	@ (800414c <HAL_DMA_Start_IT+0x488>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d031      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a2e      	ldr	r2, [pc, #184]	@ (8004150 <HAL_DMA_Start_IT+0x48c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d02c      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a2d      	ldr	r2, [pc, #180]	@ (8004154 <HAL_DMA_Start_IT+0x490>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d027      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004158 <HAL_DMA_Start_IT+0x494>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d022      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a2a      	ldr	r2, [pc, #168]	@ (800415c <HAL_DMA_Start_IT+0x498>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d01d      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a28      	ldr	r2, [pc, #160]	@ (8004160 <HAL_DMA_Start_IT+0x49c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d018      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a27      	ldr	r2, [pc, #156]	@ (8004164 <HAL_DMA_Start_IT+0x4a0>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d013      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a25      	ldr	r2, [pc, #148]	@ (8004168 <HAL_DMA_Start_IT+0x4a4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00e      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a24      	ldr	r2, [pc, #144]	@ (800416c <HAL_DMA_Start_IT+0x4a8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d009      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a22      	ldr	r2, [pc, #136]	@ (8004170 <HAL_DMA_Start_IT+0x4ac>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d004      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a21      	ldr	r2, [pc, #132]	@ (8004174 <HAL_DMA_Start_IT+0x4b0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d108      	bne.n	8004106 <HAL_DMA_Start_IT+0x442>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	e012      	b.n	800412c <HAL_DMA_Start_IT+0x468>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0201 	orr.w	r2, r2, #1
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	e009      	b.n	800412c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800411e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800412c:	7dfb      	ldrb	r3, [r7, #23]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40020010 	.word	0x40020010
 800413c:	40020028 	.word	0x40020028
 8004140:	40020040 	.word	0x40020040
 8004144:	40020058 	.word	0x40020058
 8004148:	40020070 	.word	0x40020070
 800414c:	40020088 	.word	0x40020088
 8004150:	400200a0 	.word	0x400200a0
 8004154:	400200b8 	.word	0x400200b8
 8004158:	40020410 	.word	0x40020410
 800415c:	40020428 	.word	0x40020428
 8004160:	40020440 	.word	0x40020440
 8004164:	40020458 	.word	0x40020458
 8004168:	40020470 	.word	0x40020470
 800416c:	40020488 	.word	0x40020488
 8004170:	400204a0 	.word	0x400204a0
 8004174:	400204b8 	.word	0x400204b8
 8004178:	58025408 	.word	0x58025408
 800417c:	5802541c 	.word	0x5802541c
 8004180:	58025430 	.word	0x58025430
 8004184:	58025444 	.word	0x58025444
 8004188:	58025458 	.word	0x58025458
 800418c:	5802546c 	.word	0x5802546c
 8004190:	58025480 	.word	0x58025480
 8004194:	58025494 	.word	0x58025494

08004198 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80041a0:	f7fd fa6e 	bl	8001680 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e2dc      	b.n	800476a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d008      	beq.n	80041ce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2280      	movs	r2, #128	@ 0x80
 80041c0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e2cd      	b.n	800476a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a76      	ldr	r2, [pc, #472]	@ (80043ac <HAL_DMA_Abort+0x214>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d04a      	beq.n	800426e <HAL_DMA_Abort+0xd6>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a74      	ldr	r2, [pc, #464]	@ (80043b0 <HAL_DMA_Abort+0x218>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d045      	beq.n	800426e <HAL_DMA_Abort+0xd6>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a73      	ldr	r2, [pc, #460]	@ (80043b4 <HAL_DMA_Abort+0x21c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d040      	beq.n	800426e <HAL_DMA_Abort+0xd6>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a71      	ldr	r2, [pc, #452]	@ (80043b8 <HAL_DMA_Abort+0x220>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d03b      	beq.n	800426e <HAL_DMA_Abort+0xd6>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a70      	ldr	r2, [pc, #448]	@ (80043bc <HAL_DMA_Abort+0x224>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d036      	beq.n	800426e <HAL_DMA_Abort+0xd6>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a6e      	ldr	r2, [pc, #440]	@ (80043c0 <HAL_DMA_Abort+0x228>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d031      	beq.n	800426e <HAL_DMA_Abort+0xd6>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a6d      	ldr	r2, [pc, #436]	@ (80043c4 <HAL_DMA_Abort+0x22c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d02c      	beq.n	800426e <HAL_DMA_Abort+0xd6>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a6b      	ldr	r2, [pc, #428]	@ (80043c8 <HAL_DMA_Abort+0x230>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d027      	beq.n	800426e <HAL_DMA_Abort+0xd6>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a6a      	ldr	r2, [pc, #424]	@ (80043cc <HAL_DMA_Abort+0x234>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d022      	beq.n	800426e <HAL_DMA_Abort+0xd6>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a68      	ldr	r2, [pc, #416]	@ (80043d0 <HAL_DMA_Abort+0x238>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d01d      	beq.n	800426e <HAL_DMA_Abort+0xd6>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a67      	ldr	r2, [pc, #412]	@ (80043d4 <HAL_DMA_Abort+0x23c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d018      	beq.n	800426e <HAL_DMA_Abort+0xd6>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a65      	ldr	r2, [pc, #404]	@ (80043d8 <HAL_DMA_Abort+0x240>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d013      	beq.n	800426e <HAL_DMA_Abort+0xd6>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a64      	ldr	r2, [pc, #400]	@ (80043dc <HAL_DMA_Abort+0x244>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00e      	beq.n	800426e <HAL_DMA_Abort+0xd6>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a62      	ldr	r2, [pc, #392]	@ (80043e0 <HAL_DMA_Abort+0x248>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d009      	beq.n	800426e <HAL_DMA_Abort+0xd6>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a61      	ldr	r2, [pc, #388]	@ (80043e4 <HAL_DMA_Abort+0x24c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d004      	beq.n	800426e <HAL_DMA_Abort+0xd6>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a5f      	ldr	r2, [pc, #380]	@ (80043e8 <HAL_DMA_Abort+0x250>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d101      	bne.n	8004272 <HAL_DMA_Abort+0xda>
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <HAL_DMA_Abort+0xdc>
 8004272:	2300      	movs	r3, #0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d013      	beq.n	80042a0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 021e 	bic.w	r2, r2, #30
 8004286:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695a      	ldr	r2, [r3, #20]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004296:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	e00a      	b.n	80042b6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 020e 	bic.w	r2, r2, #14
 80042ae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a3c      	ldr	r2, [pc, #240]	@ (80043ac <HAL_DMA_Abort+0x214>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d072      	beq.n	80043a6 <HAL_DMA_Abort+0x20e>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a3a      	ldr	r2, [pc, #232]	@ (80043b0 <HAL_DMA_Abort+0x218>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d06d      	beq.n	80043a6 <HAL_DMA_Abort+0x20e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a39      	ldr	r2, [pc, #228]	@ (80043b4 <HAL_DMA_Abort+0x21c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d068      	beq.n	80043a6 <HAL_DMA_Abort+0x20e>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a37      	ldr	r2, [pc, #220]	@ (80043b8 <HAL_DMA_Abort+0x220>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d063      	beq.n	80043a6 <HAL_DMA_Abort+0x20e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a36      	ldr	r2, [pc, #216]	@ (80043bc <HAL_DMA_Abort+0x224>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d05e      	beq.n	80043a6 <HAL_DMA_Abort+0x20e>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a34      	ldr	r2, [pc, #208]	@ (80043c0 <HAL_DMA_Abort+0x228>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d059      	beq.n	80043a6 <HAL_DMA_Abort+0x20e>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a33      	ldr	r2, [pc, #204]	@ (80043c4 <HAL_DMA_Abort+0x22c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d054      	beq.n	80043a6 <HAL_DMA_Abort+0x20e>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a31      	ldr	r2, [pc, #196]	@ (80043c8 <HAL_DMA_Abort+0x230>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d04f      	beq.n	80043a6 <HAL_DMA_Abort+0x20e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a30      	ldr	r2, [pc, #192]	@ (80043cc <HAL_DMA_Abort+0x234>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d04a      	beq.n	80043a6 <HAL_DMA_Abort+0x20e>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a2e      	ldr	r2, [pc, #184]	@ (80043d0 <HAL_DMA_Abort+0x238>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d045      	beq.n	80043a6 <HAL_DMA_Abort+0x20e>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a2d      	ldr	r2, [pc, #180]	@ (80043d4 <HAL_DMA_Abort+0x23c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d040      	beq.n	80043a6 <HAL_DMA_Abort+0x20e>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a2b      	ldr	r2, [pc, #172]	@ (80043d8 <HAL_DMA_Abort+0x240>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d03b      	beq.n	80043a6 <HAL_DMA_Abort+0x20e>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a2a      	ldr	r2, [pc, #168]	@ (80043dc <HAL_DMA_Abort+0x244>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d036      	beq.n	80043a6 <HAL_DMA_Abort+0x20e>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a28      	ldr	r2, [pc, #160]	@ (80043e0 <HAL_DMA_Abort+0x248>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d031      	beq.n	80043a6 <HAL_DMA_Abort+0x20e>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a27      	ldr	r2, [pc, #156]	@ (80043e4 <HAL_DMA_Abort+0x24c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d02c      	beq.n	80043a6 <HAL_DMA_Abort+0x20e>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a25      	ldr	r2, [pc, #148]	@ (80043e8 <HAL_DMA_Abort+0x250>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d027      	beq.n	80043a6 <HAL_DMA_Abort+0x20e>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a24      	ldr	r2, [pc, #144]	@ (80043ec <HAL_DMA_Abort+0x254>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d022      	beq.n	80043a6 <HAL_DMA_Abort+0x20e>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a22      	ldr	r2, [pc, #136]	@ (80043f0 <HAL_DMA_Abort+0x258>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d01d      	beq.n	80043a6 <HAL_DMA_Abort+0x20e>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a21      	ldr	r2, [pc, #132]	@ (80043f4 <HAL_DMA_Abort+0x25c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d018      	beq.n	80043a6 <HAL_DMA_Abort+0x20e>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1f      	ldr	r2, [pc, #124]	@ (80043f8 <HAL_DMA_Abort+0x260>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d013      	beq.n	80043a6 <HAL_DMA_Abort+0x20e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1e      	ldr	r2, [pc, #120]	@ (80043fc <HAL_DMA_Abort+0x264>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d00e      	beq.n	80043a6 <HAL_DMA_Abort+0x20e>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1c      	ldr	r2, [pc, #112]	@ (8004400 <HAL_DMA_Abort+0x268>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d009      	beq.n	80043a6 <HAL_DMA_Abort+0x20e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a1b      	ldr	r2, [pc, #108]	@ (8004404 <HAL_DMA_Abort+0x26c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d004      	beq.n	80043a6 <HAL_DMA_Abort+0x20e>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a19      	ldr	r2, [pc, #100]	@ (8004408 <HAL_DMA_Abort+0x270>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d132      	bne.n	800440c <HAL_DMA_Abort+0x274>
 80043a6:	2301      	movs	r3, #1
 80043a8:	e031      	b.n	800440e <HAL_DMA_Abort+0x276>
 80043aa:	bf00      	nop
 80043ac:	40020010 	.word	0x40020010
 80043b0:	40020028 	.word	0x40020028
 80043b4:	40020040 	.word	0x40020040
 80043b8:	40020058 	.word	0x40020058
 80043bc:	40020070 	.word	0x40020070
 80043c0:	40020088 	.word	0x40020088
 80043c4:	400200a0 	.word	0x400200a0
 80043c8:	400200b8 	.word	0x400200b8
 80043cc:	40020410 	.word	0x40020410
 80043d0:	40020428 	.word	0x40020428
 80043d4:	40020440 	.word	0x40020440
 80043d8:	40020458 	.word	0x40020458
 80043dc:	40020470 	.word	0x40020470
 80043e0:	40020488 	.word	0x40020488
 80043e4:	400204a0 	.word	0x400204a0
 80043e8:	400204b8 	.word	0x400204b8
 80043ec:	58025408 	.word	0x58025408
 80043f0:	5802541c 	.word	0x5802541c
 80043f4:	58025430 	.word	0x58025430
 80043f8:	58025444 	.word	0x58025444
 80043fc:	58025458 	.word	0x58025458
 8004400:	5802546c 	.word	0x5802546c
 8004404:	58025480 	.word	0x58025480
 8004408:	58025494 	.word	0x58025494
 800440c:	2300      	movs	r3, #0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d007      	beq.n	8004422 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800441c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004420:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a6d      	ldr	r2, [pc, #436]	@ (80045dc <HAL_DMA_Abort+0x444>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d04a      	beq.n	80044c2 <HAL_DMA_Abort+0x32a>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a6b      	ldr	r2, [pc, #428]	@ (80045e0 <HAL_DMA_Abort+0x448>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d045      	beq.n	80044c2 <HAL_DMA_Abort+0x32a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a6a      	ldr	r2, [pc, #424]	@ (80045e4 <HAL_DMA_Abort+0x44c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d040      	beq.n	80044c2 <HAL_DMA_Abort+0x32a>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a68      	ldr	r2, [pc, #416]	@ (80045e8 <HAL_DMA_Abort+0x450>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d03b      	beq.n	80044c2 <HAL_DMA_Abort+0x32a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a67      	ldr	r2, [pc, #412]	@ (80045ec <HAL_DMA_Abort+0x454>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d036      	beq.n	80044c2 <HAL_DMA_Abort+0x32a>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a65      	ldr	r2, [pc, #404]	@ (80045f0 <HAL_DMA_Abort+0x458>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d031      	beq.n	80044c2 <HAL_DMA_Abort+0x32a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a64      	ldr	r2, [pc, #400]	@ (80045f4 <HAL_DMA_Abort+0x45c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d02c      	beq.n	80044c2 <HAL_DMA_Abort+0x32a>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a62      	ldr	r2, [pc, #392]	@ (80045f8 <HAL_DMA_Abort+0x460>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d027      	beq.n	80044c2 <HAL_DMA_Abort+0x32a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a61      	ldr	r2, [pc, #388]	@ (80045fc <HAL_DMA_Abort+0x464>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d022      	beq.n	80044c2 <HAL_DMA_Abort+0x32a>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a5f      	ldr	r2, [pc, #380]	@ (8004600 <HAL_DMA_Abort+0x468>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d01d      	beq.n	80044c2 <HAL_DMA_Abort+0x32a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a5e      	ldr	r2, [pc, #376]	@ (8004604 <HAL_DMA_Abort+0x46c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d018      	beq.n	80044c2 <HAL_DMA_Abort+0x32a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a5c      	ldr	r2, [pc, #368]	@ (8004608 <HAL_DMA_Abort+0x470>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d013      	beq.n	80044c2 <HAL_DMA_Abort+0x32a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a5b      	ldr	r2, [pc, #364]	@ (800460c <HAL_DMA_Abort+0x474>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00e      	beq.n	80044c2 <HAL_DMA_Abort+0x32a>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a59      	ldr	r2, [pc, #356]	@ (8004610 <HAL_DMA_Abort+0x478>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d009      	beq.n	80044c2 <HAL_DMA_Abort+0x32a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a58      	ldr	r2, [pc, #352]	@ (8004614 <HAL_DMA_Abort+0x47c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d004      	beq.n	80044c2 <HAL_DMA_Abort+0x32a>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a56      	ldr	r2, [pc, #344]	@ (8004618 <HAL_DMA_Abort+0x480>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d108      	bne.n	80044d4 <HAL_DMA_Abort+0x33c>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0201 	bic.w	r2, r2, #1
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	e007      	b.n	80044e4 <HAL_DMA_Abort+0x34c>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0201 	bic.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80044e4:	e013      	b.n	800450e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044e6:	f7fd f8cb 	bl	8001680 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b05      	cmp	r3, #5
 80044f2:	d90c      	bls.n	800450e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2220      	movs	r2, #32
 80044f8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2203      	movs	r2, #3
 80044fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e12d      	b.n	800476a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1e5      	bne.n	80044e6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a2f      	ldr	r2, [pc, #188]	@ (80045dc <HAL_DMA_Abort+0x444>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d04a      	beq.n	80045ba <HAL_DMA_Abort+0x422>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a2d      	ldr	r2, [pc, #180]	@ (80045e0 <HAL_DMA_Abort+0x448>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d045      	beq.n	80045ba <HAL_DMA_Abort+0x422>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a2c      	ldr	r2, [pc, #176]	@ (80045e4 <HAL_DMA_Abort+0x44c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d040      	beq.n	80045ba <HAL_DMA_Abort+0x422>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a2a      	ldr	r2, [pc, #168]	@ (80045e8 <HAL_DMA_Abort+0x450>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d03b      	beq.n	80045ba <HAL_DMA_Abort+0x422>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a29      	ldr	r2, [pc, #164]	@ (80045ec <HAL_DMA_Abort+0x454>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d036      	beq.n	80045ba <HAL_DMA_Abort+0x422>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a27      	ldr	r2, [pc, #156]	@ (80045f0 <HAL_DMA_Abort+0x458>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d031      	beq.n	80045ba <HAL_DMA_Abort+0x422>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a26      	ldr	r2, [pc, #152]	@ (80045f4 <HAL_DMA_Abort+0x45c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d02c      	beq.n	80045ba <HAL_DMA_Abort+0x422>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a24      	ldr	r2, [pc, #144]	@ (80045f8 <HAL_DMA_Abort+0x460>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d027      	beq.n	80045ba <HAL_DMA_Abort+0x422>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a23      	ldr	r2, [pc, #140]	@ (80045fc <HAL_DMA_Abort+0x464>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d022      	beq.n	80045ba <HAL_DMA_Abort+0x422>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a21      	ldr	r2, [pc, #132]	@ (8004600 <HAL_DMA_Abort+0x468>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d01d      	beq.n	80045ba <HAL_DMA_Abort+0x422>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a20      	ldr	r2, [pc, #128]	@ (8004604 <HAL_DMA_Abort+0x46c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d018      	beq.n	80045ba <HAL_DMA_Abort+0x422>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a1e      	ldr	r2, [pc, #120]	@ (8004608 <HAL_DMA_Abort+0x470>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d013      	beq.n	80045ba <HAL_DMA_Abort+0x422>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a1d      	ldr	r2, [pc, #116]	@ (800460c <HAL_DMA_Abort+0x474>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00e      	beq.n	80045ba <HAL_DMA_Abort+0x422>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004610 <HAL_DMA_Abort+0x478>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d009      	beq.n	80045ba <HAL_DMA_Abort+0x422>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a1a      	ldr	r2, [pc, #104]	@ (8004614 <HAL_DMA_Abort+0x47c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d004      	beq.n	80045ba <HAL_DMA_Abort+0x422>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a18      	ldr	r2, [pc, #96]	@ (8004618 <HAL_DMA_Abort+0x480>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d101      	bne.n	80045be <HAL_DMA_Abort+0x426>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <HAL_DMA_Abort+0x428>
 80045be:	2300      	movs	r3, #0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d02b      	beq.n	800461c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ce:	f003 031f 	and.w	r3, r3, #31
 80045d2:	223f      	movs	r2, #63	@ 0x3f
 80045d4:	409a      	lsls	r2, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	609a      	str	r2, [r3, #8]
 80045da:	e02a      	b.n	8004632 <HAL_DMA_Abort+0x49a>
 80045dc:	40020010 	.word	0x40020010
 80045e0:	40020028 	.word	0x40020028
 80045e4:	40020040 	.word	0x40020040
 80045e8:	40020058 	.word	0x40020058
 80045ec:	40020070 	.word	0x40020070
 80045f0:	40020088 	.word	0x40020088
 80045f4:	400200a0 	.word	0x400200a0
 80045f8:	400200b8 	.word	0x400200b8
 80045fc:	40020410 	.word	0x40020410
 8004600:	40020428 	.word	0x40020428
 8004604:	40020440 	.word	0x40020440
 8004608:	40020458 	.word	0x40020458
 800460c:	40020470 	.word	0x40020470
 8004610:	40020488 	.word	0x40020488
 8004614:	400204a0 	.word	0x400204a0
 8004618:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004620:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004626:	f003 031f 	and.w	r3, r3, #31
 800462a:	2201      	movs	r2, #1
 800462c:	409a      	lsls	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a4f      	ldr	r2, [pc, #316]	@ (8004774 <HAL_DMA_Abort+0x5dc>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d072      	beq.n	8004722 <HAL_DMA_Abort+0x58a>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a4d      	ldr	r2, [pc, #308]	@ (8004778 <HAL_DMA_Abort+0x5e0>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d06d      	beq.n	8004722 <HAL_DMA_Abort+0x58a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a4c      	ldr	r2, [pc, #304]	@ (800477c <HAL_DMA_Abort+0x5e4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d068      	beq.n	8004722 <HAL_DMA_Abort+0x58a>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a4a      	ldr	r2, [pc, #296]	@ (8004780 <HAL_DMA_Abort+0x5e8>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d063      	beq.n	8004722 <HAL_DMA_Abort+0x58a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a49      	ldr	r2, [pc, #292]	@ (8004784 <HAL_DMA_Abort+0x5ec>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d05e      	beq.n	8004722 <HAL_DMA_Abort+0x58a>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a47      	ldr	r2, [pc, #284]	@ (8004788 <HAL_DMA_Abort+0x5f0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d059      	beq.n	8004722 <HAL_DMA_Abort+0x58a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a46      	ldr	r2, [pc, #280]	@ (800478c <HAL_DMA_Abort+0x5f4>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d054      	beq.n	8004722 <HAL_DMA_Abort+0x58a>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a44      	ldr	r2, [pc, #272]	@ (8004790 <HAL_DMA_Abort+0x5f8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d04f      	beq.n	8004722 <HAL_DMA_Abort+0x58a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a43      	ldr	r2, [pc, #268]	@ (8004794 <HAL_DMA_Abort+0x5fc>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d04a      	beq.n	8004722 <HAL_DMA_Abort+0x58a>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a41      	ldr	r2, [pc, #260]	@ (8004798 <HAL_DMA_Abort+0x600>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d045      	beq.n	8004722 <HAL_DMA_Abort+0x58a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a40      	ldr	r2, [pc, #256]	@ (800479c <HAL_DMA_Abort+0x604>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d040      	beq.n	8004722 <HAL_DMA_Abort+0x58a>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a3e      	ldr	r2, [pc, #248]	@ (80047a0 <HAL_DMA_Abort+0x608>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d03b      	beq.n	8004722 <HAL_DMA_Abort+0x58a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a3d      	ldr	r2, [pc, #244]	@ (80047a4 <HAL_DMA_Abort+0x60c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d036      	beq.n	8004722 <HAL_DMA_Abort+0x58a>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a3b      	ldr	r2, [pc, #236]	@ (80047a8 <HAL_DMA_Abort+0x610>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d031      	beq.n	8004722 <HAL_DMA_Abort+0x58a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a3a      	ldr	r2, [pc, #232]	@ (80047ac <HAL_DMA_Abort+0x614>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d02c      	beq.n	8004722 <HAL_DMA_Abort+0x58a>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a38      	ldr	r2, [pc, #224]	@ (80047b0 <HAL_DMA_Abort+0x618>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d027      	beq.n	8004722 <HAL_DMA_Abort+0x58a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a37      	ldr	r2, [pc, #220]	@ (80047b4 <HAL_DMA_Abort+0x61c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d022      	beq.n	8004722 <HAL_DMA_Abort+0x58a>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a35      	ldr	r2, [pc, #212]	@ (80047b8 <HAL_DMA_Abort+0x620>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d01d      	beq.n	8004722 <HAL_DMA_Abort+0x58a>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a34      	ldr	r2, [pc, #208]	@ (80047bc <HAL_DMA_Abort+0x624>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d018      	beq.n	8004722 <HAL_DMA_Abort+0x58a>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a32      	ldr	r2, [pc, #200]	@ (80047c0 <HAL_DMA_Abort+0x628>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d013      	beq.n	8004722 <HAL_DMA_Abort+0x58a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a31      	ldr	r2, [pc, #196]	@ (80047c4 <HAL_DMA_Abort+0x62c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d00e      	beq.n	8004722 <HAL_DMA_Abort+0x58a>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a2f      	ldr	r2, [pc, #188]	@ (80047c8 <HAL_DMA_Abort+0x630>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d009      	beq.n	8004722 <HAL_DMA_Abort+0x58a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a2e      	ldr	r2, [pc, #184]	@ (80047cc <HAL_DMA_Abort+0x634>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d004      	beq.n	8004722 <HAL_DMA_Abort+0x58a>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a2c      	ldr	r2, [pc, #176]	@ (80047d0 <HAL_DMA_Abort+0x638>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d101      	bne.n	8004726 <HAL_DMA_Abort+0x58e>
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <HAL_DMA_Abort+0x590>
 8004726:	2300      	movs	r3, #0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d015      	beq.n	8004758 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004734:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00c      	beq.n	8004758 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004748:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800474c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004756:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	40020010 	.word	0x40020010
 8004778:	40020028 	.word	0x40020028
 800477c:	40020040 	.word	0x40020040
 8004780:	40020058 	.word	0x40020058
 8004784:	40020070 	.word	0x40020070
 8004788:	40020088 	.word	0x40020088
 800478c:	400200a0 	.word	0x400200a0
 8004790:	400200b8 	.word	0x400200b8
 8004794:	40020410 	.word	0x40020410
 8004798:	40020428 	.word	0x40020428
 800479c:	40020440 	.word	0x40020440
 80047a0:	40020458 	.word	0x40020458
 80047a4:	40020470 	.word	0x40020470
 80047a8:	40020488 	.word	0x40020488
 80047ac:	400204a0 	.word	0x400204a0
 80047b0:	400204b8 	.word	0x400204b8
 80047b4:	58025408 	.word	0x58025408
 80047b8:	5802541c 	.word	0x5802541c
 80047bc:	58025430 	.word	0x58025430
 80047c0:	58025444 	.word	0x58025444
 80047c4:	58025458 	.word	0x58025458
 80047c8:	5802546c 	.word	0x5802546c
 80047cc:	58025480 	.word	0x58025480
 80047d0:	58025494 	.word	0x58025494

080047d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e237      	b.n	8004c56 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d004      	beq.n	80047fc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2280      	movs	r2, #128	@ 0x80
 80047f6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e22c      	b.n	8004c56 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a5c      	ldr	r2, [pc, #368]	@ (8004974 <HAL_DMA_Abort_IT+0x1a0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d04a      	beq.n	800489c <HAL_DMA_Abort_IT+0xc8>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a5b      	ldr	r2, [pc, #364]	@ (8004978 <HAL_DMA_Abort_IT+0x1a4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d045      	beq.n	800489c <HAL_DMA_Abort_IT+0xc8>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a59      	ldr	r2, [pc, #356]	@ (800497c <HAL_DMA_Abort_IT+0x1a8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d040      	beq.n	800489c <HAL_DMA_Abort_IT+0xc8>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a58      	ldr	r2, [pc, #352]	@ (8004980 <HAL_DMA_Abort_IT+0x1ac>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d03b      	beq.n	800489c <HAL_DMA_Abort_IT+0xc8>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a56      	ldr	r2, [pc, #344]	@ (8004984 <HAL_DMA_Abort_IT+0x1b0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d036      	beq.n	800489c <HAL_DMA_Abort_IT+0xc8>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a55      	ldr	r2, [pc, #340]	@ (8004988 <HAL_DMA_Abort_IT+0x1b4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d031      	beq.n	800489c <HAL_DMA_Abort_IT+0xc8>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a53      	ldr	r2, [pc, #332]	@ (800498c <HAL_DMA_Abort_IT+0x1b8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d02c      	beq.n	800489c <HAL_DMA_Abort_IT+0xc8>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a52      	ldr	r2, [pc, #328]	@ (8004990 <HAL_DMA_Abort_IT+0x1bc>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d027      	beq.n	800489c <HAL_DMA_Abort_IT+0xc8>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a50      	ldr	r2, [pc, #320]	@ (8004994 <HAL_DMA_Abort_IT+0x1c0>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d022      	beq.n	800489c <HAL_DMA_Abort_IT+0xc8>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a4f      	ldr	r2, [pc, #316]	@ (8004998 <HAL_DMA_Abort_IT+0x1c4>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d01d      	beq.n	800489c <HAL_DMA_Abort_IT+0xc8>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a4d      	ldr	r2, [pc, #308]	@ (800499c <HAL_DMA_Abort_IT+0x1c8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d018      	beq.n	800489c <HAL_DMA_Abort_IT+0xc8>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a4c      	ldr	r2, [pc, #304]	@ (80049a0 <HAL_DMA_Abort_IT+0x1cc>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d013      	beq.n	800489c <HAL_DMA_Abort_IT+0xc8>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a4a      	ldr	r2, [pc, #296]	@ (80049a4 <HAL_DMA_Abort_IT+0x1d0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00e      	beq.n	800489c <HAL_DMA_Abort_IT+0xc8>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a49      	ldr	r2, [pc, #292]	@ (80049a8 <HAL_DMA_Abort_IT+0x1d4>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d009      	beq.n	800489c <HAL_DMA_Abort_IT+0xc8>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a47      	ldr	r2, [pc, #284]	@ (80049ac <HAL_DMA_Abort_IT+0x1d8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d004      	beq.n	800489c <HAL_DMA_Abort_IT+0xc8>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a46      	ldr	r2, [pc, #280]	@ (80049b0 <HAL_DMA_Abort_IT+0x1dc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d101      	bne.n	80048a0 <HAL_DMA_Abort_IT+0xcc>
 800489c:	2301      	movs	r3, #1
 800489e:	e000      	b.n	80048a2 <HAL_DMA_Abort_IT+0xce>
 80048a0:	2300      	movs	r3, #0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 8086 	beq.w	80049b4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2204      	movs	r2, #4
 80048ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a2f      	ldr	r2, [pc, #188]	@ (8004974 <HAL_DMA_Abort_IT+0x1a0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d04a      	beq.n	8004950 <HAL_DMA_Abort_IT+0x17c>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a2e      	ldr	r2, [pc, #184]	@ (8004978 <HAL_DMA_Abort_IT+0x1a4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d045      	beq.n	8004950 <HAL_DMA_Abort_IT+0x17c>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a2c      	ldr	r2, [pc, #176]	@ (800497c <HAL_DMA_Abort_IT+0x1a8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d040      	beq.n	8004950 <HAL_DMA_Abort_IT+0x17c>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a2b      	ldr	r2, [pc, #172]	@ (8004980 <HAL_DMA_Abort_IT+0x1ac>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d03b      	beq.n	8004950 <HAL_DMA_Abort_IT+0x17c>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a29      	ldr	r2, [pc, #164]	@ (8004984 <HAL_DMA_Abort_IT+0x1b0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d036      	beq.n	8004950 <HAL_DMA_Abort_IT+0x17c>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a28      	ldr	r2, [pc, #160]	@ (8004988 <HAL_DMA_Abort_IT+0x1b4>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d031      	beq.n	8004950 <HAL_DMA_Abort_IT+0x17c>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a26      	ldr	r2, [pc, #152]	@ (800498c <HAL_DMA_Abort_IT+0x1b8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d02c      	beq.n	8004950 <HAL_DMA_Abort_IT+0x17c>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a25      	ldr	r2, [pc, #148]	@ (8004990 <HAL_DMA_Abort_IT+0x1bc>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d027      	beq.n	8004950 <HAL_DMA_Abort_IT+0x17c>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a23      	ldr	r2, [pc, #140]	@ (8004994 <HAL_DMA_Abort_IT+0x1c0>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d022      	beq.n	8004950 <HAL_DMA_Abort_IT+0x17c>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a22      	ldr	r2, [pc, #136]	@ (8004998 <HAL_DMA_Abort_IT+0x1c4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d01d      	beq.n	8004950 <HAL_DMA_Abort_IT+0x17c>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a20      	ldr	r2, [pc, #128]	@ (800499c <HAL_DMA_Abort_IT+0x1c8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d018      	beq.n	8004950 <HAL_DMA_Abort_IT+0x17c>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a1f      	ldr	r2, [pc, #124]	@ (80049a0 <HAL_DMA_Abort_IT+0x1cc>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d013      	beq.n	8004950 <HAL_DMA_Abort_IT+0x17c>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a1d      	ldr	r2, [pc, #116]	@ (80049a4 <HAL_DMA_Abort_IT+0x1d0>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d00e      	beq.n	8004950 <HAL_DMA_Abort_IT+0x17c>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a1c      	ldr	r2, [pc, #112]	@ (80049a8 <HAL_DMA_Abort_IT+0x1d4>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d009      	beq.n	8004950 <HAL_DMA_Abort_IT+0x17c>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1a      	ldr	r2, [pc, #104]	@ (80049ac <HAL_DMA_Abort_IT+0x1d8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d004      	beq.n	8004950 <HAL_DMA_Abort_IT+0x17c>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a19      	ldr	r2, [pc, #100]	@ (80049b0 <HAL_DMA_Abort_IT+0x1dc>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d108      	bne.n	8004962 <HAL_DMA_Abort_IT+0x18e>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0201 	bic.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	e178      	b.n	8004c54 <HAL_DMA_Abort_IT+0x480>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0201 	bic.w	r2, r2, #1
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	e16f      	b.n	8004c54 <HAL_DMA_Abort_IT+0x480>
 8004974:	40020010 	.word	0x40020010
 8004978:	40020028 	.word	0x40020028
 800497c:	40020040 	.word	0x40020040
 8004980:	40020058 	.word	0x40020058
 8004984:	40020070 	.word	0x40020070
 8004988:	40020088 	.word	0x40020088
 800498c:	400200a0 	.word	0x400200a0
 8004990:	400200b8 	.word	0x400200b8
 8004994:	40020410 	.word	0x40020410
 8004998:	40020428 	.word	0x40020428
 800499c:	40020440 	.word	0x40020440
 80049a0:	40020458 	.word	0x40020458
 80049a4:	40020470 	.word	0x40020470
 80049a8:	40020488 	.word	0x40020488
 80049ac:	400204a0 	.word	0x400204a0
 80049b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 020e 	bic.w	r2, r2, #14
 80049c2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a6c      	ldr	r2, [pc, #432]	@ (8004b7c <HAL_DMA_Abort_IT+0x3a8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d04a      	beq.n	8004a64 <HAL_DMA_Abort_IT+0x290>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a6b      	ldr	r2, [pc, #428]	@ (8004b80 <HAL_DMA_Abort_IT+0x3ac>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d045      	beq.n	8004a64 <HAL_DMA_Abort_IT+0x290>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a69      	ldr	r2, [pc, #420]	@ (8004b84 <HAL_DMA_Abort_IT+0x3b0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d040      	beq.n	8004a64 <HAL_DMA_Abort_IT+0x290>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a68      	ldr	r2, [pc, #416]	@ (8004b88 <HAL_DMA_Abort_IT+0x3b4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d03b      	beq.n	8004a64 <HAL_DMA_Abort_IT+0x290>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a66      	ldr	r2, [pc, #408]	@ (8004b8c <HAL_DMA_Abort_IT+0x3b8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d036      	beq.n	8004a64 <HAL_DMA_Abort_IT+0x290>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a65      	ldr	r2, [pc, #404]	@ (8004b90 <HAL_DMA_Abort_IT+0x3bc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d031      	beq.n	8004a64 <HAL_DMA_Abort_IT+0x290>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a63      	ldr	r2, [pc, #396]	@ (8004b94 <HAL_DMA_Abort_IT+0x3c0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d02c      	beq.n	8004a64 <HAL_DMA_Abort_IT+0x290>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a62      	ldr	r2, [pc, #392]	@ (8004b98 <HAL_DMA_Abort_IT+0x3c4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d027      	beq.n	8004a64 <HAL_DMA_Abort_IT+0x290>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a60      	ldr	r2, [pc, #384]	@ (8004b9c <HAL_DMA_Abort_IT+0x3c8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d022      	beq.n	8004a64 <HAL_DMA_Abort_IT+0x290>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a5f      	ldr	r2, [pc, #380]	@ (8004ba0 <HAL_DMA_Abort_IT+0x3cc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d01d      	beq.n	8004a64 <HAL_DMA_Abort_IT+0x290>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a5d      	ldr	r2, [pc, #372]	@ (8004ba4 <HAL_DMA_Abort_IT+0x3d0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d018      	beq.n	8004a64 <HAL_DMA_Abort_IT+0x290>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a5c      	ldr	r2, [pc, #368]	@ (8004ba8 <HAL_DMA_Abort_IT+0x3d4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d013      	beq.n	8004a64 <HAL_DMA_Abort_IT+0x290>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a5a      	ldr	r2, [pc, #360]	@ (8004bac <HAL_DMA_Abort_IT+0x3d8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d00e      	beq.n	8004a64 <HAL_DMA_Abort_IT+0x290>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a59      	ldr	r2, [pc, #356]	@ (8004bb0 <HAL_DMA_Abort_IT+0x3dc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d009      	beq.n	8004a64 <HAL_DMA_Abort_IT+0x290>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a57      	ldr	r2, [pc, #348]	@ (8004bb4 <HAL_DMA_Abort_IT+0x3e0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d004      	beq.n	8004a64 <HAL_DMA_Abort_IT+0x290>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a56      	ldr	r2, [pc, #344]	@ (8004bb8 <HAL_DMA_Abort_IT+0x3e4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d108      	bne.n	8004a76 <HAL_DMA_Abort_IT+0x2a2>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0201 	bic.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	e007      	b.n	8004a86 <HAL_DMA_Abort_IT+0x2b2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0201 	bic.w	r2, r2, #1
 8004a84:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a3c      	ldr	r2, [pc, #240]	@ (8004b7c <HAL_DMA_Abort_IT+0x3a8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d072      	beq.n	8004b76 <HAL_DMA_Abort_IT+0x3a2>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a3a      	ldr	r2, [pc, #232]	@ (8004b80 <HAL_DMA_Abort_IT+0x3ac>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d06d      	beq.n	8004b76 <HAL_DMA_Abort_IT+0x3a2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a39      	ldr	r2, [pc, #228]	@ (8004b84 <HAL_DMA_Abort_IT+0x3b0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d068      	beq.n	8004b76 <HAL_DMA_Abort_IT+0x3a2>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a37      	ldr	r2, [pc, #220]	@ (8004b88 <HAL_DMA_Abort_IT+0x3b4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d063      	beq.n	8004b76 <HAL_DMA_Abort_IT+0x3a2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a36      	ldr	r2, [pc, #216]	@ (8004b8c <HAL_DMA_Abort_IT+0x3b8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d05e      	beq.n	8004b76 <HAL_DMA_Abort_IT+0x3a2>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a34      	ldr	r2, [pc, #208]	@ (8004b90 <HAL_DMA_Abort_IT+0x3bc>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d059      	beq.n	8004b76 <HAL_DMA_Abort_IT+0x3a2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a33      	ldr	r2, [pc, #204]	@ (8004b94 <HAL_DMA_Abort_IT+0x3c0>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d054      	beq.n	8004b76 <HAL_DMA_Abort_IT+0x3a2>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a31      	ldr	r2, [pc, #196]	@ (8004b98 <HAL_DMA_Abort_IT+0x3c4>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d04f      	beq.n	8004b76 <HAL_DMA_Abort_IT+0x3a2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a30      	ldr	r2, [pc, #192]	@ (8004b9c <HAL_DMA_Abort_IT+0x3c8>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d04a      	beq.n	8004b76 <HAL_DMA_Abort_IT+0x3a2>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a2e      	ldr	r2, [pc, #184]	@ (8004ba0 <HAL_DMA_Abort_IT+0x3cc>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d045      	beq.n	8004b76 <HAL_DMA_Abort_IT+0x3a2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a2d      	ldr	r2, [pc, #180]	@ (8004ba4 <HAL_DMA_Abort_IT+0x3d0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d040      	beq.n	8004b76 <HAL_DMA_Abort_IT+0x3a2>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a2b      	ldr	r2, [pc, #172]	@ (8004ba8 <HAL_DMA_Abort_IT+0x3d4>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d03b      	beq.n	8004b76 <HAL_DMA_Abort_IT+0x3a2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a2a      	ldr	r2, [pc, #168]	@ (8004bac <HAL_DMA_Abort_IT+0x3d8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d036      	beq.n	8004b76 <HAL_DMA_Abort_IT+0x3a2>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a28      	ldr	r2, [pc, #160]	@ (8004bb0 <HAL_DMA_Abort_IT+0x3dc>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d031      	beq.n	8004b76 <HAL_DMA_Abort_IT+0x3a2>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a27      	ldr	r2, [pc, #156]	@ (8004bb4 <HAL_DMA_Abort_IT+0x3e0>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d02c      	beq.n	8004b76 <HAL_DMA_Abort_IT+0x3a2>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a25      	ldr	r2, [pc, #148]	@ (8004bb8 <HAL_DMA_Abort_IT+0x3e4>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d027      	beq.n	8004b76 <HAL_DMA_Abort_IT+0x3a2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a24      	ldr	r2, [pc, #144]	@ (8004bbc <HAL_DMA_Abort_IT+0x3e8>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d022      	beq.n	8004b76 <HAL_DMA_Abort_IT+0x3a2>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a22      	ldr	r2, [pc, #136]	@ (8004bc0 <HAL_DMA_Abort_IT+0x3ec>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d01d      	beq.n	8004b76 <HAL_DMA_Abort_IT+0x3a2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a21      	ldr	r2, [pc, #132]	@ (8004bc4 <HAL_DMA_Abort_IT+0x3f0>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d018      	beq.n	8004b76 <HAL_DMA_Abort_IT+0x3a2>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a1f      	ldr	r2, [pc, #124]	@ (8004bc8 <HAL_DMA_Abort_IT+0x3f4>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d013      	beq.n	8004b76 <HAL_DMA_Abort_IT+0x3a2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a1e      	ldr	r2, [pc, #120]	@ (8004bcc <HAL_DMA_Abort_IT+0x3f8>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00e      	beq.n	8004b76 <HAL_DMA_Abort_IT+0x3a2>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a1c      	ldr	r2, [pc, #112]	@ (8004bd0 <HAL_DMA_Abort_IT+0x3fc>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d009      	beq.n	8004b76 <HAL_DMA_Abort_IT+0x3a2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a1b      	ldr	r2, [pc, #108]	@ (8004bd4 <HAL_DMA_Abort_IT+0x400>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d004      	beq.n	8004b76 <HAL_DMA_Abort_IT+0x3a2>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a19      	ldr	r2, [pc, #100]	@ (8004bd8 <HAL_DMA_Abort_IT+0x404>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d132      	bne.n	8004bdc <HAL_DMA_Abort_IT+0x408>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e031      	b.n	8004bde <HAL_DMA_Abort_IT+0x40a>
 8004b7a:	bf00      	nop
 8004b7c:	40020010 	.word	0x40020010
 8004b80:	40020028 	.word	0x40020028
 8004b84:	40020040 	.word	0x40020040
 8004b88:	40020058 	.word	0x40020058
 8004b8c:	40020070 	.word	0x40020070
 8004b90:	40020088 	.word	0x40020088
 8004b94:	400200a0 	.word	0x400200a0
 8004b98:	400200b8 	.word	0x400200b8
 8004b9c:	40020410 	.word	0x40020410
 8004ba0:	40020428 	.word	0x40020428
 8004ba4:	40020440 	.word	0x40020440
 8004ba8:	40020458 	.word	0x40020458
 8004bac:	40020470 	.word	0x40020470
 8004bb0:	40020488 	.word	0x40020488
 8004bb4:	400204a0 	.word	0x400204a0
 8004bb8:	400204b8 	.word	0x400204b8
 8004bbc:	58025408 	.word	0x58025408
 8004bc0:	5802541c 	.word	0x5802541c
 8004bc4:	58025430 	.word	0x58025430
 8004bc8:	58025444 	.word	0x58025444
 8004bcc:	58025458 	.word	0x58025458
 8004bd0:	5802546c 	.word	0x5802546c
 8004bd4:	58025480 	.word	0x58025480
 8004bd8:	58025494 	.word	0x58025494
 8004bdc:	2300      	movs	r3, #0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d028      	beq.n	8004c34 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bf0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bfc:	f003 031f 	and.w	r3, r3, #31
 8004c00:	2201      	movs	r2, #1
 8004c02:	409a      	lsls	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004c10:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00c      	beq.n	8004c34 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c28:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004c32:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop

08004c60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08a      	sub	sp, #40	@ 0x28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c6c:	4b67      	ldr	r3, [pc, #412]	@ (8004e0c <HAL_DMA_IRQHandler+0x1ac>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a67      	ldr	r2, [pc, #412]	@ (8004e10 <HAL_DMA_IRQHandler+0x1b0>)
 8004c72:	fba2 2303 	umull	r2, r3, r2, r3
 8004c76:	0a9b      	lsrs	r3, r3, #10
 8004c78:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c7e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c84:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a5f      	ldr	r2, [pc, #380]	@ (8004e14 <HAL_DMA_IRQHandler+0x1b4>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d04a      	beq.n	8004d32 <HAL_DMA_IRQHandler+0xd2>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a5d      	ldr	r2, [pc, #372]	@ (8004e18 <HAL_DMA_IRQHandler+0x1b8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d045      	beq.n	8004d32 <HAL_DMA_IRQHandler+0xd2>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a5c      	ldr	r2, [pc, #368]	@ (8004e1c <HAL_DMA_IRQHandler+0x1bc>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d040      	beq.n	8004d32 <HAL_DMA_IRQHandler+0xd2>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a5a      	ldr	r2, [pc, #360]	@ (8004e20 <HAL_DMA_IRQHandler+0x1c0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d03b      	beq.n	8004d32 <HAL_DMA_IRQHandler+0xd2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a59      	ldr	r2, [pc, #356]	@ (8004e24 <HAL_DMA_IRQHandler+0x1c4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d036      	beq.n	8004d32 <HAL_DMA_IRQHandler+0xd2>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a57      	ldr	r2, [pc, #348]	@ (8004e28 <HAL_DMA_IRQHandler+0x1c8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d031      	beq.n	8004d32 <HAL_DMA_IRQHandler+0xd2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a56      	ldr	r2, [pc, #344]	@ (8004e2c <HAL_DMA_IRQHandler+0x1cc>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d02c      	beq.n	8004d32 <HAL_DMA_IRQHandler+0xd2>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a54      	ldr	r2, [pc, #336]	@ (8004e30 <HAL_DMA_IRQHandler+0x1d0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d027      	beq.n	8004d32 <HAL_DMA_IRQHandler+0xd2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a53      	ldr	r2, [pc, #332]	@ (8004e34 <HAL_DMA_IRQHandler+0x1d4>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d022      	beq.n	8004d32 <HAL_DMA_IRQHandler+0xd2>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a51      	ldr	r2, [pc, #324]	@ (8004e38 <HAL_DMA_IRQHandler+0x1d8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d01d      	beq.n	8004d32 <HAL_DMA_IRQHandler+0xd2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a50      	ldr	r2, [pc, #320]	@ (8004e3c <HAL_DMA_IRQHandler+0x1dc>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d018      	beq.n	8004d32 <HAL_DMA_IRQHandler+0xd2>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a4e      	ldr	r2, [pc, #312]	@ (8004e40 <HAL_DMA_IRQHandler+0x1e0>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d013      	beq.n	8004d32 <HAL_DMA_IRQHandler+0xd2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a4d      	ldr	r2, [pc, #308]	@ (8004e44 <HAL_DMA_IRQHandler+0x1e4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00e      	beq.n	8004d32 <HAL_DMA_IRQHandler+0xd2>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a4b      	ldr	r2, [pc, #300]	@ (8004e48 <HAL_DMA_IRQHandler+0x1e8>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d009      	beq.n	8004d32 <HAL_DMA_IRQHandler+0xd2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a4a      	ldr	r2, [pc, #296]	@ (8004e4c <HAL_DMA_IRQHandler+0x1ec>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d004      	beq.n	8004d32 <HAL_DMA_IRQHandler+0xd2>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a48      	ldr	r2, [pc, #288]	@ (8004e50 <HAL_DMA_IRQHandler+0x1f0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d101      	bne.n	8004d36 <HAL_DMA_IRQHandler+0xd6>
 8004d32:	2301      	movs	r3, #1
 8004d34:	e000      	b.n	8004d38 <HAL_DMA_IRQHandler+0xd8>
 8004d36:	2300      	movs	r3, #0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 842b 	beq.w	8005594 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d42:	f003 031f 	and.w	r3, r3, #31
 8004d46:	2208      	movs	r2, #8
 8004d48:	409a      	lsls	r2, r3
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 80a2 	beq.w	8004e98 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a2e      	ldr	r2, [pc, #184]	@ (8004e14 <HAL_DMA_IRQHandler+0x1b4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d04a      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x194>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a2d      	ldr	r2, [pc, #180]	@ (8004e18 <HAL_DMA_IRQHandler+0x1b8>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d045      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x194>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a2b      	ldr	r2, [pc, #172]	@ (8004e1c <HAL_DMA_IRQHandler+0x1bc>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d040      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x194>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a2a      	ldr	r2, [pc, #168]	@ (8004e20 <HAL_DMA_IRQHandler+0x1c0>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d03b      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x194>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a28      	ldr	r2, [pc, #160]	@ (8004e24 <HAL_DMA_IRQHandler+0x1c4>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d036      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x194>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a27      	ldr	r2, [pc, #156]	@ (8004e28 <HAL_DMA_IRQHandler+0x1c8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d031      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x194>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a25      	ldr	r2, [pc, #148]	@ (8004e2c <HAL_DMA_IRQHandler+0x1cc>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d02c      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x194>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a24      	ldr	r2, [pc, #144]	@ (8004e30 <HAL_DMA_IRQHandler+0x1d0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d027      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x194>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a22      	ldr	r2, [pc, #136]	@ (8004e34 <HAL_DMA_IRQHandler+0x1d4>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d022      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x194>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a21      	ldr	r2, [pc, #132]	@ (8004e38 <HAL_DMA_IRQHandler+0x1d8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d01d      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x194>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a1f      	ldr	r2, [pc, #124]	@ (8004e3c <HAL_DMA_IRQHandler+0x1dc>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d018      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x194>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8004e40 <HAL_DMA_IRQHandler+0x1e0>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d013      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x194>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a1c      	ldr	r2, [pc, #112]	@ (8004e44 <HAL_DMA_IRQHandler+0x1e4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00e      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x194>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a1b      	ldr	r2, [pc, #108]	@ (8004e48 <HAL_DMA_IRQHandler+0x1e8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d009      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x194>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a19      	ldr	r2, [pc, #100]	@ (8004e4c <HAL_DMA_IRQHandler+0x1ec>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d004      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x194>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a18      	ldr	r2, [pc, #96]	@ (8004e50 <HAL_DMA_IRQHandler+0x1f0>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d12f      	bne.n	8004e54 <HAL_DMA_IRQHandler+0x1f4>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bf14      	ite	ne
 8004e02:	2301      	movne	r3, #1
 8004e04:	2300      	moveq	r3, #0
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	e02e      	b.n	8004e68 <HAL_DMA_IRQHandler+0x208>
 8004e0a:	bf00      	nop
 8004e0c:	24000000 	.word	0x24000000
 8004e10:	1b4e81b5 	.word	0x1b4e81b5
 8004e14:	40020010 	.word	0x40020010
 8004e18:	40020028 	.word	0x40020028
 8004e1c:	40020040 	.word	0x40020040
 8004e20:	40020058 	.word	0x40020058
 8004e24:	40020070 	.word	0x40020070
 8004e28:	40020088 	.word	0x40020088
 8004e2c:	400200a0 	.word	0x400200a0
 8004e30:	400200b8 	.word	0x400200b8
 8004e34:	40020410 	.word	0x40020410
 8004e38:	40020428 	.word	0x40020428
 8004e3c:	40020440 	.word	0x40020440
 8004e40:	40020458 	.word	0x40020458
 8004e44:	40020470 	.word	0x40020470
 8004e48:	40020488 	.word	0x40020488
 8004e4c:	400204a0 	.word	0x400204a0
 8004e50:	400204b8 	.word	0x400204b8
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0308 	and.w	r3, r3, #8
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	bf14      	ite	ne
 8004e62:	2301      	movne	r3, #1
 8004e64:	2300      	moveq	r3, #0
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d015      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0204 	bic.w	r2, r2, #4
 8004e7a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	2208      	movs	r2, #8
 8004e86:	409a      	lsls	r2, r3
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e90:	f043 0201 	orr.w	r2, r3, #1
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e9c:	f003 031f 	and.w	r3, r3, #31
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d06e      	beq.n	8004f8c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a69      	ldr	r2, [pc, #420]	@ (8005058 <HAL_DMA_IRQHandler+0x3f8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d04a      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x2ee>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a67      	ldr	r2, [pc, #412]	@ (800505c <HAL_DMA_IRQHandler+0x3fc>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d045      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x2ee>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a66      	ldr	r2, [pc, #408]	@ (8005060 <HAL_DMA_IRQHandler+0x400>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d040      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x2ee>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a64      	ldr	r2, [pc, #400]	@ (8005064 <HAL_DMA_IRQHandler+0x404>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d03b      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x2ee>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a63      	ldr	r2, [pc, #396]	@ (8005068 <HAL_DMA_IRQHandler+0x408>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d036      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x2ee>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a61      	ldr	r2, [pc, #388]	@ (800506c <HAL_DMA_IRQHandler+0x40c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d031      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x2ee>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a60      	ldr	r2, [pc, #384]	@ (8005070 <HAL_DMA_IRQHandler+0x410>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d02c      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x2ee>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a5e      	ldr	r2, [pc, #376]	@ (8005074 <HAL_DMA_IRQHandler+0x414>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d027      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x2ee>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a5d      	ldr	r2, [pc, #372]	@ (8005078 <HAL_DMA_IRQHandler+0x418>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d022      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x2ee>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a5b      	ldr	r2, [pc, #364]	@ (800507c <HAL_DMA_IRQHandler+0x41c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d01d      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x2ee>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a5a      	ldr	r2, [pc, #360]	@ (8005080 <HAL_DMA_IRQHandler+0x420>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d018      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x2ee>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a58      	ldr	r2, [pc, #352]	@ (8005084 <HAL_DMA_IRQHandler+0x424>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d013      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x2ee>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a57      	ldr	r2, [pc, #348]	@ (8005088 <HAL_DMA_IRQHandler+0x428>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00e      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x2ee>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a55      	ldr	r2, [pc, #340]	@ (800508c <HAL_DMA_IRQHandler+0x42c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d009      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x2ee>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a54      	ldr	r2, [pc, #336]	@ (8005090 <HAL_DMA_IRQHandler+0x430>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d004      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x2ee>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a52      	ldr	r2, [pc, #328]	@ (8005094 <HAL_DMA_IRQHandler+0x434>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d10a      	bne.n	8004f64 <HAL_DMA_IRQHandler+0x304>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bf14      	ite	ne
 8004f5c:	2301      	movne	r3, #1
 8004f5e:	2300      	moveq	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	e003      	b.n	8004f6c <HAL_DMA_IRQHandler+0x30c>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00d      	beq.n	8004f8c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f74:	f003 031f 	and.w	r3, r3, #31
 8004f78:	2201      	movs	r2, #1
 8004f7a:	409a      	lsls	r2, r3
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f84:	f043 0202 	orr.w	r2, r3, #2
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f90:	f003 031f 	and.w	r3, r3, #31
 8004f94:	2204      	movs	r2, #4
 8004f96:	409a      	lsls	r2, r3
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 808f 	beq.w	80050c0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a2c      	ldr	r2, [pc, #176]	@ (8005058 <HAL_DMA_IRQHandler+0x3f8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d04a      	beq.n	8005042 <HAL_DMA_IRQHandler+0x3e2>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a2a      	ldr	r2, [pc, #168]	@ (800505c <HAL_DMA_IRQHandler+0x3fc>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d045      	beq.n	8005042 <HAL_DMA_IRQHandler+0x3e2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a29      	ldr	r2, [pc, #164]	@ (8005060 <HAL_DMA_IRQHandler+0x400>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d040      	beq.n	8005042 <HAL_DMA_IRQHandler+0x3e2>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a27      	ldr	r2, [pc, #156]	@ (8005064 <HAL_DMA_IRQHandler+0x404>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d03b      	beq.n	8005042 <HAL_DMA_IRQHandler+0x3e2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a26      	ldr	r2, [pc, #152]	@ (8005068 <HAL_DMA_IRQHandler+0x408>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d036      	beq.n	8005042 <HAL_DMA_IRQHandler+0x3e2>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a24      	ldr	r2, [pc, #144]	@ (800506c <HAL_DMA_IRQHandler+0x40c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d031      	beq.n	8005042 <HAL_DMA_IRQHandler+0x3e2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a23      	ldr	r2, [pc, #140]	@ (8005070 <HAL_DMA_IRQHandler+0x410>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d02c      	beq.n	8005042 <HAL_DMA_IRQHandler+0x3e2>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a21      	ldr	r2, [pc, #132]	@ (8005074 <HAL_DMA_IRQHandler+0x414>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d027      	beq.n	8005042 <HAL_DMA_IRQHandler+0x3e2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a20      	ldr	r2, [pc, #128]	@ (8005078 <HAL_DMA_IRQHandler+0x418>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d022      	beq.n	8005042 <HAL_DMA_IRQHandler+0x3e2>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a1e      	ldr	r2, [pc, #120]	@ (800507c <HAL_DMA_IRQHandler+0x41c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d01d      	beq.n	8005042 <HAL_DMA_IRQHandler+0x3e2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a1d      	ldr	r2, [pc, #116]	@ (8005080 <HAL_DMA_IRQHandler+0x420>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d018      	beq.n	8005042 <HAL_DMA_IRQHandler+0x3e2>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a1b      	ldr	r2, [pc, #108]	@ (8005084 <HAL_DMA_IRQHandler+0x424>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d013      	beq.n	8005042 <HAL_DMA_IRQHandler+0x3e2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a1a      	ldr	r2, [pc, #104]	@ (8005088 <HAL_DMA_IRQHandler+0x428>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00e      	beq.n	8005042 <HAL_DMA_IRQHandler+0x3e2>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a18      	ldr	r2, [pc, #96]	@ (800508c <HAL_DMA_IRQHandler+0x42c>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d009      	beq.n	8005042 <HAL_DMA_IRQHandler+0x3e2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a17      	ldr	r2, [pc, #92]	@ (8005090 <HAL_DMA_IRQHandler+0x430>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d004      	beq.n	8005042 <HAL_DMA_IRQHandler+0x3e2>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a15      	ldr	r2, [pc, #84]	@ (8005094 <HAL_DMA_IRQHandler+0x434>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d12a      	bne.n	8005098 <HAL_DMA_IRQHandler+0x438>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	bf14      	ite	ne
 8005050:	2301      	movne	r3, #1
 8005052:	2300      	moveq	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	e023      	b.n	80050a0 <HAL_DMA_IRQHandler+0x440>
 8005058:	40020010 	.word	0x40020010
 800505c:	40020028 	.word	0x40020028
 8005060:	40020040 	.word	0x40020040
 8005064:	40020058 	.word	0x40020058
 8005068:	40020070 	.word	0x40020070
 800506c:	40020088 	.word	0x40020088
 8005070:	400200a0 	.word	0x400200a0
 8005074:	400200b8 	.word	0x400200b8
 8005078:	40020410 	.word	0x40020410
 800507c:	40020428 	.word	0x40020428
 8005080:	40020440 	.word	0x40020440
 8005084:	40020458 	.word	0x40020458
 8005088:	40020470 	.word	0x40020470
 800508c:	40020488 	.word	0x40020488
 8005090:	400204a0 	.word	0x400204a0
 8005094:	400204b8 	.word	0x400204b8
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2300      	movs	r3, #0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00d      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a8:	f003 031f 	and.w	r3, r3, #31
 80050ac:	2204      	movs	r2, #4
 80050ae:	409a      	lsls	r2, r3
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b8:	f043 0204 	orr.w	r2, r3, #4
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050c4:	f003 031f 	and.w	r3, r3, #31
 80050c8:	2210      	movs	r2, #16
 80050ca:	409a      	lsls	r2, r3
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	4013      	ands	r3, r2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 80a6 	beq.w	8005222 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a85      	ldr	r2, [pc, #532]	@ (80052f0 <HAL_DMA_IRQHandler+0x690>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d04a      	beq.n	8005176 <HAL_DMA_IRQHandler+0x516>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a83      	ldr	r2, [pc, #524]	@ (80052f4 <HAL_DMA_IRQHandler+0x694>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d045      	beq.n	8005176 <HAL_DMA_IRQHandler+0x516>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a82      	ldr	r2, [pc, #520]	@ (80052f8 <HAL_DMA_IRQHandler+0x698>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d040      	beq.n	8005176 <HAL_DMA_IRQHandler+0x516>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a80      	ldr	r2, [pc, #512]	@ (80052fc <HAL_DMA_IRQHandler+0x69c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d03b      	beq.n	8005176 <HAL_DMA_IRQHandler+0x516>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a7f      	ldr	r2, [pc, #508]	@ (8005300 <HAL_DMA_IRQHandler+0x6a0>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d036      	beq.n	8005176 <HAL_DMA_IRQHandler+0x516>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a7d      	ldr	r2, [pc, #500]	@ (8005304 <HAL_DMA_IRQHandler+0x6a4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d031      	beq.n	8005176 <HAL_DMA_IRQHandler+0x516>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a7c      	ldr	r2, [pc, #496]	@ (8005308 <HAL_DMA_IRQHandler+0x6a8>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d02c      	beq.n	8005176 <HAL_DMA_IRQHandler+0x516>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a7a      	ldr	r2, [pc, #488]	@ (800530c <HAL_DMA_IRQHandler+0x6ac>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d027      	beq.n	8005176 <HAL_DMA_IRQHandler+0x516>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a79      	ldr	r2, [pc, #484]	@ (8005310 <HAL_DMA_IRQHandler+0x6b0>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d022      	beq.n	8005176 <HAL_DMA_IRQHandler+0x516>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a77      	ldr	r2, [pc, #476]	@ (8005314 <HAL_DMA_IRQHandler+0x6b4>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d01d      	beq.n	8005176 <HAL_DMA_IRQHandler+0x516>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a76      	ldr	r2, [pc, #472]	@ (8005318 <HAL_DMA_IRQHandler+0x6b8>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d018      	beq.n	8005176 <HAL_DMA_IRQHandler+0x516>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a74      	ldr	r2, [pc, #464]	@ (800531c <HAL_DMA_IRQHandler+0x6bc>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d013      	beq.n	8005176 <HAL_DMA_IRQHandler+0x516>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a73      	ldr	r2, [pc, #460]	@ (8005320 <HAL_DMA_IRQHandler+0x6c0>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d00e      	beq.n	8005176 <HAL_DMA_IRQHandler+0x516>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a71      	ldr	r2, [pc, #452]	@ (8005324 <HAL_DMA_IRQHandler+0x6c4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d009      	beq.n	8005176 <HAL_DMA_IRQHandler+0x516>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a70      	ldr	r2, [pc, #448]	@ (8005328 <HAL_DMA_IRQHandler+0x6c8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d004      	beq.n	8005176 <HAL_DMA_IRQHandler+0x516>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a6e      	ldr	r2, [pc, #440]	@ (800532c <HAL_DMA_IRQHandler+0x6cc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d10a      	bne.n	800518c <HAL_DMA_IRQHandler+0x52c>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b00      	cmp	r3, #0
 8005182:	bf14      	ite	ne
 8005184:	2301      	movne	r3, #1
 8005186:	2300      	moveq	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	e009      	b.n	80051a0 <HAL_DMA_IRQHandler+0x540>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	2b00      	cmp	r3, #0
 8005198:	bf14      	ite	ne
 800519a:	2301      	movne	r3, #1
 800519c:	2300      	moveq	r3, #0
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d03e      	beq.n	8005222 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a8:	f003 031f 	and.w	r3, r3, #31
 80051ac:	2210      	movs	r2, #16
 80051ae:	409a      	lsls	r2, r3
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d018      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d108      	bne.n	80051e2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d024      	beq.n	8005222 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	4798      	blx	r3
 80051e0:	e01f      	b.n	8005222 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d01b      	beq.n	8005222 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	4798      	blx	r3
 80051f2:	e016      	b.n	8005222 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d107      	bne.n	8005212 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0208 	bic.w	r2, r2, #8
 8005210:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005226:	f003 031f 	and.w	r3, r3, #31
 800522a:	2220      	movs	r2, #32
 800522c:	409a      	lsls	r2, r3
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	4013      	ands	r3, r2
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 8110 	beq.w	8005458 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a2c      	ldr	r2, [pc, #176]	@ (80052f0 <HAL_DMA_IRQHandler+0x690>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d04a      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x678>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a2b      	ldr	r2, [pc, #172]	@ (80052f4 <HAL_DMA_IRQHandler+0x694>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d045      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x678>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a29      	ldr	r2, [pc, #164]	@ (80052f8 <HAL_DMA_IRQHandler+0x698>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d040      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x678>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a28      	ldr	r2, [pc, #160]	@ (80052fc <HAL_DMA_IRQHandler+0x69c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d03b      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x678>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a26      	ldr	r2, [pc, #152]	@ (8005300 <HAL_DMA_IRQHandler+0x6a0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d036      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x678>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a25      	ldr	r2, [pc, #148]	@ (8005304 <HAL_DMA_IRQHandler+0x6a4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d031      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x678>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a23      	ldr	r2, [pc, #140]	@ (8005308 <HAL_DMA_IRQHandler+0x6a8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d02c      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x678>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a22      	ldr	r2, [pc, #136]	@ (800530c <HAL_DMA_IRQHandler+0x6ac>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d027      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x678>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a20      	ldr	r2, [pc, #128]	@ (8005310 <HAL_DMA_IRQHandler+0x6b0>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d022      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x678>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a1f      	ldr	r2, [pc, #124]	@ (8005314 <HAL_DMA_IRQHandler+0x6b4>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d01d      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x678>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005318 <HAL_DMA_IRQHandler+0x6b8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d018      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x678>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a1c      	ldr	r2, [pc, #112]	@ (800531c <HAL_DMA_IRQHandler+0x6bc>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d013      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x678>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a1a      	ldr	r2, [pc, #104]	@ (8005320 <HAL_DMA_IRQHandler+0x6c0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d00e      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x678>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a19      	ldr	r2, [pc, #100]	@ (8005324 <HAL_DMA_IRQHandler+0x6c4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d009      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x678>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a17      	ldr	r2, [pc, #92]	@ (8005328 <HAL_DMA_IRQHandler+0x6c8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d004      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x678>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a16      	ldr	r2, [pc, #88]	@ (800532c <HAL_DMA_IRQHandler+0x6cc>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d12b      	bne.n	8005330 <HAL_DMA_IRQHandler+0x6d0>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0310 	and.w	r3, r3, #16
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	bf14      	ite	ne
 80052e6:	2301      	movne	r3, #1
 80052e8:	2300      	moveq	r3, #0
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	e02a      	b.n	8005344 <HAL_DMA_IRQHandler+0x6e4>
 80052ee:	bf00      	nop
 80052f0:	40020010 	.word	0x40020010
 80052f4:	40020028 	.word	0x40020028
 80052f8:	40020040 	.word	0x40020040
 80052fc:	40020058 	.word	0x40020058
 8005300:	40020070 	.word	0x40020070
 8005304:	40020088 	.word	0x40020088
 8005308:	400200a0 	.word	0x400200a0
 800530c:	400200b8 	.word	0x400200b8
 8005310:	40020410 	.word	0x40020410
 8005314:	40020428 	.word	0x40020428
 8005318:	40020440 	.word	0x40020440
 800531c:	40020458 	.word	0x40020458
 8005320:	40020470 	.word	0x40020470
 8005324:	40020488 	.word	0x40020488
 8005328:	400204a0 	.word	0x400204a0
 800532c:	400204b8 	.word	0x400204b8
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	bf14      	ite	ne
 800533e:	2301      	movne	r3, #1
 8005340:	2300      	moveq	r3, #0
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 8087 	beq.w	8005458 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	2220      	movs	r2, #32
 8005354:	409a      	lsls	r2, r3
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b04      	cmp	r3, #4
 8005364:	d139      	bne.n	80053da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f022 0216 	bic.w	r2, r2, #22
 8005374:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695a      	ldr	r2, [r3, #20]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005384:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538a:	2b00      	cmp	r3, #0
 800538c:	d103      	bne.n	8005396 <HAL_DMA_IRQHandler+0x736>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005392:	2b00      	cmp	r3, #0
 8005394:	d007      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0208 	bic.w	r2, r2, #8
 80053a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053aa:	f003 031f 	and.w	r3, r3, #31
 80053ae:	223f      	movs	r2, #63	@ 0x3f
 80053b0:	409a      	lsls	r2, r3
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 834a 	beq.w	8005a64 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	4798      	blx	r3
          }
          return;
 80053d8:	e344      	b.n	8005a64 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d018      	beq.n	800541a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d108      	bne.n	8005408 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d02c      	beq.n	8005458 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	4798      	blx	r3
 8005406:	e027      	b.n	8005458 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540c:	2b00      	cmp	r3, #0
 800540e:	d023      	beq.n	8005458 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	4798      	blx	r3
 8005418:	e01e      	b.n	8005458 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10f      	bne.n	8005448 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0210 	bic.w	r2, r2, #16
 8005436:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 8306 	beq.w	8005a6e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 8088 	beq.w	8005580 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2204      	movs	r2, #4
 8005474:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a7a      	ldr	r2, [pc, #488]	@ (8005668 <HAL_DMA_IRQHandler+0xa08>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d04a      	beq.n	8005518 <HAL_DMA_IRQHandler+0x8b8>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a79      	ldr	r2, [pc, #484]	@ (800566c <HAL_DMA_IRQHandler+0xa0c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d045      	beq.n	8005518 <HAL_DMA_IRQHandler+0x8b8>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a77      	ldr	r2, [pc, #476]	@ (8005670 <HAL_DMA_IRQHandler+0xa10>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d040      	beq.n	8005518 <HAL_DMA_IRQHandler+0x8b8>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a76      	ldr	r2, [pc, #472]	@ (8005674 <HAL_DMA_IRQHandler+0xa14>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d03b      	beq.n	8005518 <HAL_DMA_IRQHandler+0x8b8>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a74      	ldr	r2, [pc, #464]	@ (8005678 <HAL_DMA_IRQHandler+0xa18>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d036      	beq.n	8005518 <HAL_DMA_IRQHandler+0x8b8>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a73      	ldr	r2, [pc, #460]	@ (800567c <HAL_DMA_IRQHandler+0xa1c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d031      	beq.n	8005518 <HAL_DMA_IRQHandler+0x8b8>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a71      	ldr	r2, [pc, #452]	@ (8005680 <HAL_DMA_IRQHandler+0xa20>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d02c      	beq.n	8005518 <HAL_DMA_IRQHandler+0x8b8>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a70      	ldr	r2, [pc, #448]	@ (8005684 <HAL_DMA_IRQHandler+0xa24>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d027      	beq.n	8005518 <HAL_DMA_IRQHandler+0x8b8>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a6e      	ldr	r2, [pc, #440]	@ (8005688 <HAL_DMA_IRQHandler+0xa28>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d022      	beq.n	8005518 <HAL_DMA_IRQHandler+0x8b8>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a6d      	ldr	r2, [pc, #436]	@ (800568c <HAL_DMA_IRQHandler+0xa2c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d01d      	beq.n	8005518 <HAL_DMA_IRQHandler+0x8b8>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a6b      	ldr	r2, [pc, #428]	@ (8005690 <HAL_DMA_IRQHandler+0xa30>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d018      	beq.n	8005518 <HAL_DMA_IRQHandler+0x8b8>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a6a      	ldr	r2, [pc, #424]	@ (8005694 <HAL_DMA_IRQHandler+0xa34>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d013      	beq.n	8005518 <HAL_DMA_IRQHandler+0x8b8>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a68      	ldr	r2, [pc, #416]	@ (8005698 <HAL_DMA_IRQHandler+0xa38>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00e      	beq.n	8005518 <HAL_DMA_IRQHandler+0x8b8>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a67      	ldr	r2, [pc, #412]	@ (800569c <HAL_DMA_IRQHandler+0xa3c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d009      	beq.n	8005518 <HAL_DMA_IRQHandler+0x8b8>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a65      	ldr	r2, [pc, #404]	@ (80056a0 <HAL_DMA_IRQHandler+0xa40>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d004      	beq.n	8005518 <HAL_DMA_IRQHandler+0x8b8>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a64      	ldr	r2, [pc, #400]	@ (80056a4 <HAL_DMA_IRQHandler+0xa44>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d108      	bne.n	800552a <HAL_DMA_IRQHandler+0x8ca>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0201 	bic.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	e007      	b.n	800553a <HAL_DMA_IRQHandler+0x8da>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 0201 	bic.w	r2, r2, #1
 8005538:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	3301      	adds	r3, #1
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005542:	429a      	cmp	r2, r3
 8005544:	d307      	bcc.n	8005556 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1f2      	bne.n	800553a <HAL_DMA_IRQHandler+0x8da>
 8005554:	e000      	b.n	8005558 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005556:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d004      	beq.n	8005570 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2203      	movs	r2, #3
 800556a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800556e:	e003      	b.n	8005578 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 8272 	beq.w	8005a6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	4798      	blx	r3
 8005592:	e26c      	b.n	8005a6e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a43      	ldr	r2, [pc, #268]	@ (80056a8 <HAL_DMA_IRQHandler+0xa48>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d022      	beq.n	80055e4 <HAL_DMA_IRQHandler+0x984>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a42      	ldr	r2, [pc, #264]	@ (80056ac <HAL_DMA_IRQHandler+0xa4c>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d01d      	beq.n	80055e4 <HAL_DMA_IRQHandler+0x984>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a40      	ldr	r2, [pc, #256]	@ (80056b0 <HAL_DMA_IRQHandler+0xa50>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d018      	beq.n	80055e4 <HAL_DMA_IRQHandler+0x984>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a3f      	ldr	r2, [pc, #252]	@ (80056b4 <HAL_DMA_IRQHandler+0xa54>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d013      	beq.n	80055e4 <HAL_DMA_IRQHandler+0x984>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a3d      	ldr	r2, [pc, #244]	@ (80056b8 <HAL_DMA_IRQHandler+0xa58>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d00e      	beq.n	80055e4 <HAL_DMA_IRQHandler+0x984>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a3c      	ldr	r2, [pc, #240]	@ (80056bc <HAL_DMA_IRQHandler+0xa5c>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d009      	beq.n	80055e4 <HAL_DMA_IRQHandler+0x984>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a3a      	ldr	r2, [pc, #232]	@ (80056c0 <HAL_DMA_IRQHandler+0xa60>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d004      	beq.n	80055e4 <HAL_DMA_IRQHandler+0x984>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a39      	ldr	r2, [pc, #228]	@ (80056c4 <HAL_DMA_IRQHandler+0xa64>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d101      	bne.n	80055e8 <HAL_DMA_IRQHandler+0x988>
 80055e4:	2301      	movs	r3, #1
 80055e6:	e000      	b.n	80055ea <HAL_DMA_IRQHandler+0x98a>
 80055e8:	2300      	movs	r3, #0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 823f 	beq.w	8005a6e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055fc:	f003 031f 	and.w	r3, r3, #31
 8005600:	2204      	movs	r2, #4
 8005602:	409a      	lsls	r2, r3
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	4013      	ands	r3, r2
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 80cd 	beq.w	80057a8 <HAL_DMA_IRQHandler+0xb48>
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 80c7 	beq.w	80057a8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800561e:	f003 031f 	and.w	r3, r3, #31
 8005622:	2204      	movs	r2, #4
 8005624:	409a      	lsls	r2, r3
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d049      	beq.n	80056c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d109      	bne.n	8005652 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 8210 	beq.w	8005a68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005650:	e20a      	b.n	8005a68 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 8206 	beq.w	8005a68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005664:	e200      	b.n	8005a68 <HAL_DMA_IRQHandler+0xe08>
 8005666:	bf00      	nop
 8005668:	40020010 	.word	0x40020010
 800566c:	40020028 	.word	0x40020028
 8005670:	40020040 	.word	0x40020040
 8005674:	40020058 	.word	0x40020058
 8005678:	40020070 	.word	0x40020070
 800567c:	40020088 	.word	0x40020088
 8005680:	400200a0 	.word	0x400200a0
 8005684:	400200b8 	.word	0x400200b8
 8005688:	40020410 	.word	0x40020410
 800568c:	40020428 	.word	0x40020428
 8005690:	40020440 	.word	0x40020440
 8005694:	40020458 	.word	0x40020458
 8005698:	40020470 	.word	0x40020470
 800569c:	40020488 	.word	0x40020488
 80056a0:	400204a0 	.word	0x400204a0
 80056a4:	400204b8 	.word	0x400204b8
 80056a8:	58025408 	.word	0x58025408
 80056ac:	5802541c 	.word	0x5802541c
 80056b0:	58025430 	.word	0x58025430
 80056b4:	58025444 	.word	0x58025444
 80056b8:	58025458 	.word	0x58025458
 80056bc:	5802546c 	.word	0x5802546c
 80056c0:	58025480 	.word	0x58025480
 80056c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f003 0320 	and.w	r3, r3, #32
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d160      	bne.n	8005794 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a7f      	ldr	r2, [pc, #508]	@ (80058d4 <HAL_DMA_IRQHandler+0xc74>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d04a      	beq.n	8005772 <HAL_DMA_IRQHandler+0xb12>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a7d      	ldr	r2, [pc, #500]	@ (80058d8 <HAL_DMA_IRQHandler+0xc78>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d045      	beq.n	8005772 <HAL_DMA_IRQHandler+0xb12>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a7c      	ldr	r2, [pc, #496]	@ (80058dc <HAL_DMA_IRQHandler+0xc7c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d040      	beq.n	8005772 <HAL_DMA_IRQHandler+0xb12>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a7a      	ldr	r2, [pc, #488]	@ (80058e0 <HAL_DMA_IRQHandler+0xc80>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d03b      	beq.n	8005772 <HAL_DMA_IRQHandler+0xb12>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a79      	ldr	r2, [pc, #484]	@ (80058e4 <HAL_DMA_IRQHandler+0xc84>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d036      	beq.n	8005772 <HAL_DMA_IRQHandler+0xb12>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a77      	ldr	r2, [pc, #476]	@ (80058e8 <HAL_DMA_IRQHandler+0xc88>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d031      	beq.n	8005772 <HAL_DMA_IRQHandler+0xb12>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a76      	ldr	r2, [pc, #472]	@ (80058ec <HAL_DMA_IRQHandler+0xc8c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d02c      	beq.n	8005772 <HAL_DMA_IRQHandler+0xb12>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a74      	ldr	r2, [pc, #464]	@ (80058f0 <HAL_DMA_IRQHandler+0xc90>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d027      	beq.n	8005772 <HAL_DMA_IRQHandler+0xb12>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a73      	ldr	r2, [pc, #460]	@ (80058f4 <HAL_DMA_IRQHandler+0xc94>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d022      	beq.n	8005772 <HAL_DMA_IRQHandler+0xb12>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a71      	ldr	r2, [pc, #452]	@ (80058f8 <HAL_DMA_IRQHandler+0xc98>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d01d      	beq.n	8005772 <HAL_DMA_IRQHandler+0xb12>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a70      	ldr	r2, [pc, #448]	@ (80058fc <HAL_DMA_IRQHandler+0xc9c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d018      	beq.n	8005772 <HAL_DMA_IRQHandler+0xb12>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a6e      	ldr	r2, [pc, #440]	@ (8005900 <HAL_DMA_IRQHandler+0xca0>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <HAL_DMA_IRQHandler+0xb12>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a6d      	ldr	r2, [pc, #436]	@ (8005904 <HAL_DMA_IRQHandler+0xca4>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d00e      	beq.n	8005772 <HAL_DMA_IRQHandler+0xb12>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a6b      	ldr	r2, [pc, #428]	@ (8005908 <HAL_DMA_IRQHandler+0xca8>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d009      	beq.n	8005772 <HAL_DMA_IRQHandler+0xb12>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a6a      	ldr	r2, [pc, #424]	@ (800590c <HAL_DMA_IRQHandler+0xcac>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d004      	beq.n	8005772 <HAL_DMA_IRQHandler+0xb12>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a68      	ldr	r2, [pc, #416]	@ (8005910 <HAL_DMA_IRQHandler+0xcb0>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d108      	bne.n	8005784 <HAL_DMA_IRQHandler+0xb24>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0208 	bic.w	r2, r2, #8
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	e007      	b.n	8005794 <HAL_DMA_IRQHandler+0xb34>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0204 	bic.w	r2, r2, #4
 8005792:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 8165 	beq.w	8005a68 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057a6:	e15f      	b.n	8005a68 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ac:	f003 031f 	and.w	r3, r3, #31
 80057b0:	2202      	movs	r2, #2
 80057b2:	409a      	lsls	r2, r3
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 80c5 	beq.w	8005948 <HAL_DMA_IRQHandler+0xce8>
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 80bf 	beq.w	8005948 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ce:	f003 031f 	and.w	r3, r3, #31
 80057d2:	2202      	movs	r2, #2
 80057d4:	409a      	lsls	r2, r3
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d018      	beq.n	8005816 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d109      	bne.n	8005802 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 813a 	beq.w	8005a6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005800:	e134      	b.n	8005a6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 8130 	beq.w	8005a6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005814:	e12a      	b.n	8005a6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b00      	cmp	r3, #0
 800581e:	f040 8089 	bne.w	8005934 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a2b      	ldr	r2, [pc, #172]	@ (80058d4 <HAL_DMA_IRQHandler+0xc74>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d04a      	beq.n	80058c2 <HAL_DMA_IRQHandler+0xc62>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a29      	ldr	r2, [pc, #164]	@ (80058d8 <HAL_DMA_IRQHandler+0xc78>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d045      	beq.n	80058c2 <HAL_DMA_IRQHandler+0xc62>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a28      	ldr	r2, [pc, #160]	@ (80058dc <HAL_DMA_IRQHandler+0xc7c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d040      	beq.n	80058c2 <HAL_DMA_IRQHandler+0xc62>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a26      	ldr	r2, [pc, #152]	@ (80058e0 <HAL_DMA_IRQHandler+0xc80>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d03b      	beq.n	80058c2 <HAL_DMA_IRQHandler+0xc62>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a25      	ldr	r2, [pc, #148]	@ (80058e4 <HAL_DMA_IRQHandler+0xc84>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d036      	beq.n	80058c2 <HAL_DMA_IRQHandler+0xc62>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a23      	ldr	r2, [pc, #140]	@ (80058e8 <HAL_DMA_IRQHandler+0xc88>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d031      	beq.n	80058c2 <HAL_DMA_IRQHandler+0xc62>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a22      	ldr	r2, [pc, #136]	@ (80058ec <HAL_DMA_IRQHandler+0xc8c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d02c      	beq.n	80058c2 <HAL_DMA_IRQHandler+0xc62>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a20      	ldr	r2, [pc, #128]	@ (80058f0 <HAL_DMA_IRQHandler+0xc90>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d027      	beq.n	80058c2 <HAL_DMA_IRQHandler+0xc62>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a1f      	ldr	r2, [pc, #124]	@ (80058f4 <HAL_DMA_IRQHandler+0xc94>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d022      	beq.n	80058c2 <HAL_DMA_IRQHandler+0xc62>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a1d      	ldr	r2, [pc, #116]	@ (80058f8 <HAL_DMA_IRQHandler+0xc98>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d01d      	beq.n	80058c2 <HAL_DMA_IRQHandler+0xc62>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a1c      	ldr	r2, [pc, #112]	@ (80058fc <HAL_DMA_IRQHandler+0xc9c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d018      	beq.n	80058c2 <HAL_DMA_IRQHandler+0xc62>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a1a      	ldr	r2, [pc, #104]	@ (8005900 <HAL_DMA_IRQHandler+0xca0>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d013      	beq.n	80058c2 <HAL_DMA_IRQHandler+0xc62>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a19      	ldr	r2, [pc, #100]	@ (8005904 <HAL_DMA_IRQHandler+0xca4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d00e      	beq.n	80058c2 <HAL_DMA_IRQHandler+0xc62>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a17      	ldr	r2, [pc, #92]	@ (8005908 <HAL_DMA_IRQHandler+0xca8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d009      	beq.n	80058c2 <HAL_DMA_IRQHandler+0xc62>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a16      	ldr	r2, [pc, #88]	@ (800590c <HAL_DMA_IRQHandler+0xcac>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d004      	beq.n	80058c2 <HAL_DMA_IRQHandler+0xc62>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a14      	ldr	r2, [pc, #80]	@ (8005910 <HAL_DMA_IRQHandler+0xcb0>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d128      	bne.n	8005914 <HAL_DMA_IRQHandler+0xcb4>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0214 	bic.w	r2, r2, #20
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	e027      	b.n	8005924 <HAL_DMA_IRQHandler+0xcc4>
 80058d4:	40020010 	.word	0x40020010
 80058d8:	40020028 	.word	0x40020028
 80058dc:	40020040 	.word	0x40020040
 80058e0:	40020058 	.word	0x40020058
 80058e4:	40020070 	.word	0x40020070
 80058e8:	40020088 	.word	0x40020088
 80058ec:	400200a0 	.word	0x400200a0
 80058f0:	400200b8 	.word	0x400200b8
 80058f4:	40020410 	.word	0x40020410
 80058f8:	40020428 	.word	0x40020428
 80058fc:	40020440 	.word	0x40020440
 8005900:	40020458 	.word	0x40020458
 8005904:	40020470 	.word	0x40020470
 8005908:	40020488 	.word	0x40020488
 800590c:	400204a0 	.word	0x400204a0
 8005910:	400204b8 	.word	0x400204b8
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 020a 	bic.w	r2, r2, #10
 8005922:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 8097 	beq.w	8005a6c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005946:	e091      	b.n	8005a6c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800594c:	f003 031f 	and.w	r3, r3, #31
 8005950:	2208      	movs	r2, #8
 8005952:	409a      	lsls	r2, r3
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	4013      	ands	r3, r2
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 8088 	beq.w	8005a6e <HAL_DMA_IRQHandler+0xe0e>
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f003 0308 	and.w	r3, r3, #8
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 8082 	beq.w	8005a6e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a41      	ldr	r2, [pc, #260]	@ (8005a74 <HAL_DMA_IRQHandler+0xe14>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d04a      	beq.n	8005a0a <HAL_DMA_IRQHandler+0xdaa>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a3f      	ldr	r2, [pc, #252]	@ (8005a78 <HAL_DMA_IRQHandler+0xe18>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d045      	beq.n	8005a0a <HAL_DMA_IRQHandler+0xdaa>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a3e      	ldr	r2, [pc, #248]	@ (8005a7c <HAL_DMA_IRQHandler+0xe1c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d040      	beq.n	8005a0a <HAL_DMA_IRQHandler+0xdaa>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a3c      	ldr	r2, [pc, #240]	@ (8005a80 <HAL_DMA_IRQHandler+0xe20>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d03b      	beq.n	8005a0a <HAL_DMA_IRQHandler+0xdaa>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a3b      	ldr	r2, [pc, #236]	@ (8005a84 <HAL_DMA_IRQHandler+0xe24>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d036      	beq.n	8005a0a <HAL_DMA_IRQHandler+0xdaa>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a39      	ldr	r2, [pc, #228]	@ (8005a88 <HAL_DMA_IRQHandler+0xe28>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d031      	beq.n	8005a0a <HAL_DMA_IRQHandler+0xdaa>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a38      	ldr	r2, [pc, #224]	@ (8005a8c <HAL_DMA_IRQHandler+0xe2c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d02c      	beq.n	8005a0a <HAL_DMA_IRQHandler+0xdaa>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a36      	ldr	r2, [pc, #216]	@ (8005a90 <HAL_DMA_IRQHandler+0xe30>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d027      	beq.n	8005a0a <HAL_DMA_IRQHandler+0xdaa>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a35      	ldr	r2, [pc, #212]	@ (8005a94 <HAL_DMA_IRQHandler+0xe34>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d022      	beq.n	8005a0a <HAL_DMA_IRQHandler+0xdaa>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a33      	ldr	r2, [pc, #204]	@ (8005a98 <HAL_DMA_IRQHandler+0xe38>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d01d      	beq.n	8005a0a <HAL_DMA_IRQHandler+0xdaa>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a32      	ldr	r2, [pc, #200]	@ (8005a9c <HAL_DMA_IRQHandler+0xe3c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d018      	beq.n	8005a0a <HAL_DMA_IRQHandler+0xdaa>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a30      	ldr	r2, [pc, #192]	@ (8005aa0 <HAL_DMA_IRQHandler+0xe40>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d013      	beq.n	8005a0a <HAL_DMA_IRQHandler+0xdaa>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a2f      	ldr	r2, [pc, #188]	@ (8005aa4 <HAL_DMA_IRQHandler+0xe44>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00e      	beq.n	8005a0a <HAL_DMA_IRQHandler+0xdaa>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a2d      	ldr	r2, [pc, #180]	@ (8005aa8 <HAL_DMA_IRQHandler+0xe48>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d009      	beq.n	8005a0a <HAL_DMA_IRQHandler+0xdaa>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a2c      	ldr	r2, [pc, #176]	@ (8005aac <HAL_DMA_IRQHandler+0xe4c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d004      	beq.n	8005a0a <HAL_DMA_IRQHandler+0xdaa>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a2a      	ldr	r2, [pc, #168]	@ (8005ab0 <HAL_DMA_IRQHandler+0xe50>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d108      	bne.n	8005a1c <HAL_DMA_IRQHandler+0xdbc>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 021c 	bic.w	r2, r2, #28
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	e007      	b.n	8005a2c <HAL_DMA_IRQHandler+0xdcc>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 020e 	bic.w	r2, r2, #14
 8005a2a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a30:	f003 031f 	and.w	r3, r3, #31
 8005a34:	2201      	movs	r2, #1
 8005a36:	409a      	lsls	r2, r3
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d009      	beq.n	8005a6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	4798      	blx	r3
 8005a62:	e004      	b.n	8005a6e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005a64:	bf00      	nop
 8005a66:	e002      	b.n	8005a6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a68:	bf00      	nop
 8005a6a:	e000      	b.n	8005a6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a6c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005a6e:	3728      	adds	r7, #40	@ 0x28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	40020010 	.word	0x40020010
 8005a78:	40020028 	.word	0x40020028
 8005a7c:	40020040 	.word	0x40020040
 8005a80:	40020058 	.word	0x40020058
 8005a84:	40020070 	.word	0x40020070
 8005a88:	40020088 	.word	0x40020088
 8005a8c:	400200a0 	.word	0x400200a0
 8005a90:	400200b8 	.word	0x400200b8
 8005a94:	40020410 	.word	0x40020410
 8005a98:	40020428 	.word	0x40020428
 8005a9c:	40020440 	.word	0x40020440
 8005aa0:	40020458 	.word	0x40020458
 8005aa4:	40020470 	.word	0x40020470
 8005aa8:	40020488 	.word	0x40020488
 8005aac:	400204a0 	.word	0x400204a0
 8005ab0:	400204b8 	.word	0x400204b8

08005ab4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ade:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ae4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a7f      	ldr	r2, [pc, #508]	@ (8005ce8 <DMA_SetConfig+0x21c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d072      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a7d      	ldr	r2, [pc, #500]	@ (8005cec <DMA_SetConfig+0x220>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d06d      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a7c      	ldr	r2, [pc, #496]	@ (8005cf0 <DMA_SetConfig+0x224>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d068      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a7a      	ldr	r2, [pc, #488]	@ (8005cf4 <DMA_SetConfig+0x228>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d063      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a79      	ldr	r2, [pc, #484]	@ (8005cf8 <DMA_SetConfig+0x22c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d05e      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a77      	ldr	r2, [pc, #476]	@ (8005cfc <DMA_SetConfig+0x230>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d059      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a76      	ldr	r2, [pc, #472]	@ (8005d00 <DMA_SetConfig+0x234>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d054      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a74      	ldr	r2, [pc, #464]	@ (8005d04 <DMA_SetConfig+0x238>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d04f      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a73      	ldr	r2, [pc, #460]	@ (8005d08 <DMA_SetConfig+0x23c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d04a      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a71      	ldr	r2, [pc, #452]	@ (8005d0c <DMA_SetConfig+0x240>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d045      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a70      	ldr	r2, [pc, #448]	@ (8005d10 <DMA_SetConfig+0x244>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d040      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a6e      	ldr	r2, [pc, #440]	@ (8005d14 <DMA_SetConfig+0x248>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d03b      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a6d      	ldr	r2, [pc, #436]	@ (8005d18 <DMA_SetConfig+0x24c>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d036      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a6b      	ldr	r2, [pc, #428]	@ (8005d1c <DMA_SetConfig+0x250>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d031      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a6a      	ldr	r2, [pc, #424]	@ (8005d20 <DMA_SetConfig+0x254>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d02c      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a68      	ldr	r2, [pc, #416]	@ (8005d24 <DMA_SetConfig+0x258>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d027      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a67      	ldr	r2, [pc, #412]	@ (8005d28 <DMA_SetConfig+0x25c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d022      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a65      	ldr	r2, [pc, #404]	@ (8005d2c <DMA_SetConfig+0x260>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d01d      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a64      	ldr	r2, [pc, #400]	@ (8005d30 <DMA_SetConfig+0x264>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d018      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a62      	ldr	r2, [pc, #392]	@ (8005d34 <DMA_SetConfig+0x268>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d013      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a61      	ldr	r2, [pc, #388]	@ (8005d38 <DMA_SetConfig+0x26c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00e      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a5f      	ldr	r2, [pc, #380]	@ (8005d3c <DMA_SetConfig+0x270>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d009      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a5e      	ldr	r2, [pc, #376]	@ (8005d40 <DMA_SetConfig+0x274>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d004      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a5c      	ldr	r2, [pc, #368]	@ (8005d44 <DMA_SetConfig+0x278>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d101      	bne.n	8005bda <DMA_SetConfig+0x10e>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e000      	b.n	8005bdc <DMA_SetConfig+0x110>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00d      	beq.n	8005bfc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005be8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d004      	beq.n	8005bfc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005bfa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a39      	ldr	r2, [pc, #228]	@ (8005ce8 <DMA_SetConfig+0x21c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d04a      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a38      	ldr	r2, [pc, #224]	@ (8005cec <DMA_SetConfig+0x220>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d045      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a36      	ldr	r2, [pc, #216]	@ (8005cf0 <DMA_SetConfig+0x224>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d040      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a35      	ldr	r2, [pc, #212]	@ (8005cf4 <DMA_SetConfig+0x228>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d03b      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a33      	ldr	r2, [pc, #204]	@ (8005cf8 <DMA_SetConfig+0x22c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d036      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a32      	ldr	r2, [pc, #200]	@ (8005cfc <DMA_SetConfig+0x230>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d031      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a30      	ldr	r2, [pc, #192]	@ (8005d00 <DMA_SetConfig+0x234>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d02c      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a2f      	ldr	r2, [pc, #188]	@ (8005d04 <DMA_SetConfig+0x238>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d027      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a2d      	ldr	r2, [pc, #180]	@ (8005d08 <DMA_SetConfig+0x23c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d022      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a2c      	ldr	r2, [pc, #176]	@ (8005d0c <DMA_SetConfig+0x240>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d01d      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a2a      	ldr	r2, [pc, #168]	@ (8005d10 <DMA_SetConfig+0x244>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d018      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a29      	ldr	r2, [pc, #164]	@ (8005d14 <DMA_SetConfig+0x248>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d013      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a27      	ldr	r2, [pc, #156]	@ (8005d18 <DMA_SetConfig+0x24c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d00e      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a26      	ldr	r2, [pc, #152]	@ (8005d1c <DMA_SetConfig+0x250>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d009      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a24      	ldr	r2, [pc, #144]	@ (8005d20 <DMA_SetConfig+0x254>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d004      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a23      	ldr	r2, [pc, #140]	@ (8005d24 <DMA_SetConfig+0x258>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d101      	bne.n	8005ca0 <DMA_SetConfig+0x1d4>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e000      	b.n	8005ca2 <DMA_SetConfig+0x1d6>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d059      	beq.n	8005d5a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005caa:	f003 031f 	and.w	r3, r3, #31
 8005cae:	223f      	movs	r2, #63	@ 0x3f
 8005cb0:	409a      	lsls	r2, r3
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005cc4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	2b40      	cmp	r3, #64	@ 0x40
 8005cd4:	d138      	bne.n	8005d48 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005ce6:	e086      	b.n	8005df6 <DMA_SetConfig+0x32a>
 8005ce8:	40020010 	.word	0x40020010
 8005cec:	40020028 	.word	0x40020028
 8005cf0:	40020040 	.word	0x40020040
 8005cf4:	40020058 	.word	0x40020058
 8005cf8:	40020070 	.word	0x40020070
 8005cfc:	40020088 	.word	0x40020088
 8005d00:	400200a0 	.word	0x400200a0
 8005d04:	400200b8 	.word	0x400200b8
 8005d08:	40020410 	.word	0x40020410
 8005d0c:	40020428 	.word	0x40020428
 8005d10:	40020440 	.word	0x40020440
 8005d14:	40020458 	.word	0x40020458
 8005d18:	40020470 	.word	0x40020470
 8005d1c:	40020488 	.word	0x40020488
 8005d20:	400204a0 	.word	0x400204a0
 8005d24:	400204b8 	.word	0x400204b8
 8005d28:	58025408 	.word	0x58025408
 8005d2c:	5802541c 	.word	0x5802541c
 8005d30:	58025430 	.word	0x58025430
 8005d34:	58025444 	.word	0x58025444
 8005d38:	58025458 	.word	0x58025458
 8005d3c:	5802546c 	.word	0x5802546c
 8005d40:	58025480 	.word	0x58025480
 8005d44:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	60da      	str	r2, [r3, #12]
}
 8005d58:	e04d      	b.n	8005df6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a29      	ldr	r2, [pc, #164]	@ (8005e04 <DMA_SetConfig+0x338>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d022      	beq.n	8005daa <DMA_SetConfig+0x2de>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a27      	ldr	r2, [pc, #156]	@ (8005e08 <DMA_SetConfig+0x33c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d01d      	beq.n	8005daa <DMA_SetConfig+0x2de>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a26      	ldr	r2, [pc, #152]	@ (8005e0c <DMA_SetConfig+0x340>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d018      	beq.n	8005daa <DMA_SetConfig+0x2de>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a24      	ldr	r2, [pc, #144]	@ (8005e10 <DMA_SetConfig+0x344>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d013      	beq.n	8005daa <DMA_SetConfig+0x2de>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a23      	ldr	r2, [pc, #140]	@ (8005e14 <DMA_SetConfig+0x348>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00e      	beq.n	8005daa <DMA_SetConfig+0x2de>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a21      	ldr	r2, [pc, #132]	@ (8005e18 <DMA_SetConfig+0x34c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d009      	beq.n	8005daa <DMA_SetConfig+0x2de>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a20      	ldr	r2, [pc, #128]	@ (8005e1c <DMA_SetConfig+0x350>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d004      	beq.n	8005daa <DMA_SetConfig+0x2de>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a1e      	ldr	r2, [pc, #120]	@ (8005e20 <DMA_SetConfig+0x354>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d101      	bne.n	8005dae <DMA_SetConfig+0x2e2>
 8005daa:	2301      	movs	r3, #1
 8005dac:	e000      	b.n	8005db0 <DMA_SetConfig+0x2e4>
 8005dae:	2300      	movs	r3, #0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d020      	beq.n	8005df6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005db8:	f003 031f 	and.w	r3, r3, #31
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	409a      	lsls	r2, r3
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	2b40      	cmp	r3, #64	@ 0x40
 8005dd2:	d108      	bne.n	8005de6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	60da      	str	r2, [r3, #12]
}
 8005de4:	e007      	b.n	8005df6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	60da      	str	r2, [r3, #12]
}
 8005df6:	bf00      	nop
 8005df8:	371c      	adds	r7, #28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	58025408 	.word	0x58025408
 8005e08:	5802541c 	.word	0x5802541c
 8005e0c:	58025430 	.word	0x58025430
 8005e10:	58025444 	.word	0x58025444
 8005e14:	58025458 	.word	0x58025458
 8005e18:	5802546c 	.word	0x5802546c
 8005e1c:	58025480 	.word	0x58025480
 8005e20:	58025494 	.word	0x58025494

08005e24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a42      	ldr	r2, [pc, #264]	@ (8005f3c <DMA_CalcBaseAndBitshift+0x118>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d04a      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a41      	ldr	r2, [pc, #260]	@ (8005f40 <DMA_CalcBaseAndBitshift+0x11c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d045      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a3f      	ldr	r2, [pc, #252]	@ (8005f44 <DMA_CalcBaseAndBitshift+0x120>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d040      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a3e      	ldr	r2, [pc, #248]	@ (8005f48 <DMA_CalcBaseAndBitshift+0x124>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d03b      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a3c      	ldr	r2, [pc, #240]	@ (8005f4c <DMA_CalcBaseAndBitshift+0x128>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d036      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a3b      	ldr	r2, [pc, #236]	@ (8005f50 <DMA_CalcBaseAndBitshift+0x12c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d031      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a39      	ldr	r2, [pc, #228]	@ (8005f54 <DMA_CalcBaseAndBitshift+0x130>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d02c      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a38      	ldr	r2, [pc, #224]	@ (8005f58 <DMA_CalcBaseAndBitshift+0x134>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d027      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a36      	ldr	r2, [pc, #216]	@ (8005f5c <DMA_CalcBaseAndBitshift+0x138>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d022      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a35      	ldr	r2, [pc, #212]	@ (8005f60 <DMA_CalcBaseAndBitshift+0x13c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d01d      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a33      	ldr	r2, [pc, #204]	@ (8005f64 <DMA_CalcBaseAndBitshift+0x140>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d018      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a32      	ldr	r2, [pc, #200]	@ (8005f68 <DMA_CalcBaseAndBitshift+0x144>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d013      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a30      	ldr	r2, [pc, #192]	@ (8005f6c <DMA_CalcBaseAndBitshift+0x148>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d00e      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a2f      	ldr	r2, [pc, #188]	@ (8005f70 <DMA_CalcBaseAndBitshift+0x14c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d009      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a2d      	ldr	r2, [pc, #180]	@ (8005f74 <DMA_CalcBaseAndBitshift+0x150>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d004      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a2c      	ldr	r2, [pc, #176]	@ (8005f78 <DMA_CalcBaseAndBitshift+0x154>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d101      	bne.n	8005ed0 <DMA_CalcBaseAndBitshift+0xac>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e000      	b.n	8005ed2 <DMA_CalcBaseAndBitshift+0xae>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d024      	beq.n	8005f20 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	3b10      	subs	r3, #16
 8005ede:	4a27      	ldr	r2, [pc, #156]	@ (8005f7c <DMA_CalcBaseAndBitshift+0x158>)
 8005ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee4:	091b      	lsrs	r3, r3, #4
 8005ee6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f003 0307 	and.w	r3, r3, #7
 8005eee:	4a24      	ldr	r2, [pc, #144]	@ (8005f80 <DMA_CalcBaseAndBitshift+0x15c>)
 8005ef0:	5cd3      	ldrb	r3, [r2, r3]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	d908      	bls.n	8005f10 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	4b1f      	ldr	r3, [pc, #124]	@ (8005f84 <DMA_CalcBaseAndBitshift+0x160>)
 8005f06:	4013      	ands	r3, r2
 8005f08:	1d1a      	adds	r2, r3, #4
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f0e:	e00d      	b.n	8005f2c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	461a      	mov	r2, r3
 8005f16:	4b1b      	ldr	r3, [pc, #108]	@ (8005f84 <DMA_CalcBaseAndBitshift+0x160>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f1e:	e005      	b.n	8005f2c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	40020010 	.word	0x40020010
 8005f40:	40020028 	.word	0x40020028
 8005f44:	40020040 	.word	0x40020040
 8005f48:	40020058 	.word	0x40020058
 8005f4c:	40020070 	.word	0x40020070
 8005f50:	40020088 	.word	0x40020088
 8005f54:	400200a0 	.word	0x400200a0
 8005f58:	400200b8 	.word	0x400200b8
 8005f5c:	40020410 	.word	0x40020410
 8005f60:	40020428 	.word	0x40020428
 8005f64:	40020440 	.word	0x40020440
 8005f68:	40020458 	.word	0x40020458
 8005f6c:	40020470 	.word	0x40020470
 8005f70:	40020488 	.word	0x40020488
 8005f74:	400204a0 	.word	0x400204a0
 8005f78:	400204b8 	.word	0x400204b8
 8005f7c:	aaaaaaab 	.word	0xaaaaaaab
 8005f80:	0800b5d4 	.word	0x0800b5d4
 8005f84:	fffffc00 	.word	0xfffffc00

08005f88 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d120      	bne.n	8005fde <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d858      	bhi.n	8006056 <DMA_CheckFifoParam+0xce>
 8005fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8005fac <DMA_CheckFifoParam+0x24>)
 8005fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005faa:	bf00      	nop
 8005fac:	08005fbd 	.word	0x08005fbd
 8005fb0:	08005fcf 	.word	0x08005fcf
 8005fb4:	08005fbd 	.word	0x08005fbd
 8005fb8:	08006057 	.word	0x08006057
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d048      	beq.n	800605a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005fcc:	e045      	b.n	800605a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005fd6:	d142      	bne.n	800605e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005fdc:	e03f      	b.n	800605e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fe6:	d123      	bne.n	8006030 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fec:	2b03      	cmp	r3, #3
 8005fee:	d838      	bhi.n	8006062 <DMA_CheckFifoParam+0xda>
 8005ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff8 <DMA_CheckFifoParam+0x70>)
 8005ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff6:	bf00      	nop
 8005ff8:	08006009 	.word	0x08006009
 8005ffc:	0800600f 	.word	0x0800600f
 8006000:	08006009 	.word	0x08006009
 8006004:	08006021 	.word	0x08006021
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	73fb      	strb	r3, [r7, #15]
        break;
 800600c:	e030      	b.n	8006070 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006012:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d025      	beq.n	8006066 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800601e:	e022      	b.n	8006066 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006024:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006028:	d11f      	bne.n	800606a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800602e:	e01c      	b.n	800606a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006034:	2b02      	cmp	r3, #2
 8006036:	d902      	bls.n	800603e <DMA_CheckFifoParam+0xb6>
 8006038:	2b03      	cmp	r3, #3
 800603a:	d003      	beq.n	8006044 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800603c:	e018      	b.n	8006070 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	73fb      	strb	r3, [r7, #15]
        break;
 8006042:	e015      	b.n	8006070 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006048:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00e      	beq.n	800606e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	73fb      	strb	r3, [r7, #15]
    break;
 8006054:	e00b      	b.n	800606e <DMA_CheckFifoParam+0xe6>
        break;
 8006056:	bf00      	nop
 8006058:	e00a      	b.n	8006070 <DMA_CheckFifoParam+0xe8>
        break;
 800605a:	bf00      	nop
 800605c:	e008      	b.n	8006070 <DMA_CheckFifoParam+0xe8>
        break;
 800605e:	bf00      	nop
 8006060:	e006      	b.n	8006070 <DMA_CheckFifoParam+0xe8>
        break;
 8006062:	bf00      	nop
 8006064:	e004      	b.n	8006070 <DMA_CheckFifoParam+0xe8>
        break;
 8006066:	bf00      	nop
 8006068:	e002      	b.n	8006070 <DMA_CheckFifoParam+0xe8>
        break;
 800606a:	bf00      	nop
 800606c:	e000      	b.n	8006070 <DMA_CheckFifoParam+0xe8>
    break;
 800606e:	bf00      	nop
    }
  }

  return status;
 8006070:	7bfb      	ldrb	r3, [r7, #15]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop

08006080 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a38      	ldr	r2, [pc, #224]	@ (8006174 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d022      	beq.n	80060de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a36      	ldr	r2, [pc, #216]	@ (8006178 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d01d      	beq.n	80060de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a35      	ldr	r2, [pc, #212]	@ (800617c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d018      	beq.n	80060de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a33      	ldr	r2, [pc, #204]	@ (8006180 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d013      	beq.n	80060de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a32      	ldr	r2, [pc, #200]	@ (8006184 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d00e      	beq.n	80060de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a30      	ldr	r2, [pc, #192]	@ (8006188 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d009      	beq.n	80060de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a2f      	ldr	r2, [pc, #188]	@ (800618c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d004      	beq.n	80060de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a2d      	ldr	r2, [pc, #180]	@ (8006190 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d101      	bne.n	80060e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80060de:	2301      	movs	r3, #1
 80060e0:	e000      	b.n	80060e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80060e2:	2300      	movs	r3, #0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d01a      	beq.n	800611e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	3b08      	subs	r3, #8
 80060f0:	4a28      	ldr	r2, [pc, #160]	@ (8006194 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80060f2:	fba2 2303 	umull	r2, r3, r2, r3
 80060f6:	091b      	lsrs	r3, r3, #4
 80060f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4b26      	ldr	r3, [pc, #152]	@ (8006198 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80060fe:	4413      	add	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	461a      	mov	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a24      	ldr	r2, [pc, #144]	@ (800619c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800610c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f003 031f 	and.w	r3, r3, #31
 8006114:	2201      	movs	r2, #1
 8006116:	409a      	lsls	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800611c:	e024      	b.n	8006168 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	3b10      	subs	r3, #16
 8006126:	4a1e      	ldr	r2, [pc, #120]	@ (80061a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006128:	fba2 2303 	umull	r2, r3, r2, r3
 800612c:	091b      	lsrs	r3, r3, #4
 800612e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	4a1c      	ldr	r2, [pc, #112]	@ (80061a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d806      	bhi.n	8006146 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4a1b      	ldr	r2, [pc, #108]	@ (80061a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d902      	bls.n	8006146 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3308      	adds	r3, #8
 8006144:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	4b18      	ldr	r3, [pc, #96]	@ (80061ac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800614a:	4413      	add	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	461a      	mov	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a16      	ldr	r2, [pc, #88]	@ (80061b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006158:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f003 031f 	and.w	r3, r3, #31
 8006160:	2201      	movs	r2, #1
 8006162:	409a      	lsls	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006168:	bf00      	nop
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	58025408 	.word	0x58025408
 8006178:	5802541c 	.word	0x5802541c
 800617c:	58025430 	.word	0x58025430
 8006180:	58025444 	.word	0x58025444
 8006184:	58025458 	.word	0x58025458
 8006188:	5802546c 	.word	0x5802546c
 800618c:	58025480 	.word	0x58025480
 8006190:	58025494 	.word	0x58025494
 8006194:	cccccccd 	.word	0xcccccccd
 8006198:	16009600 	.word	0x16009600
 800619c:	58025880 	.word	0x58025880
 80061a0:	aaaaaaab 	.word	0xaaaaaaab
 80061a4:	400204b8 	.word	0x400204b8
 80061a8:	4002040f 	.word	0x4002040f
 80061ac:	10008200 	.word	0x10008200
 80061b0:	40020880 	.word	0x40020880

080061b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d04a      	beq.n	8006260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	d847      	bhi.n	8006260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a25      	ldr	r2, [pc, #148]	@ (800626c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d022      	beq.n	8006220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a24      	ldr	r2, [pc, #144]	@ (8006270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d01d      	beq.n	8006220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a22      	ldr	r2, [pc, #136]	@ (8006274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d018      	beq.n	8006220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a21      	ldr	r2, [pc, #132]	@ (8006278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d013      	beq.n	8006220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a1f      	ldr	r2, [pc, #124]	@ (800627c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00e      	beq.n	8006220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a1e      	ldr	r2, [pc, #120]	@ (8006280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d009      	beq.n	8006220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a1c      	ldr	r2, [pc, #112]	@ (8006284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d004      	beq.n	8006220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a1b      	ldr	r2, [pc, #108]	@ (8006288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d101      	bne.n	8006224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006220:	2301      	movs	r3, #1
 8006222:	e000      	b.n	8006226 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006224:	2300      	movs	r3, #0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00a      	beq.n	8006240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	4b17      	ldr	r3, [pc, #92]	@ (800628c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	461a      	mov	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a15      	ldr	r2, [pc, #84]	@ (8006290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800623c:	671a      	str	r2, [r3, #112]	@ 0x70
 800623e:	e009      	b.n	8006254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4b14      	ldr	r3, [pc, #80]	@ (8006294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006244:	4413      	add	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	461a      	mov	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a11      	ldr	r2, [pc, #68]	@ (8006298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006252:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	3b01      	subs	r3, #1
 8006258:	2201      	movs	r2, #1
 800625a:	409a      	lsls	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006260:	bf00      	nop
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	58025408 	.word	0x58025408
 8006270:	5802541c 	.word	0x5802541c
 8006274:	58025430 	.word	0x58025430
 8006278:	58025444 	.word	0x58025444
 800627c:	58025458 	.word	0x58025458
 8006280:	5802546c 	.word	0x5802546c
 8006284:	58025480 	.word	0x58025480
 8006288:	58025494 	.word	0x58025494
 800628c:	1600963f 	.word	0x1600963f
 8006290:	58025940 	.word	0x58025940
 8006294:	1000823f 	.word	0x1000823f
 8006298:	40020940 	.word	0x40020940

0800629c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800629c:	b480      	push	{r7}
 800629e:	b089      	sub	sp, #36	@ 0x24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80062aa:	4b86      	ldr	r3, [pc, #536]	@ (80064c4 <HAL_GPIO_Init+0x228>)
 80062ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80062ae:	e18c      	b.n	80065ca <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	2101      	movs	r1, #1
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	fa01 f303 	lsl.w	r3, r1, r3
 80062bc:	4013      	ands	r3, r2
 80062be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 817e 	beq.w	80065c4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f003 0303 	and.w	r3, r3, #3
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d005      	beq.n	80062e0 <HAL_GPIO_Init+0x44>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f003 0303 	and.w	r3, r3, #3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d130      	bne.n	8006342 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	2203      	movs	r2, #3
 80062ec:	fa02 f303 	lsl.w	r3, r2, r3
 80062f0:	43db      	mvns	r3, r3
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	4013      	ands	r3, r2
 80062f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	68da      	ldr	r2, [r3, #12]
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	fa02 f303 	lsl.w	r3, r2, r3
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	4313      	orrs	r3, r2
 8006308:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006316:	2201      	movs	r2, #1
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	fa02 f303 	lsl.w	r3, r2, r3
 800631e:	43db      	mvns	r3, r3
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	4013      	ands	r3, r2
 8006324:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	091b      	lsrs	r3, r3, #4
 800632c:	f003 0201 	and.w	r2, r3, #1
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	fa02 f303 	lsl.w	r3, r2, r3
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	4313      	orrs	r3, r2
 800633a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f003 0303 	and.w	r3, r3, #3
 800634a:	2b03      	cmp	r3, #3
 800634c:	d017      	beq.n	800637e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	005b      	lsls	r3, r3, #1
 8006358:	2203      	movs	r2, #3
 800635a:	fa02 f303 	lsl.w	r3, r2, r3
 800635e:	43db      	mvns	r3, r3
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	4013      	ands	r3, r2
 8006364:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	689a      	ldr	r2, [r3, #8]
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	fa02 f303 	lsl.w	r3, r2, r3
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	4313      	orrs	r3, r2
 8006376:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f003 0303 	and.w	r3, r3, #3
 8006386:	2b02      	cmp	r3, #2
 8006388:	d123      	bne.n	80063d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	08da      	lsrs	r2, r3, #3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	3208      	adds	r2, #8
 8006392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	f003 0307 	and.w	r3, r3, #7
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	220f      	movs	r2, #15
 80063a2:	fa02 f303 	lsl.w	r3, r2, r3
 80063a6:	43db      	mvns	r3, r3
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	4013      	ands	r3, r2
 80063ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	691a      	ldr	r2, [r3, #16]
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	f003 0307 	and.w	r3, r3, #7
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	fa02 f303 	lsl.w	r3, r2, r3
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	08da      	lsrs	r2, r3, #3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3208      	adds	r2, #8
 80063cc:	69b9      	ldr	r1, [r7, #24]
 80063ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	005b      	lsls	r3, r3, #1
 80063dc:	2203      	movs	r2, #3
 80063de:	fa02 f303 	lsl.w	r3, r2, r3
 80063e2:	43db      	mvns	r3, r3
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	4013      	ands	r3, r2
 80063e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f003 0203 	and.w	r2, r3, #3
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	005b      	lsls	r3, r3, #1
 80063f6:	fa02 f303 	lsl.w	r3, r2, r3
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800640e:	2b00      	cmp	r3, #0
 8006410:	f000 80d8 	beq.w	80065c4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006414:	4b2c      	ldr	r3, [pc, #176]	@ (80064c8 <HAL_GPIO_Init+0x22c>)
 8006416:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800641a:	4a2b      	ldr	r2, [pc, #172]	@ (80064c8 <HAL_GPIO_Init+0x22c>)
 800641c:	f043 0302 	orr.w	r3, r3, #2
 8006420:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006424:	4b28      	ldr	r3, [pc, #160]	@ (80064c8 <HAL_GPIO_Init+0x22c>)
 8006426:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006432:	4a26      	ldr	r2, [pc, #152]	@ (80064cc <HAL_GPIO_Init+0x230>)
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	089b      	lsrs	r3, r3, #2
 8006438:	3302      	adds	r3, #2
 800643a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800643e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	f003 0303 	and.w	r3, r3, #3
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	220f      	movs	r2, #15
 800644a:	fa02 f303 	lsl.w	r3, r2, r3
 800644e:	43db      	mvns	r3, r3
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	4013      	ands	r3, r2
 8006454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a1d      	ldr	r2, [pc, #116]	@ (80064d0 <HAL_GPIO_Init+0x234>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d04a      	beq.n	80064f4 <HAL_GPIO_Init+0x258>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a1c      	ldr	r2, [pc, #112]	@ (80064d4 <HAL_GPIO_Init+0x238>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d02b      	beq.n	80064be <HAL_GPIO_Init+0x222>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a1b      	ldr	r2, [pc, #108]	@ (80064d8 <HAL_GPIO_Init+0x23c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d025      	beq.n	80064ba <HAL_GPIO_Init+0x21e>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a1a      	ldr	r2, [pc, #104]	@ (80064dc <HAL_GPIO_Init+0x240>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d01f      	beq.n	80064b6 <HAL_GPIO_Init+0x21a>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a19      	ldr	r2, [pc, #100]	@ (80064e0 <HAL_GPIO_Init+0x244>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d019      	beq.n	80064b2 <HAL_GPIO_Init+0x216>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a18      	ldr	r2, [pc, #96]	@ (80064e4 <HAL_GPIO_Init+0x248>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d013      	beq.n	80064ae <HAL_GPIO_Init+0x212>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a17      	ldr	r2, [pc, #92]	@ (80064e8 <HAL_GPIO_Init+0x24c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d00d      	beq.n	80064aa <HAL_GPIO_Init+0x20e>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a16      	ldr	r2, [pc, #88]	@ (80064ec <HAL_GPIO_Init+0x250>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d007      	beq.n	80064a6 <HAL_GPIO_Init+0x20a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a15      	ldr	r2, [pc, #84]	@ (80064f0 <HAL_GPIO_Init+0x254>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d101      	bne.n	80064a2 <HAL_GPIO_Init+0x206>
 800649e:	2309      	movs	r3, #9
 80064a0:	e029      	b.n	80064f6 <HAL_GPIO_Init+0x25a>
 80064a2:	230a      	movs	r3, #10
 80064a4:	e027      	b.n	80064f6 <HAL_GPIO_Init+0x25a>
 80064a6:	2307      	movs	r3, #7
 80064a8:	e025      	b.n	80064f6 <HAL_GPIO_Init+0x25a>
 80064aa:	2306      	movs	r3, #6
 80064ac:	e023      	b.n	80064f6 <HAL_GPIO_Init+0x25a>
 80064ae:	2305      	movs	r3, #5
 80064b0:	e021      	b.n	80064f6 <HAL_GPIO_Init+0x25a>
 80064b2:	2304      	movs	r3, #4
 80064b4:	e01f      	b.n	80064f6 <HAL_GPIO_Init+0x25a>
 80064b6:	2303      	movs	r3, #3
 80064b8:	e01d      	b.n	80064f6 <HAL_GPIO_Init+0x25a>
 80064ba:	2302      	movs	r3, #2
 80064bc:	e01b      	b.n	80064f6 <HAL_GPIO_Init+0x25a>
 80064be:	2301      	movs	r3, #1
 80064c0:	e019      	b.n	80064f6 <HAL_GPIO_Init+0x25a>
 80064c2:	bf00      	nop
 80064c4:	58000080 	.word	0x58000080
 80064c8:	58024400 	.word	0x58024400
 80064cc:	58000400 	.word	0x58000400
 80064d0:	58020000 	.word	0x58020000
 80064d4:	58020400 	.word	0x58020400
 80064d8:	58020800 	.word	0x58020800
 80064dc:	58020c00 	.word	0x58020c00
 80064e0:	58021000 	.word	0x58021000
 80064e4:	58021400 	.word	0x58021400
 80064e8:	58021800 	.word	0x58021800
 80064ec:	58021c00 	.word	0x58021c00
 80064f0:	58022400 	.word	0x58022400
 80064f4:	2300      	movs	r3, #0
 80064f6:	69fa      	ldr	r2, [r7, #28]
 80064f8:	f002 0203 	and.w	r2, r2, #3
 80064fc:	0092      	lsls	r2, r2, #2
 80064fe:	4093      	lsls	r3, r2
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	4313      	orrs	r3, r2
 8006504:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006506:	4938      	ldr	r1, [pc, #224]	@ (80065e8 <HAL_GPIO_Init+0x34c>)
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	089b      	lsrs	r3, r3, #2
 800650c:	3302      	adds	r3, #2
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006514:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	43db      	mvns	r3, r3
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	4013      	ands	r3, r2
 8006524:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	4313      	orrs	r3, r2
 8006538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800653a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006542:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	43db      	mvns	r3, r3
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	4013      	ands	r3, r2
 8006552:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006568:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	43db      	mvns	r3, r3
 800657a:	69ba      	ldr	r2, [r7, #24]
 800657c:	4013      	ands	r3, r2
 800657e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d003      	beq.n	8006594 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	4313      	orrs	r3, r2
 8006592:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	43db      	mvns	r3, r3
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	4013      	ands	r3, r2
 80065a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	3301      	adds	r3, #1
 80065c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	fa22 f303 	lsr.w	r3, r2, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f47f ae6b 	bne.w	80062b0 <HAL_GPIO_Init+0x14>
  }
}
 80065da:	bf00      	nop
 80065dc:	bf00      	nop
 80065de:	3724      	adds	r7, #36	@ 0x24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	58000400 	.word	0x58000400

080065ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	460b      	mov	r3, r1
 80065f6:	807b      	strh	r3, [r7, #2]
 80065f8:	4613      	mov	r3, r2
 80065fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80065fc:	787b      	ldrb	r3, [r7, #1]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006602:	887a      	ldrh	r2, [r7, #2]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006608:	e003      	b.n	8006612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800660a:	887b      	ldrh	r3, [r7, #2]
 800660c:	041a      	lsls	r2, r3, #16
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	619a      	str	r2, [r3, #24]
}
 8006612:	bf00      	nop
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
	...

08006620 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006628:	4b19      	ldr	r3, [pc, #100]	@ (8006690 <HAL_PWREx_ConfigSupply+0x70>)
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b04      	cmp	r3, #4
 8006632:	d00a      	beq.n	800664a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006634:	4b16      	ldr	r3, [pc, #88]	@ (8006690 <HAL_PWREx_ConfigSupply+0x70>)
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	f003 0307 	and.w	r3, r3, #7
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	429a      	cmp	r2, r3
 8006640:	d001      	beq.n	8006646 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e01f      	b.n	8006686 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006646:	2300      	movs	r3, #0
 8006648:	e01d      	b.n	8006686 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800664a:	4b11      	ldr	r3, [pc, #68]	@ (8006690 <HAL_PWREx_ConfigSupply+0x70>)
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f023 0207 	bic.w	r2, r3, #7
 8006652:	490f      	ldr	r1, [pc, #60]	@ (8006690 <HAL_PWREx_ConfigSupply+0x70>)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4313      	orrs	r3, r2
 8006658:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800665a:	f7fb f811 	bl	8001680 <HAL_GetTick>
 800665e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006660:	e009      	b.n	8006676 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006662:	f7fb f80d 	bl	8001680 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006670:	d901      	bls.n	8006676 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e007      	b.n	8006686 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006676:	4b06      	ldr	r3, [pc, #24]	@ (8006690 <HAL_PWREx_ConfigSupply+0x70>)
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800667e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006682:	d1ee      	bne.n	8006662 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	58024800 	.word	0x58024800

08006694 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b08c      	sub	sp, #48	@ 0x30
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e3c8      	b.n	8006e38 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 8087 	beq.w	80067c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066b4:	4b88      	ldr	r3, [pc, #544]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066be:	4b86      	ldr	r3, [pc, #536]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 80066c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80066c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c6:	2b10      	cmp	r3, #16
 80066c8:	d007      	beq.n	80066da <HAL_RCC_OscConfig+0x46>
 80066ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066cc:	2b18      	cmp	r3, #24
 80066ce:	d110      	bne.n	80066f2 <HAL_RCC_OscConfig+0x5e>
 80066d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d2:	f003 0303 	and.w	r3, r3, #3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d10b      	bne.n	80066f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066da:	4b7f      	ldr	r3, [pc, #508]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d06c      	beq.n	80067c0 <HAL_RCC_OscConfig+0x12c>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d168      	bne.n	80067c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e3a2      	b.n	8006e38 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066fa:	d106      	bne.n	800670a <HAL_RCC_OscConfig+0x76>
 80066fc:	4b76      	ldr	r3, [pc, #472]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a75      	ldr	r2, [pc, #468]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 8006702:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006706:	6013      	str	r3, [r2, #0]
 8006708:	e02e      	b.n	8006768 <HAL_RCC_OscConfig+0xd4>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10c      	bne.n	800672c <HAL_RCC_OscConfig+0x98>
 8006712:	4b71      	ldr	r3, [pc, #452]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a70      	ldr	r2, [pc, #448]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 8006718:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	4b6e      	ldr	r3, [pc, #440]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a6d      	ldr	r2, [pc, #436]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 8006724:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006728:	6013      	str	r3, [r2, #0]
 800672a:	e01d      	b.n	8006768 <HAL_RCC_OscConfig+0xd4>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006734:	d10c      	bne.n	8006750 <HAL_RCC_OscConfig+0xbc>
 8006736:	4b68      	ldr	r3, [pc, #416]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a67      	ldr	r2, [pc, #412]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 800673c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006740:	6013      	str	r3, [r2, #0]
 8006742:	4b65      	ldr	r3, [pc, #404]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a64      	ldr	r2, [pc, #400]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 8006748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800674c:	6013      	str	r3, [r2, #0]
 800674e:	e00b      	b.n	8006768 <HAL_RCC_OscConfig+0xd4>
 8006750:	4b61      	ldr	r3, [pc, #388]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a60      	ldr	r2, [pc, #384]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 8006756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800675a:	6013      	str	r3, [r2, #0]
 800675c:	4b5e      	ldr	r3, [pc, #376]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a5d      	ldr	r2, [pc, #372]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 8006762:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d013      	beq.n	8006798 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006770:	f7fa ff86 	bl	8001680 <HAL_GetTick>
 8006774:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006778:	f7fa ff82 	bl	8001680 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b64      	cmp	r3, #100	@ 0x64
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e356      	b.n	8006e38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800678a:	4b53      	ldr	r3, [pc, #332]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0f0      	beq.n	8006778 <HAL_RCC_OscConfig+0xe4>
 8006796:	e014      	b.n	80067c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006798:	f7fa ff72 	bl	8001680 <HAL_GetTick>
 800679c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800679e:	e008      	b.n	80067b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067a0:	f7fa ff6e 	bl	8001680 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	2b64      	cmp	r3, #100	@ 0x64
 80067ac:	d901      	bls.n	80067b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e342      	b.n	8006e38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80067b2:	4b49      	ldr	r3, [pc, #292]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1f0      	bne.n	80067a0 <HAL_RCC_OscConfig+0x10c>
 80067be:	e000      	b.n	80067c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f000 808c 	beq.w	80068e8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067d0:	4b41      	ldr	r3, [pc, #260]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067da:	4b3f      	ldr	r3, [pc, #252]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 80067dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067de:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d007      	beq.n	80067f6 <HAL_RCC_OscConfig+0x162>
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	2b18      	cmp	r3, #24
 80067ea:	d137      	bne.n	800685c <HAL_RCC_OscConfig+0x1c8>
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	f003 0303 	and.w	r3, r3, #3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d132      	bne.n	800685c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067f6:	4b38      	ldr	r3, [pc, #224]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0304 	and.w	r3, r3, #4
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <HAL_RCC_OscConfig+0x17a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e314      	b.n	8006e38 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800680e:	4b32      	ldr	r3, [pc, #200]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f023 0219 	bic.w	r2, r3, #25
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	492f      	ldr	r1, [pc, #188]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 800681c:	4313      	orrs	r3, r2
 800681e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006820:	f7fa ff2e 	bl	8001680 <HAL_GetTick>
 8006824:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006826:	e008      	b.n	800683a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006828:	f7fa ff2a 	bl	8001680 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b02      	cmp	r3, #2
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e2fe      	b.n	8006e38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800683a:	4b27      	ldr	r3, [pc, #156]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0304 	and.w	r3, r3, #4
 8006842:	2b00      	cmp	r3, #0
 8006844:	d0f0      	beq.n	8006828 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006846:	4b24      	ldr	r3, [pc, #144]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	061b      	lsls	r3, r3, #24
 8006854:	4920      	ldr	r1, [pc, #128]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 8006856:	4313      	orrs	r3, r2
 8006858:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800685a:	e045      	b.n	80068e8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d026      	beq.n	80068b2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006864:	4b1c      	ldr	r3, [pc, #112]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f023 0219 	bic.w	r2, r3, #25
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	4919      	ldr	r1, [pc, #100]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 8006872:	4313      	orrs	r3, r2
 8006874:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006876:	f7fa ff03 	bl	8001680 <HAL_GetTick>
 800687a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800687c:	e008      	b.n	8006890 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800687e:	f7fa feff 	bl	8001680 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	2b02      	cmp	r3, #2
 800688a:	d901      	bls.n	8006890 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e2d3      	b.n	8006e38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006890:	4b11      	ldr	r3, [pc, #68]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0304 	and.w	r3, r3, #4
 8006898:	2b00      	cmp	r3, #0
 800689a:	d0f0      	beq.n	800687e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800689c:	4b0e      	ldr	r3, [pc, #56]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	061b      	lsls	r3, r3, #24
 80068aa:	490b      	ldr	r1, [pc, #44]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	604b      	str	r3, [r1, #4]
 80068b0:	e01a      	b.n	80068e8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068b2:	4b09      	ldr	r3, [pc, #36]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a08      	ldr	r2, [pc, #32]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 80068b8:	f023 0301 	bic.w	r3, r3, #1
 80068bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068be:	f7fa fedf 	bl	8001680 <HAL_GetTick>
 80068c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80068c4:	e00a      	b.n	80068dc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068c6:	f7fa fedb 	bl	8001680 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d903      	bls.n	80068dc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e2af      	b.n	8006e38 <HAL_RCC_OscConfig+0x7a4>
 80068d8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80068dc:	4b96      	ldr	r3, [pc, #600]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0304 	and.w	r3, r3, #4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1ee      	bne.n	80068c6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0310 	and.w	r3, r3, #16
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d06a      	beq.n	80069ca <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068f4:	4b90      	ldr	r3, [pc, #576]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068fc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068fe:	4b8e      	ldr	r3, [pc, #568]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 8006900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006902:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	2b08      	cmp	r3, #8
 8006908:	d007      	beq.n	800691a <HAL_RCC_OscConfig+0x286>
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	2b18      	cmp	r3, #24
 800690e:	d11b      	bne.n	8006948 <HAL_RCC_OscConfig+0x2b4>
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f003 0303 	and.w	r3, r3, #3
 8006916:	2b01      	cmp	r3, #1
 8006918:	d116      	bne.n	8006948 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800691a:	4b87      	ldr	r3, [pc, #540]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006922:	2b00      	cmp	r3, #0
 8006924:	d005      	beq.n	8006932 <HAL_RCC_OscConfig+0x29e>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	69db      	ldr	r3, [r3, #28]
 800692a:	2b80      	cmp	r3, #128	@ 0x80
 800692c:	d001      	beq.n	8006932 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e282      	b.n	8006e38 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006932:	4b81      	ldr	r3, [pc, #516]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	061b      	lsls	r3, r3, #24
 8006940:	497d      	ldr	r1, [pc, #500]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 8006942:	4313      	orrs	r3, r2
 8006944:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006946:	e040      	b.n	80069ca <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d023      	beq.n	8006998 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006950:	4b79      	ldr	r3, [pc, #484]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a78      	ldr	r2, [pc, #480]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 8006956:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800695a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800695c:	f7fa fe90 	bl	8001680 <HAL_GetTick>
 8006960:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006962:	e008      	b.n	8006976 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006964:	f7fa fe8c 	bl	8001680 <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	2b02      	cmp	r3, #2
 8006970:	d901      	bls.n	8006976 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e260      	b.n	8006e38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006976:	4b70      	ldr	r3, [pc, #448]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800697e:	2b00      	cmp	r3, #0
 8006980:	d0f0      	beq.n	8006964 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006982:	4b6d      	ldr	r3, [pc, #436]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	061b      	lsls	r3, r3, #24
 8006990:	4969      	ldr	r1, [pc, #420]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 8006992:	4313      	orrs	r3, r2
 8006994:	60cb      	str	r3, [r1, #12]
 8006996:	e018      	b.n	80069ca <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006998:	4b67      	ldr	r3, [pc, #412]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a66      	ldr	r2, [pc, #408]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 800699e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a4:	f7fa fe6c 	bl	8001680 <HAL_GetTick>
 80069a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80069aa:	e008      	b.n	80069be <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80069ac:	f7fa fe68 	bl	8001680 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d901      	bls.n	80069be <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e23c      	b.n	8006e38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80069be:	4b5e      	ldr	r3, [pc, #376]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1f0      	bne.n	80069ac <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d036      	beq.n	8006a44 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d019      	beq.n	8006a12 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069de:	4b56      	ldr	r3, [pc, #344]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 80069e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069e2:	4a55      	ldr	r2, [pc, #340]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 80069e4:	f043 0301 	orr.w	r3, r3, #1
 80069e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ea:	f7fa fe49 	bl	8001680 <HAL_GetTick>
 80069ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80069f0:	e008      	b.n	8006a04 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069f2:	f7fa fe45 	bl	8001680 <HAL_GetTick>
 80069f6:	4602      	mov	r2, r0
 80069f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d901      	bls.n	8006a04 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e219      	b.n	8006e38 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006a04:	4b4c      	ldr	r3, [pc, #304]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 8006a06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a08:	f003 0302 	and.w	r3, r3, #2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d0f0      	beq.n	80069f2 <HAL_RCC_OscConfig+0x35e>
 8006a10:	e018      	b.n	8006a44 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a12:	4b49      	ldr	r3, [pc, #292]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 8006a14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a16:	4a48      	ldr	r2, [pc, #288]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 8006a18:	f023 0301 	bic.w	r3, r3, #1
 8006a1c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a1e:	f7fa fe2f 	bl	8001680 <HAL_GetTick>
 8006a22:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006a24:	e008      	b.n	8006a38 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a26:	f7fa fe2b 	bl	8001680 <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d901      	bls.n	8006a38 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e1ff      	b.n	8006e38 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006a38:	4b3f      	ldr	r3, [pc, #252]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 8006a3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1f0      	bne.n	8006a26 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0320 	and.w	r3, r3, #32
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d036      	beq.n	8006abe <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d019      	beq.n	8006a8c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a58:	4b37      	ldr	r3, [pc, #220]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a36      	ldr	r2, [pc, #216]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 8006a5e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006a62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a64:	f7fa fe0c 	bl	8001680 <HAL_GetTick>
 8006a68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a6a:	e008      	b.n	8006a7e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a6c:	f7fa fe08 	bl	8001680 <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e1dc      	b.n	8006e38 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a7e:	4b2e      	ldr	r3, [pc, #184]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d0f0      	beq.n	8006a6c <HAL_RCC_OscConfig+0x3d8>
 8006a8a:	e018      	b.n	8006abe <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a8c:	4b2a      	ldr	r3, [pc, #168]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a29      	ldr	r2, [pc, #164]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 8006a92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a98:	f7fa fdf2 	bl	8001680 <HAL_GetTick>
 8006a9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006aa0:	f7fa fdee 	bl	8001680 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e1c2      	b.n	8006e38 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ab2:	4b21      	ldr	r3, [pc, #132]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1f0      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0304 	and.w	r3, r3, #4
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 8086 	beq.w	8006bd8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006acc:	4b1b      	ldr	r3, [pc, #108]	@ (8006b3c <HAL_RCC_OscConfig+0x4a8>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a1a      	ldr	r2, [pc, #104]	@ (8006b3c <HAL_RCC_OscConfig+0x4a8>)
 8006ad2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ad6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ad8:	f7fa fdd2 	bl	8001680 <HAL_GetTick>
 8006adc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ade:	e008      	b.n	8006af2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ae0:	f7fa fdce 	bl	8001680 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b64      	cmp	r3, #100	@ 0x64
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e1a2      	b.n	8006e38 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006af2:	4b12      	ldr	r3, [pc, #72]	@ (8006b3c <HAL_RCC_OscConfig+0x4a8>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d0f0      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d106      	bne.n	8006b14 <HAL_RCC_OscConfig+0x480>
 8006b06:	4b0c      	ldr	r3, [pc, #48]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 8006b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b0a:	4a0b      	ldr	r2, [pc, #44]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 8006b0c:	f043 0301 	orr.w	r3, r3, #1
 8006b10:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b12:	e032      	b.n	8006b7a <HAL_RCC_OscConfig+0x4e6>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d111      	bne.n	8006b40 <HAL_RCC_OscConfig+0x4ac>
 8006b1c:	4b06      	ldr	r3, [pc, #24]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 8006b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b20:	4a05      	ldr	r2, [pc, #20]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 8006b22:	f023 0301 	bic.w	r3, r3, #1
 8006b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b28:	4b03      	ldr	r3, [pc, #12]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 8006b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b2c:	4a02      	ldr	r2, [pc, #8]	@ (8006b38 <HAL_RCC_OscConfig+0x4a4>)
 8006b2e:	f023 0304 	bic.w	r3, r3, #4
 8006b32:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b34:	e021      	b.n	8006b7a <HAL_RCC_OscConfig+0x4e6>
 8006b36:	bf00      	nop
 8006b38:	58024400 	.word	0x58024400
 8006b3c:	58024800 	.word	0x58024800
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	2b05      	cmp	r3, #5
 8006b46:	d10c      	bne.n	8006b62 <HAL_RCC_OscConfig+0x4ce>
 8006b48:	4b83      	ldr	r3, [pc, #524]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b4c:	4a82      	ldr	r2, [pc, #520]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006b4e:	f043 0304 	orr.w	r3, r3, #4
 8006b52:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b54:	4b80      	ldr	r3, [pc, #512]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b58:	4a7f      	ldr	r2, [pc, #508]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006b5a:	f043 0301 	orr.w	r3, r3, #1
 8006b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b60:	e00b      	b.n	8006b7a <HAL_RCC_OscConfig+0x4e6>
 8006b62:	4b7d      	ldr	r3, [pc, #500]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b66:	4a7c      	ldr	r2, [pc, #496]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006b68:	f023 0301 	bic.w	r3, r3, #1
 8006b6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b6e:	4b7a      	ldr	r3, [pc, #488]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b72:	4a79      	ldr	r2, [pc, #484]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006b74:	f023 0304 	bic.w	r3, r3, #4
 8006b78:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d015      	beq.n	8006bae <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b82:	f7fa fd7d 	bl	8001680 <HAL_GetTick>
 8006b86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b88:	e00a      	b.n	8006ba0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b8a:	f7fa fd79 	bl	8001680 <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d901      	bls.n	8006ba0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e14b      	b.n	8006e38 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ba0:	4b6d      	ldr	r3, [pc, #436]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d0ee      	beq.n	8006b8a <HAL_RCC_OscConfig+0x4f6>
 8006bac:	e014      	b.n	8006bd8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bae:	f7fa fd67 	bl	8001680 <HAL_GetTick>
 8006bb2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006bb4:	e00a      	b.n	8006bcc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bb6:	f7fa fd63 	bl	8001680 <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d901      	bls.n	8006bcc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e135      	b.n	8006e38 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006bcc:	4b62      	ldr	r3, [pc, #392]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bd0:	f003 0302 	and.w	r3, r3, #2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1ee      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 812a 	beq.w	8006e36 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006be2:	4b5d      	ldr	r3, [pc, #372]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bea:	2b18      	cmp	r3, #24
 8006bec:	f000 80ba 	beq.w	8006d64 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	f040 8095 	bne.w	8006d24 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bfa:	4b57      	ldr	r3, [pc, #348]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a56      	ldr	r2, [pc, #344]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006c00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c06:	f7fa fd3b 	bl	8001680 <HAL_GetTick>
 8006c0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c0c:	e008      	b.n	8006c20 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c0e:	f7fa fd37 	bl	8001680 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d901      	bls.n	8006c20 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e10b      	b.n	8006e38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c20:	4b4d      	ldr	r3, [pc, #308]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1f0      	bne.n	8006c0e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c2c:	4b4a      	ldr	r3, [pc, #296]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006c2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c30:	4b4a      	ldr	r3, [pc, #296]	@ (8006d5c <HAL_RCC_OscConfig+0x6c8>)
 8006c32:	4013      	ands	r3, r2
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006c3c:	0112      	lsls	r2, r2, #4
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	4945      	ldr	r1, [pc, #276]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	628b      	str	r3, [r1, #40]	@ 0x28
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c54:	3b01      	subs	r3, #1
 8006c56:	025b      	lsls	r3, r3, #9
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c60:	3b01      	subs	r3, #1
 8006c62:	041b      	lsls	r3, r3, #16
 8006c64:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	061b      	lsls	r3, r3, #24
 8006c72:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006c76:	4938      	ldr	r1, [pc, #224]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006c7c:	4b36      	ldr	r3, [pc, #216]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c80:	4a35      	ldr	r2, [pc, #212]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006c82:	f023 0301 	bic.w	r3, r3, #1
 8006c86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c88:	4b33      	ldr	r3, [pc, #204]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006c8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c8c:	4b34      	ldr	r3, [pc, #208]	@ (8006d60 <HAL_RCC_OscConfig+0x6cc>)
 8006c8e:	4013      	ands	r3, r2
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006c94:	00d2      	lsls	r2, r2, #3
 8006c96:	4930      	ldr	r1, [pc, #192]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006c9c:	4b2e      	ldr	r3, [pc, #184]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca0:	f023 020c 	bic.w	r2, r3, #12
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca8:	492b      	ldr	r1, [pc, #172]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006cae:	4b2a      	ldr	r3, [pc, #168]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb2:	f023 0202 	bic.w	r2, r3, #2
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cba:	4927      	ldr	r1, [pc, #156]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006cc0:	4b25      	ldr	r3, [pc, #148]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc4:	4a24      	ldr	r2, [pc, #144]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006cc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ccc:	4b22      	ldr	r3, [pc, #136]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd0:	4a21      	ldr	r2, [pc, #132]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006cd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cdc:	4a1e      	ldr	r2, [pc, #120]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006cde:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ce2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006cea:	f043 0301 	orr.w	r3, r3, #1
 8006cee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cf0:	4b19      	ldr	r3, [pc, #100]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a18      	ldr	r2, [pc, #96]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006cf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cfc:	f7fa fcc0 	bl	8001680 <HAL_GetTick>
 8006d00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d02:	e008      	b.n	8006d16 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d04:	f7fa fcbc 	bl	8001680 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e090      	b.n	8006e38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d16:	4b10      	ldr	r3, [pc, #64]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0f0      	beq.n	8006d04 <HAL_RCC_OscConfig+0x670>
 8006d22:	e088      	b.n	8006e36 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d24:	4b0c      	ldr	r3, [pc, #48]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a0b      	ldr	r2, [pc, #44]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006d2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d30:	f7fa fca6 	bl	8001680 <HAL_GetTick>
 8006d34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d36:	e008      	b.n	8006d4a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d38:	f7fa fca2 	bl	8001680 <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d901      	bls.n	8006d4a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e076      	b.n	8006e38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d4a:	4b03      	ldr	r3, [pc, #12]	@ (8006d58 <HAL_RCC_OscConfig+0x6c4>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1f0      	bne.n	8006d38 <HAL_RCC_OscConfig+0x6a4>
 8006d56:	e06e      	b.n	8006e36 <HAL_RCC_OscConfig+0x7a2>
 8006d58:	58024400 	.word	0x58024400
 8006d5c:	fffffc0c 	.word	0xfffffc0c
 8006d60:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006d64:	4b36      	ldr	r3, [pc, #216]	@ (8006e40 <HAL_RCC_OscConfig+0x7ac>)
 8006d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d68:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006d6a:	4b35      	ldr	r3, [pc, #212]	@ (8006e40 <HAL_RCC_OscConfig+0x7ac>)
 8006d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d6e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d031      	beq.n	8006ddc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f003 0203 	and.w	r2, r3, #3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d12a      	bne.n	8006ddc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	091b      	lsrs	r3, r3, #4
 8006d8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d122      	bne.n	8006ddc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d11a      	bne.n	8006ddc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	0a5b      	lsrs	r3, r3, #9
 8006daa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006db2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d111      	bne.n	8006ddc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	0c1b      	lsrs	r3, r3, #16
 8006dbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d108      	bne.n	8006ddc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	0e1b      	lsrs	r3, r3, #24
 8006dce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d001      	beq.n	8006de0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e02b      	b.n	8006e38 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006de0:	4b17      	ldr	r3, [pc, #92]	@ (8006e40 <HAL_RCC_OscConfig+0x7ac>)
 8006de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006de4:	08db      	lsrs	r3, r3, #3
 8006de6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006dea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d01f      	beq.n	8006e36 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006df6:	4b12      	ldr	r3, [pc, #72]	@ (8006e40 <HAL_RCC_OscConfig+0x7ac>)
 8006df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfa:	4a11      	ldr	r2, [pc, #68]	@ (8006e40 <HAL_RCC_OscConfig+0x7ac>)
 8006dfc:	f023 0301 	bic.w	r3, r3, #1
 8006e00:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006e02:	f7fa fc3d 	bl	8001680 <HAL_GetTick>
 8006e06:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006e08:	bf00      	nop
 8006e0a:	f7fa fc39 	bl	8001680 <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d0f9      	beq.n	8006e0a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006e16:	4b0a      	ldr	r3, [pc, #40]	@ (8006e40 <HAL_RCC_OscConfig+0x7ac>)
 8006e18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e44 <HAL_RCC_OscConfig+0x7b0>)
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006e22:	00d2      	lsls	r2, r2, #3
 8006e24:	4906      	ldr	r1, [pc, #24]	@ (8006e40 <HAL_RCC_OscConfig+0x7ac>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006e2a:	4b05      	ldr	r3, [pc, #20]	@ (8006e40 <HAL_RCC_OscConfig+0x7ac>)
 8006e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2e:	4a04      	ldr	r2, [pc, #16]	@ (8006e40 <HAL_RCC_OscConfig+0x7ac>)
 8006e30:	f043 0301 	orr.w	r3, r3, #1
 8006e34:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3730      	adds	r7, #48	@ 0x30
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	58024400 	.word	0x58024400
 8006e44:	ffff0007 	.word	0xffff0007

08006e48 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d101      	bne.n	8006e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e19c      	b.n	8007196 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e5c:	4b8a      	ldr	r3, [pc, #552]	@ (8007088 <HAL_RCC_ClockConfig+0x240>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 030f 	and.w	r3, r3, #15
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d910      	bls.n	8006e8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e6a:	4b87      	ldr	r3, [pc, #540]	@ (8007088 <HAL_RCC_ClockConfig+0x240>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f023 020f 	bic.w	r2, r3, #15
 8006e72:	4985      	ldr	r1, [pc, #532]	@ (8007088 <HAL_RCC_ClockConfig+0x240>)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e7a:	4b83      	ldr	r3, [pc, #524]	@ (8007088 <HAL_RCC_ClockConfig+0x240>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 030f 	and.w	r3, r3, #15
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d001      	beq.n	8006e8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e184      	b.n	8007196 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d010      	beq.n	8006eba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	691a      	ldr	r2, [r3, #16]
 8006e9c:	4b7b      	ldr	r3, [pc, #492]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d908      	bls.n	8006eba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ea8:	4b78      	ldr	r3, [pc, #480]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	4975      	ldr	r1, [pc, #468]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0308 	and.w	r3, r3, #8
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d010      	beq.n	8006ee8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	695a      	ldr	r2, [r3, #20]
 8006eca:	4b70      	ldr	r3, [pc, #448]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d908      	bls.n	8006ee8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ed6:	4b6d      	ldr	r3, [pc, #436]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	496a      	ldr	r1, [pc, #424]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0310 	and.w	r3, r3, #16
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d010      	beq.n	8006f16 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	699a      	ldr	r2, [r3, #24]
 8006ef8:	4b64      	ldr	r3, [pc, #400]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8006efa:	69db      	ldr	r3, [r3, #28]
 8006efc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d908      	bls.n	8006f16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f04:	4b61      	ldr	r3, [pc, #388]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	495e      	ldr	r1, [pc, #376]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0320 	and.w	r3, r3, #32
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d010      	beq.n	8006f44 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	69da      	ldr	r2, [r3, #28]
 8006f26:	4b59      	ldr	r3, [pc, #356]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d908      	bls.n	8006f44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006f32:	4b56      	ldr	r3, [pc, #344]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	4953      	ldr	r1, [pc, #332]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0302 	and.w	r3, r3, #2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d010      	beq.n	8006f72 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	68da      	ldr	r2, [r3, #12]
 8006f54:	4b4d      	ldr	r3, [pc, #308]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	f003 030f 	and.w	r3, r3, #15
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d908      	bls.n	8006f72 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f60:	4b4a      	ldr	r3, [pc, #296]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	f023 020f 	bic.w	r2, r3, #15
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	4947      	ldr	r1, [pc, #284]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d055      	beq.n	800702a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006f7e:	4b43      	ldr	r3, [pc, #268]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	4940      	ldr	r1, [pc, #256]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d107      	bne.n	8006fa8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f98:	4b3c      	ldr	r3, [pc, #240]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d121      	bne.n	8006fe8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e0f6      	b.n	8007196 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	2b03      	cmp	r3, #3
 8006fae:	d107      	bne.n	8006fc0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006fb0:	4b36      	ldr	r3, [pc, #216]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d115      	bne.n	8006fe8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e0ea      	b.n	8007196 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d107      	bne.n	8006fd8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006fc8:	4b30      	ldr	r3, [pc, #192]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d109      	bne.n	8006fe8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e0de      	b.n	8007196 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006fd8:	4b2c      	ldr	r3, [pc, #176]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e0d6      	b.n	8007196 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006fe8:	4b28      	ldr	r3, [pc, #160]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	f023 0207 	bic.w	r2, r3, #7
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	4925      	ldr	r1, [pc, #148]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ffa:	f7fa fb41 	bl	8001680 <HAL_GetTick>
 8006ffe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007000:	e00a      	b.n	8007018 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007002:	f7fa fb3d 	bl	8001680 <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007010:	4293      	cmp	r3, r2
 8007012:	d901      	bls.n	8007018 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e0be      	b.n	8007196 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007018:	4b1c      	ldr	r3, [pc, #112]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	00db      	lsls	r3, r3, #3
 8007026:	429a      	cmp	r2, r3
 8007028:	d1eb      	bne.n	8007002 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	2b00      	cmp	r3, #0
 8007034:	d010      	beq.n	8007058 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68da      	ldr	r2, [r3, #12]
 800703a:	4b14      	ldr	r3, [pc, #80]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	f003 030f 	and.w	r3, r3, #15
 8007042:	429a      	cmp	r2, r3
 8007044:	d208      	bcs.n	8007058 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007046:	4b11      	ldr	r3, [pc, #68]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	f023 020f 	bic.w	r2, r3, #15
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	490e      	ldr	r1, [pc, #56]	@ (800708c <HAL_RCC_ClockConfig+0x244>)
 8007054:	4313      	orrs	r3, r2
 8007056:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007058:	4b0b      	ldr	r3, [pc, #44]	@ (8007088 <HAL_RCC_ClockConfig+0x240>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 030f 	and.w	r3, r3, #15
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	429a      	cmp	r2, r3
 8007064:	d214      	bcs.n	8007090 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007066:	4b08      	ldr	r3, [pc, #32]	@ (8007088 <HAL_RCC_ClockConfig+0x240>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f023 020f 	bic.w	r2, r3, #15
 800706e:	4906      	ldr	r1, [pc, #24]	@ (8007088 <HAL_RCC_ClockConfig+0x240>)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	4313      	orrs	r3, r2
 8007074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007076:	4b04      	ldr	r3, [pc, #16]	@ (8007088 <HAL_RCC_ClockConfig+0x240>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 030f 	and.w	r3, r3, #15
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	429a      	cmp	r2, r3
 8007082:	d005      	beq.n	8007090 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e086      	b.n	8007196 <HAL_RCC_ClockConfig+0x34e>
 8007088:	52002000 	.word	0x52002000
 800708c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0304 	and.w	r3, r3, #4
 8007098:	2b00      	cmp	r3, #0
 800709a:	d010      	beq.n	80070be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	691a      	ldr	r2, [r3, #16]
 80070a0:	4b3f      	ldr	r3, [pc, #252]	@ (80071a0 <HAL_RCC_ClockConfig+0x358>)
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d208      	bcs.n	80070be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80070ac:	4b3c      	ldr	r3, [pc, #240]	@ (80071a0 <HAL_RCC_ClockConfig+0x358>)
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	4939      	ldr	r1, [pc, #228]	@ (80071a0 <HAL_RCC_ClockConfig+0x358>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0308 	and.w	r3, r3, #8
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d010      	beq.n	80070ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	695a      	ldr	r2, [r3, #20]
 80070ce:	4b34      	ldr	r3, [pc, #208]	@ (80071a0 <HAL_RCC_ClockConfig+0x358>)
 80070d0:	69db      	ldr	r3, [r3, #28]
 80070d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d208      	bcs.n	80070ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80070da:	4b31      	ldr	r3, [pc, #196]	@ (80071a0 <HAL_RCC_ClockConfig+0x358>)
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	492e      	ldr	r1, [pc, #184]	@ (80071a0 <HAL_RCC_ClockConfig+0x358>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0310 	and.w	r3, r3, #16
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d010      	beq.n	800711a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	699a      	ldr	r2, [r3, #24]
 80070fc:	4b28      	ldr	r3, [pc, #160]	@ (80071a0 <HAL_RCC_ClockConfig+0x358>)
 80070fe:	69db      	ldr	r3, [r3, #28]
 8007100:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007104:	429a      	cmp	r2, r3
 8007106:	d208      	bcs.n	800711a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007108:	4b25      	ldr	r3, [pc, #148]	@ (80071a0 <HAL_RCC_ClockConfig+0x358>)
 800710a:	69db      	ldr	r3, [r3, #28]
 800710c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	4922      	ldr	r1, [pc, #136]	@ (80071a0 <HAL_RCC_ClockConfig+0x358>)
 8007116:	4313      	orrs	r3, r2
 8007118:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0320 	and.w	r3, r3, #32
 8007122:	2b00      	cmp	r3, #0
 8007124:	d010      	beq.n	8007148 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	69da      	ldr	r2, [r3, #28]
 800712a:	4b1d      	ldr	r3, [pc, #116]	@ (80071a0 <HAL_RCC_ClockConfig+0x358>)
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007132:	429a      	cmp	r2, r3
 8007134:	d208      	bcs.n	8007148 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007136:	4b1a      	ldr	r3, [pc, #104]	@ (80071a0 <HAL_RCC_ClockConfig+0x358>)
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	4917      	ldr	r1, [pc, #92]	@ (80071a0 <HAL_RCC_ClockConfig+0x358>)
 8007144:	4313      	orrs	r3, r2
 8007146:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007148:	f000 f834 	bl	80071b4 <HAL_RCC_GetSysClockFreq>
 800714c:	4602      	mov	r2, r0
 800714e:	4b14      	ldr	r3, [pc, #80]	@ (80071a0 <HAL_RCC_ClockConfig+0x358>)
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	0a1b      	lsrs	r3, r3, #8
 8007154:	f003 030f 	and.w	r3, r3, #15
 8007158:	4912      	ldr	r1, [pc, #72]	@ (80071a4 <HAL_RCC_ClockConfig+0x35c>)
 800715a:	5ccb      	ldrb	r3, [r1, r3]
 800715c:	f003 031f 	and.w	r3, r3, #31
 8007160:	fa22 f303 	lsr.w	r3, r2, r3
 8007164:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007166:	4b0e      	ldr	r3, [pc, #56]	@ (80071a0 <HAL_RCC_ClockConfig+0x358>)
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	f003 030f 	and.w	r3, r3, #15
 800716e:	4a0d      	ldr	r2, [pc, #52]	@ (80071a4 <HAL_RCC_ClockConfig+0x35c>)
 8007170:	5cd3      	ldrb	r3, [r2, r3]
 8007172:	f003 031f 	and.w	r3, r3, #31
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	fa22 f303 	lsr.w	r3, r2, r3
 800717c:	4a0a      	ldr	r2, [pc, #40]	@ (80071a8 <HAL_RCC_ClockConfig+0x360>)
 800717e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007180:	4a0a      	ldr	r2, [pc, #40]	@ (80071ac <HAL_RCC_ClockConfig+0x364>)
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007186:	4b0a      	ldr	r3, [pc, #40]	@ (80071b0 <HAL_RCC_ClockConfig+0x368>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4618      	mov	r0, r3
 800718c:	f7fa fa2e 	bl	80015ec <HAL_InitTick>
 8007190:	4603      	mov	r3, r0
 8007192:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007194:	7bfb      	ldrb	r3, [r7, #15]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3718      	adds	r7, #24
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	58024400 	.word	0x58024400
 80071a4:	0800b5c4 	.word	0x0800b5c4
 80071a8:	24000004 	.word	0x24000004
 80071ac:	24000000 	.word	0x24000000
 80071b0:	24000008 	.word	0x24000008

080071b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b089      	sub	sp, #36	@ 0x24
 80071b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071ba:	4bb3      	ldr	r3, [pc, #716]	@ (8007488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071c2:	2b18      	cmp	r3, #24
 80071c4:	f200 8155 	bhi.w	8007472 <HAL_RCC_GetSysClockFreq+0x2be>
 80071c8:	a201      	add	r2, pc, #4	@ (adr r2, 80071d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80071ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ce:	bf00      	nop
 80071d0:	08007235 	.word	0x08007235
 80071d4:	08007473 	.word	0x08007473
 80071d8:	08007473 	.word	0x08007473
 80071dc:	08007473 	.word	0x08007473
 80071e0:	08007473 	.word	0x08007473
 80071e4:	08007473 	.word	0x08007473
 80071e8:	08007473 	.word	0x08007473
 80071ec:	08007473 	.word	0x08007473
 80071f0:	0800725b 	.word	0x0800725b
 80071f4:	08007473 	.word	0x08007473
 80071f8:	08007473 	.word	0x08007473
 80071fc:	08007473 	.word	0x08007473
 8007200:	08007473 	.word	0x08007473
 8007204:	08007473 	.word	0x08007473
 8007208:	08007473 	.word	0x08007473
 800720c:	08007473 	.word	0x08007473
 8007210:	08007261 	.word	0x08007261
 8007214:	08007473 	.word	0x08007473
 8007218:	08007473 	.word	0x08007473
 800721c:	08007473 	.word	0x08007473
 8007220:	08007473 	.word	0x08007473
 8007224:	08007473 	.word	0x08007473
 8007228:	08007473 	.word	0x08007473
 800722c:	08007473 	.word	0x08007473
 8007230:	08007267 	.word	0x08007267
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007234:	4b94      	ldr	r3, [pc, #592]	@ (8007488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0320 	and.w	r3, r3, #32
 800723c:	2b00      	cmp	r3, #0
 800723e:	d009      	beq.n	8007254 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007240:	4b91      	ldr	r3, [pc, #580]	@ (8007488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	08db      	lsrs	r3, r3, #3
 8007246:	f003 0303 	and.w	r3, r3, #3
 800724a:	4a90      	ldr	r2, [pc, #576]	@ (800748c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800724c:	fa22 f303 	lsr.w	r3, r2, r3
 8007250:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007252:	e111      	b.n	8007478 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007254:	4b8d      	ldr	r3, [pc, #564]	@ (800748c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007256:	61bb      	str	r3, [r7, #24]
      break;
 8007258:	e10e      	b.n	8007478 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800725a:	4b8d      	ldr	r3, [pc, #564]	@ (8007490 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800725c:	61bb      	str	r3, [r7, #24]
      break;
 800725e:	e10b      	b.n	8007478 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007260:	4b8c      	ldr	r3, [pc, #560]	@ (8007494 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007262:	61bb      	str	r3, [r7, #24]
      break;
 8007264:	e108      	b.n	8007478 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007266:	4b88      	ldr	r3, [pc, #544]	@ (8007488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800726a:	f003 0303 	and.w	r3, r3, #3
 800726e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007270:	4b85      	ldr	r3, [pc, #532]	@ (8007488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007274:	091b      	lsrs	r3, r3, #4
 8007276:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800727a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800727c:	4b82      	ldr	r3, [pc, #520]	@ (8007488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800727e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007286:	4b80      	ldr	r3, [pc, #512]	@ (8007488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800728a:	08db      	lsrs	r3, r3, #3
 800728c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	fb02 f303 	mul.w	r3, r2, r3
 8007296:	ee07 3a90 	vmov	s15, r3
 800729a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 80e1 	beq.w	800746c <HAL_RCC_GetSysClockFreq+0x2b8>
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	f000 8083 	beq.w	80073b8 <HAL_RCC_GetSysClockFreq+0x204>
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	f200 80a1 	bhi.w	80073fc <HAL_RCC_GetSysClockFreq+0x248>
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d003      	beq.n	80072c8 <HAL_RCC_GetSysClockFreq+0x114>
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d056      	beq.n	8007374 <HAL_RCC_GetSysClockFreq+0x1c0>
 80072c6:	e099      	b.n	80073fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072c8:	4b6f      	ldr	r3, [pc, #444]	@ (8007488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0320 	and.w	r3, r3, #32
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d02d      	beq.n	8007330 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072d4:	4b6c      	ldr	r3, [pc, #432]	@ (8007488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	08db      	lsrs	r3, r3, #3
 80072da:	f003 0303 	and.w	r3, r3, #3
 80072de:	4a6b      	ldr	r2, [pc, #428]	@ (800748c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80072e0:	fa22 f303 	lsr.w	r3, r2, r3
 80072e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	ee07 3a90 	vmov	s15, r3
 80072ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072fe:	4b62      	ldr	r3, [pc, #392]	@ (8007488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007306:	ee07 3a90 	vmov	s15, r3
 800730a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800730e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007312:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007498 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800731a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800731e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800732a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800732e:	e087      	b.n	8007440 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800749c <HAL_RCC_GetSysClockFreq+0x2e8>
 800733e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007342:	4b51      	ldr	r3, [pc, #324]	@ (8007488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800734a:	ee07 3a90 	vmov	s15, r3
 800734e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007352:	ed97 6a02 	vldr	s12, [r7, #8]
 8007356:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007498 <HAL_RCC_GetSysClockFreq+0x2e4>
 800735a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800735e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800736a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800736e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007372:	e065      	b.n	8007440 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	ee07 3a90 	vmov	s15, r3
 800737a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80074a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007386:	4b40      	ldr	r3, [pc, #256]	@ (8007488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800738a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007396:	ed97 6a02 	vldr	s12, [r7, #8]
 800739a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007498 <HAL_RCC_GetSysClockFreq+0x2e4>
 800739e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80073b6:	e043      	b.n	8007440 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	ee07 3a90 	vmov	s15, r3
 80073be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80074a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80073c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d2:	ee07 3a90 	vmov	s15, r3
 80073d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073da:	ed97 6a02 	vldr	s12, [r7, #8]
 80073de:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007498 <HAL_RCC_GetSysClockFreq+0x2e4>
 80073e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80073fa:	e021      	b.n	8007440 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	ee07 3a90 	vmov	s15, r3
 8007402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007406:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80074a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800740a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800740e:	4b1e      	ldr	r3, [pc, #120]	@ (8007488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007416:	ee07 3a90 	vmov	s15, r3
 800741a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800741e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007422:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007498 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800742a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800742e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800743a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800743e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007440:	4b11      	ldr	r3, [pc, #68]	@ (8007488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007444:	0a5b      	lsrs	r3, r3, #9
 8007446:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800744a:	3301      	adds	r3, #1
 800744c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	ee07 3a90 	vmov	s15, r3
 8007454:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007458:	edd7 6a07 	vldr	s13, [r7, #28]
 800745c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007460:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007464:	ee17 3a90 	vmov	r3, s15
 8007468:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800746a:	e005      	b.n	8007478 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800746c:	2300      	movs	r3, #0
 800746e:	61bb      	str	r3, [r7, #24]
      break;
 8007470:	e002      	b.n	8007478 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007472:	4b07      	ldr	r3, [pc, #28]	@ (8007490 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007474:	61bb      	str	r3, [r7, #24]
      break;
 8007476:	bf00      	nop
  }

  return sysclockfreq;
 8007478:	69bb      	ldr	r3, [r7, #24]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3724      	adds	r7, #36	@ 0x24
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	58024400 	.word	0x58024400
 800748c:	03d09000 	.word	0x03d09000
 8007490:	003d0900 	.word	0x003d0900
 8007494:	017d7840 	.word	0x017d7840
 8007498:	46000000 	.word	0x46000000
 800749c:	4c742400 	.word	0x4c742400
 80074a0:	4a742400 	.word	0x4a742400
 80074a4:	4bbebc20 	.word	0x4bbebc20

080074a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80074ae:	f7ff fe81 	bl	80071b4 <HAL_RCC_GetSysClockFreq>
 80074b2:	4602      	mov	r2, r0
 80074b4:	4b10      	ldr	r3, [pc, #64]	@ (80074f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	0a1b      	lsrs	r3, r3, #8
 80074ba:	f003 030f 	and.w	r3, r3, #15
 80074be:	490f      	ldr	r1, [pc, #60]	@ (80074fc <HAL_RCC_GetHCLKFreq+0x54>)
 80074c0:	5ccb      	ldrb	r3, [r1, r3]
 80074c2:	f003 031f 	and.w	r3, r3, #31
 80074c6:	fa22 f303 	lsr.w	r3, r2, r3
 80074ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80074cc:	4b0a      	ldr	r3, [pc, #40]	@ (80074f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	f003 030f 	and.w	r3, r3, #15
 80074d4:	4a09      	ldr	r2, [pc, #36]	@ (80074fc <HAL_RCC_GetHCLKFreq+0x54>)
 80074d6:	5cd3      	ldrb	r3, [r2, r3]
 80074d8:	f003 031f 	and.w	r3, r3, #31
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	fa22 f303 	lsr.w	r3, r2, r3
 80074e2:	4a07      	ldr	r2, [pc, #28]	@ (8007500 <HAL_RCC_GetHCLKFreq+0x58>)
 80074e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80074e6:	4a07      	ldr	r2, [pc, #28]	@ (8007504 <HAL_RCC_GetHCLKFreq+0x5c>)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80074ec:	4b04      	ldr	r3, [pc, #16]	@ (8007500 <HAL_RCC_GetHCLKFreq+0x58>)
 80074ee:	681b      	ldr	r3, [r3, #0]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	58024400 	.word	0x58024400
 80074fc:	0800b5c4 	.word	0x0800b5c4
 8007500:	24000004 	.word	0x24000004
 8007504:	24000000 	.word	0x24000000

08007508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800750c:	f7ff ffcc 	bl	80074a8 <HAL_RCC_GetHCLKFreq>
 8007510:	4602      	mov	r2, r0
 8007512:	4b06      	ldr	r3, [pc, #24]	@ (800752c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	091b      	lsrs	r3, r3, #4
 8007518:	f003 0307 	and.w	r3, r3, #7
 800751c:	4904      	ldr	r1, [pc, #16]	@ (8007530 <HAL_RCC_GetPCLK1Freq+0x28>)
 800751e:	5ccb      	ldrb	r3, [r1, r3]
 8007520:	f003 031f 	and.w	r3, r3, #31
 8007524:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007528:	4618      	mov	r0, r3
 800752a:	bd80      	pop	{r7, pc}
 800752c:	58024400 	.word	0x58024400
 8007530:	0800b5c4 	.word	0x0800b5c4

08007534 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007538:	b0c6      	sub	sp, #280	@ 0x118
 800753a:	af00      	add	r7, sp, #0
 800753c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007540:	2300      	movs	r3, #0
 8007542:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007546:	2300      	movs	r3, #0
 8007548:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800754c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007554:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007558:	2500      	movs	r5, #0
 800755a:	ea54 0305 	orrs.w	r3, r4, r5
 800755e:	d049      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007564:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007566:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800756a:	d02f      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800756c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007570:	d828      	bhi.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007572:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007576:	d01a      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007578:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800757c:	d822      	bhi.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800757e:	2b00      	cmp	r3, #0
 8007580:	d003      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007582:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007586:	d007      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007588:	e01c      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800758a:	4bab      	ldr	r3, [pc, #684]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800758c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758e:	4aaa      	ldr	r2, [pc, #680]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007590:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007594:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007596:	e01a      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800759c:	3308      	adds	r3, #8
 800759e:	2102      	movs	r1, #2
 80075a0:	4618      	mov	r0, r3
 80075a2:	f002 fa49 	bl	8009a38 <RCCEx_PLL2_Config>
 80075a6:	4603      	mov	r3, r0
 80075a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80075ac:	e00f      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b2:	3328      	adds	r3, #40	@ 0x28
 80075b4:	2102      	movs	r1, #2
 80075b6:	4618      	mov	r0, r3
 80075b8:	f002 faf0 	bl	8009b9c <RCCEx_PLL3_Config>
 80075bc:	4603      	mov	r3, r0
 80075be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80075c2:	e004      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075ca:	e000      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80075cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10a      	bne.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80075d6:	4b98      	ldr	r3, [pc, #608]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80075de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075e4:	4a94      	ldr	r2, [pc, #592]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075e6:	430b      	orrs	r3, r1
 80075e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80075ea:	e003      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80075f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007600:	f04f 0900 	mov.w	r9, #0
 8007604:	ea58 0309 	orrs.w	r3, r8, r9
 8007608:	d047      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800760a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007610:	2b04      	cmp	r3, #4
 8007612:	d82a      	bhi.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007614:	a201      	add	r2, pc, #4	@ (adr r2, 800761c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761a:	bf00      	nop
 800761c:	08007631 	.word	0x08007631
 8007620:	0800763f 	.word	0x0800763f
 8007624:	08007655 	.word	0x08007655
 8007628:	08007673 	.word	0x08007673
 800762c:	08007673 	.word	0x08007673
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007630:	4b81      	ldr	r3, [pc, #516]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007634:	4a80      	ldr	r2, [pc, #512]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007636:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800763a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800763c:	e01a      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800763e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007642:	3308      	adds	r3, #8
 8007644:	2100      	movs	r1, #0
 8007646:	4618      	mov	r0, r3
 8007648:	f002 f9f6 	bl	8009a38 <RCCEx_PLL2_Config>
 800764c:	4603      	mov	r3, r0
 800764e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007652:	e00f      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007658:	3328      	adds	r3, #40	@ 0x28
 800765a:	2100      	movs	r1, #0
 800765c:	4618      	mov	r0, r3
 800765e:	f002 fa9d 	bl	8009b9c <RCCEx_PLL3_Config>
 8007662:	4603      	mov	r3, r0
 8007664:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007668:	e004      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007670:	e000      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007672:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007674:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10a      	bne.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800767c:	4b6e      	ldr	r3, [pc, #440]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800767e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007680:	f023 0107 	bic.w	r1, r3, #7
 8007684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800768a:	4a6b      	ldr	r2, [pc, #428]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800768c:	430b      	orrs	r3, r1
 800768e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007690:	e003      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007692:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007696:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800769a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800769e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80076a6:	f04f 0b00 	mov.w	fp, #0
 80076aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80076ae:	d05b      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80076b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80076b8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80076bc:	d03b      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80076be:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80076c2:	d834      	bhi.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80076c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076c8:	d037      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80076ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076ce:	d82e      	bhi.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80076d0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80076d4:	d033      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80076d6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80076da:	d828      	bhi.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80076dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076e0:	d01a      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80076e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076e6:	d822      	bhi.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d003      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80076ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076f0:	d007      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80076f2:	e01c      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076f4:	4b50      	ldr	r3, [pc, #320]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80076f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f8:	4a4f      	ldr	r2, [pc, #316]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80076fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007700:	e01e      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007706:	3308      	adds	r3, #8
 8007708:	2100      	movs	r1, #0
 800770a:	4618      	mov	r0, r3
 800770c:	f002 f994 	bl	8009a38 <RCCEx_PLL2_Config>
 8007710:	4603      	mov	r3, r0
 8007712:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007716:	e013      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800771c:	3328      	adds	r3, #40	@ 0x28
 800771e:	2100      	movs	r1, #0
 8007720:	4618      	mov	r0, r3
 8007722:	f002 fa3b 	bl	8009b9c <RCCEx_PLL3_Config>
 8007726:	4603      	mov	r3, r0
 8007728:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800772c:	e008      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007734:	e004      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007736:	bf00      	nop
 8007738:	e002      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800773a:	bf00      	nop
 800773c:	e000      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800773e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007740:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10b      	bne.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007748:	4b3b      	ldr	r3, [pc, #236]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800774a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800774c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007754:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007758:	4a37      	ldr	r2, [pc, #220]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800775a:	430b      	orrs	r3, r1
 800775c:	6593      	str	r3, [r2, #88]	@ 0x58
 800775e:	e003      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007760:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007764:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800776c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007770:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007774:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007778:	2300      	movs	r3, #0
 800777a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800777e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007782:	460b      	mov	r3, r1
 8007784:	4313      	orrs	r3, r2
 8007786:	d05d      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800778c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007790:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007794:	d03b      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007796:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800779a:	d834      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800779c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077a0:	d037      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80077a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077a6:	d82e      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80077a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80077ac:	d033      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80077ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80077b2:	d828      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80077b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077b8:	d01a      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80077ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077be:	d822      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d003      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80077c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077c8:	d007      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80077ca:	e01c      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077cc:	4b1a      	ldr	r3, [pc, #104]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80077ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d0:	4a19      	ldr	r2, [pc, #100]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80077d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077d8:	e01e      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077de:	3308      	adds	r3, #8
 80077e0:	2100      	movs	r1, #0
 80077e2:	4618      	mov	r0, r3
 80077e4:	f002 f928 	bl	8009a38 <RCCEx_PLL2_Config>
 80077e8:	4603      	mov	r3, r0
 80077ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80077ee:	e013      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f4:	3328      	adds	r3, #40	@ 0x28
 80077f6:	2100      	movs	r1, #0
 80077f8:	4618      	mov	r0, r3
 80077fa:	f002 f9cf 	bl	8009b9c <RCCEx_PLL3_Config>
 80077fe:	4603      	mov	r3, r0
 8007800:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007804:	e008      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800780c:	e004      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800780e:	bf00      	nop
 8007810:	e002      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007812:	bf00      	nop
 8007814:	e000      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007818:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10d      	bne.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007820:	4b05      	ldr	r3, [pc, #20]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007824:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800782c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007830:	4a01      	ldr	r2, [pc, #4]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007832:	430b      	orrs	r3, r1
 8007834:	6593      	str	r3, [r2, #88]	@ 0x58
 8007836:	e005      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007838:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800783c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007840:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007850:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007854:	2300      	movs	r3, #0
 8007856:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800785a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800785e:	460b      	mov	r3, r1
 8007860:	4313      	orrs	r3, r2
 8007862:	d03a      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800786a:	2b30      	cmp	r3, #48	@ 0x30
 800786c:	d01f      	beq.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800786e:	2b30      	cmp	r3, #48	@ 0x30
 8007870:	d819      	bhi.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007872:	2b20      	cmp	r3, #32
 8007874:	d00c      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007876:	2b20      	cmp	r3, #32
 8007878:	d815      	bhi.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800787a:	2b00      	cmp	r3, #0
 800787c:	d019      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800787e:	2b10      	cmp	r3, #16
 8007880:	d111      	bne.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007882:	4baa      	ldr	r3, [pc, #680]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007886:	4aa9      	ldr	r2, [pc, #676]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800788c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800788e:	e011      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007894:	3308      	adds	r3, #8
 8007896:	2102      	movs	r1, #2
 8007898:	4618      	mov	r0, r3
 800789a:	f002 f8cd 	bl	8009a38 <RCCEx_PLL2_Config>
 800789e:	4603      	mov	r3, r0
 80078a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80078a4:	e006      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80078ac:	e002      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80078ae:	bf00      	nop
 80078b0:	e000      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80078b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d10a      	bne.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80078bc:	4b9b      	ldr	r3, [pc, #620]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80078be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078c0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80078c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078ca:	4a98      	ldr	r2, [pc, #608]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80078cc:	430b      	orrs	r3, r1
 80078ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80078d0:	e003      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80078da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80078e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80078ea:	2300      	movs	r3, #0
 80078ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80078f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80078f4:	460b      	mov	r3, r1
 80078f6:	4313      	orrs	r3, r2
 80078f8:	d051      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80078fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007900:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007904:	d035      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8007906:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800790a:	d82e      	bhi.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800790c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007910:	d031      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007912:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007916:	d828      	bhi.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007918:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800791c:	d01a      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800791e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007922:	d822      	bhi.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007924:	2b00      	cmp	r3, #0
 8007926:	d003      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800792c:	d007      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800792e:	e01c      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007930:	4b7e      	ldr	r3, [pc, #504]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007934:	4a7d      	ldr	r2, [pc, #500]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007936:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800793a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800793c:	e01c      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800793e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007942:	3308      	adds	r3, #8
 8007944:	2100      	movs	r1, #0
 8007946:	4618      	mov	r0, r3
 8007948:	f002 f876 	bl	8009a38 <RCCEx_PLL2_Config>
 800794c:	4603      	mov	r3, r0
 800794e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007952:	e011      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007958:	3328      	adds	r3, #40	@ 0x28
 800795a:	2100      	movs	r1, #0
 800795c:	4618      	mov	r0, r3
 800795e:	f002 f91d 	bl	8009b9c <RCCEx_PLL3_Config>
 8007962:	4603      	mov	r3, r0
 8007964:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007968:	e006      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007970:	e002      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007972:	bf00      	nop
 8007974:	e000      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007978:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10a      	bne.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007980:	4b6a      	ldr	r3, [pc, #424]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007984:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800798c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800798e:	4a67      	ldr	r2, [pc, #412]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007990:	430b      	orrs	r3, r1
 8007992:	6513      	str	r3, [r2, #80]	@ 0x50
 8007994:	e003      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007996:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800799a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800799e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80079aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079ae:	2300      	movs	r3, #0
 80079b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80079b4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80079b8:	460b      	mov	r3, r1
 80079ba:	4313      	orrs	r3, r2
 80079bc:	d053      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80079be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80079c8:	d033      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80079ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80079ce:	d82c      	bhi.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80079d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80079d4:	d02f      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80079d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80079da:	d826      	bhi.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80079dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80079e0:	d02b      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80079e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80079e6:	d820      	bhi.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80079e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079ec:	d012      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80079ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079f2:	d81a      	bhi.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d022      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80079f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079fc:	d115      	bne.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a02:	3308      	adds	r3, #8
 8007a04:	2101      	movs	r1, #1
 8007a06:	4618      	mov	r0, r3
 8007a08:	f002 f816 	bl	8009a38 <RCCEx_PLL2_Config>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007a12:	e015      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a18:	3328      	adds	r3, #40	@ 0x28
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f002 f8bd 	bl	8009b9c <RCCEx_PLL3_Config>
 8007a22:	4603      	mov	r3, r0
 8007a24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007a28:	e00a      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a30:	e006      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007a32:	bf00      	nop
 8007a34:	e004      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007a36:	bf00      	nop
 8007a38:	e002      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007a3a:	bf00      	nop
 8007a3c:	e000      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007a3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10a      	bne.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007a48:	4b38      	ldr	r3, [pc, #224]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a4c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a56:	4a35      	ldr	r2, [pc, #212]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a58:	430b      	orrs	r3, r1
 8007a5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a5c:	e003      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007a72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a76:	2300      	movs	r3, #0
 8007a78:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007a7c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007a80:	460b      	mov	r3, r1
 8007a82:	4313      	orrs	r3, r2
 8007a84:	d058      	beq.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007a8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a92:	d033      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a98:	d82c      	bhi.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a9e:	d02f      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aa4:	d826      	bhi.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007aa6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007aaa:	d02b      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007aac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ab0:	d820      	bhi.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007ab2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ab6:	d012      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007ab8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007abc:	d81a      	bhi.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d022      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007ac2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ac6:	d115      	bne.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007acc:	3308      	adds	r3, #8
 8007ace:	2101      	movs	r1, #1
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f001 ffb1 	bl	8009a38 <RCCEx_PLL2_Config>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007adc:	e015      	b.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae2:	3328      	adds	r3, #40	@ 0x28
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f002 f858 	bl	8009b9c <RCCEx_PLL3_Config>
 8007aec:	4603      	mov	r3, r0
 8007aee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007af2:	e00a      	b.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007afa:	e006      	b.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007afc:	bf00      	nop
 8007afe:	e004      	b.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007b00:	bf00      	nop
 8007b02:	e002      	b.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007b04:	bf00      	nop
 8007b06:	e000      	b.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007b08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10e      	bne.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007b12:	4b06      	ldr	r3, [pc, #24]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b16:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007b22:	4a02      	ldr	r2, [pc, #8]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007b24:	430b      	orrs	r3, r1
 8007b26:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b28:	e006      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007b2a:	bf00      	nop
 8007b2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b40:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007b44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b48:	2300      	movs	r3, #0
 8007b4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007b4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007b52:	460b      	mov	r3, r1
 8007b54:	4313      	orrs	r3, r2
 8007b56:	d037      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b62:	d00e      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007b64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b68:	d816      	bhi.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d018      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007b6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b72:	d111      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b74:	4bc4      	ldr	r3, [pc, #784]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b78:	4ac3      	ldr	r2, [pc, #780]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007b80:	e00f      	b.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b86:	3308      	adds	r3, #8
 8007b88:	2101      	movs	r1, #1
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f001 ff54 	bl	8009a38 <RCCEx_PLL2_Config>
 8007b90:	4603      	mov	r3, r0
 8007b92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007b96:	e004      	b.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b9e:	e000      	b.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ba2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10a      	bne.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007baa:	4bb7      	ldr	r3, [pc, #732]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bb8:	4ab3      	ldr	r2, [pc, #716]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bba:	430b      	orrs	r3, r1
 8007bbc:	6513      	str	r3, [r2, #80]	@ 0x50
 8007bbe:	e003      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007bd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007bde:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007be2:	460b      	mov	r3, r1
 8007be4:	4313      	orrs	r3, r2
 8007be6:	d039      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bee:	2b03      	cmp	r3, #3
 8007bf0:	d81c      	bhi.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf8:	08007c35 	.word	0x08007c35
 8007bfc:	08007c09 	.word	0x08007c09
 8007c00:	08007c17 	.word	0x08007c17
 8007c04:	08007c35 	.word	0x08007c35
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c08:	4b9f      	ldr	r3, [pc, #636]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c0c:	4a9e      	ldr	r2, [pc, #632]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007c14:	e00f      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c1a:	3308      	adds	r3, #8
 8007c1c:	2102      	movs	r1, #2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f001 ff0a 	bl	8009a38 <RCCEx_PLL2_Config>
 8007c24:	4603      	mov	r3, r0
 8007c26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007c2a:	e004      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c32:	e000      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10a      	bne.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007c3e:	4b92      	ldr	r3, [pc, #584]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c42:	f023 0103 	bic.w	r1, r3, #3
 8007c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c4c:	4a8e      	ldr	r2, [pc, #568]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c4e:	430b      	orrs	r3, r1
 8007c50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007c52:	e003      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c64:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007c68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c72:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007c76:	460b      	mov	r3, r1
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	f000 8099 	beq.w	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c7e:	4b83      	ldr	r3, [pc, #524]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a82      	ldr	r2, [pc, #520]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c8a:	f7f9 fcf9 	bl	8001680 <HAL_GetTick>
 8007c8e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c92:	e00b      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c94:	f7f9 fcf4 	bl	8001680 <HAL_GetTick>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	2b64      	cmp	r3, #100	@ 0x64
 8007ca2:	d903      	bls.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007caa:	e005      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cac:	4b77      	ldr	r3, [pc, #476]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d0ed      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007cb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d173      	bne.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007cc0:	4b71      	ldr	r3, [pc, #452]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cc2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ccc:	4053      	eors	r3, r2
 8007cce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d015      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007cd6:	4b6c      	ldr	r3, [pc, #432]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cde:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ce2:	4b69      	ldr	r3, [pc, #420]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ce6:	4a68      	ldr	r2, [pc, #416]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007cee:	4b66      	ldr	r3, [pc, #408]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cf2:	4a65      	ldr	r2, [pc, #404]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cf8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007cfa:	4a63      	ldr	r2, [pc, #396]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d00:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d0e:	d118      	bne.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d10:	f7f9 fcb6 	bl	8001680 <HAL_GetTick>
 8007d14:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d18:	e00d      	b.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d1a:	f7f9 fcb1 	bl	8001680 <HAL_GetTick>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007d24:	1ad2      	subs	r2, r2, r3
 8007d26:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d903      	bls.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007d34:	e005      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d36:	4b54      	ldr	r3, [pc, #336]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d3a:	f003 0302 	and.w	r3, r3, #2
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0eb      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007d42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d129      	bne.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d5a:	d10e      	bne.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007d5c:	4b4a      	ldr	r3, [pc, #296]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d6c:	091a      	lsrs	r2, r3, #4
 8007d6e:	4b48      	ldr	r3, [pc, #288]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007d70:	4013      	ands	r3, r2
 8007d72:	4a45      	ldr	r2, [pc, #276]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d74:	430b      	orrs	r3, r1
 8007d76:	6113      	str	r3, [r2, #16]
 8007d78:	e005      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007d7a:	4b43      	ldr	r3, [pc, #268]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	4a42      	ldr	r2, [pc, #264]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d80:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007d84:	6113      	str	r3, [r2, #16]
 8007d86:	4b40      	ldr	r3, [pc, #256]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d88:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d96:	4a3c      	ldr	r2, [pc, #240]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d98:	430b      	orrs	r3, r1
 8007d9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d9c:	e008      	b.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007da2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007da6:	e003      	b.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db8:	f002 0301 	and.w	r3, r2, #1
 8007dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007dc6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	f000 808f 	beq.w	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dd8:	2b28      	cmp	r3, #40	@ 0x28
 8007dda:	d871      	bhi.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8007de4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de2:	bf00      	nop
 8007de4:	08007ec9 	.word	0x08007ec9
 8007de8:	08007ec1 	.word	0x08007ec1
 8007dec:	08007ec1 	.word	0x08007ec1
 8007df0:	08007ec1 	.word	0x08007ec1
 8007df4:	08007ec1 	.word	0x08007ec1
 8007df8:	08007ec1 	.word	0x08007ec1
 8007dfc:	08007ec1 	.word	0x08007ec1
 8007e00:	08007ec1 	.word	0x08007ec1
 8007e04:	08007e95 	.word	0x08007e95
 8007e08:	08007ec1 	.word	0x08007ec1
 8007e0c:	08007ec1 	.word	0x08007ec1
 8007e10:	08007ec1 	.word	0x08007ec1
 8007e14:	08007ec1 	.word	0x08007ec1
 8007e18:	08007ec1 	.word	0x08007ec1
 8007e1c:	08007ec1 	.word	0x08007ec1
 8007e20:	08007ec1 	.word	0x08007ec1
 8007e24:	08007eab 	.word	0x08007eab
 8007e28:	08007ec1 	.word	0x08007ec1
 8007e2c:	08007ec1 	.word	0x08007ec1
 8007e30:	08007ec1 	.word	0x08007ec1
 8007e34:	08007ec1 	.word	0x08007ec1
 8007e38:	08007ec1 	.word	0x08007ec1
 8007e3c:	08007ec1 	.word	0x08007ec1
 8007e40:	08007ec1 	.word	0x08007ec1
 8007e44:	08007ec9 	.word	0x08007ec9
 8007e48:	08007ec1 	.word	0x08007ec1
 8007e4c:	08007ec1 	.word	0x08007ec1
 8007e50:	08007ec1 	.word	0x08007ec1
 8007e54:	08007ec1 	.word	0x08007ec1
 8007e58:	08007ec1 	.word	0x08007ec1
 8007e5c:	08007ec1 	.word	0x08007ec1
 8007e60:	08007ec1 	.word	0x08007ec1
 8007e64:	08007ec9 	.word	0x08007ec9
 8007e68:	08007ec1 	.word	0x08007ec1
 8007e6c:	08007ec1 	.word	0x08007ec1
 8007e70:	08007ec1 	.word	0x08007ec1
 8007e74:	08007ec1 	.word	0x08007ec1
 8007e78:	08007ec1 	.word	0x08007ec1
 8007e7c:	08007ec1 	.word	0x08007ec1
 8007e80:	08007ec1 	.word	0x08007ec1
 8007e84:	08007ec9 	.word	0x08007ec9
 8007e88:	58024400 	.word	0x58024400
 8007e8c:	58024800 	.word	0x58024800
 8007e90:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e98:	3308      	adds	r3, #8
 8007e9a:	2101      	movs	r1, #1
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f001 fdcb 	bl	8009a38 <RCCEx_PLL2_Config>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007ea8:	e00f      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eae:	3328      	adds	r3, #40	@ 0x28
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f001 fe72 	bl	8009b9c <RCCEx_PLL3_Config>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007ebe:	e004      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ec6:	e000      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d10a      	bne.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007ed2:	4bbf      	ldr	r3, [pc, #764]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ed6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ede:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ee0:	4abb      	ldr	r2, [pc, #748]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ee2:	430b      	orrs	r3, r1
 8007ee4:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ee6:	e003      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007eec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	f002 0302 	and.w	r3, r2, #2
 8007efc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f00:	2300      	movs	r3, #0
 8007f02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f06:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	d041      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f16:	2b05      	cmp	r3, #5
 8007f18:	d824      	bhi.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f20 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f20:	08007f6d 	.word	0x08007f6d
 8007f24:	08007f39 	.word	0x08007f39
 8007f28:	08007f4f 	.word	0x08007f4f
 8007f2c:	08007f6d 	.word	0x08007f6d
 8007f30:	08007f6d 	.word	0x08007f6d
 8007f34:	08007f6d 	.word	0x08007f6d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f3c:	3308      	adds	r3, #8
 8007f3e:	2101      	movs	r1, #1
 8007f40:	4618      	mov	r0, r3
 8007f42:	f001 fd79 	bl	8009a38 <RCCEx_PLL2_Config>
 8007f46:	4603      	mov	r3, r0
 8007f48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007f4c:	e00f      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f52:	3328      	adds	r3, #40	@ 0x28
 8007f54:	2101      	movs	r1, #1
 8007f56:	4618      	mov	r0, r3
 8007f58:	f001 fe20 	bl	8009b9c <RCCEx_PLL3_Config>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007f62:	e004      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f6a:	e000      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007f6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10a      	bne.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007f76:	4b96      	ldr	r3, [pc, #600]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f7a:	f023 0107 	bic.w	r1, r3, #7
 8007f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f84:	4a92      	ldr	r2, [pc, #584]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f86:	430b      	orrs	r3, r1
 8007f88:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f8a:	e003      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9c:	f002 0304 	and.w	r3, r2, #4
 8007fa0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007faa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	d044      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fbc:	2b05      	cmp	r3, #5
 8007fbe:	d825      	bhi.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc6:	bf00      	nop
 8007fc8:	08008015 	.word	0x08008015
 8007fcc:	08007fe1 	.word	0x08007fe1
 8007fd0:	08007ff7 	.word	0x08007ff7
 8007fd4:	08008015 	.word	0x08008015
 8007fd8:	08008015 	.word	0x08008015
 8007fdc:	08008015 	.word	0x08008015
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fe4:	3308      	adds	r3, #8
 8007fe6:	2101      	movs	r1, #1
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f001 fd25 	bl	8009a38 <RCCEx_PLL2_Config>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007ff4:	e00f      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ffa:	3328      	adds	r3, #40	@ 0x28
 8007ffc:	2101      	movs	r1, #1
 8007ffe:	4618      	mov	r0, r3
 8008000:	f001 fdcc 	bl	8009b9c <RCCEx_PLL3_Config>
 8008004:	4603      	mov	r3, r0
 8008006:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800800a:	e004      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008012:	e000      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8008014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008016:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10b      	bne.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800801e:	4b6c      	ldr	r3, [pc, #432]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008022:	f023 0107 	bic.w	r1, r3, #7
 8008026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800802a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800802e:	4a68      	ldr	r2, [pc, #416]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008030:	430b      	orrs	r3, r1
 8008032:	6593      	str	r3, [r2, #88]	@ 0x58
 8008034:	e003      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008036:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800803a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800803e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008046:	f002 0320 	and.w	r3, r2, #32
 800804a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800804e:	2300      	movs	r3, #0
 8008050:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008054:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008058:	460b      	mov	r3, r1
 800805a:	4313      	orrs	r3, r2
 800805c:	d055      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800805e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008062:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008066:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800806a:	d033      	beq.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800806c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008070:	d82c      	bhi.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008076:	d02f      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800807c:	d826      	bhi.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800807e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008082:	d02b      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008084:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008088:	d820      	bhi.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800808a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800808e:	d012      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8008090:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008094:	d81a      	bhi.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008096:	2b00      	cmp	r3, #0
 8008098:	d022      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800809a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800809e:	d115      	bne.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a4:	3308      	adds	r3, #8
 80080a6:	2100      	movs	r1, #0
 80080a8:	4618      	mov	r0, r3
 80080aa:	f001 fcc5 	bl	8009a38 <RCCEx_PLL2_Config>
 80080ae:	4603      	mov	r3, r0
 80080b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80080b4:	e015      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ba:	3328      	adds	r3, #40	@ 0x28
 80080bc:	2102      	movs	r1, #2
 80080be:	4618      	mov	r0, r3
 80080c0:	f001 fd6c 	bl	8009b9c <RCCEx_PLL3_Config>
 80080c4:	4603      	mov	r3, r0
 80080c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80080ca:	e00a      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80080d2:	e006      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80080d4:	bf00      	nop
 80080d6:	e004      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80080d8:	bf00      	nop
 80080da:	e002      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80080dc:	bf00      	nop
 80080de:	e000      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80080e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d10b      	bne.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080ea:	4b39      	ldr	r3, [pc, #228]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80080ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80080f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080fa:	4a35      	ldr	r2, [pc, #212]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80080fc:	430b      	orrs	r3, r1
 80080fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8008100:	e003      	b.n	800810a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008102:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008106:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800810a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800810e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008112:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008116:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800811a:	2300      	movs	r3, #0
 800811c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008120:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008124:	460b      	mov	r3, r1
 8008126:	4313      	orrs	r3, r2
 8008128:	d058      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800812a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800812e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008132:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008136:	d033      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8008138:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800813c:	d82c      	bhi.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800813e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008142:	d02f      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008144:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008148:	d826      	bhi.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800814a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800814e:	d02b      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008150:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008154:	d820      	bhi.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008156:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800815a:	d012      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800815c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008160:	d81a      	bhi.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008162:	2b00      	cmp	r3, #0
 8008164:	d022      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800816a:	d115      	bne.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800816c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008170:	3308      	adds	r3, #8
 8008172:	2100      	movs	r1, #0
 8008174:	4618      	mov	r0, r3
 8008176:	f001 fc5f 	bl	8009a38 <RCCEx_PLL2_Config>
 800817a:	4603      	mov	r3, r0
 800817c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008180:	e015      	b.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008186:	3328      	adds	r3, #40	@ 0x28
 8008188:	2102      	movs	r1, #2
 800818a:	4618      	mov	r0, r3
 800818c:	f001 fd06 	bl	8009b9c <RCCEx_PLL3_Config>
 8008190:	4603      	mov	r3, r0
 8008192:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008196:	e00a      	b.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800819e:	e006      	b.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80081a0:	bf00      	nop
 80081a2:	e004      	b.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80081a4:	bf00      	nop
 80081a6:	e002      	b.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80081a8:	bf00      	nop
 80081aa:	e000      	b.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80081ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10e      	bne.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80081b6:	4b06      	ldr	r3, [pc, #24]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80081b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081ba:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80081be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80081c6:	4a02      	ldr	r2, [pc, #8]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80081c8:	430b      	orrs	r3, r1
 80081ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80081cc:	e006      	b.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80081ce:	bf00      	nop
 80081d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80081dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80081e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081ec:	2300      	movs	r3, #0
 80081ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80081f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80081f6:	460b      	mov	r3, r1
 80081f8:	4313      	orrs	r3, r2
 80081fa:	d055      	beq.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80081fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008200:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008204:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008208:	d033      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800820a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800820e:	d82c      	bhi.n	800826a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008210:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008214:	d02f      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008216:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800821a:	d826      	bhi.n	800826a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800821c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008220:	d02b      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008222:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008226:	d820      	bhi.n	800826a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008228:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800822c:	d012      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800822e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008232:	d81a      	bhi.n	800826a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008234:	2b00      	cmp	r3, #0
 8008236:	d022      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008238:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800823c:	d115      	bne.n	800826a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800823e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008242:	3308      	adds	r3, #8
 8008244:	2100      	movs	r1, #0
 8008246:	4618      	mov	r0, r3
 8008248:	f001 fbf6 	bl	8009a38 <RCCEx_PLL2_Config>
 800824c:	4603      	mov	r3, r0
 800824e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008252:	e015      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008258:	3328      	adds	r3, #40	@ 0x28
 800825a:	2102      	movs	r1, #2
 800825c:	4618      	mov	r0, r3
 800825e:	f001 fc9d 	bl	8009b9c <RCCEx_PLL3_Config>
 8008262:	4603      	mov	r3, r0
 8008264:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008268:	e00a      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008270:	e006      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008272:	bf00      	nop
 8008274:	e004      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008276:	bf00      	nop
 8008278:	e002      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800827a:	bf00      	nop
 800827c:	e000      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800827e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008280:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10b      	bne.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008288:	4ba0      	ldr	r3, [pc, #640]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800828a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800828c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008294:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008298:	4a9c      	ldr	r2, [pc, #624]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800829a:	430b      	orrs	r3, r1
 800829c:	6593      	str	r3, [r2, #88]	@ 0x58
 800829e:	e003      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80082a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b0:	f002 0308 	and.w	r3, r2, #8
 80082b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80082b8:	2300      	movs	r3, #0
 80082ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80082be:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80082c2:	460b      	mov	r3, r1
 80082c4:	4313      	orrs	r3, r2
 80082c6:	d01e      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80082c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082d4:	d10c      	bne.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80082d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082da:	3328      	adds	r3, #40	@ 0x28
 80082dc:	2102      	movs	r1, #2
 80082de:	4618      	mov	r0, r3
 80082e0:	f001 fc5c 	bl	8009b9c <RCCEx_PLL3_Config>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d002      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80082f0:	4b86      	ldr	r3, [pc, #536]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082f4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80082f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008300:	4a82      	ldr	r2, [pc, #520]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008302:	430b      	orrs	r3, r1
 8008304:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	f002 0310 	and.w	r3, r2, #16
 8008312:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008316:	2300      	movs	r3, #0
 8008318:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800831c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008320:	460b      	mov	r3, r1
 8008322:	4313      	orrs	r3, r2
 8008324:	d01e      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800832a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800832e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008332:	d10c      	bne.n	800834e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008338:	3328      	adds	r3, #40	@ 0x28
 800833a:	2102      	movs	r1, #2
 800833c:	4618      	mov	r0, r3
 800833e:	f001 fc2d 	bl	8009b9c <RCCEx_PLL3_Config>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d002      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800834e:	4b6f      	ldr	r3, [pc, #444]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008352:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800835a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800835e:	4a6b      	ldr	r2, [pc, #428]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008360:	430b      	orrs	r3, r1
 8008362:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008370:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008372:	2300      	movs	r3, #0
 8008374:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008376:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800837a:	460b      	mov	r3, r1
 800837c:	4313      	orrs	r3, r2
 800837e:	d03e      	beq.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008384:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008388:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800838c:	d022      	beq.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800838e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008392:	d81b      	bhi.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008394:	2b00      	cmp	r3, #0
 8008396:	d003      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800839c:	d00b      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800839e:	e015      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083a4:	3308      	adds	r3, #8
 80083a6:	2100      	movs	r1, #0
 80083a8:	4618      	mov	r0, r3
 80083aa:	f001 fb45 	bl	8009a38 <RCCEx_PLL2_Config>
 80083ae:	4603      	mov	r3, r0
 80083b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80083b4:	e00f      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80083b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ba:	3328      	adds	r3, #40	@ 0x28
 80083bc:	2102      	movs	r1, #2
 80083be:	4618      	mov	r0, r3
 80083c0:	f001 fbec 	bl	8009b9c <RCCEx_PLL3_Config>
 80083c4:	4603      	mov	r3, r0
 80083c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80083ca:	e004      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80083d2:	e000      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80083d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10b      	bne.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80083de:	4b4b      	ldr	r3, [pc, #300]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80083e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083e2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80083e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80083ee:	4a47      	ldr	r2, [pc, #284]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80083f0:	430b      	orrs	r3, r1
 80083f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80083f4:	e003      	b.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80083fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008406:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800840a:	673b      	str	r3, [r7, #112]	@ 0x70
 800840c:	2300      	movs	r3, #0
 800840e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008410:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008414:	460b      	mov	r3, r1
 8008416:	4313      	orrs	r3, r2
 8008418:	d03b      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800841a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800841e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008422:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008426:	d01f      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008428:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800842c:	d818      	bhi.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800842e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008432:	d003      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008434:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008438:	d007      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800843a:	e011      	b.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800843c:	4b33      	ldr	r3, [pc, #204]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800843e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008440:	4a32      	ldr	r2, [pc, #200]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008446:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008448:	e00f      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800844a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800844e:	3328      	adds	r3, #40	@ 0x28
 8008450:	2101      	movs	r1, #1
 8008452:	4618      	mov	r0, r3
 8008454:	f001 fba2 	bl	8009b9c <RCCEx_PLL3_Config>
 8008458:	4603      	mov	r3, r0
 800845a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800845e:	e004      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008466:	e000      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800846a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10b      	bne.n	800848a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008472:	4b26      	ldr	r3, [pc, #152]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008476:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800847a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800847e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008482:	4a22      	ldr	r2, [pc, #136]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008484:	430b      	orrs	r3, r1
 8008486:	6553      	str	r3, [r2, #84]	@ 0x54
 8008488:	e003      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800848a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800848e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800849e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80084a0:	2300      	movs	r3, #0
 80084a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80084a4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80084a8:	460b      	mov	r3, r1
 80084aa:	4313      	orrs	r3, r2
 80084ac:	d034      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80084ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d003      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80084b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084bc:	d007      	beq.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80084be:	e011      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084c0:	4b12      	ldr	r3, [pc, #72]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80084c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c4:	4a11      	ldr	r2, [pc, #68]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80084c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80084cc:	e00e      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80084ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084d2:	3308      	adds	r3, #8
 80084d4:	2102      	movs	r1, #2
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 faae 	bl	8009a38 <RCCEx_PLL2_Config>
 80084dc:	4603      	mov	r3, r0
 80084de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80084e2:	e003      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80084ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10d      	bne.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80084f4:	4b05      	ldr	r3, [pc, #20]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80084f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084f8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80084fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008502:	4a02      	ldr	r2, [pc, #8]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008504:	430b      	orrs	r3, r1
 8008506:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008508:	e006      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800850a:	bf00      	nop
 800850c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008510:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008514:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800851c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008520:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008524:	663b      	str	r3, [r7, #96]	@ 0x60
 8008526:	2300      	movs	r3, #0
 8008528:	667b      	str	r3, [r7, #100]	@ 0x64
 800852a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800852e:	460b      	mov	r3, r1
 8008530:	4313      	orrs	r3, r2
 8008532:	d00c      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008538:	3328      	adds	r3, #40	@ 0x28
 800853a:	2102      	movs	r1, #2
 800853c:	4618      	mov	r0, r3
 800853e:	f001 fb2d 	bl	8009b9c <RCCEx_PLL3_Config>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800854e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008556:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800855a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800855c:	2300      	movs	r3, #0
 800855e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008560:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008564:	460b      	mov	r3, r1
 8008566:	4313      	orrs	r3, r2
 8008568:	d036      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800856a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800856e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008570:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008574:	d018      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008576:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800857a:	d811      	bhi.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800857c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008580:	d014      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008582:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008586:	d80b      	bhi.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008588:	2b00      	cmp	r3, #0
 800858a:	d011      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800858c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008590:	d106      	bne.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008592:	4bb7      	ldr	r3, [pc, #732]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008596:	4ab6      	ldr	r2, [pc, #728]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008598:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800859c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800859e:	e008      	b.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80085a6:	e004      	b.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80085a8:	bf00      	nop
 80085aa:	e002      	b.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80085ac:	bf00      	nop
 80085ae:	e000      	b.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80085b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10a      	bne.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80085ba:	4bad      	ldr	r3, [pc, #692]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80085bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80085c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085c8:	4aa9      	ldr	r2, [pc, #676]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80085ca:	430b      	orrs	r3, r1
 80085cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80085ce:	e003      	b.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80085d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80085e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80085e6:	2300      	movs	r3, #0
 80085e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80085ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80085ee:	460b      	mov	r3, r1
 80085f0:	4313      	orrs	r3, r2
 80085f2:	d009      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80085f4:	4b9e      	ldr	r3, [pc, #632]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80085f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80085fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008602:	4a9b      	ldr	r2, [pc, #620]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008604:	430b      	orrs	r3, r1
 8008606:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800860c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008610:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008614:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008616:	2300      	movs	r3, #0
 8008618:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800861a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800861e:	460b      	mov	r3, r1
 8008620:	4313      	orrs	r3, r2
 8008622:	d009      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008624:	4b92      	ldr	r3, [pc, #584]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008628:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800862c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008630:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008632:	4a8f      	ldr	r2, [pc, #572]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008634:	430b      	orrs	r3, r1
 8008636:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800863c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008640:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008644:	643b      	str	r3, [r7, #64]	@ 0x40
 8008646:	2300      	movs	r3, #0
 8008648:	647b      	str	r3, [r7, #68]	@ 0x44
 800864a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800864e:	460b      	mov	r3, r1
 8008650:	4313      	orrs	r3, r2
 8008652:	d00e      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008654:	4b86      	ldr	r3, [pc, #536]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	4a85      	ldr	r2, [pc, #532]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800865a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800865e:	6113      	str	r3, [r2, #16]
 8008660:	4b83      	ldr	r3, [pc, #524]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008662:	6919      	ldr	r1, [r3, #16]
 8008664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008668:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800866c:	4a80      	ldr	r2, [pc, #512]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800866e:	430b      	orrs	r3, r1
 8008670:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800867e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008680:	2300      	movs	r3, #0
 8008682:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008684:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008688:	460b      	mov	r3, r1
 800868a:	4313      	orrs	r3, r2
 800868c:	d009      	beq.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800868e:	4b78      	ldr	r3, [pc, #480]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008692:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800869a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800869c:	4a74      	ldr	r2, [pc, #464]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800869e:	430b      	orrs	r3, r1
 80086a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80086a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086aa:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80086ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80086b0:	2300      	movs	r3, #0
 80086b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80086b4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80086b8:	460b      	mov	r3, r1
 80086ba:	4313      	orrs	r3, r2
 80086bc:	d00a      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80086be:	4b6c      	ldr	r3, [pc, #432]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80086c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086c2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80086c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086ce:	4a68      	ldr	r2, [pc, #416]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80086d0:	430b      	orrs	r3, r1
 80086d2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80086d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086dc:	2100      	movs	r1, #0
 80086de:	62b9      	str	r1, [r7, #40]	@ 0x28
 80086e0:	f003 0301 	and.w	r3, r3, #1
 80086e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086e6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80086ea:	460b      	mov	r3, r1
 80086ec:	4313      	orrs	r3, r2
 80086ee:	d011      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086f4:	3308      	adds	r3, #8
 80086f6:	2100      	movs	r1, #0
 80086f8:	4618      	mov	r0, r3
 80086fa:	f001 f99d 	bl	8009a38 <RCCEx_PLL2_Config>
 80086fe:	4603      	mov	r3, r0
 8008700:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008704:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008708:	2b00      	cmp	r3, #0
 800870a:	d003      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800870c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008710:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871c:	2100      	movs	r1, #0
 800871e:	6239      	str	r1, [r7, #32]
 8008720:	f003 0302 	and.w	r3, r3, #2
 8008724:	627b      	str	r3, [r7, #36]	@ 0x24
 8008726:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800872a:	460b      	mov	r3, r1
 800872c:	4313      	orrs	r3, r2
 800872e:	d011      	beq.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008734:	3308      	adds	r3, #8
 8008736:	2101      	movs	r1, #1
 8008738:	4618      	mov	r0, r3
 800873a:	f001 f97d 	bl	8009a38 <RCCEx_PLL2_Config>
 800873e:	4603      	mov	r3, r0
 8008740:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008744:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008748:	2b00      	cmp	r3, #0
 800874a:	d003      	beq.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800874c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008750:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	2100      	movs	r1, #0
 800875e:	61b9      	str	r1, [r7, #24]
 8008760:	f003 0304 	and.w	r3, r3, #4
 8008764:	61fb      	str	r3, [r7, #28]
 8008766:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800876a:	460b      	mov	r3, r1
 800876c:	4313      	orrs	r3, r2
 800876e:	d011      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008774:	3308      	adds	r3, #8
 8008776:	2102      	movs	r1, #2
 8008778:	4618      	mov	r0, r3
 800877a:	f001 f95d 	bl	8009a38 <RCCEx_PLL2_Config>
 800877e:	4603      	mov	r3, r0
 8008780:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008784:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800878c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008790:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879c:	2100      	movs	r1, #0
 800879e:	6139      	str	r1, [r7, #16]
 80087a0:	f003 0308 	and.w	r3, r3, #8
 80087a4:	617b      	str	r3, [r7, #20]
 80087a6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80087aa:	460b      	mov	r3, r1
 80087ac:	4313      	orrs	r3, r2
 80087ae:	d011      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80087b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087b4:	3328      	adds	r3, #40	@ 0x28
 80087b6:	2100      	movs	r1, #0
 80087b8:	4618      	mov	r0, r3
 80087ba:	f001 f9ef 	bl	8009b9c <RCCEx_PLL3_Config>
 80087be:	4603      	mov	r3, r0
 80087c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80087c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d003      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80087d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087dc:	2100      	movs	r1, #0
 80087de:	60b9      	str	r1, [r7, #8]
 80087e0:	f003 0310 	and.w	r3, r3, #16
 80087e4:	60fb      	str	r3, [r7, #12]
 80087e6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80087ea:	460b      	mov	r3, r1
 80087ec:	4313      	orrs	r3, r2
 80087ee:	d011      	beq.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087f4:	3328      	adds	r3, #40	@ 0x28
 80087f6:	2101      	movs	r1, #1
 80087f8:	4618      	mov	r0, r3
 80087fa:	f001 f9cf 	bl	8009b9c <RCCEx_PLL3_Config>
 80087fe:	4603      	mov	r3, r0
 8008800:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008804:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800880c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008810:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881c:	2100      	movs	r1, #0
 800881e:	6039      	str	r1, [r7, #0]
 8008820:	f003 0320 	and.w	r3, r3, #32
 8008824:	607b      	str	r3, [r7, #4]
 8008826:	e9d7 1200 	ldrd	r1, r2, [r7]
 800882a:	460b      	mov	r3, r1
 800882c:	4313      	orrs	r3, r2
 800882e:	d011      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008834:	3328      	adds	r3, #40	@ 0x28
 8008836:	2102      	movs	r1, #2
 8008838:	4618      	mov	r0, r3
 800883a:	f001 f9af 	bl	8009b9c <RCCEx_PLL3_Config>
 800883e:	4603      	mov	r3, r0
 8008840:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008844:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008848:	2b00      	cmp	r3, #0
 800884a:	d003      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800884c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008850:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8008854:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8008858:	2b00      	cmp	r3, #0
 800885a:	d101      	bne.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800885c:	2300      	movs	r3, #0
 800885e:	e000      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008860:	2301      	movs	r3, #1
}
 8008862:	4618      	mov	r0, r3
 8008864:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8008868:	46bd      	mov	sp, r7
 800886a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800886e:	bf00      	nop
 8008870:	58024400 	.word	0x58024400

08008874 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b090      	sub	sp, #64	@ 0x40
 8008878:	af00      	add	r7, sp, #0
 800887a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800887e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008882:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008886:	430b      	orrs	r3, r1
 8008888:	f040 8094 	bne.w	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800888c:	4b9b      	ldr	r3, [pc, #620]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800888e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008890:	f003 0307 	and.w	r3, r3, #7
 8008894:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008898:	2b04      	cmp	r3, #4
 800889a:	f200 8087 	bhi.w	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800889e:	a201      	add	r2, pc, #4	@ (adr r2, 80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80088a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a4:	080088b9 	.word	0x080088b9
 80088a8:	080088e1 	.word	0x080088e1
 80088ac:	08008909 	.word	0x08008909
 80088b0:	080089a5 	.word	0x080089a5
 80088b4:	08008931 	.word	0x08008931
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088b8:	4b90      	ldr	r3, [pc, #576]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088c4:	d108      	bne.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 ff62 	bl	8009794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088d4:	f000 bc93 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80088d8:	2300      	movs	r3, #0
 80088da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088dc:	f000 bc8f 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088e0:	4b86      	ldr	r3, [pc, #536]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088ec:	d108      	bne.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088ee:	f107 0318 	add.w	r3, r7, #24
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 fca6 	bl	8009244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088fc:	f000 bc7f 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008900:	2300      	movs	r3, #0
 8008902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008904:	f000 bc7b 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008908:	4b7c      	ldr	r3, [pc, #496]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008910:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008914:	d108      	bne.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008916:	f107 030c 	add.w	r3, r7, #12
 800891a:	4618      	mov	r0, r3
 800891c:	f000 fde6 	bl	80094ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008924:	f000 bc6b 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008928:	2300      	movs	r3, #0
 800892a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800892c:	f000 bc67 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008930:	4b72      	ldr	r3, [pc, #456]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008934:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008938:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800893a:	4b70      	ldr	r3, [pc, #448]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f003 0304 	and.w	r3, r3, #4
 8008942:	2b04      	cmp	r3, #4
 8008944:	d10c      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008948:	2b00      	cmp	r3, #0
 800894a:	d109      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800894c:	4b6b      	ldr	r3, [pc, #428]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	08db      	lsrs	r3, r3, #3
 8008952:	f003 0303 	and.w	r3, r3, #3
 8008956:	4a6a      	ldr	r2, [pc, #424]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008958:	fa22 f303 	lsr.w	r3, r2, r3
 800895c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800895e:	e01f      	b.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008960:	4b66      	ldr	r3, [pc, #408]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008968:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800896c:	d106      	bne.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800896e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008970:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008974:	d102      	bne.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008976:	4b63      	ldr	r3, [pc, #396]	@ (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008978:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800897a:	e011      	b.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800897c:	4b5f      	ldr	r3, [pc, #380]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008984:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008988:	d106      	bne.n	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800898a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800898c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008990:	d102      	bne.n	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008992:	4b5d      	ldr	r3, [pc, #372]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008994:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008996:	e003      	b.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008998:	2300      	movs	r3, #0
 800899a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800899c:	f000 bc2f 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80089a0:	f000 bc2d 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80089a4:	4b59      	ldr	r3, [pc, #356]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80089a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089a8:	f000 bc29 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80089ac:	2300      	movs	r3, #0
 80089ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089b0:	f000 bc25 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80089b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089b8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80089bc:	430b      	orrs	r3, r1
 80089be:	f040 80a7 	bne.w	8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80089c2:	4b4e      	ldr	r3, [pc, #312]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80089c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089c6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80089ca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80089cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80089d2:	d054      	beq.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80089d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80089da:	f200 808b 	bhi.w	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80089de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80089e4:	f000 8083 	beq.w	8008aee <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80089e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80089ee:	f200 8081 	bhi.w	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80089f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80089f8:	d02f      	beq.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80089fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a00:	d878      	bhi.n	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d004      	beq.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8008a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a0e:	d012      	beq.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8008a10:	e070      	b.n	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a12:	4b3a      	ldr	r3, [pc, #232]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a1e:	d107      	bne.n	8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a24:	4618      	mov	r0, r3
 8008a26:	f000 feb5 	bl	8009794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a2e:	e3e6      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a30:	2300      	movs	r3, #0
 8008a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a34:	e3e3      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a36:	4b31      	ldr	r3, [pc, #196]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a42:	d107      	bne.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a44:	f107 0318 	add.w	r3, r7, #24
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f000 fbfb 	bl	8009244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a52:	e3d4      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a54:	2300      	movs	r3, #0
 8008a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a58:	e3d1      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a5a:	4b28      	ldr	r3, [pc, #160]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a66:	d107      	bne.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a68:	f107 030c 	add.w	r3, r7, #12
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f000 fd3d 	bl	80094ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a76:	e3c2      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a7c:	e3bf      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a86:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a88:	4b1c      	ldr	r3, [pc, #112]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 0304 	and.w	r3, r3, #4
 8008a90:	2b04      	cmp	r3, #4
 8008a92:	d10c      	bne.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d109      	bne.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a9a:	4b18      	ldr	r3, [pc, #96]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	08db      	lsrs	r3, r3, #3
 8008aa0:	f003 0303 	and.w	r3, r3, #3
 8008aa4:	4a16      	ldr	r2, [pc, #88]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8008aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008aac:	e01e      	b.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008aae:	4b13      	ldr	r3, [pc, #76]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ab6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008aba:	d106      	bne.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008abe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ac2:	d102      	bne.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ac8:	e010      	b.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008aca:	4b0c      	ldr	r3, [pc, #48]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ad2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ad6:	d106      	bne.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ada:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ade:	d102      	bne.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ae0:	4b09      	ldr	r3, [pc, #36]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ae4:	e002      	b.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008aea:	e388      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008aec:	e387      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008aee:	4b07      	ldr	r3, [pc, #28]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af2:	e384      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008af4:	2300      	movs	r3, #0
 8008af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af8:	e381      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008afa:	bf00      	nop
 8008afc:	58024400 	.word	0x58024400
 8008b00:	03d09000 	.word	0x03d09000
 8008b04:	003d0900 	.word	0x003d0900
 8008b08:	017d7840 	.word	0x017d7840
 8008b0c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b14:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008b18:	430b      	orrs	r3, r1
 8008b1a:	f040 809c 	bne.w	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008b1e:	4b9e      	ldr	r3, [pc, #632]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b22:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008b26:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b2e:	d054      	beq.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b36:	f200 808b 	bhi.w	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b40:	f000 8083 	beq.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b46:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b4a:	f200 8081 	bhi.w	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b54:	d02f      	beq.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b5c:	d878      	bhi.n	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d004      	beq.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b6a:	d012      	beq.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008b6c:	e070      	b.n	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b6e:	4b8a      	ldr	r3, [pc, #552]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b7a:	d107      	bne.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 fe07 	bl	8009794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b8a:	e338      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b90:	e335      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b92:	4b81      	ldr	r3, [pc, #516]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b9e:	d107      	bne.n	8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ba0:	f107 0318 	add.w	r3, r7, #24
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f000 fb4d 	bl	8009244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bae:	e326      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bb4:	e323      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bb6:	4b78      	ldr	r3, [pc, #480]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bc2:	d107      	bne.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bc4:	f107 030c 	add.w	r3, r7, #12
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f000 fc8f 	bl	80094ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bd2:	e314      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bd8:	e311      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008bda:	4b6f      	ldr	r3, [pc, #444]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bde:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008be2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008be4:	4b6c      	ldr	r3, [pc, #432]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 0304 	and.w	r3, r3, #4
 8008bec:	2b04      	cmp	r3, #4
 8008bee:	d10c      	bne.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d109      	bne.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bf6:	4b68      	ldr	r3, [pc, #416]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	08db      	lsrs	r3, r3, #3
 8008bfc:	f003 0303 	and.w	r3, r3, #3
 8008c00:	4a66      	ldr	r2, [pc, #408]	@ (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008c02:	fa22 f303 	lsr.w	r3, r2, r3
 8008c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c08:	e01e      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c0a:	4b63      	ldr	r3, [pc, #396]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c16:	d106      	bne.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c1e:	d102      	bne.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c20:	4b5f      	ldr	r3, [pc, #380]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c24:	e010      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c26:	4b5c      	ldr	r3, [pc, #368]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c32:	d106      	bne.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c3a:	d102      	bne.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c3c:	4b59      	ldr	r3, [pc, #356]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c40:	e002      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c42:	2300      	movs	r3, #0
 8008c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008c46:	e2da      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c48:	e2d9      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c4a:	4b57      	ldr	r3, [pc, #348]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c4e:	e2d6      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008c50:	2300      	movs	r3, #0
 8008c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c54:	e2d3      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008c56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c5a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008c5e:	430b      	orrs	r3, r1
 8008c60:	f040 80a7 	bne.w	8008db2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008c64:	4b4c      	ldr	r3, [pc, #304]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c68:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008c6c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c74:	d055      	beq.n	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c7c:	f200 8096 	bhi.w	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008c86:	f000 8084 	beq.w	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008c90:	f200 808c 	bhi.w	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c9a:	d030      	beq.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ca2:	f200 8083 	bhi.w	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d004      	beq.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cb2:	d012      	beq.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008cb4:	e07a      	b.n	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cb6:	4b38      	ldr	r3, [pc, #224]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008cc2:	d107      	bne.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f000 fd63 	bl	8009794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cd2:	e294      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cd8:	e291      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cda:	4b2f      	ldr	r3, [pc, #188]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ce2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ce6:	d107      	bne.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ce8:	f107 0318 	add.w	r3, r7, #24
 8008cec:	4618      	mov	r0, r3
 8008cee:	f000 faa9 	bl	8009244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cf6:	e282      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cfc:	e27f      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cfe:	4b26      	ldr	r3, [pc, #152]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d0a:	d107      	bne.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d0c:	f107 030c 	add.w	r3, r7, #12
 8008d10:	4618      	mov	r0, r3
 8008d12:	f000 fbeb 	bl	80094ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d1a:	e270      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d20:	e26d      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d22:	4b1d      	ldr	r3, [pc, #116]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d2a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0304 	and.w	r3, r3, #4
 8008d34:	2b04      	cmp	r3, #4
 8008d36:	d10c      	bne.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d109      	bne.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d3e:	4b16      	ldr	r3, [pc, #88]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	08db      	lsrs	r3, r3, #3
 8008d44:	f003 0303 	and.w	r3, r3, #3
 8008d48:	4a14      	ldr	r2, [pc, #80]	@ (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d50:	e01e      	b.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d52:	4b11      	ldr	r3, [pc, #68]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d5e:	d106      	bne.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d66:	d102      	bne.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d68:	4b0d      	ldr	r3, [pc, #52]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d6c:	e010      	b.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d7a:	d106      	bne.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d82:	d102      	bne.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d84:	4b07      	ldr	r3, [pc, #28]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d88:	e002      	b.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008d8e:	e236      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d90:	e235      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008d92:	4b05      	ldr	r3, [pc, #20]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d96:	e232      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d98:	58024400 	.word	0x58024400
 8008d9c:	03d09000 	.word	0x03d09000
 8008da0:	003d0900 	.word	0x003d0900
 8008da4:	017d7840 	.word	0x017d7840
 8008da8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008dac:	2300      	movs	r3, #0
 8008dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008db0:	e225      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008db2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008db6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008dba:	430b      	orrs	r3, r1
 8008dbc:	f040 8085 	bne.w	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008dc0:	4b9c      	ldr	r3, [pc, #624]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dc4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008dd0:	d06b      	beq.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008dd8:	d874      	bhi.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ddc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008de0:	d056      	beq.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008de8:	d86c      	bhi.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008df0:	d03b      	beq.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008df8:	d864      	bhi.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e00:	d021      	beq.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e08:	d85c      	bhi.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d004      	beq.n	8008e1a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e16:	d004      	beq.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008e18:	e054      	b.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008e1a:	f7fe fb75 	bl	8007508 <HAL_RCC_GetPCLK1Freq>
 8008e1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e20:	e1ed      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e22:	4b84      	ldr	r3, [pc, #528]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e2e:	d107      	bne.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e30:	f107 0318 	add.w	r3, r7, #24
 8008e34:	4618      	mov	r0, r3
 8008e36:	f000 fa05 	bl	8009244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e3e:	e1de      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e40:	2300      	movs	r3, #0
 8008e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e44:	e1db      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e46:	4b7b      	ldr	r3, [pc, #492]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e52:	d107      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e54:	f107 030c 	add.w	r3, r7, #12
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 fb47 	bl	80094ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e62:	e1cc      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e64:	2300      	movs	r3, #0
 8008e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e68:	e1c9      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e6a:	4b72      	ldr	r3, [pc, #456]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 0304 	and.w	r3, r3, #4
 8008e72:	2b04      	cmp	r3, #4
 8008e74:	d109      	bne.n	8008e8a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e76:	4b6f      	ldr	r3, [pc, #444]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	08db      	lsrs	r3, r3, #3
 8008e7c:	f003 0303 	and.w	r3, r3, #3
 8008e80:	4a6d      	ldr	r2, [pc, #436]	@ (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008e82:	fa22 f303 	lsr.w	r3, r2, r3
 8008e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e88:	e1b9      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e8e:	e1b6      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008e90:	4b68      	ldr	r3, [pc, #416]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e9c:	d102      	bne.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008e9e:	4b67      	ldr	r3, [pc, #412]	@ (800903c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ea2:	e1ac      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ea8:	e1a9      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008eaa:	4b62      	ldr	r3, [pc, #392]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008eb6:	d102      	bne.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008eb8:	4b61      	ldr	r3, [pc, #388]	@ (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ebc:	e19f      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ec2:	e19c      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ec8:	e199      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008eca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ece:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008ed2:	430b      	orrs	r3, r1
 8008ed4:	d173      	bne.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008ed6:	4b57      	ldr	r3, [pc, #348]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008ede:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ee6:	d02f      	beq.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008eee:	d863      	bhi.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d004      	beq.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008efc:	d012      	beq.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8008efe:	e05b      	b.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f00:	4b4c      	ldr	r3, [pc, #304]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f0c:	d107      	bne.n	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f0e:	f107 0318 	add.w	r3, r7, #24
 8008f12:	4618      	mov	r0, r3
 8008f14:	f000 f996 	bl	8009244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f1c:	e16f      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f22:	e16c      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f24:	4b43      	ldr	r3, [pc, #268]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f30:	d107      	bne.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f32:	f107 030c 	add.w	r3, r7, #12
 8008f36:	4618      	mov	r0, r3
 8008f38:	f000 fad8 	bl	80094ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f40:	e15d      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f42:	2300      	movs	r3, #0
 8008f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f46:	e15a      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f48:	4b3a      	ldr	r3, [pc, #232]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008f50:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f52:	4b38      	ldr	r3, [pc, #224]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0304 	and.w	r3, r3, #4
 8008f5a:	2b04      	cmp	r3, #4
 8008f5c:	d10c      	bne.n	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d109      	bne.n	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f64:	4b33      	ldr	r3, [pc, #204]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	08db      	lsrs	r3, r3, #3
 8008f6a:	f003 0303 	and.w	r3, r3, #3
 8008f6e:	4a32      	ldr	r2, [pc, #200]	@ (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008f70:	fa22 f303 	lsr.w	r3, r2, r3
 8008f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f76:	e01e      	b.n	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f78:	4b2e      	ldr	r3, [pc, #184]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f84:	d106      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f8c:	d102      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800903c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f92:	e010      	b.n	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f94:	4b27      	ldr	r3, [pc, #156]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fa0:	d106      	bne.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fa8:	d102      	bne.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008faa:	4b25      	ldr	r3, [pc, #148]	@ (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fae:	e002      	b.n	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008fb4:	e123      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008fb6:	e122      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fbc:	e11f      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fc2:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008fc6:	430b      	orrs	r3, r1
 8008fc8:	d13c      	bne.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008fca:	4b1a      	ldr	r3, [pc, #104]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008fd2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d004      	beq.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fe0:	d012      	beq.n	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008fe2:	e023      	b.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fe4:	4b13      	ldr	r3, [pc, #76]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ff0:	d107      	bne.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ff2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 fbcc 	bl	8009794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009000:	e0fd      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009002:	2300      	movs	r3, #0
 8009004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009006:	e0fa      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009008:	4b0a      	ldr	r3, [pc, #40]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009010:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009014:	d107      	bne.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009016:	f107 0318 	add.w	r3, r7, #24
 800901a:	4618      	mov	r0, r3
 800901c:	f000 f912 	bl	8009244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009020:	6a3b      	ldr	r3, [r7, #32]
 8009022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009024:	e0eb      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009026:	2300      	movs	r3, #0
 8009028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800902a:	e0e8      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800902c:	2300      	movs	r3, #0
 800902e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009030:	e0e5      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009032:	bf00      	nop
 8009034:	58024400 	.word	0x58024400
 8009038:	03d09000 	.word	0x03d09000
 800903c:	003d0900 	.word	0x003d0900
 8009040:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009044:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009048:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800904c:	430b      	orrs	r3, r1
 800904e:	f040 8085 	bne.w	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009052:	4b6d      	ldr	r3, [pc, #436]	@ (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009056:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800905a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800905c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800905e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009062:	d06b      	beq.n	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8009064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009066:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800906a:	d874      	bhi.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800906c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800906e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009072:	d056      	beq.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8009074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800907a:	d86c      	bhi.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800907c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800907e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009082:	d03b      	beq.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8009084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009086:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800908a:	d864      	bhi.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800908c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800908e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009092:	d021      	beq.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8009094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009096:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800909a:	d85c      	bhi.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800909c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d004      	beq.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80090a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090a8:	d004      	beq.n	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80090aa:	e054      	b.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80090ac:	f000 f8b4 	bl	8009218 <HAL_RCCEx_GetD3PCLK1Freq>
 80090b0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80090b2:	e0a4      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090b4:	4b54      	ldr	r3, [pc, #336]	@ (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090c0:	d107      	bne.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090c2:	f107 0318 	add.w	r3, r7, #24
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 f8bc 	bl	8009244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090d0:	e095      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090d2:	2300      	movs	r3, #0
 80090d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090d6:	e092      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090d8:	4b4b      	ldr	r3, [pc, #300]	@ (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090e4:	d107      	bne.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090e6:	f107 030c 	add.w	r3, r7, #12
 80090ea:	4618      	mov	r0, r3
 80090ec:	f000 f9fe 	bl	80094ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090f4:	e083      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090f6:	2300      	movs	r3, #0
 80090f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090fa:	e080      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80090fc:	4b42      	ldr	r3, [pc, #264]	@ (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0304 	and.w	r3, r3, #4
 8009104:	2b04      	cmp	r3, #4
 8009106:	d109      	bne.n	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009108:	4b3f      	ldr	r3, [pc, #252]	@ (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	08db      	lsrs	r3, r3, #3
 800910e:	f003 0303 	and.w	r3, r3, #3
 8009112:	4a3e      	ldr	r2, [pc, #248]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009114:	fa22 f303 	lsr.w	r3, r2, r3
 8009118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800911a:	e070      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800911c:	2300      	movs	r3, #0
 800911e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009120:	e06d      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009122:	4b39      	ldr	r3, [pc, #228]	@ (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800912a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800912e:	d102      	bne.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8009130:	4b37      	ldr	r3, [pc, #220]	@ (8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009134:	e063      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009136:	2300      	movs	r3, #0
 8009138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800913a:	e060      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800913c:	4b32      	ldr	r3, [pc, #200]	@ (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009144:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009148:	d102      	bne.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800914a:	4b32      	ldr	r3, [pc, #200]	@ (8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800914c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800914e:	e056      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009150:	2300      	movs	r3, #0
 8009152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009154:	e053      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009156:	2300      	movs	r3, #0
 8009158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800915a:	e050      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800915c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009160:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009164:	430b      	orrs	r3, r1
 8009166:	d148      	bne.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009168:	4b27      	ldr	r3, [pc, #156]	@ (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800916a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800916c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009170:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009174:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009178:	d02a      	beq.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800917a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009180:	d838      	bhi.n	80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009184:	2b00      	cmp	r3, #0
 8009186:	d004      	beq.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800918a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800918e:	d00d      	beq.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009190:	e030      	b.n	80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009192:	4b1d      	ldr	r3, [pc, #116]	@ (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800919a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800919e:	d102      	bne.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80091a0:	4b1c      	ldr	r3, [pc, #112]	@ (8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80091a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091a4:	e02b      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091a6:	2300      	movs	r3, #0
 80091a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091aa:	e028      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091ac:	4b16      	ldr	r3, [pc, #88]	@ (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091b8:	d107      	bne.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 fae8 	bl	8009794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091c8:	e019      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091ca:	2300      	movs	r3, #0
 80091cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091ce:	e016      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091d0:	4b0d      	ldr	r3, [pc, #52]	@ (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091dc:	d107      	bne.n	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091de:	f107 0318 	add.w	r3, r7, #24
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 f82e 	bl	8009244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091ec:	e007      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091ee:	2300      	movs	r3, #0
 80091f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091f2:	e004      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80091f4:	2300      	movs	r3, #0
 80091f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091f8:	e001      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80091fa:	2300      	movs	r3, #0
 80091fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80091fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009200:	4618      	mov	r0, r3
 8009202:	3740      	adds	r7, #64	@ 0x40
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	58024400 	.word	0x58024400
 800920c:	03d09000 	.word	0x03d09000
 8009210:	003d0900 	.word	0x003d0900
 8009214:	017d7840 	.word	0x017d7840

08009218 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800921c:	f7fe f944 	bl	80074a8 <HAL_RCC_GetHCLKFreq>
 8009220:	4602      	mov	r2, r0
 8009222:	4b06      	ldr	r3, [pc, #24]	@ (800923c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009224:	6a1b      	ldr	r3, [r3, #32]
 8009226:	091b      	lsrs	r3, r3, #4
 8009228:	f003 0307 	and.w	r3, r3, #7
 800922c:	4904      	ldr	r1, [pc, #16]	@ (8009240 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800922e:	5ccb      	ldrb	r3, [r1, r3]
 8009230:	f003 031f 	and.w	r3, r3, #31
 8009234:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009238:	4618      	mov	r0, r3
 800923a:	bd80      	pop	{r7, pc}
 800923c:	58024400 	.word	0x58024400
 8009240:	0800b5c4 	.word	0x0800b5c4

08009244 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009244:	b480      	push	{r7}
 8009246:	b089      	sub	sp, #36	@ 0x24
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800924c:	4ba1      	ldr	r3, [pc, #644]	@ (80094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800924e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009250:	f003 0303 	and.w	r3, r3, #3
 8009254:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009256:	4b9f      	ldr	r3, [pc, #636]	@ (80094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800925a:	0b1b      	lsrs	r3, r3, #12
 800925c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009260:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009262:	4b9c      	ldr	r3, [pc, #624]	@ (80094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009266:	091b      	lsrs	r3, r3, #4
 8009268:	f003 0301 	and.w	r3, r3, #1
 800926c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800926e:	4b99      	ldr	r3, [pc, #612]	@ (80094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009272:	08db      	lsrs	r3, r3, #3
 8009274:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009278:	693a      	ldr	r2, [r7, #16]
 800927a:	fb02 f303 	mul.w	r3, r2, r3
 800927e:	ee07 3a90 	vmov	s15, r3
 8009282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009286:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	2b00      	cmp	r3, #0
 800928e:	f000 8111 	beq.w	80094b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	2b02      	cmp	r3, #2
 8009296:	f000 8083 	beq.w	80093a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	2b02      	cmp	r3, #2
 800929e:	f200 80a1 	bhi.w	80093e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d003      	beq.n	80092b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d056      	beq.n	800935c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80092ae:	e099      	b.n	80093e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092b0:	4b88      	ldr	r3, [pc, #544]	@ (80094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 0320 	and.w	r3, r3, #32
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d02d      	beq.n	8009318 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092bc:	4b85      	ldr	r3, [pc, #532]	@ (80094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	08db      	lsrs	r3, r3, #3
 80092c2:	f003 0303 	and.w	r3, r3, #3
 80092c6:	4a84      	ldr	r2, [pc, #528]	@ (80094d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80092c8:	fa22 f303 	lsr.w	r3, r2, r3
 80092cc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	ee07 3a90 	vmov	s15, r3
 80092d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	ee07 3a90 	vmov	s15, r3
 80092de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092e6:	4b7b      	ldr	r3, [pc, #492]	@ (80094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ee:	ee07 3a90 	vmov	s15, r3
 80092f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80092fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80094dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800930a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800930e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009312:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009316:	e087      	b.n	8009428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	ee07 3a90 	vmov	s15, r3
 800931e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009322:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80094e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800932a:	4b6a      	ldr	r3, [pc, #424]	@ (80094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800932c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800932e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009332:	ee07 3a90 	vmov	s15, r3
 8009336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800933a:	ed97 6a03 	vldr	s12, [r7, #12]
 800933e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80094dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800934a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800934e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009356:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800935a:	e065      	b.n	8009428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	ee07 3a90 	vmov	s15, r3
 8009362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009366:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800936a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800936e:	4b59      	ldr	r3, [pc, #356]	@ (80094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009376:	ee07 3a90 	vmov	s15, r3
 800937a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800937e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009382:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80094dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800938a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800938e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800939a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800939e:	e043      	b.n	8009428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	ee07 3a90 	vmov	s15, r3
 80093a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80094e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80093ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093b2:	4b48      	ldr	r3, [pc, #288]	@ (80094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ba:	ee07 3a90 	vmov	s15, r3
 80093be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80093c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80094dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093e2:	e021      	b.n	8009428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	ee07 3a90 	vmov	s15, r3
 80093ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80093f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093f6:	4b37      	ldr	r3, [pc, #220]	@ (80094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093fe:	ee07 3a90 	vmov	s15, r3
 8009402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009406:	ed97 6a03 	vldr	s12, [r7, #12]
 800940a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80094dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800940e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800941a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800941e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009422:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009426:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009428:	4b2a      	ldr	r3, [pc, #168]	@ (80094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800942a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800942c:	0a5b      	lsrs	r3, r3, #9
 800942e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009432:	ee07 3a90 	vmov	s15, r3
 8009436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800943a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800943e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009442:	edd7 6a07 	vldr	s13, [r7, #28]
 8009446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800944a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800944e:	ee17 2a90 	vmov	r2, s15
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009456:	4b1f      	ldr	r3, [pc, #124]	@ (80094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800945a:	0c1b      	lsrs	r3, r3, #16
 800945c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009460:	ee07 3a90 	vmov	s15, r3
 8009464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009468:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800946c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009470:	edd7 6a07 	vldr	s13, [r7, #28]
 8009474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009478:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800947c:	ee17 2a90 	vmov	r2, s15
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009484:	4b13      	ldr	r3, [pc, #76]	@ (80094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009488:	0e1b      	lsrs	r3, r3, #24
 800948a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800948e:	ee07 3a90 	vmov	s15, r3
 8009492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009496:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800949a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800949e:	edd7 6a07 	vldr	s13, [r7, #28]
 80094a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094aa:	ee17 2a90 	vmov	r2, s15
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80094b2:	e008      	b.n	80094c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	609a      	str	r2, [r3, #8]
}
 80094c6:	bf00      	nop
 80094c8:	3724      	adds	r7, #36	@ 0x24
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	58024400 	.word	0x58024400
 80094d8:	03d09000 	.word	0x03d09000
 80094dc:	46000000 	.word	0x46000000
 80094e0:	4c742400 	.word	0x4c742400
 80094e4:	4a742400 	.word	0x4a742400
 80094e8:	4bbebc20 	.word	0x4bbebc20

080094ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b089      	sub	sp, #36	@ 0x24
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094f4:	4ba1      	ldr	r3, [pc, #644]	@ (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f8:	f003 0303 	and.w	r3, r3, #3
 80094fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80094fe:	4b9f      	ldr	r3, [pc, #636]	@ (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009502:	0d1b      	lsrs	r3, r3, #20
 8009504:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009508:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800950a:	4b9c      	ldr	r3, [pc, #624]	@ (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800950c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800950e:	0a1b      	lsrs	r3, r3, #8
 8009510:	f003 0301 	and.w	r3, r3, #1
 8009514:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009516:	4b99      	ldr	r3, [pc, #612]	@ (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800951a:	08db      	lsrs	r3, r3, #3
 800951c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009520:	693a      	ldr	r2, [r7, #16]
 8009522:	fb02 f303 	mul.w	r3, r2, r3
 8009526:	ee07 3a90 	vmov	s15, r3
 800952a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800952e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	2b00      	cmp	r3, #0
 8009536:	f000 8111 	beq.w	800975c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	2b02      	cmp	r3, #2
 800953e:	f000 8083 	beq.w	8009648 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	2b02      	cmp	r3, #2
 8009546:	f200 80a1 	bhi.w	800968c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d003      	beq.n	8009558 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	2b01      	cmp	r3, #1
 8009554:	d056      	beq.n	8009604 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009556:	e099      	b.n	800968c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009558:	4b88      	ldr	r3, [pc, #544]	@ (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 0320 	and.w	r3, r3, #32
 8009560:	2b00      	cmp	r3, #0
 8009562:	d02d      	beq.n	80095c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009564:	4b85      	ldr	r3, [pc, #532]	@ (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	08db      	lsrs	r3, r3, #3
 800956a:	f003 0303 	and.w	r3, r3, #3
 800956e:	4a84      	ldr	r2, [pc, #528]	@ (8009780 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009570:	fa22 f303 	lsr.w	r3, r2, r3
 8009574:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	ee07 3a90 	vmov	s15, r3
 800957c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	ee07 3a90 	vmov	s15, r3
 8009586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800958a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800958e:	4b7b      	ldr	r3, [pc, #492]	@ (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009596:	ee07 3a90 	vmov	s15, r3
 800959a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800959e:	ed97 6a03 	vldr	s12, [r7, #12]
 80095a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80095be:	e087      	b.n	80096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	ee07 3a90 	vmov	s15, r3
 80095c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009788 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80095ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095d2:	4b6a      	ldr	r3, [pc, #424]	@ (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095da:	ee07 3a90 	vmov	s15, r3
 80095de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80095e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009602:	e065      	b.n	80096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	ee07 3a90 	vmov	s15, r3
 800960a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800960e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800978c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009616:	4b59      	ldr	r3, [pc, #356]	@ (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800961a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800961e:	ee07 3a90 	vmov	s15, r3
 8009622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009626:	ed97 6a03 	vldr	s12, [r7, #12]
 800962a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800962e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009636:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800963a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800963e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009642:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009646:	e043      	b.n	80096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	ee07 3a90 	vmov	s15, r3
 800964e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009652:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009790 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800965a:	4b48      	ldr	r3, [pc, #288]	@ (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800965c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800965e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009662:	ee07 3a90 	vmov	s15, r3
 8009666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800966a:	ed97 6a03 	vldr	s12, [r7, #12]
 800966e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800967a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800967e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009686:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800968a:	e021      	b.n	80096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	ee07 3a90 	vmov	s15, r3
 8009692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009696:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800978c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800969a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800969e:	4b37      	ldr	r3, [pc, #220]	@ (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a6:	ee07 3a90 	vmov	s15, r3
 80096aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80096b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80096d0:	4b2a      	ldr	r3, [pc, #168]	@ (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096d4:	0a5b      	lsrs	r3, r3, #9
 80096d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096da:	ee07 3a90 	vmov	s15, r3
 80096de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80096e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80096ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096f6:	ee17 2a90 	vmov	r2, s15
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80096fe:	4b1f      	ldr	r3, [pc, #124]	@ (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009702:	0c1b      	lsrs	r3, r3, #16
 8009704:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009708:	ee07 3a90 	vmov	s15, r3
 800970c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009710:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009714:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009718:	edd7 6a07 	vldr	s13, [r7, #28]
 800971c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009724:	ee17 2a90 	vmov	r2, s15
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800972c:	4b13      	ldr	r3, [pc, #76]	@ (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800972e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009730:	0e1b      	lsrs	r3, r3, #24
 8009732:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009736:	ee07 3a90 	vmov	s15, r3
 800973a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800973e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009742:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009746:	edd7 6a07 	vldr	s13, [r7, #28]
 800974a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800974e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009752:	ee17 2a90 	vmov	r2, s15
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800975a:	e008      	b.n	800976e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	609a      	str	r2, [r3, #8]
}
 800976e:	bf00      	nop
 8009770:	3724      	adds	r7, #36	@ 0x24
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	58024400 	.word	0x58024400
 8009780:	03d09000 	.word	0x03d09000
 8009784:	46000000 	.word	0x46000000
 8009788:	4c742400 	.word	0x4c742400
 800978c:	4a742400 	.word	0x4a742400
 8009790:	4bbebc20 	.word	0x4bbebc20

08009794 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009794:	b480      	push	{r7}
 8009796:	b089      	sub	sp, #36	@ 0x24
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800979c:	4ba0      	ldr	r3, [pc, #640]	@ (8009a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800979e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097a0:	f003 0303 	and.w	r3, r3, #3
 80097a4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80097a6:	4b9e      	ldr	r3, [pc, #632]	@ (8009a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097aa:	091b      	lsrs	r3, r3, #4
 80097ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80097b0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80097b2:	4b9b      	ldr	r3, [pc, #620]	@ (8009a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b6:	f003 0301 	and.w	r3, r3, #1
 80097ba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80097bc:	4b98      	ldr	r3, [pc, #608]	@ (8009a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097c0:	08db      	lsrs	r3, r3, #3
 80097c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097c6:	693a      	ldr	r2, [r7, #16]
 80097c8:	fb02 f303 	mul.w	r3, r2, r3
 80097cc:	ee07 3a90 	vmov	s15, r3
 80097d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f000 8111 	beq.w	8009a02 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	f000 8083 	beq.w	80098ee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	f200 80a1 	bhi.w	8009932 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d003      	beq.n	80097fe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d056      	beq.n	80098aa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80097fc:	e099      	b.n	8009932 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097fe:	4b88      	ldr	r3, [pc, #544]	@ (8009a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f003 0320 	and.w	r3, r3, #32
 8009806:	2b00      	cmp	r3, #0
 8009808:	d02d      	beq.n	8009866 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800980a:	4b85      	ldr	r3, [pc, #532]	@ (8009a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	08db      	lsrs	r3, r3, #3
 8009810:	f003 0303 	and.w	r3, r3, #3
 8009814:	4a83      	ldr	r2, [pc, #524]	@ (8009a24 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009816:	fa22 f303 	lsr.w	r3, r2, r3
 800981a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	ee07 3a90 	vmov	s15, r3
 8009822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	ee07 3a90 	vmov	s15, r3
 800982c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009830:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009834:	4b7a      	ldr	r3, [pc, #488]	@ (8009a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800983c:	ee07 3a90 	vmov	s15, r3
 8009840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009844:	ed97 6a03 	vldr	s12, [r7, #12]
 8009848:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009a28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800984c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009850:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009854:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009858:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800985c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009860:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009864:	e087      	b.n	8009976 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	ee07 3a90 	vmov	s15, r3
 800986c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009870:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009a2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009874:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009878:	4b69      	ldr	r3, [pc, #420]	@ (8009a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800987a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800987c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009880:	ee07 3a90 	vmov	s15, r3
 8009884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009888:	ed97 6a03 	vldr	s12, [r7, #12]
 800988c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009a28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009890:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009894:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009898:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800989c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098a8:	e065      	b.n	8009976 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	ee07 3a90 	vmov	s15, r3
 80098b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098b4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009a30 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80098b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098bc:	4b58      	ldr	r3, [pc, #352]	@ (8009a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098c4:	ee07 3a90 	vmov	s15, r3
 80098c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80098d0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009a28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098ec:	e043      	b.n	8009976 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	ee07 3a90 	vmov	s15, r3
 80098f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098f8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009a34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80098fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009900:	4b47      	ldr	r3, [pc, #284]	@ (8009a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009908:	ee07 3a90 	vmov	s15, r3
 800990c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009910:	ed97 6a03 	vldr	s12, [r7, #12]
 8009914:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009a28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009918:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800991c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009920:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009924:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800992c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009930:	e021      	b.n	8009976 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	ee07 3a90 	vmov	s15, r3
 8009938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800993c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009a2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009940:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009944:	4b36      	ldr	r3, [pc, #216]	@ (8009a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800994c:	ee07 3a90 	vmov	s15, r3
 8009950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009954:	ed97 6a03 	vldr	s12, [r7, #12]
 8009958:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009a28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800995c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009960:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009964:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009968:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800996c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009970:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009974:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009976:	4b2a      	ldr	r3, [pc, #168]	@ (8009a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800997a:	0a5b      	lsrs	r3, r3, #9
 800997c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009980:	ee07 3a90 	vmov	s15, r3
 8009984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009988:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800998c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009990:	edd7 6a07 	vldr	s13, [r7, #28]
 8009994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800999c:	ee17 2a90 	vmov	r2, s15
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80099a4:	4b1e      	ldr	r3, [pc, #120]	@ (8009a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099a8:	0c1b      	lsrs	r3, r3, #16
 80099aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099ae:	ee07 3a90 	vmov	s15, r3
 80099b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099be:	edd7 6a07 	vldr	s13, [r7, #28]
 80099c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099ca:	ee17 2a90 	vmov	r2, s15
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80099d2:	4b13      	ldr	r3, [pc, #76]	@ (8009a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099d6:	0e1b      	lsrs	r3, r3, #24
 80099d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099dc:	ee07 3a90 	vmov	s15, r3
 80099e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80099f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099f8:	ee17 2a90 	vmov	r2, s15
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009a00:	e008      	b.n	8009a14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	609a      	str	r2, [r3, #8]
}
 8009a14:	bf00      	nop
 8009a16:	3724      	adds	r7, #36	@ 0x24
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr
 8009a20:	58024400 	.word	0x58024400
 8009a24:	03d09000 	.word	0x03d09000
 8009a28:	46000000 	.word	0x46000000
 8009a2c:	4c742400 	.word	0x4c742400
 8009a30:	4a742400 	.word	0x4a742400
 8009a34:	4bbebc20 	.word	0x4bbebc20

08009a38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a46:	4b53      	ldr	r3, [pc, #332]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a4a:	f003 0303 	and.w	r3, r3, #3
 8009a4e:	2b03      	cmp	r3, #3
 8009a50:	d101      	bne.n	8009a56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	e099      	b.n	8009b8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009a56:	4b4f      	ldr	r3, [pc, #316]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a4e      	ldr	r2, [pc, #312]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009a5c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009a60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a62:	f7f7 fe0d 	bl	8001680 <HAL_GetTick>
 8009a66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a68:	e008      	b.n	8009a7c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a6a:	f7f7 fe09 	bl	8001680 <HAL_GetTick>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	1ad3      	subs	r3, r2, r3
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	d901      	bls.n	8009a7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a78:	2303      	movs	r3, #3
 8009a7a:	e086      	b.n	8009b8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a7c:	4b45      	ldr	r3, [pc, #276]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1f0      	bne.n	8009a6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009a88:	4b42      	ldr	r3, [pc, #264]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a8c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	031b      	lsls	r3, r3, #12
 8009a96:	493f      	ldr	r1, [pc, #252]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	628b      	str	r3, [r1, #40]	@ 0x28
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	025b      	lsls	r3, r3, #9
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	431a      	orrs	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	041b      	lsls	r3, r3, #16
 8009aba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009abe:	431a      	orrs	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	3b01      	subs	r3, #1
 8009ac6:	061b      	lsls	r3, r3, #24
 8009ac8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009acc:	4931      	ldr	r1, [pc, #196]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009ad2:	4b30      	ldr	r3, [pc, #192]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ad6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	695b      	ldr	r3, [r3, #20]
 8009ade:	492d      	ldr	r1, [pc, #180]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ae8:	f023 0220 	bic.w	r2, r3, #32
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	699b      	ldr	r3, [r3, #24]
 8009af0:	4928      	ldr	r1, [pc, #160]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009af2:	4313      	orrs	r3, r2
 8009af4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009af6:	4b27      	ldr	r3, [pc, #156]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009afa:	4a26      	ldr	r2, [pc, #152]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009afc:	f023 0310 	bic.w	r3, r3, #16
 8009b00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009b02:	4b24      	ldr	r3, [pc, #144]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009b04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b06:	4b24      	ldr	r3, [pc, #144]	@ (8009b98 <RCCEx_PLL2_Config+0x160>)
 8009b08:	4013      	ands	r3, r2
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	69d2      	ldr	r2, [r2, #28]
 8009b0e:	00d2      	lsls	r2, r2, #3
 8009b10:	4920      	ldr	r1, [pc, #128]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009b12:	4313      	orrs	r3, r2
 8009b14:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009b16:	4b1f      	ldr	r3, [pc, #124]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b1a:	4a1e      	ldr	r2, [pc, #120]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009b1c:	f043 0310 	orr.w	r3, r3, #16
 8009b20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d106      	bne.n	8009b36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009b28:	4b1a      	ldr	r3, [pc, #104]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b2c:	4a19      	ldr	r2, [pc, #100]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009b2e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b34:	e00f      	b.n	8009b56 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d106      	bne.n	8009b4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009b3c:	4b15      	ldr	r3, [pc, #84]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b40:	4a14      	ldr	r2, [pc, #80]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009b42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b48:	e005      	b.n	8009b56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009b4a:	4b12      	ldr	r3, [pc, #72]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b4e:	4a11      	ldr	r2, [pc, #68]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009b50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009b54:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009b56:	4b0f      	ldr	r3, [pc, #60]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a0e      	ldr	r2, [pc, #56]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009b5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009b60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b62:	f7f7 fd8d 	bl	8001680 <HAL_GetTick>
 8009b66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b68:	e008      	b.n	8009b7c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009b6a:	f7f7 fd89 	bl	8001680 <HAL_GetTick>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	1ad3      	subs	r3, r2, r3
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d901      	bls.n	8009b7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	e006      	b.n	8009b8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b7c:	4b05      	ldr	r3, [pc, #20]	@ (8009b94 <RCCEx_PLL2_Config+0x15c>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d0f0      	beq.n	8009b6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	58024400 	.word	0x58024400
 8009b98:	ffff0007 	.word	0xffff0007

08009b9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009baa:	4b53      	ldr	r3, [pc, #332]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bae:	f003 0303 	and.w	r3, r3, #3
 8009bb2:	2b03      	cmp	r3, #3
 8009bb4:	d101      	bne.n	8009bba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e099      	b.n	8009cee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009bba:	4b4f      	ldr	r3, [pc, #316]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a4e      	ldr	r2, [pc, #312]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009bc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009bc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bc6:	f7f7 fd5b 	bl	8001680 <HAL_GetTick>
 8009bca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bcc:	e008      	b.n	8009be0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009bce:	f7f7 fd57 	bl	8001680 <HAL_GetTick>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	1ad3      	subs	r3, r2, r3
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	d901      	bls.n	8009be0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	e086      	b.n	8009cee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009be0:	4b45      	ldr	r3, [pc, #276]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d1f0      	bne.n	8009bce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009bec:	4b42      	ldr	r3, [pc, #264]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bf0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	051b      	lsls	r3, r3, #20
 8009bfa:	493f      	ldr	r1, [pc, #252]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	628b      	str	r3, [r1, #40]	@ 0x28
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	3b01      	subs	r3, #1
 8009c06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	025b      	lsls	r3, r3, #9
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	431a      	orrs	r2, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	3b01      	subs	r3, #1
 8009c1c:	041b      	lsls	r3, r3, #16
 8009c1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009c22:	431a      	orrs	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	061b      	lsls	r3, r3, #24
 8009c2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009c30:	4931      	ldr	r1, [pc, #196]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009c32:	4313      	orrs	r3, r2
 8009c34:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009c36:	4b30      	ldr	r3, [pc, #192]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	695b      	ldr	r3, [r3, #20]
 8009c42:	492d      	ldr	r1, [pc, #180]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009c44:	4313      	orrs	r3, r2
 8009c46:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009c48:	4b2b      	ldr	r3, [pc, #172]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c4c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	699b      	ldr	r3, [r3, #24]
 8009c54:	4928      	ldr	r1, [pc, #160]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009c56:	4313      	orrs	r3, r2
 8009c58:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009c5a:	4b27      	ldr	r3, [pc, #156]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c5e:	4a26      	ldr	r2, [pc, #152]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009c60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009c66:	4b24      	ldr	r3, [pc, #144]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009c68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c6a:	4b24      	ldr	r3, [pc, #144]	@ (8009cfc <RCCEx_PLL3_Config+0x160>)
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	69d2      	ldr	r2, [r2, #28]
 8009c72:	00d2      	lsls	r2, r2, #3
 8009c74:	4920      	ldr	r1, [pc, #128]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009c76:	4313      	orrs	r3, r2
 8009c78:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009c80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d106      	bne.n	8009c9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c90:	4a19      	ldr	r2, [pc, #100]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009c92:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009c96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009c98:	e00f      	b.n	8009cba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d106      	bne.n	8009cae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009ca0:	4b15      	ldr	r3, [pc, #84]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ca4:	4a14      	ldr	r2, [pc, #80]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009ca6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009caa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009cac:	e005      	b.n	8009cba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009cae:	4b12      	ldr	r3, [pc, #72]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb2:	4a11      	ldr	r2, [pc, #68]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009cb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009cba:	4b0f      	ldr	r3, [pc, #60]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cc6:	f7f7 fcdb 	bl	8001680 <HAL_GetTick>
 8009cca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ccc:	e008      	b.n	8009ce0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009cce:	f7f7 fcd7 	bl	8001680 <HAL_GetTick>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	1ad3      	subs	r3, r2, r3
 8009cd8:	2b02      	cmp	r3, #2
 8009cda:	d901      	bls.n	8009ce0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009cdc:	2303      	movs	r3, #3
 8009cde:	e006      	b.n	8009cee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ce0:	4b05      	ldr	r3, [pc, #20]	@ (8009cf8 <RCCEx_PLL3_Config+0x15c>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d0f0      	beq.n	8009cce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	58024400 	.word	0x58024400
 8009cfc:	ffff0007 	.word	0xffff0007

08009d00 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d101      	bne.n	8009d12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e10f      	b.n	8009f32 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a87      	ldr	r2, [pc, #540]	@ (8009f3c <HAL_SPI_Init+0x23c>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d00f      	beq.n	8009d42 <HAL_SPI_Init+0x42>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a86      	ldr	r2, [pc, #536]	@ (8009f40 <HAL_SPI_Init+0x240>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d00a      	beq.n	8009d42 <HAL_SPI_Init+0x42>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a84      	ldr	r2, [pc, #528]	@ (8009f44 <HAL_SPI_Init+0x244>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d005      	beq.n	8009d42 <HAL_SPI_Init+0x42>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	2b0f      	cmp	r3, #15
 8009d3c:	d901      	bls.n	8009d42 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e0f7      	b.n	8009f32 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 fe98 	bl	800aa78 <SPI_GetPacketSize>
 8009d48:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a7b      	ldr	r2, [pc, #492]	@ (8009f3c <HAL_SPI_Init+0x23c>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d00c      	beq.n	8009d6e <HAL_SPI_Init+0x6e>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a79      	ldr	r2, [pc, #484]	@ (8009f40 <HAL_SPI_Init+0x240>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d007      	beq.n	8009d6e <HAL_SPI_Init+0x6e>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a78      	ldr	r2, [pc, #480]	@ (8009f44 <HAL_SPI_Init+0x244>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d002      	beq.n	8009d6e <HAL_SPI_Init+0x6e>
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2b08      	cmp	r3, #8
 8009d6c:	d811      	bhi.n	8009d92 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009d72:	4a72      	ldr	r2, [pc, #456]	@ (8009f3c <HAL_SPI_Init+0x23c>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d009      	beq.n	8009d8c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a70      	ldr	r2, [pc, #448]	@ (8009f40 <HAL_SPI_Init+0x240>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d004      	beq.n	8009d8c <HAL_SPI_Init+0x8c>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a6f      	ldr	r2, [pc, #444]	@ (8009f44 <HAL_SPI_Init+0x244>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d104      	bne.n	8009d96 <HAL_SPI_Init+0x96>
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2b10      	cmp	r3, #16
 8009d90:	d901      	bls.n	8009d96 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	e0cd      	b.n	8009f32 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d106      	bne.n	8009db0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7f7 f938 	bl	8001020 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2202      	movs	r2, #2
 8009db4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f022 0201 	bic.w	r2, r2, #1
 8009dc6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009dd2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	699b      	ldr	r3, [r3, #24]
 8009dd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009ddc:	d119      	bne.n	8009e12 <HAL_SPI_Init+0x112>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009de6:	d103      	bne.n	8009df0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d008      	beq.n	8009e02 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d10c      	bne.n	8009e12 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009dfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e00:	d107      	bne.n	8009e12 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009e10:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00f      	beq.n	8009e3e <HAL_SPI_Init+0x13e>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	2b06      	cmp	r3, #6
 8009e24:	d90b      	bls.n	8009e3e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	430a      	orrs	r2, r1
 8009e3a:	601a      	str	r2, [r3, #0]
 8009e3c:	e007      	b.n	8009e4e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009e4c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	69da      	ldr	r2, [r3, #28]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e56:	431a      	orrs	r2, r3
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	431a      	orrs	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e60:	ea42 0103 	orr.w	r1, r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	68da      	ldr	r2, [r3, #12]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	430a      	orrs	r2, r1
 8009e6e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e78:	431a      	orrs	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e7e:	431a      	orrs	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	699b      	ldr	r3, [r3, #24]
 8009e84:	431a      	orrs	r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	691b      	ldr	r3, [r3, #16]
 8009e8a:	431a      	orrs	r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	695b      	ldr	r3, [r3, #20]
 8009e90:	431a      	orrs	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6a1b      	ldr	r3, [r3, #32]
 8009e96:	431a      	orrs	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	431a      	orrs	r2, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ea2:	431a      	orrs	r2, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	431a      	orrs	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009eae:	ea42 0103 	orr.w	r1, r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	430a      	orrs	r2, r1
 8009ebc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d113      	bne.n	8009eee <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ed8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009eec:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f022 0201 	bic.w	r2, r2, #1
 8009efc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00a      	beq.n	8009f20 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	430a      	orrs	r2, r1
 8009f1e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	40013000 	.word	0x40013000
 8009f40:	40003800 	.word	0x40003800
 8009f44:	40003c00 	.word	0x40003c00

08009f48 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	4613      	mov	r3, r2
 8009f54:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d001      	beq.n	8009f66 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8009f62:	2302      	movs	r3, #2
 8009f64:	e126      	b.n	800a1b4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <HAL_SPI_Transmit_DMA+0x2a>
 8009f6c:	88fb      	ldrh	r3, [r7, #6]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d101      	bne.n	8009f76 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e11e      	b.n	800a1b4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d101      	bne.n	8009f84 <HAL_SPI_Transmit_DMA+0x3c>
 8009f80:	2302      	movs	r3, #2
 8009f82:	e117      	b.n	800a1b4 <HAL_SPI_Transmit_DMA+0x26c>
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2203      	movs	r2, #3
 8009f90:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	88fa      	ldrh	r2, [r7, #6]
 8009fa6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	88fa      	ldrh	r2, [r7, #6]
 8009fae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009fdc:	d108      	bne.n	8009ff0 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009fec:	601a      	str	r2, [r3, #0]
 8009fee:	e009      	b.n	800a004 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a002:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	2b0f      	cmp	r3, #15
 800a00a:	d905      	bls.n	800a018 <HAL_SPI_Transmit_DMA+0xd0>
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a010:	699b      	ldr	r3, [r3, #24]
 800a012:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a016:	d10f      	bne.n	800a038 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a01c:	2b07      	cmp	r3, #7
 800a01e:	d911      	bls.n	800a044 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a024:	699b      	ldr	r3, [r3, #24]
 800a026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a02a:	d00b      	beq.n	800a044 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a030:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a032:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a036:	d005      	beq.n	800a044 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	e0b7      	b.n	800a1b4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	2b07      	cmp	r3, #7
 800a04a:	d820      	bhi.n	800a08e <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a050:	699b      	ldr	r3, [r3, #24]
 800a052:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a056:	d109      	bne.n	800a06c <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a05e:	b29b      	uxth	r3, r3
 800a060:	3301      	adds	r3, #1
 800a062:	105b      	asrs	r3, r3, #1
 800a064:	b29a      	uxth	r2, r3
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a070:	699b      	ldr	r3, [r3, #24]
 800a072:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a076:	d11e      	bne.n	800a0b6 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a07e:	b29b      	uxth	r3, r3
 800a080:	3303      	adds	r3, #3
 800a082:	109b      	asrs	r3, r3, #2
 800a084:	b29a      	uxth	r2, r3
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a08c:	e013      	b.n	800a0b6 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	2b0f      	cmp	r3, #15
 800a094:	d80f      	bhi.n	800a0b6 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a09a:	699b      	ldr	r3, [r3, #24]
 800a09c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0a0:	d109      	bne.n	800a0b6 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	105b      	asrs	r3, r3, #1
 800a0ae:	b29a      	uxth	r2, r3
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0ba:	4a40      	ldr	r2, [pc, #256]	@ (800a1bc <HAL_SPI_Transmit_DMA+0x274>)
 800a0bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0c2:	4a3f      	ldr	r2, [pc, #252]	@ (800a1c0 <HAL_SPI_Transmit_DMA+0x278>)
 800a0c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0ca:	4a3e      	ldr	r2, [pc, #248]	@ (800a1c4 <HAL_SPI_Transmit_DMA+0x27c>)
 800a0cc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	689a      	ldr	r2, [r3, #8]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a0e4:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	3320      	adds	r3, #32
 800a0f6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a0fe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a100:	f7f9 fde0 	bl	8003cc4 <HAL_DMA_Start_IT>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d011      	beq.n	800a12e <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a110:	f043 0210 	orr.w	r2, r3, #16
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2201      	movs	r2, #1
 800a11e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e042      	b.n	800a1b4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a132:	69db      	ldr	r3, [r3, #28]
 800a134:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a138:	d108      	bne.n	800a14c <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	6859      	ldr	r1, [r3, #4]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	4b20      	ldr	r3, [pc, #128]	@ (800a1c8 <HAL_SPI_Transmit_DMA+0x280>)
 800a146:	400b      	ands	r3, r1
 800a148:	6053      	str	r3, [r2, #4]
 800a14a:	e009      	b.n	800a160 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	685a      	ldr	r2, [r3, #4]
 800a152:	4b1d      	ldr	r3, [pc, #116]	@ (800a1c8 <HAL_SPI_Transmit_DMA+0x280>)
 800a154:	4013      	ands	r3, r2
 800a156:	88f9      	ldrh	r1, [r7, #6]
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	6812      	ldr	r2, [r2, #0]
 800a15c:	430b      	orrs	r3, r1
 800a15e:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	689a      	ldr	r2, [r3, #8]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a16e:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	691a      	ldr	r2, [r3, #16]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 800a17e:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f042 0201 	orr.w	r2, r2, #1
 800a18e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a198:	d107      	bne.n	800a1aa <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a1a8:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3710      	adds	r7, #16
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	0800a7db 	.word	0x0800a7db
 800a1c0:	0800a795 	.word	0x0800a795
 800a1c4:	0800a7f7 	.word	0x0800a7f7
 800a1c8:	ffff0000 	.word	0xffff0000

0800a1cc <HAL_SPI_Abort>:
  *          + Set handle State to READY.
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;

  __IO uint32_t count;

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d101      	bne.n	800a1e2 <HAL_SPI_Abort+0x16>
 800a1de:	2302      	movs	r3, #2
 800a1e0:	e0d9      	b.n	800a396 <HAL_SPI_Abort+0x1ca>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set hspi->state to aborting to avoid any interaction */
  hspi->State = HAL_SPI_STATE_ABORT;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2207      	movs	r2, #7
 800a1ee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Initialized local variable  */
  errorcode = HAL_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	73fb      	strb	r3, [r7, #15]
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800a1f6:	4b6a      	ldr	r3, [pc, #424]	@ (800a3a0 <HAL_SPI_Abort+0x1d4>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a6a      	ldr	r2, [pc, #424]	@ (800a3a4 <HAL_SPI_Abort+0x1d8>)
 800a1fc:	fba2 2303 	umull	r2, r3, r2, r3
 800a200:	0a5b      	lsrs	r3, r3, #9
 800a202:	2264      	movs	r2, #100	@ 0x64
 800a204:	fb02 f303 	mul.w	r3, r2, r3
 800a208:	60bb      	str	r3, [r7, #8]

  /* If master communication on going, make sure current frame is done before closing the connection */
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a218:	d15b      	bne.n	800a2d2 <HAL_SPI_Abort+0x106>
  {
    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	691a      	ldr	r2, [r3, #16]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f022 0208 	bic.w	r2, r2, #8
 800a228:	611a      	str	r2, [r3, #16]
    do
    {
      count--;
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	3b01      	subs	r3, #1
 800a22e:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d108      	bne.n	800a248 <HAL_SPI_Abort+0x7c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a23c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800a246:	e006      	b.n	800a256 <HAL_SPI_Abort+0x8a>
      }
    } while (HAL_IS_BIT_SET(hspi->Instance->IER, SPI_IT_EOT));
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	f003 0308 	and.w	r3, r3, #8
 800a252:	2b08      	cmp	r3, #8
 800a254:	d0e9      	beq.n	800a22a <HAL_SPI_Abort+0x5e>

    /* Request a Suspend transfer */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a264:	601a      	str	r2, [r3, #0]
    do
    {
      count--;
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	3b01      	subs	r3, #1
 800a26a:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d108      	bne.n	800a284 <HAL_SPI_Abort+0xb8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a278:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800a282:	e007      	b.n	800a294 <HAL_SPI_Abort+0xc8>
      }
    } while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a28e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a292:	d0e8      	beq.n	800a266 <HAL_SPI_Abort+0x9a>

    /* Clear SUSP flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	699a      	ldr	r2, [r3, #24]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a2a2:	619a      	str	r2, [r3, #24]
    do
    {
      count--;
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	3b01      	subs	r3, #1
 800a2a8:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d108      	bne.n	800a2c2 <HAL_SPI_Abort+0xf6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800a2c0:	e007      	b.n	800a2d2 <HAL_SPI_Abort+0x106>
      }
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_SUSP));
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	695b      	ldr	r3, [r3, #20]
 800a2c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a2cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a2d0:	d0e8      	beq.n	800a2a4 <HAL_SPI_Abort+0xd8>
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a2dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2e0:	d11b      	bne.n	800a31a <HAL_SPI_Abort+0x14e>
  {
    if (hspi->hdmatx != NULL)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d017      	beq.n	800a31a <HAL_SPI_Abort+0x14e>
    {
      /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
      hspi->hdmatx->XferAbortCallback = NULL;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7f9 ff4e 	bl	8004198 <HAL_DMA_Abort>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00b      	beq.n	800a31a <HAL_SPI_Abort+0x14e>
      {
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a306:	4618      	mov	r0, r3
 800a308:	f7fb fbd4 	bl	8005ab4 <HAL_DMA_GetError>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b20      	cmp	r3, #32
 800a310:	d103      	bne.n	800a31a <HAL_SPI_Abort+0x14e>
        {
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2240      	movs	r2, #64	@ 0x40
 800a316:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a324:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a328:	d11b      	bne.n	800a362 <HAL_SPI_Abort+0x196>
  {
    if (hspi->hdmarx != NULL)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d017      	beq.n	800a362 <HAL_SPI_Abort+0x196>
    {
      /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
      hspi->hdmarx->XferAbortCallback = NULL;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a336:	2200      	movs	r2, #0
 800a338:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a33e:	4618      	mov	r0, r3
 800a340:	f7f9 ff2a 	bl	8004198 <HAL_DMA_Abort>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00b      	beq.n	800a362 <HAL_SPI_Abort+0x196>
      {
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a34e:	4618      	mov	r0, r3
 800a350:	f7fb fbb0 	bl	8005ab4 <HAL_DMA_GetError>
 800a354:	4603      	mov	r3, r0
 800a356:	2b20      	cmp	r3, #32
 800a358:	d103      	bne.n	800a362 <HAL_SPI_Abort+0x196>
        {
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2240      	movs	r2, #64	@ 0x40
 800a35e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Proceed with abort procedure */
  SPI_AbortTransfer(hspi);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 fa84 	bl	800a870 <SPI_AbortTransfer>

  /* Check error during Abort procedure */
  if (HAL_IS_BIT_SET(hspi->ErrorCode, HAL_SPI_ERROR_ABORT))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a36e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a372:	2b40      	cmp	r3, #64	@ 0x40
 800a374:	d102      	bne.n	800a37c <HAL_SPI_Abort+0x1b0>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	73fb      	strb	r3, [r7, #15]
 800a37a:	e003      	b.n	800a384 <HAL_SPI_Abort+0x1b8>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return errorcode;
 800a394:	7bfb      	ldrb	r3, [r7, #15]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	24000000 	.word	0x24000000
 800a3a4:	057619f1 	.word	0x057619f1

0800a3a8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b08a      	sub	sp, #40	@ 0x28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a3c0:	6a3a      	ldr	r2, [r7, #32]
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	4013      	ands	r3, r2
 800a3c6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a3da:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	3330      	adds	r3, #48	@ 0x30
 800a3e2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a3e4:	69fb      	ldr	r3, [r7, #28]
 800a3e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d010      	beq.n	800a410 <HAL_SPI_IRQHandler+0x68>
 800a3ee:	6a3b      	ldr	r3, [r7, #32]
 800a3f0:	f003 0308 	and.w	r3, r3, #8
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d00b      	beq.n	800a410 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	699a      	ldr	r2, [r3, #24]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a406:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 f9b9 	bl	800a780 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800a40e:	e192      	b.n	800a736 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a416:	2b00      	cmp	r3, #0
 800a418:	d113      	bne.n	800a442 <HAL_SPI_IRQHandler+0x9a>
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	f003 0320 	and.w	r3, r3, #32
 800a420:	2b00      	cmp	r3, #0
 800a422:	d10e      	bne.n	800a442 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d009      	beq.n	800a442 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	4798      	blx	r3
    handled = 1UL;
 800a43e:	2301      	movs	r3, #1
 800a440:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d10f      	bne.n	800a46c <HAL_SPI_IRQHandler+0xc4>
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	f003 0301 	and.w	r3, r3, #1
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00a      	beq.n	800a46c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d105      	bne.n	800a46c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	4798      	blx	r3
    handled = 1UL;
 800a468:	2301      	movs	r3, #1
 800a46a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a46c:	69bb      	ldr	r3, [r7, #24]
 800a46e:	f003 0320 	and.w	r3, r3, #32
 800a472:	2b00      	cmp	r3, #0
 800a474:	d10f      	bne.n	800a496 <HAL_SPI_IRQHandler+0xee>
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	f003 0302 	and.w	r3, r3, #2
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d00a      	beq.n	800a496 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a486:	2b00      	cmp	r3, #0
 800a488:	d105      	bne.n	800a496 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	4798      	blx	r3
    handled = 1UL;
 800a492:	2301      	movs	r3, #1
 800a494:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f040 8147 	bne.w	800a72c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	f003 0308 	and.w	r3, r3, #8
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f000 808b 	beq.w	800a5c0 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	699a      	ldr	r2, [r3, #24]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f042 0208 	orr.w	r2, r2, #8
 800a4b8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	699a      	ldr	r2, [r3, #24]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f042 0210 	orr.w	r2, r2, #16
 800a4c8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	699a      	ldr	r2, [r3, #24]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a4d8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	691a      	ldr	r2, [r3, #16]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f022 0208 	bic.w	r2, r2, #8
 800a4e8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d13d      	bne.n	800a574 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800a4f8:	e036      	b.n	800a568 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	2b0f      	cmp	r3, #15
 800a500:	d90b      	bls.n	800a51a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a50a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a50c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a512:	1d1a      	adds	r2, r3, #4
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	665a      	str	r2, [r3, #100]	@ 0x64
 800a518:	e01d      	b.n	800a556 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	2b07      	cmp	r3, #7
 800a520:	d90b      	bls.n	800a53a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	8812      	ldrh	r2, [r2, #0]
 800a52a:	b292      	uxth	r2, r2
 800a52c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a532:	1c9a      	adds	r2, r3, #2
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	665a      	str	r2, [r3, #100]	@ 0x64
 800a538:	e00d      	b.n	800a556 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a546:	7812      	ldrb	r2, [r2, #0]
 800a548:	b2d2      	uxtb	r2, r2
 800a54a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a550:	1c5a      	adds	r2, r3, #1
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	3b01      	subs	r3, #1
 800a560:	b29a      	uxth	r2, r3
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a56e:	b29b      	uxth	r3, r3
 800a570:	2b00      	cmp	r3, #0
 800a572:	d1c2      	bne.n	800a4fa <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 f9df 	bl	800a938 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d003      	beq.n	800a594 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f7f6 f8bb 	bl	8000708 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a592:	e0d0      	b.n	800a736 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a594:	7cfb      	ldrb	r3, [r7, #19]
 800a596:	2b05      	cmp	r3, #5
 800a598:	d103      	bne.n	800a5a2 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 f8dc 	bl	800a758 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800a5a0:	e0c6      	b.n	800a730 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a5a2:	7cfb      	ldrb	r3, [r7, #19]
 800a5a4:	2b04      	cmp	r3, #4
 800a5a6:	d103      	bne.n	800a5b0 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 f8cb 	bl	800a744 <HAL_SPI_RxCpltCallback>
    return;
 800a5ae:	e0bf      	b.n	800a730 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a5b0:	7cfb      	ldrb	r3, [r7, #19]
 800a5b2:	2b03      	cmp	r3, #3
 800a5b4:	f040 80bc 	bne.w	800a730 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f7f6 f893 	bl	80006e4 <HAL_SPI_TxCpltCallback>
    return;
 800a5be:	e0b7      	b.n	800a730 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f000 80b5 	beq.w	800a736 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d00f      	beq.n	800a5f6 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5dc:	f043 0204 	orr.w	r2, r3, #4
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	699a      	ldr	r2, [r3, #24]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a5f4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d00f      	beq.n	800a620 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a606:	f043 0201 	orr.w	r2, r3, #1
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	699a      	ldr	r2, [r3, #24]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a61e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00f      	beq.n	800a64a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a630:	f043 0208 	orr.w	r2, r3, #8
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	699a      	ldr	r2, [r3, #24]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a648:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a64a:	69bb      	ldr	r3, [r7, #24]
 800a64c:	f003 0320 	and.w	r3, r3, #32
 800a650:	2b00      	cmp	r3, #0
 800a652:	d00f      	beq.n	800a674 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a65a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	699a      	ldr	r2, [r3, #24]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f042 0220 	orr.w	r2, r2, #32
 800a672:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d05a      	beq.n	800a734 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f022 0201 	bic.w	r2, r2, #1
 800a68c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	6919      	ldr	r1, [r3, #16]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	4b28      	ldr	r3, [pc, #160]	@ (800a73c <HAL_SPI_IRQHandler+0x394>)
 800a69a:	400b      	ands	r3, r1
 800a69c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a6a4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a6a8:	d138      	bne.n	800a71c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	689a      	ldr	r2, [r3, #8]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a6b8:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d013      	beq.n	800a6ea <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a6c6:	4a1e      	ldr	r2, [pc, #120]	@ (800a740 <HAL_SPI_IRQHandler+0x398>)
 800a6c8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fa f880 	bl	80047d4 <HAL_DMA_Abort_IT>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d007      	beq.n	800a6ea <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6e0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d020      	beq.n	800a734 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a6f6:	4a12      	ldr	r2, [pc, #72]	@ (800a740 <HAL_SPI_IRQHandler+0x398>)
 800a6f8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fa f868 	bl	80047d4 <HAL_DMA_Abort_IT>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d014      	beq.n	800a734 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a710:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a71a:	e00b      	b.n	800a734 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2201      	movs	r2, #1
 800a720:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f7f5 ffef 	bl	8000708 <HAL_SPI_ErrorCallback>
    return;
 800a72a:	e003      	b.n	800a734 <HAL_SPI_IRQHandler+0x38c>
    return;
 800a72c:	bf00      	nop
 800a72e:	e002      	b.n	800a736 <HAL_SPI_IRQHandler+0x38e>
    return;
 800a730:	bf00      	nop
 800a732:	e000      	b.n	800a736 <HAL_SPI_IRQHandler+0x38e>
    return;
 800a734:	bf00      	nop
  }
}
 800a736:	3728      	adds	r7, #40	@ 0x28
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	fffffc94 	.word	0xfffffc94
 800a740:	0800a83d 	.word	0x0800a83d

0800a744 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a74c:	bf00      	nop
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a760:	bf00      	nop
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7a0:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	2b07      	cmp	r3, #7
 800a7ac:	d011      	beq.n	800a7d2 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a7b2:	69db      	ldr	r3, [r3, #28]
 800a7b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7b8:	d103      	bne.n	800a7c2 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	f7f5 ff92 	bl	80006e4 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800a7c0:	e007      	b.n	800a7d2 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	691a      	ldr	r2, [r3, #16]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f042 0208 	orr.w	r2, r2, #8
 800a7d0:	611a      	str	r2, [r3, #16]
}
 800a7d2:	bf00      	nop
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b084      	sub	sp, #16
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7e6:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	f7ff ffbf 	bl	800a76c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a7ee:	bf00      	nop
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b084      	sub	sp, #16
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a802:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f7fb f955 	bl	8005ab4 <HAL_DMA_GetError>
 800a80a:	4603      	mov	r3, r0
 800a80c:	2b02      	cmp	r3, #2
 800a80e:	d011      	beq.n	800a834 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	f000 f891 	bl	800a938 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a81c:	f043 0210 	orr.w	r2, r3, #16
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2201      	movs	r2, #1
 800a82a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800a82e:	68f8      	ldr	r0, [r7, #12]
 800a830:	f7f5 ff6a 	bl	8000708 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800a834:	bf00      	nop
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a848:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2200      	movs	r2, #0
 800a856:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f7f5 ff50 	bl	8000708 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a868:	bf00      	nop
 800a86a:	3710      	adds	r7, #16
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <SPI_AbortTransfer>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f022 0201 	bic.w	r2, r2, #1
 800a886:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	6919      	ldr	r1, [r3, #16]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	4b28      	ldr	r3, [pc, #160]	@ (800a934 <SPI_AbortTransfer+0xc4>)
 800a894:	400b      	ands	r3, r1
 800a896:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Clear the Status flags in the SR register */
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	699a      	ldr	r2, [r3, #24]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f042 0208 	orr.w	r2, r2, #8
 800a8a6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	699a      	ldr	r2, [r3, #24]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f042 0210 	orr.w	r2, r2, #16
 800a8b6:	619a      	str	r2, [r3, #24]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	689a      	ldr	r2, [r3, #8]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a8c6:	609a      	str	r2, [r3, #8]

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	699a      	ldr	r2, [r3, #24]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a8d6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	699a      	ldr	r2, [r3, #24]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f042 0220 	orr.w	r2, r2, #32
 800a8e6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	699a      	ldr	r2, [r3, #24]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a8f6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	699a      	ldr	r2, [r3, #24]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a906:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	699a      	ldr	r2, [r3, #24]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a916:	619a      	str	r2, [r3, #24]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800a928:	bf00      	nop
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr
 800a934:	fffffc90 	.word	0xfffffc90

0800a938 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	695b      	ldr	r3, [r3, #20]
 800a946:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	699a      	ldr	r2, [r3, #24]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f042 0208 	orr.w	r2, r2, #8
 800a956:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	699a      	ldr	r2, [r3, #24]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f042 0210 	orr.w	r2, r2, #16
 800a966:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f022 0201 	bic.w	r2, r2, #1
 800a976:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	6919      	ldr	r1, [r3, #16]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	4b3c      	ldr	r3, [pc, #240]	@ (800aa74 <SPI_CloseTransfer+0x13c>)
 800a984:	400b      	ands	r3, r1
 800a986:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	689a      	ldr	r2, [r3, #8]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a996:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	2b04      	cmp	r3, #4
 800a9a2:	d014      	beq.n	800a9ce <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f003 0320 	and.w	r3, r3, #32
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00f      	beq.n	800a9ce <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	699a      	ldr	r2, [r3, #24]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f042 0220 	orr.w	r2, r2, #32
 800a9cc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	2b03      	cmp	r3, #3
 800a9d8:	d014      	beq.n	800aa04 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00f      	beq.n	800aa04 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9ea:	f043 0204 	orr.w	r2, r3, #4
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	699a      	ldr	r2, [r3, #24]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aa02:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00f      	beq.n	800aa2e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa14:	f043 0201 	orr.w	r2, r3, #1
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	699a      	ldr	r2, [r3, #24]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa2c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d00f      	beq.n	800aa58 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa3e:	f043 0208 	orr.w	r2, r3, #8
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	699a      	ldr	r2, [r3, #24]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aa56:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800aa68:	bf00      	nop
 800aa6a:	3714      	adds	r7, #20
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr
 800aa74:	fffffc90 	.word	0xfffffc90

0800aa78 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b085      	sub	sp, #20
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa84:	095b      	lsrs	r3, r3, #5
 800aa86:	3301      	adds	r3, #1
 800aa88:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	3307      	adds	r3, #7
 800aa96:	08db      	lsrs	r3, r3, #3
 800aa98:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	fb02 f303 	mul.w	r3, r2, r3
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3714      	adds	r7, #20
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr

0800aaae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b082      	sub	sp, #8
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d101      	bne.n	800aac0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aabc:	2301      	movs	r3, #1
 800aabe:	e049      	b.n	800ab54 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d106      	bne.n	800aada <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2200      	movs	r2, #0
 800aad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f7f6 fb91 	bl	80011fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2202      	movs	r2, #2
 800aade:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	3304      	adds	r3, #4
 800aaea:	4619      	mov	r1, r3
 800aaec:	4610      	mov	r0, r2
 800aaee:	f000 fa5b 	bl	800afa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2201      	movs	r2, #1
 800ab06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2201      	movs	r2, #1
 800ab16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2201      	movs	r2, #1
 800ab26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2201      	movs	r2, #1
 800ab36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2201      	movs	r2, #1
 800ab46:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ab52:	2300      	movs	r3, #0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b085      	sub	sp, #20
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d001      	beq.n	800ab74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ab70:	2301      	movs	r3, #1
 800ab72:	e05e      	b.n	800ac32 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2202      	movs	r2, #2
 800ab78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	68da      	ldr	r2, [r3, #12]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f042 0201 	orr.w	r2, r2, #1
 800ab8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a2b      	ldr	r2, [pc, #172]	@ (800ac40 <HAL_TIM_Base_Start_IT+0xe4>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d02c      	beq.n	800abf0 <HAL_TIM_Base_Start_IT+0x94>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab9e:	d027      	beq.n	800abf0 <HAL_TIM_Base_Start_IT+0x94>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a27      	ldr	r2, [pc, #156]	@ (800ac44 <HAL_TIM_Base_Start_IT+0xe8>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d022      	beq.n	800abf0 <HAL_TIM_Base_Start_IT+0x94>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a26      	ldr	r2, [pc, #152]	@ (800ac48 <HAL_TIM_Base_Start_IT+0xec>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d01d      	beq.n	800abf0 <HAL_TIM_Base_Start_IT+0x94>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a24      	ldr	r2, [pc, #144]	@ (800ac4c <HAL_TIM_Base_Start_IT+0xf0>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d018      	beq.n	800abf0 <HAL_TIM_Base_Start_IT+0x94>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a23      	ldr	r2, [pc, #140]	@ (800ac50 <HAL_TIM_Base_Start_IT+0xf4>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d013      	beq.n	800abf0 <HAL_TIM_Base_Start_IT+0x94>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a21      	ldr	r2, [pc, #132]	@ (800ac54 <HAL_TIM_Base_Start_IT+0xf8>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d00e      	beq.n	800abf0 <HAL_TIM_Base_Start_IT+0x94>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a20      	ldr	r2, [pc, #128]	@ (800ac58 <HAL_TIM_Base_Start_IT+0xfc>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d009      	beq.n	800abf0 <HAL_TIM_Base_Start_IT+0x94>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a1e      	ldr	r2, [pc, #120]	@ (800ac5c <HAL_TIM_Base_Start_IT+0x100>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d004      	beq.n	800abf0 <HAL_TIM_Base_Start_IT+0x94>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a1d      	ldr	r2, [pc, #116]	@ (800ac60 <HAL_TIM_Base_Start_IT+0x104>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d115      	bne.n	800ac1c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	689a      	ldr	r2, [r3, #8]
 800abf6:	4b1b      	ldr	r3, [pc, #108]	@ (800ac64 <HAL_TIM_Base_Start_IT+0x108>)
 800abf8:	4013      	ands	r3, r2
 800abfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2b06      	cmp	r3, #6
 800ac00:	d015      	beq.n	800ac2e <HAL_TIM_Base_Start_IT+0xd2>
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac08:	d011      	beq.n	800ac2e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f042 0201 	orr.w	r2, r2, #1
 800ac18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac1a:	e008      	b.n	800ac2e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	681a      	ldr	r2, [r3, #0]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f042 0201 	orr.w	r2, r2, #1
 800ac2a:	601a      	str	r2, [r3, #0]
 800ac2c:	e000      	b.n	800ac30 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3714      	adds	r7, #20
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	40010000 	.word	0x40010000
 800ac44:	40000400 	.word	0x40000400
 800ac48:	40000800 	.word	0x40000800
 800ac4c:	40000c00 	.word	0x40000c00
 800ac50:	40010400 	.word	0x40010400
 800ac54:	40001800 	.word	0x40001800
 800ac58:	40014000 	.word	0x40014000
 800ac5c:	4000e000 	.word	0x4000e000
 800ac60:	4000e400 	.word	0x4000e400
 800ac64:	00010007 	.word	0x00010007

0800ac68 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	68da      	ldr	r2, [r3, #12]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f022 0201 	bic.w	r2, r2, #1
 800ac7e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	6a1a      	ldr	r2, [r3, #32]
 800ac86:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ac8a:	4013      	ands	r3, r2
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d10f      	bne.n	800acb0 <HAL_TIM_Base_Stop_IT+0x48>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	6a1a      	ldr	r2, [r3, #32]
 800ac96:	f240 4344 	movw	r3, #1092	@ 0x444
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d107      	bne.n	800acb0 <HAL_TIM_Base_Stop_IT+0x48>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	681a      	ldr	r2, [r3, #0]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f022 0201 	bic.w	r2, r2, #1
 800acae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2201      	movs	r2, #1
 800acb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800acb8:	2300      	movs	r3, #0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	370c      	adds	r7, #12
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr

0800acc6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b084      	sub	sp, #16
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	691b      	ldr	r3, [r3, #16]
 800acdc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	f003 0302 	and.w	r3, r3, #2
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d020      	beq.n	800ad2a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f003 0302 	and.w	r3, r3, #2
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d01b      	beq.n	800ad2a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f06f 0202 	mvn.w	r2, #2
 800acfa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2201      	movs	r2, #1
 800ad00:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	699b      	ldr	r3, [r3, #24]
 800ad08:	f003 0303 	and.w	r3, r3, #3
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d003      	beq.n	800ad18 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 f92b 	bl	800af6c <HAL_TIM_IC_CaptureCallback>
 800ad16:	e005      	b.n	800ad24 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 f91d 	bl	800af58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 f92e 	bl	800af80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	f003 0304 	and.w	r3, r3, #4
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d020      	beq.n	800ad76 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f003 0304 	and.w	r3, r3, #4
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d01b      	beq.n	800ad76 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f06f 0204 	mvn.w	r2, #4
 800ad46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2202      	movs	r2, #2
 800ad4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	699b      	ldr	r3, [r3, #24]
 800ad54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d003      	beq.n	800ad64 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 f905 	bl	800af6c <HAL_TIM_IC_CaptureCallback>
 800ad62:	e005      	b.n	800ad70 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 f8f7 	bl	800af58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 f908 	bl	800af80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	f003 0308 	and.w	r3, r3, #8
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d020      	beq.n	800adc2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f003 0308 	and.w	r3, r3, #8
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d01b      	beq.n	800adc2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f06f 0208 	mvn.w	r2, #8
 800ad92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2204      	movs	r2, #4
 800ad98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	69db      	ldr	r3, [r3, #28]
 800ada0:	f003 0303 	and.w	r3, r3, #3
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d003      	beq.n	800adb0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 f8df 	bl	800af6c <HAL_TIM_IC_CaptureCallback>
 800adae:	e005      	b.n	800adbc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 f8d1 	bl	800af58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 f8e2 	bl	800af80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	f003 0310 	and.w	r3, r3, #16
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d020      	beq.n	800ae0e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f003 0310 	and.w	r3, r3, #16
 800add2:	2b00      	cmp	r3, #0
 800add4:	d01b      	beq.n	800ae0e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f06f 0210 	mvn.w	r2, #16
 800adde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2208      	movs	r2, #8
 800ade4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	69db      	ldr	r3, [r3, #28]
 800adec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d003      	beq.n	800adfc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 f8b9 	bl	800af6c <HAL_TIM_IC_CaptureCallback>
 800adfa:	e005      	b.n	800ae08 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 f8ab 	bl	800af58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 f8bc 	bl	800af80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	f003 0301 	and.w	r3, r3, #1
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00c      	beq.n	800ae32 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f003 0301 	and.w	r3, r3, #1
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d007      	beq.n	800ae32 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f06f 0201 	mvn.w	r2, #1
 800ae2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7f5 fa6d 	bl	800030c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d104      	bne.n	800ae46 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d00c      	beq.n	800ae60 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d007      	beq.n	800ae60 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ae58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 fb66 	bl	800b52c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00c      	beq.n	800ae84 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d007      	beq.n	800ae84 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ae7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 fb5e 	bl	800b540 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00c      	beq.n	800aea8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d007      	beq.n	800aea8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800aea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 f876 	bl	800af94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	f003 0320 	and.w	r3, r3, #32
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d00c      	beq.n	800aecc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f003 0320 	and.w	r3, r3, #32
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d007      	beq.n	800aecc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f06f 0220 	mvn.w	r2, #32
 800aec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 fb26 	bl	800b518 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aecc:	bf00      	nop
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d101      	bne.n	800aeec <HAL_TIM_SlaveConfigSynchro+0x18>
 800aee8:	2302      	movs	r3, #2
 800aeea:	e031      	b.n	800af50 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2201      	movs	r2, #1
 800aef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2202      	movs	r2, #2
 800aef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800aefc:	6839      	ldr	r1, [r7, #0]
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 f904 	bl	800b10c <TIM_SlaveTimer_SetConfig>
 800af04:	4603      	mov	r3, r0
 800af06:	2b00      	cmp	r3, #0
 800af08:	d009      	beq.n	800af1e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2201      	movs	r2, #1
 800af0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800af1a:	2301      	movs	r3, #1
 800af1c:	e018      	b.n	800af50 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	68da      	ldr	r2, [r3, #12]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800af2c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	68da      	ldr	r2, [r3, #12]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800af3c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2201      	movs	r2, #1
 800af42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af4e:	2300      	movs	r3, #0
}
 800af50:	4618      	mov	r0, r3
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800af60:	bf00      	nop
 800af62:	370c      	adds	r7, #12
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800af74:	bf00      	nop
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af88:	bf00      	nop
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af9c:	bf00      	nop
 800af9e:	370c      	adds	r7, #12
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr

0800afa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b085      	sub	sp, #20
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4a4a      	ldr	r2, [pc, #296]	@ (800b0e4 <TIM_Base_SetConfig+0x13c>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d013      	beq.n	800afe8 <TIM_Base_SetConfig+0x40>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afc6:	d00f      	beq.n	800afe8 <TIM_Base_SetConfig+0x40>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	4a47      	ldr	r2, [pc, #284]	@ (800b0e8 <TIM_Base_SetConfig+0x140>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d00b      	beq.n	800afe8 <TIM_Base_SetConfig+0x40>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	4a46      	ldr	r2, [pc, #280]	@ (800b0ec <TIM_Base_SetConfig+0x144>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d007      	beq.n	800afe8 <TIM_Base_SetConfig+0x40>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	4a45      	ldr	r2, [pc, #276]	@ (800b0f0 <TIM_Base_SetConfig+0x148>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d003      	beq.n	800afe8 <TIM_Base_SetConfig+0x40>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	4a44      	ldr	r2, [pc, #272]	@ (800b0f4 <TIM_Base_SetConfig+0x14c>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d108      	bne.n	800affa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	4313      	orrs	r3, r2
 800aff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4a39      	ldr	r2, [pc, #228]	@ (800b0e4 <TIM_Base_SetConfig+0x13c>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d027      	beq.n	800b052 <TIM_Base_SetConfig+0xaa>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b008:	d023      	beq.n	800b052 <TIM_Base_SetConfig+0xaa>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	4a36      	ldr	r2, [pc, #216]	@ (800b0e8 <TIM_Base_SetConfig+0x140>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d01f      	beq.n	800b052 <TIM_Base_SetConfig+0xaa>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	4a35      	ldr	r2, [pc, #212]	@ (800b0ec <TIM_Base_SetConfig+0x144>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d01b      	beq.n	800b052 <TIM_Base_SetConfig+0xaa>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	4a34      	ldr	r2, [pc, #208]	@ (800b0f0 <TIM_Base_SetConfig+0x148>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d017      	beq.n	800b052 <TIM_Base_SetConfig+0xaa>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	4a33      	ldr	r2, [pc, #204]	@ (800b0f4 <TIM_Base_SetConfig+0x14c>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d013      	beq.n	800b052 <TIM_Base_SetConfig+0xaa>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	4a32      	ldr	r2, [pc, #200]	@ (800b0f8 <TIM_Base_SetConfig+0x150>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d00f      	beq.n	800b052 <TIM_Base_SetConfig+0xaa>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	4a31      	ldr	r2, [pc, #196]	@ (800b0fc <TIM_Base_SetConfig+0x154>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d00b      	beq.n	800b052 <TIM_Base_SetConfig+0xaa>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	4a30      	ldr	r2, [pc, #192]	@ (800b100 <TIM_Base_SetConfig+0x158>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d007      	beq.n	800b052 <TIM_Base_SetConfig+0xaa>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	4a2f      	ldr	r2, [pc, #188]	@ (800b104 <TIM_Base_SetConfig+0x15c>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d003      	beq.n	800b052 <TIM_Base_SetConfig+0xaa>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	4a2e      	ldr	r2, [pc, #184]	@ (800b108 <TIM_Base_SetConfig+0x160>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d108      	bne.n	800b064 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	4313      	orrs	r3, r2
 800b062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	695b      	ldr	r3, [r3, #20]
 800b06e:	4313      	orrs	r3, r2
 800b070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	689a      	ldr	r2, [r3, #8]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	4a16      	ldr	r2, [pc, #88]	@ (800b0e4 <TIM_Base_SetConfig+0x13c>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d00f      	beq.n	800b0b0 <TIM_Base_SetConfig+0x108>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	4a18      	ldr	r2, [pc, #96]	@ (800b0f4 <TIM_Base_SetConfig+0x14c>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d00b      	beq.n	800b0b0 <TIM_Base_SetConfig+0x108>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	4a17      	ldr	r2, [pc, #92]	@ (800b0f8 <TIM_Base_SetConfig+0x150>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d007      	beq.n	800b0b0 <TIM_Base_SetConfig+0x108>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	4a16      	ldr	r2, [pc, #88]	@ (800b0fc <TIM_Base_SetConfig+0x154>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d003      	beq.n	800b0b0 <TIM_Base_SetConfig+0x108>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	4a15      	ldr	r2, [pc, #84]	@ (800b100 <TIM_Base_SetConfig+0x158>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d103      	bne.n	800b0b8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	691a      	ldr	r2, [r3, #16]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	f003 0301 	and.w	r3, r3, #1
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d105      	bne.n	800b0d6 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	691b      	ldr	r3, [r3, #16]
 800b0ce:	f023 0201 	bic.w	r2, r3, #1
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	611a      	str	r2, [r3, #16]
  }
}
 800b0d6:	bf00      	nop
 800b0d8:	3714      	adds	r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	40010000 	.word	0x40010000
 800b0e8:	40000400 	.word	0x40000400
 800b0ec:	40000800 	.word	0x40000800
 800b0f0:	40000c00 	.word	0x40000c00
 800b0f4:	40010400 	.word	0x40010400
 800b0f8:	40014000 	.word	0x40014000
 800b0fc:	40014400 	.word	0x40014400
 800b100:	40014800 	.word	0x40014800
 800b104:	4000e000 	.word	0x4000e000
 800b108:	4000e400 	.word	0x4000e400

0800b10c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b086      	sub	sp, #24
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b116:	2300      	movs	r3, #0
 800b118:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b122:	693a      	ldr	r2, [r7, #16]
 800b124:	4b65      	ldr	r3, [pc, #404]	@ (800b2bc <TIM_SlaveTimer_SetConfig+0x1b0>)
 800b126:	4013      	ands	r3, r2
 800b128:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	693a      	ldr	r2, [r7, #16]
 800b130:	4313      	orrs	r3, r2
 800b132:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b134:	693a      	ldr	r2, [r7, #16]
 800b136:	4b62      	ldr	r3, [pc, #392]	@ (800b2c0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800b138:	4013      	ands	r3, r2
 800b13a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	693a      	ldr	r2, [r7, #16]
 800b142:	4313      	orrs	r3, r2
 800b144:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	693a      	ldr	r2, [r7, #16]
 800b14c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	4a5c      	ldr	r2, [pc, #368]	@ (800b2c4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800b154:	4293      	cmp	r3, r2
 800b156:	f000 80ab 	beq.w	800b2b0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b15a:	4a5a      	ldr	r2, [pc, #360]	@ (800b2c4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	f200 80a4 	bhi.w	800b2aa <TIM_SlaveTimer_SetConfig+0x19e>
 800b162:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b166:	f000 80a3 	beq.w	800b2b0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b16a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b16e:	f200 809c 	bhi.w	800b2aa <TIM_SlaveTimer_SetConfig+0x19e>
 800b172:	4a55      	ldr	r2, [pc, #340]	@ (800b2c8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800b174:	4293      	cmp	r3, r2
 800b176:	f000 809b 	beq.w	800b2b0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b17a:	4a53      	ldr	r2, [pc, #332]	@ (800b2c8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	f200 8094 	bhi.w	800b2aa <TIM_SlaveTimer_SetConfig+0x19e>
 800b182:	4a52      	ldr	r2, [pc, #328]	@ (800b2cc <TIM_SlaveTimer_SetConfig+0x1c0>)
 800b184:	4293      	cmp	r3, r2
 800b186:	f000 8093 	beq.w	800b2b0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b18a:	4a50      	ldr	r2, [pc, #320]	@ (800b2cc <TIM_SlaveTimer_SetConfig+0x1c0>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	f200 808c 	bhi.w	800b2aa <TIM_SlaveTimer_SetConfig+0x19e>
 800b192:	4a4f      	ldr	r2, [pc, #316]	@ (800b2d0 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800b194:	4293      	cmp	r3, r2
 800b196:	f000 808b 	beq.w	800b2b0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b19a:	4a4d      	ldr	r2, [pc, #308]	@ (800b2d0 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	f200 8084 	bhi.w	800b2aa <TIM_SlaveTimer_SetConfig+0x19e>
 800b1a2:	4a4c      	ldr	r2, [pc, #304]	@ (800b2d4 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	f000 8083 	beq.w	800b2b0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b1aa:	4a4a      	ldr	r2, [pc, #296]	@ (800b2d4 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d87c      	bhi.n	800b2aa <TIM_SlaveTimer_SetConfig+0x19e>
 800b1b0:	4a49      	ldr	r2, [pc, #292]	@ (800b2d8 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d07c      	beq.n	800b2b0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b1b6:	4a48      	ldr	r2, [pc, #288]	@ (800b2d8 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d876      	bhi.n	800b2aa <TIM_SlaveTimer_SetConfig+0x19e>
 800b1bc:	4a47      	ldr	r2, [pc, #284]	@ (800b2dc <TIM_SlaveTimer_SetConfig+0x1d0>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d076      	beq.n	800b2b0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b1c2:	4a46      	ldr	r2, [pc, #280]	@ (800b2dc <TIM_SlaveTimer_SetConfig+0x1d0>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d870      	bhi.n	800b2aa <TIM_SlaveTimer_SetConfig+0x19e>
 800b1c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b1cc:	d070      	beq.n	800b2b0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b1ce:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b1d2:	d86a      	bhi.n	800b2aa <TIM_SlaveTimer_SetConfig+0x19e>
 800b1d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1d8:	d06a      	beq.n	800b2b0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b1da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1de:	d864      	bhi.n	800b2aa <TIM_SlaveTimer_SetConfig+0x19e>
 800b1e0:	2b70      	cmp	r3, #112	@ 0x70
 800b1e2:	d01a      	beq.n	800b21a <TIM_SlaveTimer_SetConfig+0x10e>
 800b1e4:	2b70      	cmp	r3, #112	@ 0x70
 800b1e6:	d860      	bhi.n	800b2aa <TIM_SlaveTimer_SetConfig+0x19e>
 800b1e8:	2b60      	cmp	r3, #96	@ 0x60
 800b1ea:	d054      	beq.n	800b296 <TIM_SlaveTimer_SetConfig+0x18a>
 800b1ec:	2b60      	cmp	r3, #96	@ 0x60
 800b1ee:	d85c      	bhi.n	800b2aa <TIM_SlaveTimer_SetConfig+0x19e>
 800b1f0:	2b50      	cmp	r3, #80	@ 0x50
 800b1f2:	d046      	beq.n	800b282 <TIM_SlaveTimer_SetConfig+0x176>
 800b1f4:	2b50      	cmp	r3, #80	@ 0x50
 800b1f6:	d858      	bhi.n	800b2aa <TIM_SlaveTimer_SetConfig+0x19e>
 800b1f8:	2b40      	cmp	r3, #64	@ 0x40
 800b1fa:	d019      	beq.n	800b230 <TIM_SlaveTimer_SetConfig+0x124>
 800b1fc:	2b40      	cmp	r3, #64	@ 0x40
 800b1fe:	d854      	bhi.n	800b2aa <TIM_SlaveTimer_SetConfig+0x19e>
 800b200:	2b30      	cmp	r3, #48	@ 0x30
 800b202:	d055      	beq.n	800b2b0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b204:	2b30      	cmp	r3, #48	@ 0x30
 800b206:	d850      	bhi.n	800b2aa <TIM_SlaveTimer_SetConfig+0x19e>
 800b208:	2b20      	cmp	r3, #32
 800b20a:	d051      	beq.n	800b2b0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b20c:	2b20      	cmp	r3, #32
 800b20e:	d84c      	bhi.n	800b2aa <TIM_SlaveTimer_SetConfig+0x19e>
 800b210:	2b00      	cmp	r3, #0
 800b212:	d04d      	beq.n	800b2b0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b214:	2b10      	cmp	r3, #16
 800b216:	d04b      	beq.n	800b2b0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b218:	e047      	b.n	800b2aa <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800b22a:	f000 f8b8 	bl	800b39e <TIM_ETR_SetConfig>
      break;
 800b22e:	e040      	b.n	800b2b2 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2b05      	cmp	r3, #5
 800b236:	d101      	bne.n	800b23c <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800b238:	2301      	movs	r3, #1
 800b23a:	e03b      	b.n	800b2b4 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	6a1b      	ldr	r3, [r3, #32]
 800b242:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	6a1a      	ldr	r2, [r3, #32]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f022 0201 	bic.w	r2, r2, #1
 800b252:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	699b      	ldr	r3, [r3, #24]
 800b25a:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b262:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	691b      	ldr	r3, [r3, #16]
 800b268:	011b      	lsls	r3, r3, #4
 800b26a:	68ba      	ldr	r2, [r7, #8]
 800b26c:	4313      	orrs	r3, r2
 800b26e:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	68ba      	ldr	r2, [r7, #8]
 800b276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	621a      	str	r2, [r3, #32]
      break;
 800b280:	e017      	b.n	800b2b2 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b28e:	461a      	mov	r2, r3
 800b290:	f000 f826 	bl	800b2e0 <TIM_TI1_ConfigInputStage>
      break;
 800b294:	e00d      	b.n	800b2b2 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	f000 f84b 	bl	800b33e <TIM_TI2_ConfigInputStage>
      break;
 800b2a8:	e003      	b.n	800b2b2 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	75fb      	strb	r3, [r7, #23]
      break;
 800b2ae:	e000      	b.n	800b2b2 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800b2b0:	bf00      	nop
  }

  return status;
 800b2b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3718      	adds	r7, #24
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	ffcfff8f 	.word	0xffcfff8f
 800b2c0:	fffefff8 	.word	0xfffefff8
 800b2c4:	00200010 	.word	0x00200010
 800b2c8:	00100070 	.word	0x00100070
 800b2cc:	00100060 	.word	0x00100060
 800b2d0:	00100050 	.word	0x00100050
 800b2d4:	00100040 	.word	0x00100040
 800b2d8:	00100030 	.word	0x00100030
 800b2dc:	00100020 	.word	0x00100020

0800b2e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b087      	sub	sp, #28
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6a1b      	ldr	r3, [r3, #32]
 800b2f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6a1b      	ldr	r3, [r3, #32]
 800b2f6:	f023 0201 	bic.w	r2, r3, #1
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	699b      	ldr	r3, [r3, #24]
 800b302:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b30a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	011b      	lsls	r3, r3, #4
 800b310:	693a      	ldr	r2, [r7, #16]
 800b312:	4313      	orrs	r3, r2
 800b314:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	f023 030a 	bic.w	r3, r3, #10
 800b31c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b31e:	697a      	ldr	r2, [r7, #20]
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	4313      	orrs	r3, r2
 800b324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	693a      	ldr	r2, [r7, #16]
 800b32a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	697a      	ldr	r2, [r7, #20]
 800b330:	621a      	str	r2, [r3, #32]
}
 800b332:	bf00      	nop
 800b334:	371c      	adds	r7, #28
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr

0800b33e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b33e:	b480      	push	{r7}
 800b340:	b087      	sub	sp, #28
 800b342:	af00      	add	r7, sp, #0
 800b344:	60f8      	str	r0, [r7, #12]
 800b346:	60b9      	str	r1, [r7, #8]
 800b348:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	6a1b      	ldr	r3, [r3, #32]
 800b34e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6a1b      	ldr	r3, [r3, #32]
 800b354:	f023 0210 	bic.w	r2, r3, #16
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	699b      	ldr	r3, [r3, #24]
 800b360:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b368:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	031b      	lsls	r3, r3, #12
 800b36e:	693a      	ldr	r2, [r7, #16]
 800b370:	4313      	orrs	r3, r2
 800b372:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b37a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	011b      	lsls	r3, r3, #4
 800b380:	697a      	ldr	r2, [r7, #20]
 800b382:	4313      	orrs	r3, r2
 800b384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	693a      	ldr	r2, [r7, #16]
 800b38a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	697a      	ldr	r2, [r7, #20]
 800b390:	621a      	str	r2, [r3, #32]
}
 800b392:	bf00      	nop
 800b394:	371c      	adds	r7, #28
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr

0800b39e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b39e:	b480      	push	{r7}
 800b3a0:	b087      	sub	sp, #28
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	60f8      	str	r0, [r7, #12]
 800b3a6:	60b9      	str	r1, [r7, #8]
 800b3a8:	607a      	str	r2, [r7, #4]
 800b3aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b3b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	021a      	lsls	r2, r3, #8
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	431a      	orrs	r2, r3
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	697a      	ldr	r2, [r7, #20]
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	697a      	ldr	r2, [r7, #20]
 800b3d0:	609a      	str	r2, [r3, #8]
}
 800b3d2:	bf00      	nop
 800b3d4:	371c      	adds	r7, #28
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr
	...

0800b3e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b085      	sub	sp, #20
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d101      	bne.n	800b3f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b3f4:	2302      	movs	r3, #2
 800b3f6:	e077      	b.n	800b4e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2202      	movs	r2, #2
 800b404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a35      	ldr	r2, [pc, #212]	@ (800b4f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d004      	beq.n	800b42c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a34      	ldr	r2, [pc, #208]	@ (800b4f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d108      	bne.n	800b43e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b432:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b444:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	4313      	orrs	r3, r2
 800b44e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	68fa      	ldr	r2, [r7, #12]
 800b456:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a25      	ldr	r2, [pc, #148]	@ (800b4f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d02c      	beq.n	800b4bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b46a:	d027      	beq.n	800b4bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a22      	ldr	r2, [pc, #136]	@ (800b4fc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d022      	beq.n	800b4bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a21      	ldr	r2, [pc, #132]	@ (800b500 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d01d      	beq.n	800b4bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a1f      	ldr	r2, [pc, #124]	@ (800b504 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d018      	beq.n	800b4bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a1a      	ldr	r2, [pc, #104]	@ (800b4f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d013      	beq.n	800b4bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a1b      	ldr	r2, [pc, #108]	@ (800b508 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d00e      	beq.n	800b4bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4a1a      	ldr	r2, [pc, #104]	@ (800b50c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d009      	beq.n	800b4bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a18      	ldr	r2, [pc, #96]	@ (800b510 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d004      	beq.n	800b4bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a17      	ldr	r2, [pc, #92]	@ (800b514 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d10c      	bne.n	800b4d6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b4c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	68ba      	ldr	r2, [r7, #8]
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	68ba      	ldr	r2, [r7, #8]
 800b4d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2201      	movs	r2, #1
 800b4da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b4e6:	2300      	movs	r3, #0
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3714      	adds	r7, #20
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr
 800b4f4:	40010000 	.word	0x40010000
 800b4f8:	40010400 	.word	0x40010400
 800b4fc:	40000400 	.word	0x40000400
 800b500:	40000800 	.word	0x40000800
 800b504:	40000c00 	.word	0x40000c00
 800b508:	40001800 	.word	0x40001800
 800b50c:	40014000 	.word	0x40014000
 800b510:	4000e000 	.word	0x4000e000
 800b514:	4000e400 	.word	0x4000e400

0800b518 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b518:	b480      	push	{r7}
 800b51a:	b083      	sub	sp, #12
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b520:	bf00      	nop
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b534:	bf00      	nop
 800b536:	370c      	adds	r7, #12
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b540:	b480      	push	{r7}
 800b542:	b083      	sub	sp, #12
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b548:	bf00      	nop
 800b54a:	370c      	adds	r7, #12
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr

0800b554 <memset>:
 800b554:	4402      	add	r2, r0
 800b556:	4603      	mov	r3, r0
 800b558:	4293      	cmp	r3, r2
 800b55a:	d100      	bne.n	800b55e <memset+0xa>
 800b55c:	4770      	bx	lr
 800b55e:	f803 1b01 	strb.w	r1, [r3], #1
 800b562:	e7f9      	b.n	800b558 <memset+0x4>

0800b564 <__libc_init_array>:
 800b564:	b570      	push	{r4, r5, r6, lr}
 800b566:	4d0d      	ldr	r5, [pc, #52]	@ (800b59c <__libc_init_array+0x38>)
 800b568:	4c0d      	ldr	r4, [pc, #52]	@ (800b5a0 <__libc_init_array+0x3c>)
 800b56a:	1b64      	subs	r4, r4, r5
 800b56c:	10a4      	asrs	r4, r4, #2
 800b56e:	2600      	movs	r6, #0
 800b570:	42a6      	cmp	r6, r4
 800b572:	d109      	bne.n	800b588 <__libc_init_array+0x24>
 800b574:	4d0b      	ldr	r5, [pc, #44]	@ (800b5a4 <__libc_init_array+0x40>)
 800b576:	4c0c      	ldr	r4, [pc, #48]	@ (800b5a8 <__libc_init_array+0x44>)
 800b578:	f000 f818 	bl	800b5ac <_init>
 800b57c:	1b64      	subs	r4, r4, r5
 800b57e:	10a4      	asrs	r4, r4, #2
 800b580:	2600      	movs	r6, #0
 800b582:	42a6      	cmp	r6, r4
 800b584:	d105      	bne.n	800b592 <__libc_init_array+0x2e>
 800b586:	bd70      	pop	{r4, r5, r6, pc}
 800b588:	f855 3b04 	ldr.w	r3, [r5], #4
 800b58c:	4798      	blx	r3
 800b58e:	3601      	adds	r6, #1
 800b590:	e7ee      	b.n	800b570 <__libc_init_array+0xc>
 800b592:	f855 3b04 	ldr.w	r3, [r5], #4
 800b596:	4798      	blx	r3
 800b598:	3601      	adds	r6, #1
 800b59a:	e7f2      	b.n	800b582 <__libc_init_array+0x1e>
 800b59c:	0800b5dc 	.word	0x0800b5dc
 800b5a0:	0800b5dc 	.word	0x0800b5dc
 800b5a4:	0800b5dc 	.word	0x0800b5dc
 800b5a8:	0800b5e0 	.word	0x0800b5e0

0800b5ac <_init>:
 800b5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ae:	bf00      	nop
 800b5b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5b2:	bc08      	pop	{r3}
 800b5b4:	469e      	mov	lr, r3
 800b5b6:	4770      	bx	lr

0800b5b8 <_fini>:
 800b5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ba:	bf00      	nop
 800b5bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5be:	bc08      	pop	{r3}
 800b5c0:	469e      	mov	lr, r3
 800b5c2:	4770      	bx	lr
