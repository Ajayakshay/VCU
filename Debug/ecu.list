
ecu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8ac  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800bb78  0800bb78  0000cb78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800bb90  0800bb90  0000cb90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800bb94  0800bb94  0000cb94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  0800bb98  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000414  24000020  0800bba8  0000d020  2**5
                  ALLOC
  7 ._user_heap_stack 00000604  24000434  0800bba8  0000d434  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000191f2  00000000  00000000  0000d03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002ff5  00000000  00000000  00026230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001480  00000000  00000000  00029228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000fd1  00000000  00000000  0002a6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00003b11  00000000  00000000  0002b679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001b93b  00000000  00000000  0002f18a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015efa3  00000000  00000000  0004aac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001a9a68  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000057d8  00000000  00000000  001a9aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000051  00000000  00000000  001af284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000020 	.word	0x24000020
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800bb60 	.word	0x0800bb60

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000024 	.word	0x24000024
 8000308:	0800bb60 	.word	0x0800bb60

0800030c <Start_WheelSpeed>:
uint32_t Wheelspeed_Count_2;

float Wheel_speed_val_1 = 0.0f;
float Wheel_speed_val_2 = 0.0f;

void Start_WheelSpeed(){
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8000310:	4805      	ldr	r0, [pc, #20]	@ (8000328 <Start_WheelSpeed+0x1c>)
 8000312:	f00a ff2b 	bl	800b16c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim3);
 8000316:	4805      	ldr	r0, [pc, #20]	@ (800032c <Start_WheelSpeed+0x20>)
 8000318:	f00a feaa 	bl	800b070 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 800031c:	4804      	ldr	r0, [pc, #16]	@ (8000330 <Start_WheelSpeed+0x24>)
 800031e:	f00a fea7 	bl	800b070 <HAL_TIM_Base_Start>
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	240003e4 	.word	0x240003e4
 800032c:	2400034c 	.word	0x2400034c
 8000330:	24000398 	.word	0x24000398

08000334 <HAL_TIM_PeriodElapsedCallback>:

// Callback function (executes every 1 second)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a0d      	ldr	r2, [pc, #52]	@ (8000378 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d113      	bne.n	800036e <HAL_TIM_PeriodElapsedCallback+0x3a>
    //encoder function
	  Wheelspeed_Count_1 = __HAL_TIM_GET_COUNTER(&htim3);
 8000346:	4b0d      	ldr	r3, [pc, #52]	@ (800037c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800034c:	4a0c      	ldr	r2, [pc, #48]	@ (8000380 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800034e:	6013      	str	r3, [r2, #0]
	  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000350:	4b0a      	ldr	r3, [pc, #40]	@ (800037c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2200      	movs	r2, #0
 8000356:	625a      	str	r2, [r3, #36]	@ 0x24
	  Wheelspeed_Count_2 = __HAL_TIM_GET_COUNTER(&htim4);
 8000358:	4b0a      	ldr	r3, [pc, #40]	@ (8000384 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800035e:	4a0a      	ldr	r2, [pc, #40]	@ (8000388 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000360:	6013      	str	r3, [r2, #0]
	  __HAL_TIM_SET_COUNTER(&htim4, 0);
 8000362:	4b08      	ldr	r3, [pc, #32]	@ (8000384 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	2200      	movs	r2, #0
 8000368:	625a      	str	r2, [r3, #36]	@ 0x24
	  RPM();
 800036a:	f000 f80f 	bl	800038c <RPM>
  }
}
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40001000 	.word	0x40001000
 800037c:	2400034c 	.word	0x2400034c
 8000380:	2400003c 	.word	0x2400003c
 8000384:	24000398 	.word	0x24000398
 8000388:	24000040 	.word	0x24000040

0800038c <RPM>:
#ifdef FECU
void RPM(){
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	Wheel_speed_val_1 = (float)(Wheelspeed_Count_1/Gears);
 8000390:	4b15      	ldr	r3, [pc, #84]	@ (80003e8 <RPM+0x5c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a15      	ldr	r2, [pc, #84]	@ (80003ec <RPM+0x60>)
 8000396:	fba2 2303 	umull	r2, r3, r2, r3
 800039a:	095b      	lsrs	r3, r3, #5
 800039c:	ee07 3a90 	vmov	s15, r3
 80003a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003a4:	4b12      	ldr	r3, [pc, #72]	@ (80003f0 <RPM+0x64>)
 80003a6:	edc3 7a00 	vstr	s15, [r3]
	Wheel_speed_val_2 = (float)(Wheelspeed_Count_2/Gears);
 80003aa:	4b12      	ldr	r3, [pc, #72]	@ (80003f4 <RPM+0x68>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a0f      	ldr	r2, [pc, #60]	@ (80003ec <RPM+0x60>)
 80003b0:	fba2 2303 	umull	r2, r3, r2, r3
 80003b4:	095b      	lsrs	r3, r3, #5
 80003b6:	ee07 3a90 	vmov	s15, r3
 80003ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003be:	4b0e      	ldr	r3, [pc, #56]	@ (80003f8 <RPM+0x6c>)
 80003c0:	edc3 7a00 	vstr	s15, [r3]
	Transmit_SensorVals(Wheel_speed_1, Wheel_speed_val_1);
 80003c4:	4b0a      	ldr	r3, [pc, #40]	@ (80003f0 <RPM+0x64>)
 80003c6:	edd3 7a00 	vldr	s15, [r3]
 80003ca:	eeb0 0a67 	vmov.f32	s0, s15
 80003ce:	2004      	movs	r0, #4
 80003d0:	f000 f8b4 	bl	800053c <Transmit_SensorVals>
	Transmit_SensorVals(Wheel_speed_2, Wheel_speed_val_2);
 80003d4:	4b08      	ldr	r3, [pc, #32]	@ (80003f8 <RPM+0x6c>)
 80003d6:	edd3 7a00 	vldr	s15, [r3]
 80003da:	eeb0 0a67 	vmov.f32	s0, s15
 80003de:	2005      	movs	r0, #5
 80003e0:	f000 f8ac 	bl	800053c <Transmit_SensorVals>

}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	2400003c 	.word	0x2400003c
 80003ec:	88888889 	.word	0x88888889
 80003f0:	24000044 	.word	0x24000044
 80003f4:	24000040 	.word	0x24000040
 80003f8:	24000048 	.word	0x24000048

080003fc <ADC_Start>:
} ADC_raw;

float ADC_V[ADC_BUFFER_SIZE];


void ADC_Start(){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	memset(&ADC_raw, 0, sizeof(ADC_raw));
 8000400:	2220      	movs	r2, #32
 8000402:	2100      	movs	r1, #0
 8000404:	4807      	ldr	r0, [pc, #28]	@ (8000424 <ADC_Start+0x28>)
 8000406:	f00b fb7f 	bl	800bb08 <memset>
	memset(&ADC_V, 0, sizeof(ADC_V));
 800040a:	2218      	movs	r2, #24
 800040c:	2100      	movs	r1, #0
 800040e:	4806      	ldr	r0, [pc, #24]	@ (8000428 <ADC_Start+0x2c>)
 8000410:	f00b fb7a 	bl	800bb08 <memset>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)&ADC_raw, ADC_BUFFER_SIZE);
 8000414:	2206      	movs	r2, #6
 8000416:	4903      	ldr	r1, [pc, #12]	@ (8000424 <ADC_Start+0x28>)
 8000418:	4804      	ldr	r0, [pc, #16]	@ (800042c <ADC_Start+0x30>)
 800041a:	f001 fe53 	bl	80020c4 <HAL_ADC_Start_DMA>
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	24000060 	.word	0x24000060
 8000428:	24000080 	.word	0x24000080
 800042c:	24000164 	.word	0x24000164

08000430 <Convert_ADC_Values>:

void Convert_ADC_Values(void) {
 8000430:	b480      	push	{r7}
 8000432:	b085      	sub	sp, #20
 8000434:	af00      	add	r7, sp, #0
	const float VREF = 3.3f;
 8000436:	4b17      	ldr	r3, [pc, #92]	@ (8000494 <Convert_ADC_Values+0x64>)
 8000438:	60bb      	str	r3, [r7, #8]
	const float VRES = 65535.0f;
 800043a:	4b17      	ldr	r3, [pc, #92]	@ (8000498 <Convert_ADC_Values+0x68>)
 800043c:	607b      	str	r3, [r7, #4]
	const float VCNF = VREF/VRES;
 800043e:	edd7 6a02 	vldr	s13, [r7, #8]
 8000442:	ed97 7a01 	vldr	s14, [r7, #4]
 8000446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800044a:	edc7 7a00 	vstr	s15, [r7]
    for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 800044e:	2300      	movs	r3, #0
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	e014      	b.n	800047e <Convert_ADC_Values+0x4e>
        ADC_V[i] = (float)ADC_raw.samples[i] * VCNF ;
 8000454:	4a11      	ldr	r2, [pc, #68]	@ (800049c <Convert_ADC_Values+0x6c>)
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800045c:	ee07 3a90 	vmov	s15, r3
 8000460:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000464:	edd7 7a00 	vldr	s15, [r7]
 8000468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800046c:	4a0c      	ldr	r2, [pc, #48]	@ (80004a0 <Convert_ADC_Values+0x70>)
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	009b      	lsls	r3, r3, #2
 8000472:	4413      	add	r3, r2
 8000474:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	3301      	adds	r3, #1
 800047c:	60fb      	str	r3, [r7, #12]
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	2b05      	cmp	r3, #5
 8000482:	dde7      	ble.n	8000454 <Convert_ADC_Values+0x24>
    }
}
 8000484:	bf00      	nop
 8000486:	bf00      	nop
 8000488:	3714      	adds	r7, #20
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	40533333 	.word	0x40533333
 8000498:	477fff00 	.word	0x477fff00
 800049c:	24000060 	.word	0x24000060
 80004a0:	24000080 	.word	0x24000080

080004a4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b086      	sub	sp, #24
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	4b15      	ldr	r3, [pc, #84]	@ (8000504 <HAL_ADC_ConvCpltCallback+0x60>)
 80004ae:	617b      	str	r3, [r7, #20]
 80004b0:	2320      	movs	r3, #32
 80004b2:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80004b4:	693b      	ldr	r3, [r7, #16]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	dd1d      	ble.n	80004f6 <HAL_ADC_ConvCpltCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	f003 021f 	and.w	r2, r3, #31
 80004c0:	693b      	ldr	r3, [r7, #16]
 80004c2:	4413      	add	r3, r2
 80004c4:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	60bb      	str	r3, [r7, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004ca:	f3bf 8f4f 	dsb	sy
}
 80004ce:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80004d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000508 <HAL_ADC_ConvCpltCallback+0x64>)
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	3320      	adds	r3, #32
 80004dc:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	3b20      	subs	r3, #32
 80004e2:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	dcf2      	bgt.n	80004d0 <HAL_ADC_ConvCpltCallback+0x2c>
  __ASM volatile ("dsb 0xF":::"memory");
 80004ea:	f3bf 8f4f 	dsb	sy
}
 80004ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004f0:	f3bf 8f6f 	isb	sy
}
 80004f4:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80004f6:	bf00      	nop
	SCB_InvalidateDCache_by_Addr((uint16_t*)&ADC_raw, sizeof(ADC_raw));
	//Conversion
	Convert_ADC_Values();
 80004f8:	f7ff ff9a 	bl	8000430 <Convert_ADC_Values>
	//Call the function that converts and returns Voltage to sensor values

}
 80004fc:	bf00      	nop
 80004fe:	3718      	adds	r7, #24
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	24000060 	.word	0x24000060
 8000508:	e000ed00 	.word	0xe000ed00

0800050c <SPI_CS_Enable>:
volatile SPI_Message SPI_queue[SPI_QUEUE_SIZE];
volatile uint8_t queue_head = 0;
volatile uint8_t queue_tail = 0;
volatile uint8_t is_transmitting = 0;

void SPI_CS_Enable(void) {
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI_CS_GPIO_PORT, SPI_CS_PIN, GPIO_PIN_RESET); // Active LOW
 8000510:	2200      	movs	r2, #0
 8000512:	2108      	movs	r1, #8
 8000514:	4802      	ldr	r0, [pc, #8]	@ (8000520 <SPI_CS_Enable+0x14>)
 8000516:	f006 faf3 	bl	8006b00 <HAL_GPIO_WritePin>
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	58020000 	.word	0x58020000

08000524 <SPI_CS_Disable>:

void SPI_CS_Disable(void) {
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI_CS_GPIO_PORT, SPI_CS_PIN, GPIO_PIN_SET); // Inactive HIGH
 8000528:	2201      	movs	r2, #1
 800052a:	2108      	movs	r1, #8
 800052c:	4802      	ldr	r0, [pc, #8]	@ (8000538 <SPI_CS_Disable+0x14>)
 800052e:	f006 fae7 	bl	8006b00 <HAL_GPIO_WritePin>
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	58020000 	.word	0x58020000

0800053c <Transmit_SensorVals>:


// For sending floats with type prefix
HAL_StatusTypeDef Transmit_SensorVals(uint8_t val_type, float value) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	ed87 0a00 	vstr	s0, [r7]
 8000548:	71fb      	strb	r3, [r7, #7]
    if ((queue_tail + 1) % SPI_QUEUE_SIZE == queue_head) return HAL_BUSY;
 800054a:	4b2c      	ldr	r3, [pc, #176]	@ (80005fc <Transmit_SensorVals+0xc0>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	b2db      	uxtb	r3, r3
 8000550:	3301      	adds	r3, #1
 8000552:	425a      	negs	r2, r3
 8000554:	f003 030f 	and.w	r3, r3, #15
 8000558:	f002 020f 	and.w	r2, r2, #15
 800055c:	bf58      	it	pl
 800055e:	4253      	negpl	r3, r2
 8000560:	4a27      	ldr	r2, [pc, #156]	@ (8000600 <Transmit_SensorVals+0xc4>)
 8000562:	7812      	ldrb	r2, [r2, #0]
 8000564:	b2d2      	uxtb	r2, r2
 8000566:	4293      	cmp	r3, r2
 8000568:	d101      	bne.n	800056e <Transmit_SensorVals+0x32>
 800056a:	2302      	movs	r3, #2
 800056c:	e041      	b.n	80005f2 <Transmit_SensorVals+0xb6>
  __ASM volatile ("cpsid i" : : : "memory");
 800056e:	b672      	cpsid	i
}
 8000570:	bf00      	nop

    __disable_irq();
    SPI_queue[queue_tail].msg_type = MSG_FLOAT_WITH_TYPE;
 8000572:	4b22      	ldr	r3, [pc, #136]	@ (80005fc <Transmit_SensorVals+0xc0>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	b2db      	uxtb	r3, r3
 8000578:	4619      	mov	r1, r3
 800057a:	4a22      	ldr	r2, [pc, #136]	@ (8000604 <Transmit_SensorVals+0xc8>)
 800057c:	460b      	mov	r3, r1
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	440b      	add	r3, r1
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	4413      	add	r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]
    SPI_queue[queue_tail].payload.float_msg.val_type = val_type;
 800058a:	4b1c      	ldr	r3, [pc, #112]	@ (80005fc <Transmit_SensorVals+0xc0>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	b2db      	uxtb	r3, r3
 8000590:	4619      	mov	r1, r3
 8000592:	4a1c      	ldr	r2, [pc, #112]	@ (8000604 <Transmit_SensorVals+0xc8>)
 8000594:	460b      	mov	r3, r1
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	440b      	add	r3, r1
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	4413      	add	r3, r2
 800059e:	3304      	adds	r3, #4
 80005a0:	79fa      	ldrb	r2, [r7, #7]
 80005a2:	701a      	strb	r2, [r3, #0]
    SPI_queue[queue_tail].payload.float_msg.value = value;
 80005a4:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <Transmit_SensorVals+0xc0>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	4619      	mov	r1, r3
 80005ac:	4a15      	ldr	r2, [pc, #84]	@ (8000604 <Transmit_SensorVals+0xc8>)
 80005ae:	460b      	mov	r3, r1
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	440b      	add	r3, r1
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	4413      	add	r3, r2
 80005b8:	3308      	adds	r3, #8
 80005ba:	683a      	ldr	r2, [r7, #0]
 80005bc:	601a      	str	r2, [r3, #0]
    queue_tail = (queue_tail + 1) % SPI_QUEUE_SIZE;
 80005be:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <Transmit_SensorVals+0xc0>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	3301      	adds	r3, #1
 80005c6:	425a      	negs	r2, r3
 80005c8:	f003 030f 	and.w	r3, r3, #15
 80005cc:	f002 020f 	and.w	r2, r2, #15
 80005d0:	bf58      	it	pl
 80005d2:	4253      	negpl	r3, r2
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <Transmit_SensorVals+0xc0>)
 80005d8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80005da:	b662      	cpsie	i
}
 80005dc:	bf00      	nop
    __enable_irq();

    if (!is_transmitting) return Process_SPI_Queue();
 80005de:	4b0a      	ldr	r3, [pc, #40]	@ (8000608 <Transmit_SensorVals+0xcc>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d103      	bne.n	80005f0 <Transmit_SensorVals+0xb4>
 80005e8:	f000 f810 	bl	800060c <Process_SPI_Queue>
 80005ec:	4603      	mov	r3, r0
 80005ee:	e000      	b.n	80005f2 <Transmit_SensorVals+0xb6>
    return HAL_OK;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	24000159 	.word	0x24000159
 8000600:	24000158 	.word	0x24000158
 8000604:	24000098 	.word	0x24000098
 8000608:	2400015a 	.word	0x2400015a

0800060c <Process_SPI_Queue>:
    return HAL_OK;
}

//Add to Queue if busy

HAL_StatusTypeDef Process_SPI_Queue(void) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
    if (queue_head == queue_tail) {
 8000612:	4b3e      	ldr	r3, [pc, #248]	@ (800070c <Process_SPI_Queue+0x100>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	b2da      	uxtb	r2, r3
 8000618:	4b3d      	ldr	r3, [pc, #244]	@ (8000710 <Process_SPI_Queue+0x104>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	429a      	cmp	r2, r3
 8000620:	d104      	bne.n	800062c <Process_SPI_Queue+0x20>
        is_transmitting = 0;
 8000622:	4b3c      	ldr	r3, [pc, #240]	@ (8000714 <Process_SPI_Queue+0x108>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
        return HAL_OK;
 8000628:	2300      	movs	r3, #0
 800062a:	e06b      	b.n	8000704 <Process_SPI_Queue+0xf8>
    }

    is_transmitting = 1;
 800062c:	4b39      	ldr	r3, [pc, #228]	@ (8000714 <Process_SPI_Queue+0x108>)
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]
    __attribute__((aligned(4))) static uint8_t tx_buffer[5];
    uint8_t data_size;

    switch(SPI_queue[queue_head].msg_type) {
 8000632:	4b36      	ldr	r3, [pc, #216]	@ (800070c <Process_SPI_Queue+0x100>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	4619      	mov	r1, r3
 800063a:	4a37      	ldr	r2, [pc, #220]	@ (8000718 <Process_SPI_Queue+0x10c>)
 800063c:	460b      	mov	r3, r1
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	440b      	add	r3, r1
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	4413      	add	r3, r2
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d002      	beq.n	8000654 <Process_SPI_Queue+0x48>
 800064e:	2b01      	cmp	r3, #1
 8000650:	d022      	beq.n	8000698 <Process_SPI_Queue+0x8c>
 8000652:	e033      	b.n	80006bc <Process_SPI_Queue+0xb0>
        case MSG_FLOAT_WITH_TYPE:
            tx_buffer[0] = SPI_queue[queue_head].payload.float_msg.val_type;
 8000654:	4b2d      	ldr	r3, [pc, #180]	@ (800070c <Process_SPI_Queue+0x100>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4619      	mov	r1, r3
 800065c:	4a2e      	ldr	r2, [pc, #184]	@ (8000718 <Process_SPI_Queue+0x10c>)
 800065e:	460b      	mov	r3, r1
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	440b      	add	r3, r1
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	4413      	add	r3, r2
 8000668:	3304      	adds	r3, #4
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b2b      	ldr	r3, [pc, #172]	@ (800071c <Process_SPI_Queue+0x110>)
 8000670:	701a      	strb	r2, [r3, #0]
            memcpy(&tx_buffer[1], (const void*)&SPI_queue[queue_head].payload.float_msg.value, 4);
 8000672:	4b26      	ldr	r3, [pc, #152]	@ (800070c <Process_SPI_Queue+0x100>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	461a      	mov	r2, r3
 800067a:	4613      	mov	r3, r2
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	4413      	add	r3, r2
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	4a25      	ldr	r2, [pc, #148]	@ (8000718 <Process_SPI_Queue+0x10c>)
 8000684:	4413      	add	r3, r2
 8000686:	3308      	adds	r3, #8
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	461a      	mov	r2, r3
 800068c:	4b23      	ldr	r3, [pc, #140]	@ (800071c <Process_SPI_Queue+0x110>)
 800068e:	f8c3 2001 	str.w	r2, [r3, #1]
            data_size = 5;
 8000692:	2305      	movs	r3, #5
 8000694:	71fb      	strb	r3, [r7, #7]
            break;
 8000696:	e013      	b.n	80006c0 <Process_SPI_Queue+0xb4>

        case MSG_RAW_16BIT:
            memcpy(tx_buffer, (const void*)&SPI_queue[queue_head].payload.raw_16bit, 2);
 8000698:	4b1c      	ldr	r3, [pc, #112]	@ (800070c <Process_SPI_Queue+0x100>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	4613      	mov	r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4413      	add	r3, r2
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000718 <Process_SPI_Queue+0x10c>)
 80006aa:	4413      	add	r3, r2
 80006ac:	3304      	adds	r3, #4
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <Process_SPI_Queue+0x110>)
 80006b4:	801a      	strh	r2, [r3, #0]
            data_size = 2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	71fb      	strb	r3, [r7, #7]
            break;
 80006ba:	e001      	b.n	80006c0 <Process_SPI_Queue+0xb4>

        default:
            return HAL_ERROR;
 80006bc:	2301      	movs	r3, #1
 80006be:	e021      	b.n	8000704 <Process_SPI_Queue+0xf8>
    }

    queue_head = (queue_head + 1) % SPI_QUEUE_SIZE;
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <Process_SPI_Queue+0x100>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	3301      	adds	r3, #1
 80006c8:	425a      	negs	r2, r3
 80006ca:	f003 030f 	and.w	r3, r3, #15
 80006ce:	f002 020f 	and.w	r2, r2, #15
 80006d2:	bf58      	it	pl
 80006d4:	4253      	negpl	r3, r2
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <Process_SPI_Queue+0x100>)
 80006da:	701a      	strb	r2, [r3, #0]

    SPI_CS_Enable();
 80006dc:	f7ff ff16 	bl	800050c <SPI_CS_Enable>
    HAL_StatusTypeDef status = HAL_SPI_Transmit_DMA(SPI, tx_buffer, data_size);
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	461a      	mov	r2, r3
 80006e6:	490d      	ldr	r1, [pc, #52]	@ (800071c <Process_SPI_Queue+0x110>)
 80006e8:	480d      	ldr	r0, [pc, #52]	@ (8000720 <Process_SPI_Queue+0x114>)
 80006ea:	f009 feb7 	bl	800a45c <HAL_SPI_Transmit_DMA>
 80006ee:	4603      	mov	r3, r0
 80006f0:	71bb      	strb	r3, [r7, #6]
    if (status != HAL_OK) {
 80006f2:	79bb      	ldrb	r3, [r7, #6]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d004      	beq.n	8000702 <Process_SPI_Queue+0xf6>
        SPI_CS_Disable();
 80006f8:	f7ff ff14 	bl	8000524 <SPI_CS_Disable>
        is_transmitting = 0;
 80006fc:	4b05      	ldr	r3, [pc, #20]	@ (8000714 <Process_SPI_Queue+0x108>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
    }
    return status;
 8000702:	79bb      	ldrb	r3, [r7, #6]
}
 8000704:	4618      	mov	r0, r3
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	24000158 	.word	0x24000158
 8000710:	24000159 	.word	0x24000159
 8000714:	2400015a 	.word	0x2400015a
 8000718:	24000098 	.word	0x24000098
 800071c:	2400015c 	.word	0x2400015c
 8000720:	2400024c 	.word	0x2400024c

08000724 <HAL_SPI_TxCpltCallback>:

// --- SPI Transmission Complete Callback ---
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
    if (hspi == SPI) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a05      	ldr	r2, [pc, #20]	@ (8000744 <HAL_SPI_TxCpltCallback+0x20>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d103      	bne.n	800073c <HAL_SPI_TxCpltCallback+0x18>
        // Process next message
    	SPI_CS_Disable();
 8000734:	f7ff fef6 	bl	8000524 <SPI_CS_Disable>
        Process_SPI_Queue();
 8000738:	f7ff ff68 	bl	800060c <Process_SPI_Queue>
    }
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	2400024c 	.word	0x2400024c

08000748 <HAL_SPI_ErrorCallback>:

// --- SPI Error Handling ---
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	if (hspi == SPI) {
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a07      	ldr	r2, [pc, #28]	@ (8000770 <HAL_SPI_ErrorCallback+0x28>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d107      	bne.n	8000768 <HAL_SPI_ErrorCallback+0x20>
		HAL_SPI_Abort(SPI);  // Force-release SPI bus
 8000758:	4805      	ldr	r0, [pc, #20]	@ (8000770 <HAL_SPI_ErrorCallback+0x28>)
 800075a:	f009 ffc1 	bl	800a6e0 <HAL_SPI_Abort>
	    is_transmitting = 0;
 800075e:	4b05      	ldr	r3, [pc, #20]	@ (8000774 <HAL_SPI_ErrorCallback+0x2c>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
	    Process_SPI_Queue();  // Retry
 8000764:	f7ff ff52 	bl	800060c <Process_SPI_Queue>
	}
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	2400024c 	.word	0x2400024c
 8000774:	2400015a 	.word	0x2400015a

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800077c:	f000 fb4c 	bl	8000e18 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000780:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <main+0x80>)
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000788:	2b00      	cmp	r3, #0
 800078a:	d11b      	bne.n	80007c4 <main+0x4c>
  __ASM volatile ("dsb 0xF":::"memory");
 800078c:	f3bf 8f4f 	dsb	sy
}
 8000790:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000792:	f3bf 8f6f 	isb	sy
}
 8000796:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000798:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <main+0x80>)
 800079a:	2200      	movs	r2, #0
 800079c:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007a0:	f3bf 8f4f 	dsb	sy
}
 80007a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007a6:	f3bf 8f6f 	isb	sy
}
 80007aa:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <main+0x80>)
 80007ae:	695b      	ldr	r3, [r3, #20]
 80007b0:	4a11      	ldr	r2, [pc, #68]	@ (80007f8 <main+0x80>)
 80007b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007b6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007b8:	f3bf 8f4f 	dsb	sy
}
 80007bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007be:	f3bf 8f6f 	isb	sy
}
 80007c2:	e000      	b.n	80007c6 <main+0x4e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007c4:	bf00      	nop
  SCB_EnableICache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c6:	f000 fef7 	bl	80015b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ca:	f000 f817 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ce:	f000 fab1 	bl	8000d34 <MX_GPIO_Init>
  MX_DMA_Init();
 80007d2:	f000 fa87 	bl	8000ce4 <MX_DMA_Init>
  MX_SPI1_Init();
 80007d6:	f000 f94f 	bl	8000a78 <MX_SPI1_Init>
  MX_ADC1_Init();
 80007da:	f000 f87f 	bl	80008dc <MX_ADC1_Init>
  MX_TIM6_Init();
 80007de:	f000 fa49 	bl	8000c74 <MX_TIM6_Init>
  MX_TIM3_Init();
 80007e2:	f000 f99f 	bl	8000b24 <MX_TIM3_Init>
  MX_TIM4_Init();
 80007e6:	f000 f9f1 	bl	8000bcc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  ADC_Start();
 80007ea:	f7ff fe07 	bl	80003fc <ADC_Start>
  Start_WheelSpeed();
 80007ee:	f7ff fd8d 	bl	800030c <Start_WheelSpeed>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007f2:	bf00      	nop
 80007f4:	e7fd      	b.n	80007f2 <main+0x7a>
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b09c      	sub	sp, #112	@ 0x70
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000806:	224c      	movs	r2, #76	@ 0x4c
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f00b f97c 	bl	800bb08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2220      	movs	r2, #32
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f00b f976 	bl	800bb08 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800081c:	2002      	movs	r0, #2
 800081e:	f006 f989 	bl	8006b34 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b2c      	ldr	r3, [pc, #176]	@ (80008d8 <SystemClock_Config+0xdc>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800082e:	4a2a      	ldr	r2, [pc, #168]	@ (80008d8 <SystemClock_Config+0xdc>)
 8000830:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000834:	6193      	str	r3, [r2, #24]
 8000836:	4b28      	ldr	r3, [pc, #160]	@ (80008d8 <SystemClock_Config+0xdc>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000842:	bf00      	nop
 8000844:	4b24      	ldr	r3, [pc, #144]	@ (80008d8 <SystemClock_Config+0xdc>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800084c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000850:	d1f8      	bne.n	8000844 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000852:	2302      	movs	r3, #2
 8000854:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000856:	2301      	movs	r3, #1
 8000858:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800085a:	2340      	movs	r3, #64	@ 0x40
 800085c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085e:	2302      	movs	r3, #2
 8000860:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000862:	2300      	movs	r3, #0
 8000864:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000866:	2304      	movs	r3, #4
 8000868:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800086a:	230c      	movs	r3, #12
 800086c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800086e:	2302      	movs	r3, #2
 8000870:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000872:	2303      	movs	r3, #3
 8000874:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000876:	2302      	movs	r3, #2
 8000878:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800087a:	230c      	movs	r3, #12
 800087c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800087e:	2300      	movs	r3, #0
 8000880:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000886:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800088a:	4618      	mov	r0, r3
 800088c:	f006 f98c 	bl	8006ba8 <HAL_RCC_OscConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000896:	f000 faeb 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089a:	233f      	movs	r3, #63	@ 0x3f
 800089c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2101      	movs	r1, #1
 80008be:	4618      	mov	r0, r3
 80008c0:	f006 fd4c 	bl	800735c <HAL_RCC_ClockConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80008ca:	f000 fad1 	bl	8000e70 <Error_Handler>
  }
}
 80008ce:	bf00      	nop
 80008d0:	3770      	adds	r7, #112	@ 0x70
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	58024800 	.word	0x58024800

080008dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	@ 0x30
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008ee:	463b      	mov	r3, r7
 80008f0:	2224      	movs	r2, #36	@ 0x24
 80008f2:	2100      	movs	r1, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f00b f907 	bl	800bb08 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008fa:	4b57      	ldr	r3, [pc, #348]	@ (8000a58 <MX_ADC1_Init+0x17c>)
 80008fc:	4a57      	ldr	r2, [pc, #348]	@ (8000a5c <MX_ADC1_Init+0x180>)
 80008fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000900:	4b55      	ldr	r3, [pc, #340]	@ (8000a58 <MX_ADC1_Init+0x17c>)
 8000902:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8000906:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000908:	4b53      	ldr	r3, [pc, #332]	@ (8000a58 <MX_ADC1_Init+0x17c>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800090e:	4b52      	ldr	r3, [pc, #328]	@ (8000a58 <MX_ADC1_Init+0x17c>)
 8000910:	2201      	movs	r2, #1
 8000912:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000914:	4b50      	ldr	r3, [pc, #320]	@ (8000a58 <MX_ADC1_Init+0x17c>)
 8000916:	2208      	movs	r2, #8
 8000918:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800091a:	4b4f      	ldr	r3, [pc, #316]	@ (8000a58 <MX_ADC1_Init+0x17c>)
 800091c:	2200      	movs	r2, #0
 800091e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000920:	4b4d      	ldr	r3, [pc, #308]	@ (8000a58 <MX_ADC1_Init+0x17c>)
 8000922:	2201      	movs	r2, #1
 8000924:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 8000926:	4b4c      	ldr	r3, [pc, #304]	@ (8000a58 <MX_ADC1_Init+0x17c>)
 8000928:	2206      	movs	r2, #6
 800092a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800092c:	4b4a      	ldr	r3, [pc, #296]	@ (8000a58 <MX_ADC1_Init+0x17c>)
 800092e:	2200      	movs	r2, #0
 8000930:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000934:	4b48      	ldr	r3, [pc, #288]	@ (8000a58 <MX_ADC1_Init+0x17c>)
 8000936:	2200      	movs	r2, #0
 8000938:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800093a:	4b47      	ldr	r3, [pc, #284]	@ (8000a58 <MX_ADC1_Init+0x17c>)
 800093c:	2200      	movs	r2, #0
 800093e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000940:	4b45      	ldr	r3, [pc, #276]	@ (8000a58 <MX_ADC1_Init+0x17c>)
 8000942:	2203      	movs	r2, #3
 8000944:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000946:	4b44      	ldr	r3, [pc, #272]	@ (8000a58 <MX_ADC1_Init+0x17c>)
 8000948:	2200      	movs	r2, #0
 800094a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800094c:	4b42      	ldr	r3, [pc, #264]	@ (8000a58 <MX_ADC1_Init+0x17c>)
 800094e:	2200      	movs	r2, #0
 8000950:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000952:	4b41      	ldr	r3, [pc, #260]	@ (8000a58 <MX_ADC1_Init+0x17c>)
 8000954:	2200      	movs	r2, #0
 8000956:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 800095a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a58 <MX_ADC1_Init+0x17c>)
 800095c:	2201      	movs	r2, #1
 800095e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000960:	483d      	ldr	r0, [pc, #244]	@ (8000a58 <MX_ADC1_Init+0x17c>)
 8000962:	f001 f9a7 	bl	8001cb4 <HAL_ADC_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800096c:	f000 fa80 	bl	8000e70 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000978:	4619      	mov	r1, r3
 800097a:	4837      	ldr	r0, [pc, #220]	@ (8000a58 <MX_ADC1_Init+0x17c>)
 800097c:	f002 fe6a 	bl	8003654 <HAL_ADCEx_MultiModeConfigChannel>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000986:	f000 fa73 	bl	8000e70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800098a:	4b35      	ldr	r3, [pc, #212]	@ (8000a60 <MX_ADC1_Init+0x184>)
 800098c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800098e:	2306      	movs	r3, #6
 8000990:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000996:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800099a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800099c:	2304      	movs	r3, #4
 800099e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009aa:	463b      	mov	r3, r7
 80009ac:	4619      	mov	r1, r3
 80009ae:	482a      	ldr	r0, [pc, #168]	@ (8000a58 <MX_ADC1_Init+0x17c>)
 80009b0:	f001 febc 	bl	800272c <HAL_ADC_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80009ba:	f000 fa59 	bl	8000e70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009be:	4b29      	ldr	r3, [pc, #164]	@ (8000a64 <MX_ADC1_Init+0x188>)
 80009c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009c2:	230c      	movs	r3, #12
 80009c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c6:	463b      	mov	r3, r7
 80009c8:	4619      	mov	r1, r3
 80009ca:	4823      	ldr	r0, [pc, #140]	@ (8000a58 <MX_ADC1_Init+0x17c>)
 80009cc:	f001 feae 	bl	800272c <HAL_ADC_ConfigChannel>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80009d6:	f000 fa4b 	bl	8000e70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009da:	4b23      	ldr	r3, [pc, #140]	@ (8000a68 <MX_ADC1_Init+0x18c>)
 80009dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80009de:	2312      	movs	r3, #18
 80009e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e2:	463b      	mov	r3, r7
 80009e4:	4619      	mov	r1, r3
 80009e6:	481c      	ldr	r0, [pc, #112]	@ (8000a58 <MX_ADC1_Init+0x17c>)
 80009e8:	f001 fea0 	bl	800272c <HAL_ADC_ConfigChannel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80009f2:	f000 fa3d 	bl	8000e70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80009f6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <MX_ADC1_Init+0x190>)
 80009f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80009fa:	2318      	movs	r3, #24
 80009fc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009fe:	463b      	mov	r3, r7
 8000a00:	4619      	mov	r1, r3
 8000a02:	4815      	ldr	r0, [pc, #84]	@ (8000a58 <MX_ADC1_Init+0x17c>)
 8000a04:	f001 fe92 	bl	800272c <HAL_ADC_ConfigChannel>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8000a0e:	f000 fa2f 	bl	8000e70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a12:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <MX_ADC1_Init+0x194>)
 8000a14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000a16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480d      	ldr	r0, [pc, #52]	@ (8000a58 <MX_ADC1_Init+0x17c>)
 8000a22:	f001 fe83 	bl	800272c <HAL_ADC_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000a2c:	f000 fa20 	bl	8000e70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a30:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <MX_ADC1_Init+0x198>)
 8000a32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000a34:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000a38:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4806      	ldr	r0, [pc, #24]	@ (8000a58 <MX_ADC1_Init+0x17c>)
 8000a40:	f001 fe74 	bl	800272c <HAL_ADC_ConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 8000a4a:	f000 fa11 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	3730      	adds	r7, #48	@ 0x30
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	24000164 	.word	0x24000164
 8000a5c:	40022000 	.word	0x40022000
 8000a60:	0c900008 	.word	0x0c900008
 8000a64:	10c00010 	.word	0x10c00010
 8000a68:	14f00020 	.word	0x14f00020
 8000a6c:	1d500080 	.word	0x1d500080
 8000a70:	21800100 	.word	0x21800100
 8000a74:	25b00200 	.word	0x25b00200

08000a78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a7c:	4b27      	ldr	r3, [pc, #156]	@ (8000b1c <MX_SPI1_Init+0xa4>)
 8000a7e:	4a28      	ldr	r2, [pc, #160]	@ (8000b20 <MX_SPI1_Init+0xa8>)
 8000a80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a82:	4b26      	ldr	r3, [pc, #152]	@ (8000b1c <MX_SPI1_Init+0xa4>)
 8000a84:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000a88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a8a:	4b24      	ldr	r3, [pc, #144]	@ (8000b1c <MX_SPI1_Init+0xa4>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a90:	4b22      	ldr	r3, [pc, #136]	@ (8000b1c <MX_SPI1_Init+0xa4>)
 8000a92:	2207      	movs	r2, #7
 8000a94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a96:	4b21      	ldr	r3, [pc, #132]	@ (8000b1c <MX_SPI1_Init+0xa4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b1c <MX_SPI1_Init+0xa4>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b1c <MX_SPI1_Init+0xa4>)
 8000aa4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000aa8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b1c <MX_SPI1_Init+0xa4>)
 8000aac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ab0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b1c <MX_SPI1_Init+0xa4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ab8:	4b18      	ldr	r3, [pc, #96]	@ (8000b1c <MX_SPI1_Init+0xa4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000abe:	4b17      	ldr	r3, [pc, #92]	@ (8000b1c <MX_SPI1_Init+0xa4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ac4:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <MX_SPI1_Init+0xa4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000aca:	4b14      	ldr	r3, [pc, #80]	@ (8000b1c <MX_SPI1_Init+0xa4>)
 8000acc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ad0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ad2:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <MX_SPI1_Init+0xa4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ad8:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <MX_SPI1_Init+0xa4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ade:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <MX_SPI1_Init+0xa4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b1c <MX_SPI1_Init+0xa4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000aea:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <MX_SPI1_Init+0xa4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	@ (8000b1c <MX_SPI1_Init+0xa4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <MX_SPI1_Init+0xa4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000afc:	4b07      	ldr	r3, [pc, #28]	@ (8000b1c <MX_SPI1_Init+0xa4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <MX_SPI1_Init+0xa4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b08:	4804      	ldr	r0, [pc, #16]	@ (8000b1c <MX_SPI1_Init+0xa4>)
 8000b0a:	f009 fb83 	bl	800a214 <HAL_SPI_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000b14:	f000 f9ac 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	2400024c 	.word	0x2400024c
 8000b20:	40013000 	.word	0x40013000

08000b24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b44:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc4 <MX_TIM3_Init+0xa0>)
 8000b46:	4a20      	ldr	r2, [pc, #128]	@ (8000bc8 <MX_TIM3_Init+0xa4>)
 8000b48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc4 <MX_TIM3_Init+0xa0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b50:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc4 <MX_TIM3_Init+0xa0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b56:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc4 <MX_TIM3_Init+0xa0>)
 8000b58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5e:	4b19      	ldr	r3, [pc, #100]	@ (8000bc4 <MX_TIM3_Init+0xa0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b64:	4b17      	ldr	r3, [pc, #92]	@ (8000bc4 <MX_TIM3_Init+0xa0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b6a:	4816      	ldr	r0, [pc, #88]	@ (8000bc4 <MX_TIM3_Init+0xa0>)
 8000b6c:	f00a fa29 	bl	800afc2 <HAL_TIM_Base_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000b76:	f000 f97b 	bl	8000e70 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000b7e:	2350      	movs	r3, #80	@ 0x50
 8000b80:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480c      	ldr	r0, [pc, #48]	@ (8000bc4 <MX_TIM3_Init+0xa0>)
 8000b92:	f00a fc78 	bl	800b486 <HAL_TIM_SlaveConfigSynchro>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000b9c:	f000 f968 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ba8:	463b      	mov	r3, r7
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <MX_TIM3_Init+0xa0>)
 8000bae:	f00a fef1 	bl	800b994 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000bb8:	f000 f95a 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	3720      	adds	r7, #32
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	2400034c 	.word	0x2400034c
 8000bc8:	40000400 	.word	0x40000400

08000bcc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be2:	463b      	mov	r3, r7
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bec:	4b1f      	ldr	r3, [pc, #124]	@ (8000c6c <MX_TIM4_Init+0xa0>)
 8000bee:	4a20      	ldr	r2, [pc, #128]	@ (8000c70 <MX_TIM4_Init+0xa4>)
 8000bf0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c6c <MX_TIM4_Init+0xa0>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c6c <MX_TIM4_Init+0xa0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8000c6c <MX_TIM4_Init+0xa0>)
 8000c00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c06:	4b19      	ldr	r3, [pc, #100]	@ (8000c6c <MX_TIM4_Init+0xa0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0c:	4b17      	ldr	r3, [pc, #92]	@ (8000c6c <MX_TIM4_Init+0xa0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c12:	4816      	ldr	r0, [pc, #88]	@ (8000c6c <MX_TIM4_Init+0xa0>)
 8000c14:	f00a f9d5 	bl	800afc2 <HAL_TIM_Base_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000c1e:	f000 f927 	bl	8000e70 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000c22:	2307      	movs	r3, #7
 8000c24:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000c26:	2350      	movs	r3, #80	@ 0x50
 8000c28:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	4619      	mov	r1, r3
 8000c38:	480c      	ldr	r0, [pc, #48]	@ (8000c6c <MX_TIM4_Init+0xa0>)
 8000c3a:	f00a fc24 	bl	800b486 <HAL_TIM_SlaveConfigSynchro>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000c44:	f000 f914 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c50:	463b      	mov	r3, r7
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <MX_TIM4_Init+0xa0>)
 8000c56:	f00a fe9d 	bl	800b994 <HAL_TIMEx_MasterConfigSynchronization>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000c60:	f000 f906 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	3720      	adds	r7, #32
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	24000398 	.word	0x24000398
 8000c70:	40000800 	.word	0x40000800

08000c74 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c84:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <MX_TIM6_Init+0x68>)
 8000c86:	4a16      	ldr	r2, [pc, #88]	@ (8000ce0 <MX_TIM6_Init+0x6c>)
 8000c88:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64000-1;
 8000c8a:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <MX_TIM6_Init+0x68>)
 8000c8c:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000c90:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c92:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <MX_TIM6_Init+0x68>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8000c98:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <MX_TIM6_Init+0x68>)
 8000c9a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c9e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <MX_TIM6_Init+0x68>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ca6:	480d      	ldr	r0, [pc, #52]	@ (8000cdc <MX_TIM6_Init+0x68>)
 8000ca8:	f00a f98b 	bl	800afc2 <HAL_TIM_Base_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000cb2:	f000 f8dd 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4806      	ldr	r0, [pc, #24]	@ (8000cdc <MX_TIM6_Init+0x68>)
 8000cc4:	f00a fe66 	bl	800b994 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000cce:	f000 f8cf 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	240003e4 	.word	0x240003e4
 8000ce0:	40001000 	.word	0x40001000

08000ce4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cea:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <MX_DMA_Init+0x4c>)
 8000cec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cf0:	4a0f      	ldr	r2, [pc, #60]	@ (8000d30 <MX_DMA_Init+0x4c>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000d30 <MX_DMA_Init+0x4c>)
 8000cfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	200c      	movs	r0, #12
 8000d0e:	f002 fe5e 	bl	80039ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d12:	200c      	movs	r0, #12
 8000d14:	f002 fe75 	bl	8003a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	200d      	movs	r0, #13
 8000d1e:	f002 fe56 	bl	80039ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d22:	200d      	movs	r0, #13
 8000d24:	f002 fe6d 	bl	8003a02 <HAL_NVIC_EnableIRQ>

}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	58024400 	.word	0x58024400

08000d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	@ 0x28
 8000d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d4a:	4b31      	ldr	r3, [pc, #196]	@ (8000e10 <MX_GPIO_Init+0xdc>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d50:	4a2f      	ldr	r2, [pc, #188]	@ (8000e10 <MX_GPIO_Init+0xdc>)
 8000d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000e10 <MX_GPIO_Init+0xdc>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d68:	4b29      	ldr	r3, [pc, #164]	@ (8000e10 <MX_GPIO_Init+0xdc>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6e:	4a28      	ldr	r2, [pc, #160]	@ (8000e10 <MX_GPIO_Init+0xdc>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d78:	4b25      	ldr	r3, [pc, #148]	@ (8000e10 <MX_GPIO_Init+0xdc>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d86:	4b22      	ldr	r3, [pc, #136]	@ (8000e10 <MX_GPIO_Init+0xdc>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8c:	4a20      	ldr	r2, [pc, #128]	@ (8000e10 <MX_GPIO_Init+0xdc>)
 8000d8e:	f043 0304 	orr.w	r3, r3, #4
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d96:	4b1e      	ldr	r3, [pc, #120]	@ (8000e10 <MX_GPIO_Init+0xdc>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <MX_GPIO_Init+0xdc>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000daa:	4a19      	ldr	r2, [pc, #100]	@ (8000e10 <MX_GPIO_Init+0xdc>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db4:	4b16      	ldr	r3, [pc, #88]	@ (8000e10 <MX_GPIO_Init+0xdc>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc2:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <MX_GPIO_Init+0xdc>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc8:	4a11      	ldr	r2, [pc, #68]	@ (8000e10 <MX_GPIO_Init+0xdc>)
 8000dca:	f043 0308 	orr.w	r3, r3, #8
 8000dce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <MX_GPIO_Init+0xdc>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd8:	f003 0308 	and.w	r3, r3, #8
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2108      	movs	r1, #8
 8000de4:	480b      	ldr	r0, [pc, #44]	@ (8000e14 <MX_GPIO_Init+0xe0>)
 8000de6:	f005 fe8b 	bl	8006b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dea:	2308      	movs	r3, #8
 8000dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4804      	ldr	r0, [pc, #16]	@ (8000e14 <MX_GPIO_Init+0xe0>)
 8000e02:	f005 fcd5 	bl	80067b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e06:	bf00      	nop
 8000e08:	3728      	adds	r7, #40	@ 0x28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	58024400 	.word	0x58024400
 8000e14:	58020000 	.word	0x58020000

08000e18 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e1e:	463b      	mov	r3, r7
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e2a:	f002 fe05 	bl	8003a38 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e3a:	231f      	movs	r3, #31
 8000e3c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000e3e:	2387      	movs	r3, #135	@ 0x87
 8000e40:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000e46:	2300      	movs	r3, #0
 8000e48:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f002 fe23 	bl	8003aa8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e62:	2004      	movs	r0, #4
 8000e64:	f002 fe00 	bl	8003a68 <HAL_MPU_Enable>

}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <Error_Handler+0x8>

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <HAL_MspInit+0x30>)
 8000e84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e88:	4a08      	ldr	r2, [pc, #32]	@ (8000eac <HAL_MspInit+0x30>)
 8000e8a:	f043 0302 	orr.w	r3, r3, #2
 8000e8e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e92:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <HAL_MspInit+0x30>)
 8000e94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e98:	f003 0302 	and.w	r3, r3, #2
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	58024400 	.word	0x58024400

08000eb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b0ba      	sub	sp, #232	@ 0xe8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec8:	f107 0318 	add.w	r3, r7, #24
 8000ecc:	22b8      	movs	r2, #184	@ 0xb8
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f00a fe19 	bl	800bb08 <memset>
  if(hadc->Instance==ADC1)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a66      	ldr	r2, [pc, #408]	@ (8001074 <HAL_ADC_MspInit+0x1c4>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	f040 80c4 	bne.w	800106a <HAL_ADC_MspInit+0x1ba>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ee2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000ee6:	f04f 0300 	mov.w	r3, #0
 8000eea:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000eee:	2304      	movs	r3, #4
 8000ef0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000ef2:	230c      	movs	r3, #12
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000ef6:	2305      	movs	r3, #5
 8000ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000efa:	2302      	movs	r3, #2
 8000efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f02:	23c0      	movs	r3, #192	@ 0xc0
 8000f04:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f14:	f107 0318 	add.w	r3, r7, #24
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f006 fd95 	bl	8007a48 <HAL_RCCEx_PeriphCLKConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000f24:	f7ff ffa4 	bl	8000e70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f28:	4b53      	ldr	r3, [pc, #332]	@ (8001078 <HAL_ADC_MspInit+0x1c8>)
 8000f2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f2e:	4a52      	ldr	r2, [pc, #328]	@ (8001078 <HAL_ADC_MspInit+0x1c8>)
 8000f30:	f043 0320 	orr.w	r3, r3, #32
 8000f34:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f38:	4b4f      	ldr	r3, [pc, #316]	@ (8001078 <HAL_ADC_MspInit+0x1c8>)
 8000f3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f3e:	f003 0320 	and.w	r3, r3, #32
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b4c      	ldr	r3, [pc, #304]	@ (8001078 <HAL_ADC_MspInit+0x1c8>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4c:	4a4a      	ldr	r2, [pc, #296]	@ (8001078 <HAL_ADC_MspInit+0x1c8>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f56:	4b48      	ldr	r3, [pc, #288]	@ (8001078 <HAL_ADC_MspInit+0x1c8>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f64:	4b44      	ldr	r3, [pc, #272]	@ (8001078 <HAL_ADC_MspInit+0x1c8>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6a:	4a43      	ldr	r2, [pc, #268]	@ (8001078 <HAL_ADC_MspInit+0x1c8>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f74:	4b40      	ldr	r3, [pc, #256]	@ (8001078 <HAL_ADC_MspInit+0x1c8>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7a:	f003 0304 	and.w	r3, r3, #4
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	4b3d      	ldr	r3, [pc, #244]	@ (8001078 <HAL_ADC_MspInit+0x1c8>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f88:	4a3b      	ldr	r2, [pc, #236]	@ (8001078 <HAL_ADC_MspInit+0x1c8>)
 8000f8a:	f043 0302 	orr.w	r3, r3, #2
 8000f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f92:	4b39      	ldr	r3, [pc, #228]	@ (8001078 <HAL_ADC_MspInit+0x1c8>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fa0:	23c0      	movs	r3, #192	@ 0xc0
 8000fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4830      	ldr	r0, [pc, #192]	@ (800107c <HAL_ADC_MspInit+0x1cc>)
 8000fba:	f005 fbf9 	bl	80067b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000fbe:	2330      	movs	r3, #48	@ 0x30
 8000fc0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	482a      	ldr	r0, [pc, #168]	@ (8001080 <HAL_ADC_MspInit+0x1d0>)
 8000fd8:	f005 fbea 	bl	80067b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fee:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4823      	ldr	r0, [pc, #140]	@ (8001084 <HAL_ADC_MspInit+0x1d4>)
 8000ff6:	f005 fbdb 	bl	80067b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream2;
 8000ffa:	4b23      	ldr	r3, [pc, #140]	@ (8001088 <HAL_ADC_MspInit+0x1d8>)
 8000ffc:	4a23      	ldr	r2, [pc, #140]	@ (800108c <HAL_ADC_MspInit+0x1dc>)
 8000ffe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001000:	4b21      	ldr	r3, [pc, #132]	@ (8001088 <HAL_ADC_MspInit+0x1d8>)
 8001002:	2209      	movs	r2, #9
 8001004:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001006:	4b20      	ldr	r3, [pc, #128]	@ (8001088 <HAL_ADC_MspInit+0x1d8>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800100c:	4b1e      	ldr	r3, [pc, #120]	@ (8001088 <HAL_ADC_MspInit+0x1d8>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001012:	4b1d      	ldr	r3, [pc, #116]	@ (8001088 <HAL_ADC_MspInit+0x1d8>)
 8001014:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001018:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800101a:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <HAL_ADC_MspInit+0x1d8>)
 800101c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001020:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001022:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <HAL_ADC_MspInit+0x1d8>)
 8001024:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001028:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800102a:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <HAL_ADC_MspInit+0x1d8>)
 800102c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001030:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001032:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <HAL_ADC_MspInit+0x1d8>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001038:	4b13      	ldr	r3, [pc, #76]	@ (8001088 <HAL_ADC_MspInit+0x1d8>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800103e:	4812      	ldr	r0, [pc, #72]	@ (8001088 <HAL_ADC_MspInit+0x1d8>)
 8001040:	f002 fd72 	bl	8003b28 <HAL_DMA_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_ADC_MspInit+0x19e>
    {
      Error_Handler();
 800104a:	f7ff ff11 	bl	8000e70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a0d      	ldr	r2, [pc, #52]	@ (8001088 <HAL_ADC_MspInit+0x1d8>)
 8001052:	659a      	str	r2, [r3, #88]	@ 0x58
 8001054:	4a0c      	ldr	r2, [pc, #48]	@ (8001088 <HAL_ADC_MspInit+0x1d8>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2100      	movs	r1, #0
 800105e:	2012      	movs	r0, #18
 8001060:	f002 fcb5 	bl	80039ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001064:	2012      	movs	r0, #18
 8001066:	f002 fccc 	bl	8003a02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800106a:	bf00      	nop
 800106c:	37e8      	adds	r7, #232	@ 0xe8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40022000 	.word	0x40022000
 8001078:	58024400 	.word	0x58024400
 800107c:	58020000 	.word	0x58020000
 8001080:	58020800 	.word	0x58020800
 8001084:	58020400 	.word	0x58020400
 8001088:	240001d4 	.word	0x240001d4
 800108c:	40020040 	.word	0x40020040

08001090 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b0ba      	sub	sp, #232	@ 0xe8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a8:	f107 0318 	add.w	r3, r7, #24
 80010ac:	22b8      	movs	r2, #184	@ 0xb8
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f00a fd29 	bl	800bb08 <memset>
  if(hspi->Instance==SPI1)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a65      	ldr	r2, [pc, #404]	@ (8001250 <HAL_SPI_MspInit+0x1c0>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	f040 80c2 	bne.w	8001246 <HAL_SPI_MspInit+0x1b6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010c6:	f04f 0300 	mov.w	r3, #0
 80010ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d2:	f107 0318 	add.w	r3, r7, #24
 80010d6:	4618      	mov	r0, r3
 80010d8:	f006 fcb6 	bl	8007a48 <HAL_RCCEx_PeriphCLKConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80010e2:	f7ff fec5 	bl	8000e70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001254 <HAL_SPI_MspInit+0x1c4>)
 80010e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010ec:	4a59      	ldr	r2, [pc, #356]	@ (8001254 <HAL_SPI_MspInit+0x1c4>)
 80010ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80010f6:	4b57      	ldr	r3, [pc, #348]	@ (8001254 <HAL_SPI_MspInit+0x1c4>)
 80010f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b53      	ldr	r3, [pc, #332]	@ (8001254 <HAL_SPI_MspInit+0x1c4>)
 8001106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110a:	4a52      	ldr	r2, [pc, #328]	@ (8001254 <HAL_SPI_MspInit+0x1c4>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001114:	4b4f      	ldr	r3, [pc, #316]	@ (8001254 <HAL_SPI_MspInit+0x1c4>)
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001122:	4b4c      	ldr	r3, [pc, #304]	@ (8001254 <HAL_SPI_MspInit+0x1c4>)
 8001124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001128:	4a4a      	ldr	r2, [pc, #296]	@ (8001254 <HAL_SPI_MspInit+0x1c4>)
 800112a:	f043 0308 	orr.w	r3, r3, #8
 800112e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001132:	4b48      	ldr	r3, [pc, #288]	@ (8001254 <HAL_SPI_MspInit+0x1c4>)
 8001134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001138:	f003 0308 	and.w	r3, r3, #8
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001140:	4b44      	ldr	r3, [pc, #272]	@ (8001254 <HAL_SPI_MspInit+0x1c4>)
 8001142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001146:	4a43      	ldr	r2, [pc, #268]	@ (8001254 <HAL_SPI_MspInit+0x1c4>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001150:	4b40      	ldr	r3, [pc, #256]	@ (8001254 <HAL_SPI_MspInit+0x1c4>)
 8001152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PB4(NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800115e:	2320      	movs	r3, #32
 8001160:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001176:	2305      	movs	r3, #5
 8001178:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001180:	4619      	mov	r1, r3
 8001182:	4835      	ldr	r0, [pc, #212]	@ (8001258 <HAL_SPI_MspInit+0x1c8>)
 8001184:	f005 fb14 	bl	80067b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001188:	2380      	movs	r3, #128	@ 0x80
 800118a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011a0:	2305      	movs	r3, #5
 80011a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011aa:	4619      	mov	r1, r3
 80011ac:	482b      	ldr	r0, [pc, #172]	@ (800125c <HAL_SPI_MspInit+0x1cc>)
 80011ae:	f005 faff 	bl	80067b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011b2:	2310      	movs	r3, #16
 80011b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ca:	2305      	movs	r3, #5
 80011cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011d4:	4619      	mov	r1, r3
 80011d6:	4822      	ldr	r0, [pc, #136]	@ (8001260 <HAL_SPI_MspInit+0x1d0>)
 80011d8:	f005 faea 	bl	80067b0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 80011dc:	4b21      	ldr	r3, [pc, #132]	@ (8001264 <HAL_SPI_MspInit+0x1d4>)
 80011de:	4a22      	ldr	r2, [pc, #136]	@ (8001268 <HAL_SPI_MspInit+0x1d8>)
 80011e0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80011e2:	4b20      	ldr	r3, [pc, #128]	@ (8001264 <HAL_SPI_MspInit+0x1d4>)
 80011e4:	2226      	movs	r2, #38	@ 0x26
 80011e6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001264 <HAL_SPI_MspInit+0x1d4>)
 80011ea:	2240      	movs	r2, #64	@ 0x40
 80011ec:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001264 <HAL_SPI_MspInit+0x1d4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001264 <HAL_SPI_MspInit+0x1d4>)
 80011f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011fa:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011fc:	4b19      	ldr	r3, [pc, #100]	@ (8001264 <HAL_SPI_MspInit+0x1d4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001202:	4b18      	ldr	r3, [pc, #96]	@ (8001264 <HAL_SPI_MspInit+0x1d4>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001208:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <HAL_SPI_MspInit+0x1d4>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800120e:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <HAL_SPI_MspInit+0x1d4>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001214:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <HAL_SPI_MspInit+0x1d4>)
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800121a:	4812      	ldr	r0, [pc, #72]	@ (8001264 <HAL_SPI_MspInit+0x1d4>)
 800121c:	f002 fc84 	bl	8003b28 <HAL_DMA_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_SPI_MspInit+0x19a>
    {
      Error_Handler();
 8001226:	f7ff fe23 	bl	8000e70 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a0d      	ldr	r2, [pc, #52]	@ (8001264 <HAL_SPI_MspInit+0x1d4>)
 800122e:	679a      	str	r2, [r3, #120]	@ 0x78
 8001230:	4a0c      	ldr	r2, [pc, #48]	@ (8001264 <HAL_SPI_MspInit+0x1d4>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	2023      	movs	r0, #35	@ 0x23
 800123c:	f002 fbc7 	bl	80039ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001240:	2023      	movs	r0, #35	@ 0x23
 8001242:	f002 fbde 	bl	8003a02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001246:	bf00      	nop
 8001248:	37e8      	adds	r7, #232	@ 0xe8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40013000 	.word	0x40013000
 8001254:	58024400 	.word	0x58024400
 8001258:	58020000 	.word	0x58020000
 800125c:	58020c00 	.word	0x58020c00
 8001260:	58020400 	.word	0x58020400
 8001264:	240002d4 	.word	0x240002d4
 8001268:	40020028 	.word	0x40020028

0800126c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08c      	sub	sp, #48	@ 0x30
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a43      	ldr	r2, [pc, #268]	@ (8001398 <HAL_TIM_Base_MspInit+0x12c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d12e      	bne.n	80012ec <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800128e:	4b43      	ldr	r3, [pc, #268]	@ (800139c <HAL_TIM_Base_MspInit+0x130>)
 8001290:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001294:	4a41      	ldr	r2, [pc, #260]	@ (800139c <HAL_TIM_Base_MspInit+0x130>)
 8001296:	f043 0302 	orr.w	r3, r3, #2
 800129a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800129e:	4b3f      	ldr	r3, [pc, #252]	@ (800139c <HAL_TIM_Base_MspInit+0x130>)
 80012a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	61bb      	str	r3, [r7, #24]
 80012aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ac:	4b3b      	ldr	r3, [pc, #236]	@ (800139c <HAL_TIM_Base_MspInit+0x130>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b2:	4a3a      	ldr	r2, [pc, #232]	@ (800139c <HAL_TIM_Base_MspInit+0x130>)
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012bc:	4b37      	ldr	r3, [pc, #220]	@ (800139c <HAL_TIM_Base_MspInit+0x130>)
 80012be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012ca:	2340      	movs	r3, #64	@ 0x40
 80012cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012da:	2302      	movs	r3, #2
 80012dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	4619      	mov	r1, r3
 80012e4:	482e      	ldr	r0, [pc, #184]	@ (80013a0 <HAL_TIM_Base_MspInit+0x134>)
 80012e6:	f005 fa63 	bl	80067b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80012ea:	e050      	b.n	800138e <HAL_TIM_Base_MspInit+0x122>
  else if(htim_base->Instance==TIM4)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a2c      	ldr	r2, [pc, #176]	@ (80013a4 <HAL_TIM_Base_MspInit+0x138>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d12f      	bne.n	8001356 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012f6:	4b29      	ldr	r3, [pc, #164]	@ (800139c <HAL_TIM_Base_MspInit+0x130>)
 80012f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012fc:	4a27      	ldr	r2, [pc, #156]	@ (800139c <HAL_TIM_Base_MspInit+0x130>)
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001306:	4b25      	ldr	r3, [pc, #148]	@ (800139c <HAL_TIM_Base_MspInit+0x130>)
 8001308:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001314:	4b21      	ldr	r3, [pc, #132]	@ (800139c <HAL_TIM_Base_MspInit+0x130>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131a:	4a20      	ldr	r2, [pc, #128]	@ (800139c <HAL_TIM_Base_MspInit+0x130>)
 800131c:	f043 0308 	orr.w	r3, r3, #8
 8001320:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001324:	4b1d      	ldr	r3, [pc, #116]	@ (800139c <HAL_TIM_Base_MspInit+0x130>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001332:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001344:	2302      	movs	r3, #2
 8001346:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	4816      	ldr	r0, [pc, #88]	@ (80013a8 <HAL_TIM_Base_MspInit+0x13c>)
 8001350:	f005 fa2e 	bl	80067b0 <HAL_GPIO_Init>
}
 8001354:	e01b      	b.n	800138e <HAL_TIM_Base_MspInit+0x122>
  else if(htim_base->Instance==TIM6)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a14      	ldr	r2, [pc, #80]	@ (80013ac <HAL_TIM_Base_MspInit+0x140>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d116      	bne.n	800138e <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001360:	4b0e      	ldr	r3, [pc, #56]	@ (800139c <HAL_TIM_Base_MspInit+0x130>)
 8001362:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001366:	4a0d      	ldr	r2, [pc, #52]	@ (800139c <HAL_TIM_Base_MspInit+0x130>)
 8001368:	f043 0310 	orr.w	r3, r3, #16
 800136c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001370:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <HAL_TIM_Base_MspInit+0x130>)
 8001372:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	2036      	movs	r0, #54	@ 0x36
 8001384:	f002 fb23 	bl	80039ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001388:	2036      	movs	r0, #54	@ 0x36
 800138a:	f002 fb3a 	bl	8003a02 <HAL_NVIC_EnableIRQ>
}
 800138e:	bf00      	nop
 8001390:	3730      	adds	r7, #48	@ 0x30
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40000400 	.word	0x40000400
 800139c:	58024400 	.word	0x58024400
 80013a0:	58020800 	.word	0x58020800
 80013a4:	40000800 	.word	0x40000800
 80013a8:	58020c00 	.word	0x58020c00
 80013ac:	40001000 	.word	0x40001000

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <NMI_Handler+0x4>

080013b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <HardFault_Handler+0x4>

080013c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <MemManage_Handler+0x4>

080013c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001406:	f000 f949 	bl	800169c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001414:	4802      	ldr	r0, [pc, #8]	@ (8001420 <DMA1_Stream1_IRQHandler+0x10>)
 8001416:	f003 fead 	bl	8005174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	240002d4 	.word	0x240002d4

08001424 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001428:	4802      	ldr	r0, [pc, #8]	@ (8001434 <DMA1_Stream2_IRQHandler+0x10>)
 800142a:	f003 fea3 	bl	8005174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	240001d4 	.word	0x240001d4

08001438 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800143c:	4802      	ldr	r0, [pc, #8]	@ (8001448 <ADC_IRQHandler+0x10>)
 800143e:	f000 ff1d 	bl	800227c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	24000164 	.word	0x24000164

0800144c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001450:	4802      	ldr	r0, [pc, #8]	@ (800145c <SPI1_IRQHandler+0x10>)
 8001452:	f009 fa33 	bl	800a8bc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2400024c 	.word	0x2400024c

08001460 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001464:	4802      	ldr	r0, [pc, #8]	@ (8001470 <TIM6_DAC_IRQHandler+0x10>)
 8001466:	f009 ff07 	bl	800b278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	240003e4 	.word	0x240003e4

08001474 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001478:	4b32      	ldr	r3, [pc, #200]	@ (8001544 <SystemInit+0xd0>)
 800147a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800147e:	4a31      	ldr	r2, [pc, #196]	@ (8001544 <SystemInit+0xd0>)
 8001480:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001484:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001488:	4b2f      	ldr	r3, [pc, #188]	@ (8001548 <SystemInit+0xd4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 030f 	and.w	r3, r3, #15
 8001490:	2b06      	cmp	r3, #6
 8001492:	d807      	bhi.n	80014a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001494:	4b2c      	ldr	r3, [pc, #176]	@ (8001548 <SystemInit+0xd4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f023 030f 	bic.w	r3, r3, #15
 800149c:	4a2a      	ldr	r2, [pc, #168]	@ (8001548 <SystemInit+0xd4>)
 800149e:	f043 0307 	orr.w	r3, r3, #7
 80014a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014a4:	4b29      	ldr	r3, [pc, #164]	@ (800154c <SystemInit+0xd8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a28      	ldr	r2, [pc, #160]	@ (800154c <SystemInit+0xd8>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014b0:	4b26      	ldr	r3, [pc, #152]	@ (800154c <SystemInit+0xd8>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014b6:	4b25      	ldr	r3, [pc, #148]	@ (800154c <SystemInit+0xd8>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4924      	ldr	r1, [pc, #144]	@ (800154c <SystemInit+0xd8>)
 80014bc:	4b24      	ldr	r3, [pc, #144]	@ (8001550 <SystemInit+0xdc>)
 80014be:	4013      	ands	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014c2:	4b21      	ldr	r3, [pc, #132]	@ (8001548 <SystemInit+0xd4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d007      	beq.n	80014de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <SystemInit+0xd4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 030f 	bic.w	r3, r3, #15
 80014d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001548 <SystemInit+0xd4>)
 80014d8:	f043 0307 	orr.w	r3, r3, #7
 80014dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014de:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <SystemInit+0xd8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014e4:	4b19      	ldr	r3, [pc, #100]	@ (800154c <SystemInit+0xd8>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014ea:	4b18      	ldr	r3, [pc, #96]	@ (800154c <SystemInit+0xd8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014f0:	4b16      	ldr	r3, [pc, #88]	@ (800154c <SystemInit+0xd8>)
 80014f2:	4a18      	ldr	r2, [pc, #96]	@ (8001554 <SystemInit+0xe0>)
 80014f4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014f6:	4b15      	ldr	r3, [pc, #84]	@ (800154c <SystemInit+0xd8>)
 80014f8:	4a17      	ldr	r2, [pc, #92]	@ (8001558 <SystemInit+0xe4>)
 80014fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014fc:	4b13      	ldr	r3, [pc, #76]	@ (800154c <SystemInit+0xd8>)
 80014fe:	4a17      	ldr	r2, [pc, #92]	@ (800155c <SystemInit+0xe8>)
 8001500:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001502:	4b12      	ldr	r3, [pc, #72]	@ (800154c <SystemInit+0xd8>)
 8001504:	2200      	movs	r2, #0
 8001506:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001508:	4b10      	ldr	r3, [pc, #64]	@ (800154c <SystemInit+0xd8>)
 800150a:	4a14      	ldr	r2, [pc, #80]	@ (800155c <SystemInit+0xe8>)
 800150c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800150e:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <SystemInit+0xd8>)
 8001510:	2200      	movs	r2, #0
 8001512:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001514:	4b0d      	ldr	r3, [pc, #52]	@ (800154c <SystemInit+0xd8>)
 8001516:	4a11      	ldr	r2, [pc, #68]	@ (800155c <SystemInit+0xe8>)
 8001518:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800151a:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <SystemInit+0xd8>)
 800151c:	2200      	movs	r2, #0
 800151e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001520:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <SystemInit+0xd8>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a09      	ldr	r2, [pc, #36]	@ (800154c <SystemInit+0xd8>)
 8001526:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800152a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800152c:	4b07      	ldr	r3, [pc, #28]	@ (800154c <SystemInit+0xd8>)
 800152e:	2200      	movs	r2, #0
 8001530:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001532:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <SystemInit+0xec>)
 8001534:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001538:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00
 8001548:	52002000 	.word	0x52002000
 800154c:	58024400 	.word	0x58024400
 8001550:	eaf6ed7f 	.word	0xeaf6ed7f
 8001554:	02020200 	.word	0x02020200
 8001558:	01ff0000 	.word	0x01ff0000
 800155c:	01010280 	.word	0x01010280
 8001560:	52004000 	.word	0x52004000

08001564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001564:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800159c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001568:	f7ff ff84 	bl	8001474 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800156c:	480c      	ldr	r0, [pc, #48]	@ (80015a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800156e:	490d      	ldr	r1, [pc, #52]	@ (80015a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001570:	4a0d      	ldr	r2, [pc, #52]	@ (80015a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001574:	e002      	b.n	800157c <LoopCopyDataInit>

08001576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157a:	3304      	adds	r3, #4

0800157c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800157c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001580:	d3f9      	bcc.n	8001576 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001582:	4a0a      	ldr	r2, [pc, #40]	@ (80015ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001584:	4c0a      	ldr	r4, [pc, #40]	@ (80015b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001588:	e001      	b.n	800158e <LoopFillZerobss>

0800158a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800158c:	3204      	adds	r2, #4

0800158e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001590:	d3fb      	bcc.n	800158a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001592:	f00a fac1 	bl	800bb18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001596:	f7ff f8ef 	bl	8000778 <main>
  bx  lr
 800159a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800159c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80015a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015a4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80015a8:	0800bb98 	.word	0x0800bb98
  ldr r2, =_sbss
 80015ac:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 80015b0:	24000434 	.word	0x24000434

080015b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC3_IRQHandler>
	...

080015b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015be:	2003      	movs	r0, #3
 80015c0:	f002 f9fa 	bl	80039b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015c4:	f006 f880 	bl	80076c8 <HAL_RCC_GetSysClockFreq>
 80015c8:	4602      	mov	r2, r0
 80015ca:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <HAL_Init+0x68>)
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	0a1b      	lsrs	r3, r3, #8
 80015d0:	f003 030f 	and.w	r3, r3, #15
 80015d4:	4913      	ldr	r1, [pc, #76]	@ (8001624 <HAL_Init+0x6c>)
 80015d6:	5ccb      	ldrb	r3, [r1, r3]
 80015d8:	f003 031f 	and.w	r3, r3, #31
 80015dc:	fa22 f303 	lsr.w	r3, r2, r3
 80015e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <HAL_Init+0x68>)
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001624 <HAL_Init+0x6c>)
 80015ec:	5cd3      	ldrb	r3, [r2, r3]
 80015ee:	f003 031f 	and.w	r3, r3, #31
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	fa22 f303 	lsr.w	r3, r2, r3
 80015f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001628 <HAL_Init+0x70>)
 80015fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015fc:	4a0b      	ldr	r2, [pc, #44]	@ (800162c <HAL_Init+0x74>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001602:	200f      	movs	r0, #15
 8001604:	f000 f814 	bl	8001630 <HAL_InitTick>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e002      	b.n	8001618 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001612:	f7ff fc33 	bl	8000e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	58024400 	.word	0x58024400
 8001624:	0800bb78 	.word	0x0800bb78
 8001628:	24000004 	.word	0x24000004
 800162c:	24000000 	.word	0x24000000

08001630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001638:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <HAL_InitTick+0x60>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e021      	b.n	8001688 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001644:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <HAL_InitTick+0x64>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <HAL_InitTick+0x60>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001652:	fbb3 f3f1 	udiv	r3, r3, r1
 8001656:	fbb2 f3f3 	udiv	r3, r2, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f002 f9df 	bl	8003a1e <HAL_SYSTICK_Config>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e00e      	b.n	8001688 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b0f      	cmp	r3, #15
 800166e:	d80a      	bhi.n	8001686 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001670:	2200      	movs	r2, #0
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f002 f9a9 	bl	80039ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800167c:	4a06      	ldr	r2, [pc, #24]	@ (8001698 <HAL_InitTick+0x68>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	e000      	b.n	8001688 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2400000c 	.word	0x2400000c
 8001694:	24000000 	.word	0x24000000
 8001698:	24000008 	.word	0x24000008

0800169c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <HAL_IncTick+0x20>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <HAL_IncTick+0x24>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a04      	ldr	r2, [pc, #16]	@ (80016c0 <HAL_IncTick+0x24>)
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	2400000c 	.word	0x2400000c
 80016c0:	24000430 	.word	0x24000430

080016c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return uwTick;
 80016c8:	4b03      	ldr	r3, [pc, #12]	@ (80016d8 <HAL_GetTick+0x14>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	24000430 	.word	0x24000430

080016dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	609a      	str	r2, [r3, #8]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	609a      	str	r2, [r3, #8]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	3360      	adds	r3, #96	@ 0x60
 8001756:	461a      	mov	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4a10      	ldr	r2, [pc, #64]	@ (80017a4 <LL_ADC_SetOffset+0x60>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d10b      	bne.n	8001780 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	4313      	orrs	r3, r2
 8001776:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800177e:	e00b      	b.n	8001798 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	430b      	orrs	r3, r1
 8001792:	431a      	orrs	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	601a      	str	r2, [r3, #0]
}
 8001798:	bf00      	nop
 800179a:	371c      	adds	r7, #28
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	58026000 	.word	0x58026000

080017a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3360      	adds	r3, #96	@ 0x60
 80017b6:	461a      	mov	r2, r3
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	fa01 f303 	lsl.w	r3, r1, r3
 80017f4:	431a      	orrs	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	611a      	str	r2, [r3, #16]
}
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001808:	b480      	push	{r7}
 800180a:	b087      	sub	sp, #28
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4a0c      	ldr	r2, [pc, #48]	@ (8001848 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d00e      	beq.n	800183a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3360      	adds	r3, #96	@ 0x60
 8001820:	461a      	mov	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	431a      	orrs	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	601a      	str	r2, [r3, #0]
  }
}
 800183a:	bf00      	nop
 800183c:	371c      	adds	r7, #28
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	58026000 	.word	0x58026000

0800184c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800184c:	b480      	push	{r7}
 800184e:	b087      	sub	sp, #28
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4a0c      	ldr	r2, [pc, #48]	@ (800188c <LL_ADC_SetOffsetSaturation+0x40>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d10e      	bne.n	800187e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3360      	adds	r3, #96	@ 0x60
 8001864:	461a      	mov	r2, r3
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	431a      	orrs	r2, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800187e:	bf00      	nop
 8001880:	371c      	adds	r7, #28
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	58026000 	.word	0x58026000

08001890 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4a0c      	ldr	r2, [pc, #48]	@ (80018d0 <LL_ADC_SetOffsetSign+0x40>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d10e      	bne.n	80018c2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	3360      	adds	r3, #96	@ 0x60
 80018a8:	461a      	mov	r2, r3
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	431a      	orrs	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80018c2:	bf00      	nop
 80018c4:	371c      	adds	r7, #28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	58026000 	.word	0x58026000

080018d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3360      	adds	r3, #96	@ 0x60
 80018e4:	461a      	mov	r2, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001924 <LL_ADC_SetOffsetState+0x50>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d108      	bne.n	8001908 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	431a      	orrs	r2, r3
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001906:	e007      	b.n	8001918 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	431a      	orrs	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	601a      	str	r2, [r3, #0]
}
 8001918:	bf00      	nop
 800191a:	371c      	adds	r7, #28
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	58026000 	.word	0x58026000

08001928 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800193c:	2301      	movs	r3, #1
 800193e:	e000      	b.n	8001942 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800194e:	b480      	push	{r7}
 8001950:	b087      	sub	sp, #28
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	3330      	adds	r3, #48	@ 0x30
 800195e:	461a      	mov	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	0a1b      	lsrs	r3, r3, #8
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	4413      	add	r3, r2
 800196c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	f003 031f 	and.w	r3, r3, #31
 8001978:	211f      	movs	r1, #31
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	401a      	ands	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	0e9b      	lsrs	r3, r3, #26
 8001986:	f003 011f 	and.w	r1, r3, #31
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	431a      	orrs	r2, r3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800199a:	bf00      	nop
 800199c:	371c      	adds	r7, #28
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f023 0203 	bic.w	r2, r3, #3
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	60da      	str	r2, [r3, #12]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	f043 0201 	orr.w	r2, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	60da      	str	r2, [r3, #12]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a08      	ldr	r2, [pc, #32]	@ (8001a1c <LL_ADC_REG_SetDMATransferMode+0x30>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d107      	bne.n	8001a0e <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	f023 0203 	bic.w	r2, r3, #3
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	60da      	str	r2, [r3, #12]
  }
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	58026000 	.word	0x58026000

08001a20 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b087      	sub	sp, #28
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	3314      	adds	r3, #20
 8001a56:	461a      	mov	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	0e5b      	lsrs	r3, r3, #25
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	4413      	add	r3, r2
 8001a64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	0d1b      	lsrs	r3, r3, #20
 8001a6e:	f003 031f 	and.w	r3, r3, #31
 8001a72:	2107      	movs	r1, #7
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	0d1b      	lsrs	r3, r3, #20
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a90:	bf00      	nop
 8001a92:	371c      	adds	r7, #28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4a1a      	ldr	r2, [pc, #104]	@ (8001b14 <LL_ADC_SetChannelSingleDiff+0x78>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d115      	bne.n	8001adc <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001abc:	43db      	mvns	r3, r3
 8001abe:	401a      	ands	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f003 0318 	and.w	r3, r3, #24
 8001ac6:	4914      	ldr	r1, [pc, #80]	@ (8001b18 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001ac8:	40d9      	lsrs	r1, r3
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	400b      	ands	r3, r1
 8001ace:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001ada:	e014      	b.n	8001b06 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	401a      	ands	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f003 0318 	and.w	r3, r3, #24
 8001af2:	4909      	ldr	r1, [pc, #36]	@ (8001b18 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001af4:	40d9      	lsrs	r1, r3
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	400b      	ands	r3, r1
 8001afa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001afe:	431a      	orrs	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8001b06:	bf00      	nop
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	58026000 	.word	0x58026000
 8001b18:	000fffff 	.word	0x000fffff

08001b1c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 031f 	and.w	r3, r3, #31
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	4b04      	ldr	r3, [pc, #16]	@ (8001b74 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6093      	str	r3, [r2, #8]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	5fffffc0 	.word	0x5fffffc0

08001b78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b8c:	d101      	bne.n	8001b92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <LL_ADC_EnableInternalRegulator+0x24>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	6fffffc0 	.word	0x6fffffc0

08001bc8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001bdc:	d101      	bne.n	8001be2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <LL_ADC_Enable+0x24>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	7fffffc0 	.word	0x7fffffc0

08001c18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <LL_ADC_IsEnabled+0x18>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <LL_ADC_IsEnabled+0x1a>
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	4b05      	ldr	r3, [pc, #20]	@ (8001c64 <LL_ADC_REG_StartConversion+0x24>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	f043 0204 	orr.w	r2, r3, #4
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	7fffffc0 	.word	0x7fffffc0

08001c68 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d101      	bne.n	8001c80 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d101      	bne.n	8001ca6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b089      	sub	sp, #36	@ 0x24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e1ee      	b.n	80020ac <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d109      	bne.n	8001cf0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff f8e7 	bl	8000eb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff3f 	bl	8001b78 <LL_ADC_IsDeepPowerDownEnabled>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d004      	beq.n	8001d0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff25 	bl	8001b54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff ff5a 	bl	8001bc8 <LL_ADC_IsInternalRegulatorEnabled>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d114      	bne.n	8001d44 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ff3e 	bl	8001ba0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d24:	4b8e      	ldr	r3, [pc, #568]	@ (8001f60 <HAL_ADC_Init+0x2ac>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	099b      	lsrs	r3, r3, #6
 8001d2a:	4a8e      	ldr	r2, [pc, #568]	@ (8001f64 <HAL_ADC_Init+0x2b0>)
 8001d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d30:	099b      	lsrs	r3, r3, #6
 8001d32:	3301      	adds	r3, #1
 8001d34:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d36:	e002      	b.n	8001d3e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1f9      	bne.n	8001d38 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff3d 	bl	8001bc8 <LL_ADC_IsInternalRegulatorEnabled>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10d      	bne.n	8001d70 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d58:	f043 0210 	orr.w	r2, r3, #16
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d64:	f043 0201 	orr.w	r2, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff77 	bl	8001c68 <LL_ADC_REG_IsConversionOngoing>
 8001d7a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f040 8188 	bne.w	800209a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f040 8184 	bne.w	800209a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d96:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d9a:	f043 0202 	orr.w	r2, r3, #2
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ff36 	bl	8001c18 <LL_ADC_IsEnabled>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d136      	bne.n	8001e20 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a6c      	ldr	r2, [pc, #432]	@ (8001f68 <HAL_ADC_Init+0x2b4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d004      	beq.n	8001dc6 <HAL_ADC_Init+0x112>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a6a      	ldr	r2, [pc, #424]	@ (8001f6c <HAL_ADC_Init+0x2b8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d10e      	bne.n	8001de4 <HAL_ADC_Init+0x130>
 8001dc6:	4868      	ldr	r0, [pc, #416]	@ (8001f68 <HAL_ADC_Init+0x2b4>)
 8001dc8:	f7ff ff26 	bl	8001c18 <LL_ADC_IsEnabled>
 8001dcc:	4604      	mov	r4, r0
 8001dce:	4867      	ldr	r0, [pc, #412]	@ (8001f6c <HAL_ADC_Init+0x2b8>)
 8001dd0:	f7ff ff22 	bl	8001c18 <LL_ADC_IsEnabled>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4323      	orrs	r3, r4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	bf0c      	ite	eq
 8001ddc:	2301      	moveq	r3, #1
 8001dde:	2300      	movne	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	e008      	b.n	8001df6 <HAL_ADC_Init+0x142>
 8001de4:	4862      	ldr	r0, [pc, #392]	@ (8001f70 <HAL_ADC_Init+0x2bc>)
 8001de6:	f7ff ff17 	bl	8001c18 <LL_ADC_IsEnabled>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d012      	beq.n	8001e20 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a5a      	ldr	r2, [pc, #360]	@ (8001f68 <HAL_ADC_Init+0x2b4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d004      	beq.n	8001e0e <HAL_ADC_Init+0x15a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a58      	ldr	r2, [pc, #352]	@ (8001f6c <HAL_ADC_Init+0x2b8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d101      	bne.n	8001e12 <HAL_ADC_Init+0x15e>
 8001e0e:	4a59      	ldr	r2, [pc, #356]	@ (8001f74 <HAL_ADC_Init+0x2c0>)
 8001e10:	e000      	b.n	8001e14 <HAL_ADC_Init+0x160>
 8001e12:	4a59      	ldr	r2, [pc, #356]	@ (8001f78 <HAL_ADC_Init+0x2c4>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	f7ff fc5e 	bl	80016dc <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a52      	ldr	r2, [pc, #328]	@ (8001f70 <HAL_ADC_Init+0x2bc>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d129      	bne.n	8001e7e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	7e5b      	ldrb	r3, [r3, #25]
 8001e2e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001e34:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8001e3a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d013      	beq.n	8001e6c <HAL_ADC_Init+0x1b8>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	2b0c      	cmp	r3, #12
 8001e4a:	d00d      	beq.n	8001e68 <HAL_ADC_Init+0x1b4>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b1c      	cmp	r3, #28
 8001e52:	d007      	beq.n	8001e64 <HAL_ADC_Init+0x1b0>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	2b18      	cmp	r3, #24
 8001e5a:	d101      	bne.n	8001e60 <HAL_ADC_Init+0x1ac>
 8001e5c:	2318      	movs	r3, #24
 8001e5e:	e006      	b.n	8001e6e <HAL_ADC_Init+0x1ba>
 8001e60:	2300      	movs	r3, #0
 8001e62:	e004      	b.n	8001e6e <HAL_ADC_Init+0x1ba>
 8001e64:	2310      	movs	r3, #16
 8001e66:	e002      	b.n	8001e6e <HAL_ADC_Init+0x1ba>
 8001e68:	2308      	movs	r3, #8
 8001e6a:	e000      	b.n	8001e6e <HAL_ADC_Init+0x1ba>
 8001e6c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8001e6e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e76:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	e00e      	b.n	8001e9c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	7e5b      	ldrb	r3, [r3, #25]
 8001e82:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e88:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e8e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e96:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d106      	bne.n	8001eb4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	045b      	lsls	r3, r3, #17
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d009      	beq.n	8001ed0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a26      	ldr	r2, [pc, #152]	@ (8001f70 <HAL_ADC_Init+0x2bc>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d115      	bne.n	8001f06 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	4b26      	ldr	r3, [pc, #152]	@ (8001f7c <HAL_ADC_Init+0x2c8>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	69b9      	ldr	r1, [r7, #24]
 8001eea:	430b      	orrs	r3, r1
 8001eec:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	611a      	str	r2, [r3, #16]
 8001f04:	e009      	b.n	8001f1a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f80 <HAL_ADC_Init+0x2cc>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	69b9      	ldr	r1, [r7, #24]
 8001f16:	430b      	orrs	r3, r1
 8001f18:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fea2 	bl	8001c68 <LL_ADC_REG_IsConversionOngoing>
 8001f24:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff feaf 	bl	8001c8e <LL_ADC_INJ_IsConversionOngoing>
 8001f30:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f040 808e 	bne.w	8002056 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f040 808a 	bne.w	8002056 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a0a      	ldr	r2, [pc, #40]	@ (8001f70 <HAL_ADC_Init+0x2bc>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d11b      	bne.n	8001f84 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7e1b      	ldrb	r3, [r3, #24]
 8001f50:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f58:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
 8001f5e:	e018      	b.n	8001f92 <HAL_ADC_Init+0x2de>
 8001f60:	24000000 	.word	0x24000000
 8001f64:	053e2d63 	.word	0x053e2d63
 8001f68:	40022000 	.word	0x40022000
 8001f6c:	40022100 	.word	0x40022100
 8001f70:	58026000 	.word	0x58026000
 8001f74:	40022300 	.word	0x40022300
 8001f78:	58026300 	.word	0x58026300
 8001f7c:	fff04007 	.word	0xfff04007
 8001f80:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	7e1b      	ldrb	r3, [r3, #24]
 8001f88:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	4b46      	ldr	r3, [pc, #280]	@ (80020b4 <HAL_ADC_Init+0x400>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	69b9      	ldr	r1, [r7, #24]
 8001fa2:	430b      	orrs	r3, r1
 8001fa4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d137      	bne.n	8002020 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a3f      	ldr	r2, [pc, #252]	@ (80020b8 <HAL_ADC_Init+0x404>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d116      	bne.n	8001fee <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	4b3d      	ldr	r3, [pc, #244]	@ (80020bc <HAL_ADC_Init+0x408>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001fd2:	4311      	orrs	r1, r2
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fd8:	4311      	orrs	r1, r2
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0201 	orr.w	r2, r2, #1
 8001fea:	611a      	str	r2, [r3, #16]
 8001fec:	e020      	b.n	8002030 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	4b32      	ldr	r3, [pc, #200]	@ (80020c0 <HAL_ADC_Init+0x40c>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ffc:	3a01      	subs	r2, #1
 8001ffe:	0411      	lsls	r1, r2, #16
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002004:	4311      	orrs	r1, r2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800200a:	4311      	orrs	r1, r2
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002010:	430a      	orrs	r2, r1
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f042 0201 	orr.w	r2, r2, #1
 800201c:	611a      	str	r2, [r3, #16]
 800201e:	e007      	b.n	8002030 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691a      	ldr	r2, [r3, #16]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0201 	bic.w	r2, r2, #1
 800202e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a1b      	ldr	r2, [pc, #108]	@ (80020b8 <HAL_ADC_Init+0x404>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d002      	beq.n	8002056 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f001 f9b9 	bl	80033c8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d10c      	bne.n	8002078 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002064:	f023 010f 	bic.w	r1, r3, #15
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	1e5a      	subs	r2, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	631a      	str	r2, [r3, #48]	@ 0x30
 8002076:	e007      	b.n	8002088 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 020f 	bic.w	r2, r2, #15
 8002086:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800208c:	f023 0303 	bic.w	r3, r3, #3
 8002090:	f043 0201 	orr.w	r2, r3, #1
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	661a      	str	r2, [r3, #96]	@ 0x60
 8002098:	e007      	b.n	80020aa <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800209e:	f043 0210 	orr.w	r2, r3, #16
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3724      	adds	r7, #36	@ 0x24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd90      	pop	{r4, r7, pc}
 80020b4:	ffffbffc 	.word	0xffffbffc
 80020b8:	58026000 	.word	0x58026000
 80020bc:	fc00f81f 	.word	0xfc00f81f
 80020c0:	fc00f81e 	.word	0xfc00f81e

080020c4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a60      	ldr	r2, [pc, #384]	@ (8002258 <HAL_ADC_Start_DMA+0x194>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d004      	beq.n	80020e4 <HAL_ADC_Start_DMA+0x20>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a5f      	ldr	r2, [pc, #380]	@ (800225c <HAL_ADC_Start_DMA+0x198>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d101      	bne.n	80020e8 <HAL_ADC_Start_DMA+0x24>
 80020e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002260 <HAL_ADC_Start_DMA+0x19c>)
 80020e6:	e000      	b.n	80020ea <HAL_ADC_Start_DMA+0x26>
 80020e8:	4b5e      	ldr	r3, [pc, #376]	@ (8002264 <HAL_ADC_Start_DMA+0x1a0>)
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fd16 	bl	8001b1c <LL_ADC_GetMultimode>
 80020f0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fdb6 	bl	8001c68 <LL_ADC_REG_IsConversionOngoing>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f040 80a2 	bne.w	8002248 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_ADC_Start_DMA+0x4e>
 800210e:	2302      	movs	r3, #2
 8002110:	e09d      	b.n	800224e <HAL_ADC_Start_DMA+0x18a>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d006      	beq.n	800212e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	2b05      	cmp	r3, #5
 8002124:	d003      	beq.n	800212e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	2b09      	cmp	r3, #9
 800212a:	f040 8086 	bne.w	800223a <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f001 f82c 	bl	800318c <ADC_Enable>
 8002134:	4603      	mov	r3, r0
 8002136:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002138:	7dfb      	ldrb	r3, [r7, #23]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d178      	bne.n	8002230 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002142:	4b49      	ldr	r3, [pc, #292]	@ (8002268 <HAL_ADC_Start_DMA+0x1a4>)
 8002144:	4013      	ands	r3, r2
 8002146:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a42      	ldr	r2, [pc, #264]	@ (800225c <HAL_ADC_Start_DMA+0x198>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d002      	beq.n	800215e <HAL_ADC_Start_DMA+0x9a>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	e000      	b.n	8002160 <HAL_ADC_Start_DMA+0x9c>
 800215e:	4b3e      	ldr	r3, [pc, #248]	@ (8002258 <HAL_ADC_Start_DMA+0x194>)
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	4293      	cmp	r3, r2
 8002166:	d002      	beq.n	800216e <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d105      	bne.n	800217a <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002172:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800217e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d006      	beq.n	8002194 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800218a:	f023 0206 	bic.w	r2, r3, #6
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	665a      	str	r2, [r3, #100]	@ 0x64
 8002192:	e002      	b.n	800219a <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219e:	4a33      	ldr	r2, [pc, #204]	@ (800226c <HAL_ADC_Start_DMA+0x1a8>)
 80021a0:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a6:	4a32      	ldr	r2, [pc, #200]	@ (8002270 <HAL_ADC_Start_DMA+0x1ac>)
 80021a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ae:	4a31      	ldr	r2, [pc, #196]	@ (8002274 <HAL_ADC_Start_DMA+0x1b0>)
 80021b0:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	221c      	movs	r2, #28
 80021b8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 0210 	orr.w	r2, r2, #16
 80021d0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a28      	ldr	r2, [pc, #160]	@ (8002278 <HAL_ADC_Start_DMA+0x1b4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d10f      	bne.n	80021fc <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4619      	mov	r1, r3
 80021ea:	4610      	mov	r0, r2
 80021ec:	f7ff fbfe 	bl	80019ec <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fbe9 	bl	80019cc <LL_ADC_EnableDMAReq>
 80021fa:	e007      	b.n	800220c <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002204:	4619      	mov	r1, r3
 8002206:	4610      	mov	r0, r2
 8002208:	f7ff fbcd 	bl	80019a6 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	3340      	adds	r3, #64	@ 0x40
 8002216:	4619      	mov	r1, r3
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f001 ffdc 	bl	80041d8 <HAL_DMA_Start_IT>
 8002220:	4603      	mov	r3, r0
 8002222:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fd09 	bl	8001c40 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800222e:	e00d      	b.n	800224c <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8002238:	e008      	b.n	800224c <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8002246:	e001      	b.n	800224c <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002248:	2302      	movs	r3, #2
 800224a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800224c:	7dfb      	ldrb	r3, [r7, #23]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40022000 	.word	0x40022000
 800225c:	40022100 	.word	0x40022100
 8002260:	40022300 	.word	0x40022300
 8002264:	58026300 	.word	0x58026300
 8002268:	fffff0fe 	.word	0xfffff0fe
 800226c:	080032a1 	.word	0x080032a1
 8002270:	08003379 	.word	0x08003379
 8002274:	08003395 	.word	0x08003395
 8002278:	58026000 	.word	0x58026000

0800227c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	@ 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002284:	2300      	movs	r3, #0
 8002286:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a87      	ldr	r2, [pc, #540]	@ (80024bc <HAL_ADC_IRQHandler+0x240>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d004      	beq.n	80022ac <HAL_ADC_IRQHandler+0x30>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a86      	ldr	r2, [pc, #536]	@ (80024c0 <HAL_ADC_IRQHandler+0x244>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d101      	bne.n	80022b0 <HAL_ADC_IRQHandler+0x34>
 80022ac:	4b85      	ldr	r3, [pc, #532]	@ (80024c4 <HAL_ADC_IRQHandler+0x248>)
 80022ae:	e000      	b.n	80022b2 <HAL_ADC_IRQHandler+0x36>
 80022b0:	4b85      	ldr	r3, [pc, #532]	@ (80024c8 <HAL_ADC_IRQHandler+0x24c>)
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fc32 	bl	8001b1c <LL_ADC_GetMultimode>
 80022b8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d017      	beq.n	80022f4 <HAL_ADC_IRQHandler+0x78>
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d012      	beq.n	80022f4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d105      	bne.n	80022e6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022de:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f001 f9aa 	bl	8003640 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2202      	movs	r2, #2
 80022f2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d004      	beq.n	8002308 <HAL_ADC_IRQHandler+0x8c>
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10a      	bne.n	800231e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 8083 	beq.w	800241a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d07d      	beq.n	800241a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b00      	cmp	r3, #0
 8002328:	d105      	bne.n	8002336 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800232e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff faf4 	bl	8001928 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d062      	beq.n	800240c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a5d      	ldr	r2, [pc, #372]	@ (80024c0 <HAL_ADC_IRQHandler+0x244>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d002      	beq.n	8002356 <HAL_ADC_IRQHandler+0xda>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	e000      	b.n	8002358 <HAL_ADC_IRQHandler+0xdc>
 8002356:	4b59      	ldr	r3, [pc, #356]	@ (80024bc <HAL_ADC_IRQHandler+0x240>)
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	4293      	cmp	r3, r2
 800235e:	d008      	beq.n	8002372 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b05      	cmp	r3, #5
 800236a:	d002      	beq.n	8002372 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	2b09      	cmp	r3, #9
 8002370:	d104      	bne.n	800237c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	623b      	str	r3, [r7, #32]
 800237a:	e00c      	b.n	8002396 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a4f      	ldr	r2, [pc, #316]	@ (80024c0 <HAL_ADC_IRQHandler+0x244>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d002      	beq.n	800238c <HAL_ADC_IRQHandler+0x110>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	e000      	b.n	800238e <HAL_ADC_IRQHandler+0x112>
 800238c:	4b4b      	ldr	r3, [pc, #300]	@ (80024bc <HAL_ADC_IRQHandler+0x240>)
 800238e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d135      	bne.n	800240c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d12e      	bne.n	800240c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fc58 	bl	8001c68 <LL_ADC_REG_IsConversionOngoing>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d11a      	bne.n	80023f4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 020c 	bic.w	r2, r2, #12
 80023cc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023d2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d112      	bne.n	800240c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ea:	f043 0201 	orr.w	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	661a      	str	r2, [r3, #96]	@ 0x60
 80023f2:	e00b      	b.n	800240c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f8:	f043 0210 	orr.w	r2, r3, #16
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002404:	f043 0201 	orr.w	r2, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7fe f849 	bl	80004a4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	220c      	movs	r2, #12
 8002418:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f003 0320 	and.w	r3, r3, #32
 8002420:	2b00      	cmp	r3, #0
 8002422:	d004      	beq.n	800242e <HAL_ADC_IRQHandler+0x1b2>
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	f003 0320 	and.w	r3, r3, #32
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10b      	bne.n	8002446 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80a0 	beq.w	800257a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 809a 	beq.w	800257a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	2b00      	cmp	r3, #0
 8002450:	d105      	bne.n	800245e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002456:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fadc 	bl	8001a20 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002468:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fa5a 	bl	8001928 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002474:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a11      	ldr	r2, [pc, #68]	@ (80024c0 <HAL_ADC_IRQHandler+0x244>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d002      	beq.n	8002486 <HAL_ADC_IRQHandler+0x20a>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	e000      	b.n	8002488 <HAL_ADC_IRQHandler+0x20c>
 8002486:	4b0d      	ldr	r3, [pc, #52]	@ (80024bc <HAL_ADC_IRQHandler+0x240>)
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	4293      	cmp	r3, r2
 800248e:	d008      	beq.n	80024a2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d005      	beq.n	80024a2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2b06      	cmp	r3, #6
 800249a:	d002      	beq.n	80024a2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	2b07      	cmp	r3, #7
 80024a0:	d104      	bne.n	80024ac <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	623b      	str	r3, [r7, #32]
 80024aa:	e014      	b.n	80024d6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a03      	ldr	r2, [pc, #12]	@ (80024c0 <HAL_ADC_IRQHandler+0x244>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00a      	beq.n	80024cc <HAL_ADC_IRQHandler+0x250>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	e008      	b.n	80024ce <HAL_ADC_IRQHandler+0x252>
 80024bc:	40022000 	.word	0x40022000
 80024c0:	40022100 	.word	0x40022100
 80024c4:	40022300 	.word	0x40022300
 80024c8:	58026300 	.word	0x58026300
 80024cc:	4b84      	ldr	r3, [pc, #528]	@ (80026e0 <HAL_ADC_IRQHandler+0x464>)
 80024ce:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d047      	beq.n	800256c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d007      	beq.n	80024f6 <HAL_ADC_IRQHandler+0x27a>
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d03f      	beq.n	800256c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d13a      	bne.n	800256c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002500:	2b40      	cmp	r3, #64	@ 0x40
 8002502:	d133      	bne.n	800256c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d12e      	bne.n	800256c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fbbb 	bl	8001c8e <LL_ADC_INJ_IsConversionOngoing>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d11a      	bne.n	8002554 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800252c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002532:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800253e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d112      	bne.n	800256c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800254a:	f043 0201 	orr.w	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	661a      	str	r2, [r3, #96]	@ 0x60
 8002552:	e00b      	b.n	800256c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002558:	f043 0210 	orr.w	r2, r3, #16
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002564:	f043 0201 	orr.w	r2, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f001 f83f 	bl	80035f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2260      	movs	r2, #96	@ 0x60
 8002578:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002580:	2b00      	cmp	r3, #0
 8002582:	d011      	beq.n	80025a8 <HAL_ADC_IRQHandler+0x32c>
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00c      	beq.n	80025a8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002592:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f8b2 	bl	8002704 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2280      	movs	r2, #128	@ 0x80
 80025a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d012      	beq.n	80025d8 <HAL_ADC_IRQHandler+0x35c>
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00d      	beq.n	80025d8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f001 f825 	bl	8003618 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d012      	beq.n	8002608 <HAL_ADC_IRQHandler+0x38c>
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00d      	beq.n	8002608 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025f0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f001 f817 	bl	800362c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002606:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	2b00      	cmp	r3, #0
 8002610:	d043      	beq.n	800269a <HAL_ADC_IRQHandler+0x41e>
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	f003 0310 	and.w	r3, r3, #16
 8002618:	2b00      	cmp	r3, #0
 800261a:	d03e      	beq.n	800269a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002620:	2b00      	cmp	r3, #0
 8002622:	d102      	bne.n	800262a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002624:	2301      	movs	r3, #1
 8002626:	627b      	str	r3, [r7, #36]	@ 0x24
 8002628:	e021      	b.n	800266e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d015      	beq.n	800265c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a2a      	ldr	r2, [pc, #168]	@ (80026e0 <HAL_ADC_IRQHandler+0x464>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d004      	beq.n	8002644 <HAL_ADC_IRQHandler+0x3c8>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a29      	ldr	r2, [pc, #164]	@ (80026e4 <HAL_ADC_IRQHandler+0x468>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d101      	bne.n	8002648 <HAL_ADC_IRQHandler+0x3cc>
 8002644:	4b28      	ldr	r3, [pc, #160]	@ (80026e8 <HAL_ADC_IRQHandler+0x46c>)
 8002646:	e000      	b.n	800264a <HAL_ADC_IRQHandler+0x3ce>
 8002648:	4b28      	ldr	r3, [pc, #160]	@ (80026ec <HAL_ADC_IRQHandler+0x470>)
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fa74 	bl	8001b38 <LL_ADC_GetMultiDMATransfer>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00b      	beq.n	800266e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002656:	2301      	movs	r3, #1
 8002658:	627b      	str	r3, [r7, #36]	@ 0x24
 800265a:	e008      	b.n	800266e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800266a:	2301      	movs	r3, #1
 800266c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	2b01      	cmp	r3, #1
 8002672:	d10e      	bne.n	8002692 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002678:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002684:	f043 0202 	orr.w	r2, r3, #2
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f843 	bl	8002718 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2210      	movs	r2, #16
 8002698:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d018      	beq.n	80026d6 <HAL_ADC_IRQHandler+0x45a>
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d013      	beq.n	80026d6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026be:	f043 0208 	orr.w	r2, r3, #8
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026ce:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 ff97 	bl	8003604 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80026d6:	bf00      	nop
 80026d8:	3728      	adds	r7, #40	@ 0x28
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40022000 	.word	0x40022000
 80026e4:	40022100 	.word	0x40022100
 80026e8:	40022300 	.word	0x40022300
 80026ec:	58026300 	.word	0x58026300

080026f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800272c:	b590      	push	{r4, r7, lr}
 800272e:	b0b9      	sub	sp, #228	@ 0xe4
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002746:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4aab      	ldr	r2, [pc, #684]	@ (80029fc <HAL_ADC_ConfigChannel+0x2d0>)
 800274e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002756:	2b01      	cmp	r3, #1
 8002758:	d102      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x34>
 800275a:	2302      	movs	r3, #2
 800275c:	f000 bcfe 	b.w	800315c <HAL_ADC_ConfigChannel+0xa30>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fa7b 	bl	8001c68 <LL_ADC_REG_IsConversionOngoing>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	f040 84e2 	bne.w	800313e <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	db38      	blt.n	80027f4 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a9e      	ldr	r2, [pc, #632]	@ (8002a00 <HAL_ADC_ConfigChannel+0x2d4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d033      	beq.n	80027f4 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002794:	2b00      	cmp	r3, #0
 8002796:	d108      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x7e>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	0e9b      	lsrs	r3, r3, #26
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	2201      	movs	r2, #1
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	e01d      	b.n	80027e6 <HAL_ADC_ConfigChannel+0xba>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 80027ce:	2320      	movs	r3, #32
 80027d0:	e004      	b.n	80027dc <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 80027d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f003 031f 	and.w	r3, r3, #31
 80027e0:	2201      	movs	r2, #1
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6812      	ldr	r2, [r2, #0]
 80027ea:	69d1      	ldr	r1, [r2, #28]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	430b      	orrs	r3, r1
 80027f2:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6859      	ldr	r1, [r3, #4]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	f7ff f8a4 	bl	800194e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff fa2c 	bl	8001c68 <LL_ADC_REG_IsConversionOngoing>
 8002810:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fa38 	bl	8001c8e <LL_ADC_INJ_IsConversionOngoing>
 800281e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002826:	2b00      	cmp	r3, #0
 8002828:	f040 8270 	bne.w	8002d0c <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800282c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002830:	2b00      	cmp	r3, #0
 8002832:	f040 826b 	bne.w	8002d0c <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	6819      	ldr	r1, [r3, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	461a      	mov	r2, r3
 8002844:	f7ff f8ff 	bl	8001a46 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a6c      	ldr	r2, [pc, #432]	@ (8002a00 <HAL_ADC_ConfigChannel+0x2d4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d10d      	bne.n	800286e <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	695a      	ldr	r2, [r3, #20]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	08db      	lsrs	r3, r3, #3
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800286c:	e032      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800286e:	4b65      	ldr	r3, [pc, #404]	@ (8002a04 <HAL_ADC_ConfigChannel+0x2d8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002876:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800287a:	d10b      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x168>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	695a      	ldr	r2, [r3, #20]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	089b      	lsrs	r3, r3, #2
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	e01d      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x1a4>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10b      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x18e>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	695a      	ldr	r2, [r3, #20]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	089b      	lsrs	r3, r3, #2
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	e00a      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x1a4>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	695a      	ldr	r2, [r3, #20]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	089b      	lsrs	r3, r3, #2
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d048      	beq.n	800296e <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6919      	ldr	r1, [r3, #16]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028ec:	f7fe ff2a 	bl	8001744 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a42      	ldr	r2, [pc, #264]	@ (8002a00 <HAL_ADC_ConfigChannel+0x2d4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d119      	bne.n	800292e <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6919      	ldr	r1, [r3, #16]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	461a      	mov	r2, r3
 8002908:	f7fe ffc2 	bl	8001890 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	6919      	ldr	r1, [r3, #16]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	f893 3020 	ldrb.w	r3, [r3, #32]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d102      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x1f8>
 800291e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002922:	e000      	b.n	8002926 <HAL_ADC_ConfigChannel+0x1fa>
 8002924:	2300      	movs	r3, #0
 8002926:	461a      	mov	r2, r3
 8002928:	f7fe ff90 	bl	800184c <LL_ADC_SetOffsetSaturation>
 800292c:	e1ee      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6818      	ldr	r0, [r3, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	6919      	ldr	r1, [r3, #16]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800293c:	2b01      	cmp	r3, #1
 800293e:	d102      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x21a>
 8002940:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002944:	e000      	b.n	8002948 <HAL_ADC_ConfigChannel+0x21c>
 8002946:	2300      	movs	r3, #0
 8002948:	461a      	mov	r2, r3
 800294a:	f7fe ff5d 	bl	8001808 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	6919      	ldr	r1, [r3, #16]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	7e1b      	ldrb	r3, [r3, #24]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d102      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x238>
 800295e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002962:	e000      	b.n	8002966 <HAL_ADC_ConfigChannel+0x23a>
 8002964:	2300      	movs	r3, #0
 8002966:	461a      	mov	r2, r3
 8002968:	f7fe ff34 	bl	80017d4 <LL_ADC_SetDataRightShift>
 800296c:	e1ce      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a23      	ldr	r2, [pc, #140]	@ (8002a00 <HAL_ADC_ConfigChannel+0x2d4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	f040 8181 	bne.w	8002c7c <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe ff11 	bl	80017a8 <LL_ADC_GetOffsetChannel>
 8002986:	4603      	mov	r3, r0
 8002988:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x27a>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe ff06 	bl	80017a8 <LL_ADC_GetOffsetChannel>
 800299c:	4603      	mov	r3, r0
 800299e:	0e9b      	lsrs	r3, r3, #26
 80029a0:	f003 021f 	and.w	r2, r3, #31
 80029a4:	e01e      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x2b8>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fe fefb 	bl	80017a8 <LL_ADC_GetOffsetChannel>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80029bc:	fa93 f3a3 	rbit	r3, r3
 80029c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80029c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80029cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80029d4:	2320      	movs	r3, #32
 80029d6:	e004      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 80029d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029dc:	fab3 f383 	clz	r3, r3
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10b      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x2dc>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	0e9b      	lsrs	r3, r3, #26
 80029f6:	f003 031f 	and.w	r3, r3, #31
 80029fa:	e01e      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x30e>
 80029fc:	47ff0000 	.word	0x47ff0000
 8002a00:	58026000 	.word	0x58026000
 8002a04:	5c001000 	.word	0x5c001000
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002a1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002a24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8002a2c:	2320      	movs	r3, #32
 8002a2e:	e004      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8002a30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d106      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2200      	movs	r2, #0
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe ff44 	bl	80018d4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2101      	movs	r1, #1
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe fea8 	bl	80017a8 <LL_ADC_GetOffsetChannel>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10a      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x34c>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2101      	movs	r1, #1
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fe fe9d 	bl	80017a8 <LL_ADC_GetOffsetChannel>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	0e9b      	lsrs	r3, r3, #26
 8002a72:	f003 021f 	and.w	r2, r3, #31
 8002a76:	e01e      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x38a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe fe92 	bl	80017a8 <LL_ADC_GetOffsetChannel>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002a96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002a9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002aa6:	2320      	movs	r3, #32
 8002aa8:	e004      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8002aaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002aae:	fab3 f383 	clz	r3, r3
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d105      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x3a2>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	0e9b      	lsrs	r3, r3, #26
 8002ac8:	f003 031f 	and.w	r3, r3, #31
 8002acc:	e018      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x3d4>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002ae2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ae6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002aea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8002af2:	2320      	movs	r3, #32
 8002af4:	e004      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8002af6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002afa:	fab3 f383 	clz	r3, r3
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d106      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fe fee1 	bl	80018d4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2102      	movs	r1, #2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fe fe45 	bl	80017a8 <LL_ADC_GetOffsetChannel>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10a      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x412>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2102      	movs	r1, #2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe fe3a 	bl	80017a8 <LL_ADC_GetOffsetChannel>
 8002b34:	4603      	mov	r3, r0
 8002b36:	0e9b      	lsrs	r3, r3, #26
 8002b38:	f003 021f 	and.w	r2, r3, #31
 8002b3c:	e01e      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x450>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2102      	movs	r1, #2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe fe2f 	bl	80017a8 <LL_ADC_GetOffsetChannel>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002b5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8002b6c:	2320      	movs	r3, #32
 8002b6e:	e004      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8002b70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b74:	fab3 f383 	clz	r3, r3
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d105      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x468>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	0e9b      	lsrs	r3, r3, #26
 8002b8e:	f003 031f 	and.w	r3, r3, #31
 8002b92:	e014      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x492>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002ba2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ba4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002ba8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002bb0:	2320      	movs	r3, #32
 8002bb2:	e004      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002bb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bb8:	fab3 f383 	clz	r3, r3
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d106      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2102      	movs	r1, #2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fe fe82 	bl	80018d4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2103      	movs	r1, #3
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe fde6 	bl	80017a8 <LL_ADC_GetOffsetChannel>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10a      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x4d0>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2103      	movs	r1, #3
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fe fddb 	bl	80017a8 <LL_ADC_GetOffsetChannel>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	0e9b      	lsrs	r3, r3, #26
 8002bf6:	f003 021f 	and.w	r2, r3, #31
 8002bfa:	e017      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x500>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2103      	movs	r1, #3
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe fdd0 	bl	80017a8 <LL_ADC_GetOffsetChannel>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002c14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c16:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002c18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8002c1e:	2320      	movs	r3, #32
 8002c20:	e003      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8002c22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c24:	fab3 f383 	clz	r3, r3
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d105      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x518>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	0e9b      	lsrs	r3, r3, #26
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	e011      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x53c>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c4c:	fa93 f3a3 	rbit	r3, r3
 8002c50:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002c52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c54:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002c56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8002c5c:	2320      	movs	r3, #32
 8002c5e:	e003      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8002c60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c62:	fab3 f383 	clz	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d14f      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2200      	movs	r2, #0
 8002c72:	2103      	movs	r1, #3
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fe fe2d 	bl	80018d4 <LL_ADC_SetOffsetState>
 8002c7a:	e047      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	069b      	lsls	r3, r3, #26
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d107      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c9e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ca6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	069b      	lsls	r3, r3, #26
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d107      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002cc2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	069b      	lsls	r3, r3, #26
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d107      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002ce6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	069b      	lsls	r3, r3, #26
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d107      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d0a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fe ff81 	bl	8001c18 <LL_ADC_IsEnabled>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f040 8219 	bne.w	8003150 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	6819      	ldr	r1, [r3, #0]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	f7fe feb6 	bl	8001a9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4aa1      	ldr	r2, [pc, #644]	@ (8002fbc <HAL_ADC_ConfigChannel+0x890>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	f040 812e 	bne.w	8002f98 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10b      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x638>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	0e9b      	lsrs	r3, r3, #26
 8002d52:	3301      	adds	r3, #1
 8002d54:	f003 031f 	and.w	r3, r3, #31
 8002d58:	2b09      	cmp	r3, #9
 8002d5a:	bf94      	ite	ls
 8002d5c:	2301      	movls	r3, #1
 8002d5e:	2300      	movhi	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	e019      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x66c>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d6c:	fa93 f3a3 	rbit	r3, r3
 8002d70:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002d72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d74:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002d76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002d7c:	2320      	movs	r3, #32
 8002d7e:	e003      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002d80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	3301      	adds	r3, #1
 8002d8a:	f003 031f 	and.w	r3, r3, #31
 8002d8e:	2b09      	cmp	r3, #9
 8002d90:	bf94      	ite	ls
 8002d92:	2301      	movls	r3, #1
 8002d94:	2300      	movhi	r3, #0
 8002d96:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d079      	beq.n	8002e90 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d107      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x68c>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	0e9b      	lsrs	r3, r3, #26
 8002dae:	3301      	adds	r3, #1
 8002db0:	069b      	lsls	r3, r3, #26
 8002db2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002db6:	e015      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x6b8>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002dc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dc8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002dca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8002dd0:	2320      	movs	r3, #32
 8002dd2:	e003      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8002dd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	3301      	adds	r3, #1
 8002dde:	069b      	lsls	r3, r3, #26
 8002de0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d109      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x6d8>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	0e9b      	lsrs	r3, r3, #26
 8002df6:	3301      	adds	r3, #1
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	e017      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x708>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e14:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002e16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8002e1c:	2320      	movs	r3, #32
 8002e1e:	e003      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8002e20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e22:	fab3 f383 	clz	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	3301      	adds	r3, #1
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	2101      	movs	r1, #1
 8002e30:	fa01 f303 	lsl.w	r3, r1, r3
 8002e34:	ea42 0103 	orr.w	r1, r2, r3
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10a      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x72e>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	0e9b      	lsrs	r3, r3, #26
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	f003 021f 	and.w	r2, r3, #31
 8002e50:	4613      	mov	r3, r2
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	4413      	add	r3, r2
 8002e56:	051b      	lsls	r3, r3, #20
 8002e58:	e018      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x760>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8002e72:	2320      	movs	r3, #32
 8002e74:	e003      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8002e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e78:	fab3 f383 	clz	r3, r3
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	3301      	adds	r3, #1
 8002e80:	f003 021f 	and.w	r2, r3, #31
 8002e84:	4613      	mov	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	e07e      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d107      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x780>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	0e9b      	lsrs	r3, r3, #26
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	069b      	lsls	r3, r3, #26
 8002ea6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002eaa:	e015      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x7ac>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb4:	fa93 f3a3 	rbit	r3, r3
 8002eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8002ec4:	2320      	movs	r3, #32
 8002ec6:	e003      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8002ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eca:	fab3 f383 	clz	r3, r3
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	069b      	lsls	r3, r3, #26
 8002ed4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d109      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x7cc>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	0e9b      	lsrs	r3, r3, #26
 8002eea:	3301      	adds	r3, #1
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef6:	e017      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x7fc>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	fa93 f3a3 	rbit	r3, r3
 8002f04:	61bb      	str	r3, [r7, #24]
  return result;
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8002f10:	2320      	movs	r3, #32
 8002f12:	e003      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	2101      	movs	r1, #1
 8002f24:	fa01 f303 	lsl.w	r3, r1, r3
 8002f28:	ea42 0103 	orr.w	r1, r2, r3
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10d      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x828>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	0e9b      	lsrs	r3, r3, #26
 8002f3e:	3301      	adds	r3, #1
 8002f40:	f003 021f 	and.w	r2, r3, #31
 8002f44:	4613      	mov	r3, r2
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	4413      	add	r3, r2
 8002f4a:	3b1e      	subs	r3, #30
 8002f4c:	051b      	lsls	r3, r3, #20
 8002f4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f52:	e01b      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x860>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	fa93 f3a3 	rbit	r3, r3
 8002f60:	60fb      	str	r3, [r7, #12]
  return result;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8002f6c:	2320      	movs	r3, #32
 8002f6e:	e003      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	3301      	adds	r3, #1
 8002f7a:	f003 021f 	and.w	r2, r3, #31
 8002f7e:	4613      	mov	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	4413      	add	r3, r2
 8002f84:	3b1e      	subs	r3, #30
 8002f86:	051b      	lsls	r3, r3, #20
 8002f88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	6892      	ldr	r2, [r2, #8]
 8002f92:	4619      	mov	r1, r3
 8002f94:	f7fe fd57 	bl	8001a46 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f280 80d7 	bge.w	8003150 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a06      	ldr	r2, [pc, #24]	@ (8002fc0 <HAL_ADC_ConfigChannel+0x894>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d004      	beq.n	8002fb6 <HAL_ADC_ConfigChannel+0x88a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a04      	ldr	r2, [pc, #16]	@ (8002fc4 <HAL_ADC_ConfigChannel+0x898>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d10a      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x8a0>
 8002fb6:	4b04      	ldr	r3, [pc, #16]	@ (8002fc8 <HAL_ADC_ConfigChannel+0x89c>)
 8002fb8:	e009      	b.n	8002fce <HAL_ADC_ConfigChannel+0x8a2>
 8002fba:	bf00      	nop
 8002fbc:	47ff0000 	.word	0x47ff0000
 8002fc0:	40022000 	.word	0x40022000
 8002fc4:	40022100 	.word	0x40022100
 8002fc8:	40022300 	.word	0x40022300
 8002fcc:	4b65      	ldr	r3, [pc, #404]	@ (8003164 <HAL_ADC_ConfigChannel+0xa38>)
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe fbaa 	bl	8001728 <LL_ADC_GetCommonPathInternalCh>
 8002fd4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a62      	ldr	r2, [pc, #392]	@ (8003168 <HAL_ADC_ConfigChannel+0xa3c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d004      	beq.n	8002fec <HAL_ADC_ConfigChannel+0x8c0>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a61      	ldr	r2, [pc, #388]	@ (800316c <HAL_ADC_ConfigChannel+0xa40>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d10e      	bne.n	800300a <HAL_ADC_ConfigChannel+0x8de>
 8002fec:	485e      	ldr	r0, [pc, #376]	@ (8003168 <HAL_ADC_ConfigChannel+0xa3c>)
 8002fee:	f7fe fe13 	bl	8001c18 <LL_ADC_IsEnabled>
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	485d      	ldr	r0, [pc, #372]	@ (800316c <HAL_ADC_ConfigChannel+0xa40>)
 8002ff6:	f7fe fe0f 	bl	8001c18 <LL_ADC_IsEnabled>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4323      	orrs	r3, r4
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	bf0c      	ite	eq
 8003002:	2301      	moveq	r3, #1
 8003004:	2300      	movne	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	e008      	b.n	800301c <HAL_ADC_ConfigChannel+0x8f0>
 800300a:	4859      	ldr	r0, [pc, #356]	@ (8003170 <HAL_ADC_ConfigChannel+0xa44>)
 800300c:	f7fe fe04 	bl	8001c18 <LL_ADC_IsEnabled>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	bf0c      	ite	eq
 8003016:	2301      	moveq	r3, #1
 8003018:	2300      	movne	r3, #0
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 8084 	beq.w	800312a <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a53      	ldr	r2, [pc, #332]	@ (8003174 <HAL_ADC_ConfigChannel+0xa48>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d132      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x966>
 800302c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003030:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d12c      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a4c      	ldr	r2, [pc, #304]	@ (8003170 <HAL_ADC_ConfigChannel+0xa44>)
 800303e:	4293      	cmp	r3, r2
 8003040:	f040 8086 	bne.w	8003150 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a47      	ldr	r2, [pc, #284]	@ (8003168 <HAL_ADC_ConfigChannel+0xa3c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d004      	beq.n	8003058 <HAL_ADC_ConfigChannel+0x92c>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a46      	ldr	r2, [pc, #280]	@ (800316c <HAL_ADC_ConfigChannel+0xa40>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d101      	bne.n	800305c <HAL_ADC_ConfigChannel+0x930>
 8003058:	4a47      	ldr	r2, [pc, #284]	@ (8003178 <HAL_ADC_ConfigChannel+0xa4c>)
 800305a:	e000      	b.n	800305e <HAL_ADC_ConfigChannel+0x932>
 800305c:	4a41      	ldr	r2, [pc, #260]	@ (8003164 <HAL_ADC_ConfigChannel+0xa38>)
 800305e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003062:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003066:	4619      	mov	r1, r3
 8003068:	4610      	mov	r0, r2
 800306a:	f7fe fb4a 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800306e:	4b43      	ldr	r3, [pc, #268]	@ (800317c <HAL_ADC_ConfigChannel+0xa50>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	099b      	lsrs	r3, r3, #6
 8003074:	4a42      	ldr	r2, [pc, #264]	@ (8003180 <HAL_ADC_ConfigChannel+0xa54>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	099b      	lsrs	r3, r3, #6
 800307c:	3301      	adds	r3, #1
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003082:	e002      	b.n	800308a <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	3b01      	subs	r3, #1
 8003088:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1f9      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003090:	e05e      	b.n	8003150 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a3b      	ldr	r2, [pc, #236]	@ (8003184 <HAL_ADC_ConfigChannel+0xa58>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d120      	bne.n	80030de <HAL_ADC_ConfigChannel+0x9b2>
 800309c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80030a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d11a      	bne.n	80030de <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a30      	ldr	r2, [pc, #192]	@ (8003170 <HAL_ADC_ConfigChannel+0xa44>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d14e      	bne.n	8003150 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a2c      	ldr	r2, [pc, #176]	@ (8003168 <HAL_ADC_ConfigChannel+0xa3c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d004      	beq.n	80030c6 <HAL_ADC_ConfigChannel+0x99a>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a2a      	ldr	r2, [pc, #168]	@ (800316c <HAL_ADC_ConfigChannel+0xa40>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d101      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x99e>
 80030c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003178 <HAL_ADC_ConfigChannel+0xa4c>)
 80030c8:	e000      	b.n	80030cc <HAL_ADC_ConfigChannel+0x9a0>
 80030ca:	4a26      	ldr	r2, [pc, #152]	@ (8003164 <HAL_ADC_ConfigChannel+0xa38>)
 80030cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80030d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030d4:	4619      	mov	r1, r3
 80030d6:	4610      	mov	r0, r2
 80030d8:	f7fe fb13 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030dc:	e038      	b.n	8003150 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a29      	ldr	r2, [pc, #164]	@ (8003188 <HAL_ADC_ConfigChannel+0xa5c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d133      	bne.n	8003150 <HAL_ADC_ConfigChannel+0xa24>
 80030e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80030ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d12d      	bne.n	8003150 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003170 <HAL_ADC_ConfigChannel+0xa44>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d128      	bne.n	8003150 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a19      	ldr	r2, [pc, #100]	@ (8003168 <HAL_ADC_ConfigChannel+0xa3c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d004      	beq.n	8003112 <HAL_ADC_ConfigChannel+0x9e6>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a17      	ldr	r2, [pc, #92]	@ (800316c <HAL_ADC_ConfigChannel+0xa40>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d101      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x9ea>
 8003112:	4a19      	ldr	r2, [pc, #100]	@ (8003178 <HAL_ADC_ConfigChannel+0xa4c>)
 8003114:	e000      	b.n	8003118 <HAL_ADC_ConfigChannel+0x9ec>
 8003116:	4a13      	ldr	r2, [pc, #76]	@ (8003164 <HAL_ADC_ConfigChannel+0xa38>)
 8003118:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800311c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003120:	4619      	mov	r1, r3
 8003122:	4610      	mov	r0, r2
 8003124:	f7fe faed 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
 8003128:	e012      	b.n	8003150 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800312e:	f043 0220 	orr.w	r2, r3, #32
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800313c:	e008      	b.n	8003150 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003142:	f043 0220 	orr.w	r2, r3, #32
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003158:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 800315c:	4618      	mov	r0, r3
 800315e:	37e4      	adds	r7, #228	@ 0xe4
 8003160:	46bd      	mov	sp, r7
 8003162:	bd90      	pop	{r4, r7, pc}
 8003164:	58026300 	.word	0x58026300
 8003168:	40022000 	.word	0x40022000
 800316c:	40022100 	.word	0x40022100
 8003170:	58026000 	.word	0x58026000
 8003174:	c7520000 	.word	0xc7520000
 8003178:	40022300 	.word	0x40022300
 800317c:	24000000 	.word	0x24000000
 8003180:	053e2d63 	.word	0x053e2d63
 8003184:	c3210000 	.word	0xc3210000
 8003188:	cb840000 	.word	0xcb840000

0800318c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f7fe fd3d 	bl	8001c18 <LL_ADC_IsEnabled>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d16e      	bne.n	8003282 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	4b38      	ldr	r3, [pc, #224]	@ (800328c <ADC_Enable+0x100>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00d      	beq.n	80031ce <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b6:	f043 0210 	orr.w	r2, r3, #16
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031c2:	f043 0201 	orr.w	r2, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e05a      	b.n	8003284 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fe fd0c 	bl	8001bf0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031d8:	f7fe fa74 	bl	80016c4 <HAL_GetTick>
 80031dc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a2b      	ldr	r2, [pc, #172]	@ (8003290 <ADC_Enable+0x104>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d004      	beq.n	80031f2 <ADC_Enable+0x66>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a29      	ldr	r2, [pc, #164]	@ (8003294 <ADC_Enable+0x108>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d101      	bne.n	80031f6 <ADC_Enable+0x6a>
 80031f2:	4b29      	ldr	r3, [pc, #164]	@ (8003298 <ADC_Enable+0x10c>)
 80031f4:	e000      	b.n	80031f8 <ADC_Enable+0x6c>
 80031f6:	4b29      	ldr	r3, [pc, #164]	@ (800329c <ADC_Enable+0x110>)
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fe fc8f 	bl	8001b1c <LL_ADC_GetMultimode>
 80031fe:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a23      	ldr	r2, [pc, #140]	@ (8003294 <ADC_Enable+0x108>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d002      	beq.n	8003210 <ADC_Enable+0x84>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	e000      	b.n	8003212 <ADC_Enable+0x86>
 8003210:	4b1f      	ldr	r3, [pc, #124]	@ (8003290 <ADC_Enable+0x104>)
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	4293      	cmp	r3, r2
 8003218:	d02c      	beq.n	8003274 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d130      	bne.n	8003282 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003220:	e028      	b.n	8003274 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe fcf6 	bl	8001c18 <LL_ADC_IsEnabled>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d104      	bne.n	800323c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe fcda 	bl	8001bf0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800323c:	f7fe fa42 	bl	80016c4 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d914      	bls.n	8003274 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b01      	cmp	r3, #1
 8003256:	d00d      	beq.n	8003274 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800325c:	f043 0210 	orr.w	r2, r3, #16
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003268:	f043 0201 	orr.w	r2, r3, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e007      	b.n	8003284 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b01      	cmp	r3, #1
 8003280:	d1cf      	bne.n	8003222 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	8000003f 	.word	0x8000003f
 8003290:	40022000 	.word	0x40022000
 8003294:	40022100 	.word	0x40022100
 8003298:	40022300 	.word	0x40022300
 800329c:	58026300 	.word	0x58026300

080032a0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d14b      	bne.n	8003352 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032be:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d021      	beq.n	8003318 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fe fb25 	bl	8001928 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d032      	beq.n	800334a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d12b      	bne.n	800334a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003302:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d11f      	bne.n	800334a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800330e:	f043 0201 	orr.w	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	661a      	str	r2, [r3, #96]	@ 0x60
 8003316:	e018      	b.n	800334a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d111      	bne.n	800334a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800332a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003336:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d105      	bne.n	800334a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003342:	f043 0201 	orr.w	r2, r3, #1
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f7fd f8aa 	bl	80004a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003350:	e00e      	b.n	8003370 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f7ff f9da 	bl	8002718 <HAL_ADC_ErrorCallback>
}
 8003364:	e004      	b.n	8003370 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800336a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	4798      	blx	r3
}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003384:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f7ff f9b2 	bl	80026f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800338c:	bf00      	nop
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033b2:	f043 0204 	orr.w	r2, r3, #4
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f7ff f9ac 	bl	8002718 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033c0:	bf00      	nop
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a6c      	ldr	r2, [pc, #432]	@ (8003588 <ADC_ConfigureBoostMode+0x1c0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d004      	beq.n	80033e4 <ADC_ConfigureBoostMode+0x1c>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a6b      	ldr	r2, [pc, #428]	@ (800358c <ADC_ConfigureBoostMode+0x1c4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d109      	bne.n	80033f8 <ADC_ConfigureBoostMode+0x30>
 80033e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003590 <ADC_ConfigureBoostMode+0x1c8>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf14      	ite	ne
 80033f0:	2301      	movne	r3, #1
 80033f2:	2300      	moveq	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	e008      	b.n	800340a <ADC_ConfigureBoostMode+0x42>
 80033f8:	4b66      	ldr	r3, [pc, #408]	@ (8003594 <ADC_ConfigureBoostMode+0x1cc>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003400:	2b00      	cmp	r3, #0
 8003402:	bf14      	ite	ne
 8003404:	2301      	movne	r3, #1
 8003406:	2300      	moveq	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d01c      	beq.n	8003448 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800340e:	f004 fad5 	bl	80079bc <HAL_RCC_GetHCLKFreq>
 8003412:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800341c:	d010      	beq.n	8003440 <ADC_ConfigureBoostMode+0x78>
 800341e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003422:	d873      	bhi.n	800350c <ADC_ConfigureBoostMode+0x144>
 8003424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003428:	d002      	beq.n	8003430 <ADC_ConfigureBoostMode+0x68>
 800342a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800342e:	d16d      	bne.n	800350c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	0c1b      	lsrs	r3, r3, #16
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	fbb2 f3f3 	udiv	r3, r2, r3
 800343c:	60fb      	str	r3, [r7, #12]
        break;
 800343e:	e068      	b.n	8003512 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	089b      	lsrs	r3, r3, #2
 8003444:	60fb      	str	r3, [r7, #12]
        break;
 8003446:	e064      	b.n	8003512 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003448:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800344c:	f04f 0100 	mov.w	r1, #0
 8003450:	f005 fc9a 	bl	8008d88 <HAL_RCCEx_GetPeriphCLKFreq>
 8003454:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800345e:	d051      	beq.n	8003504 <ADC_ConfigureBoostMode+0x13c>
 8003460:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003464:	d854      	bhi.n	8003510 <ADC_ConfigureBoostMode+0x148>
 8003466:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800346a:	d047      	beq.n	80034fc <ADC_ConfigureBoostMode+0x134>
 800346c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003470:	d84e      	bhi.n	8003510 <ADC_ConfigureBoostMode+0x148>
 8003472:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003476:	d03d      	beq.n	80034f4 <ADC_ConfigureBoostMode+0x12c>
 8003478:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800347c:	d848      	bhi.n	8003510 <ADC_ConfigureBoostMode+0x148>
 800347e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003482:	d033      	beq.n	80034ec <ADC_ConfigureBoostMode+0x124>
 8003484:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003488:	d842      	bhi.n	8003510 <ADC_ConfigureBoostMode+0x148>
 800348a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800348e:	d029      	beq.n	80034e4 <ADC_ConfigureBoostMode+0x11c>
 8003490:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003494:	d83c      	bhi.n	8003510 <ADC_ConfigureBoostMode+0x148>
 8003496:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800349a:	d01a      	beq.n	80034d2 <ADC_ConfigureBoostMode+0x10a>
 800349c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80034a0:	d836      	bhi.n	8003510 <ADC_ConfigureBoostMode+0x148>
 80034a2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80034a6:	d014      	beq.n	80034d2 <ADC_ConfigureBoostMode+0x10a>
 80034a8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80034ac:	d830      	bhi.n	8003510 <ADC_ConfigureBoostMode+0x148>
 80034ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034b2:	d00e      	beq.n	80034d2 <ADC_ConfigureBoostMode+0x10a>
 80034b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034b8:	d82a      	bhi.n	8003510 <ADC_ConfigureBoostMode+0x148>
 80034ba:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80034be:	d008      	beq.n	80034d2 <ADC_ConfigureBoostMode+0x10a>
 80034c0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80034c4:	d824      	bhi.n	8003510 <ADC_ConfigureBoostMode+0x148>
 80034c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034ca:	d002      	beq.n	80034d2 <ADC_ConfigureBoostMode+0x10a>
 80034cc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034d0:	d11e      	bne.n	8003510 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	0c9b      	lsrs	r3, r3, #18
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e0:	60fb      	str	r3, [r7, #12]
        break;
 80034e2:	e016      	b.n	8003512 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	091b      	lsrs	r3, r3, #4
 80034e8:	60fb      	str	r3, [r7, #12]
        break;
 80034ea:	e012      	b.n	8003512 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	60fb      	str	r3, [r7, #12]
        break;
 80034f2:	e00e      	b.n	8003512 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	099b      	lsrs	r3, r3, #6
 80034f8:	60fb      	str	r3, [r7, #12]
        break;
 80034fa:	e00a      	b.n	8003512 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	09db      	lsrs	r3, r3, #7
 8003500:	60fb      	str	r3, [r7, #12]
        break;
 8003502:	e006      	b.n	8003512 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	60fb      	str	r3, [r7, #12]
        break;
 800350a:	e002      	b.n	8003512 <ADC_ConfigureBoostMode+0x14a>
        break;
 800350c:	bf00      	nop
 800350e:	e000      	b.n	8003512 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003510:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	085b      	lsrs	r3, r3, #1
 8003516:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4a1f      	ldr	r2, [pc, #124]	@ (8003598 <ADC_ConfigureBoostMode+0x1d0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d808      	bhi.n	8003532 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800352e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003530:	e025      	b.n	800357e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4a19      	ldr	r2, [pc, #100]	@ (800359c <ADC_ConfigureBoostMode+0x1d4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d80a      	bhi.n	8003550 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800354c:	609a      	str	r2, [r3, #8]
}
 800354e:	e016      	b.n	800357e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4a13      	ldr	r2, [pc, #76]	@ (80035a0 <ADC_ConfigureBoostMode+0x1d8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d80a      	bhi.n	800356e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800356a:	609a      	str	r2, [r3, #8]
}
 800356c:	e007      	b.n	800357e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800357c:	609a      	str	r2, [r3, #8]
}
 800357e:	bf00      	nop
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40022000 	.word	0x40022000
 800358c:	40022100 	.word	0x40022100
 8003590:	40022300 	.word	0x40022300
 8003594:	58026300 	.word	0x58026300
 8003598:	005f5e10 	.word	0x005f5e10
 800359c:	00bebc20 	.word	0x00bebc20
 80035a0:	017d7840 	.word	0x017d7840

080035a4 <LL_ADC_IsEnabled>:
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <LL_ADC_IsEnabled+0x18>
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <LL_ADC_IsEnabled+0x1a>
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <LL_ADC_REG_IsConversionOngoing>:
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d101      	bne.n	80035e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003654:	b590      	push	{r4, r7, lr}
 8003656:	b0a3      	sub	sp, #140	@ 0x8c
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800366e:	2302      	movs	r3, #2
 8003670:	e0c1      	b.n	80037f6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800367a:	2300      	movs	r3, #0
 800367c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800367e:	2300      	movs	r3, #0
 8003680:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a5e      	ldr	r2, [pc, #376]	@ (8003800 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d102      	bne.n	8003692 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800368c:	4b5d      	ldr	r3, [pc, #372]	@ (8003804 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	e001      	b.n	8003696 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10b      	bne.n	80036b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a0:	f043 0220 	orr.w	r2, r3, #32
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0a0      	b.n	80037f6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff ff87 	bl	80035ca <LL_ADC_REG_IsConversionOngoing>
 80036bc:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff ff80 	bl	80035ca <LL_ADC_REG_IsConversionOngoing>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f040 8081 	bne.w	80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80036d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d17c      	bne.n	80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a48      	ldr	r2, [pc, #288]	@ (8003800 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d004      	beq.n	80036ee <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a46      	ldr	r2, [pc, #280]	@ (8003804 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d101      	bne.n	80036f2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80036ee:	4b46      	ldr	r3, [pc, #280]	@ (8003808 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80036f0:	e000      	b.n	80036f4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80036f2:	4b46      	ldr	r3, [pc, #280]	@ (800380c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80036f4:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d039      	beq.n	8003772 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80036fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	431a      	orrs	r2, r3
 800370c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800370e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a3a      	ldr	r2, [pc, #232]	@ (8003800 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d004      	beq.n	8003724 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a39      	ldr	r2, [pc, #228]	@ (8003804 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d10e      	bne.n	8003742 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003724:	4836      	ldr	r0, [pc, #216]	@ (8003800 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003726:	f7ff ff3d 	bl	80035a4 <LL_ADC_IsEnabled>
 800372a:	4604      	mov	r4, r0
 800372c:	4835      	ldr	r0, [pc, #212]	@ (8003804 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800372e:	f7ff ff39 	bl	80035a4 <LL_ADC_IsEnabled>
 8003732:	4603      	mov	r3, r0
 8003734:	4323      	orrs	r3, r4
 8003736:	2b00      	cmp	r3, #0
 8003738:	bf0c      	ite	eq
 800373a:	2301      	moveq	r3, #1
 800373c:	2300      	movne	r3, #0
 800373e:	b2db      	uxtb	r3, r3
 8003740:	e008      	b.n	8003754 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003742:	4833      	ldr	r0, [pc, #204]	@ (8003810 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003744:	f7ff ff2e 	bl	80035a4 <LL_ADC_IsEnabled>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	bf0c      	ite	eq
 800374e:	2301      	moveq	r3, #1
 8003750:	2300      	movne	r3, #0
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d047      	beq.n	80037e8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003758:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	4b2d      	ldr	r3, [pc, #180]	@ (8003814 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800375e:	4013      	ands	r3, r2
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	6811      	ldr	r1, [r2, #0]
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	6892      	ldr	r2, [r2, #8]
 8003768:	430a      	orrs	r2, r1
 800376a:	431a      	orrs	r2, r3
 800376c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800376e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003770:	e03a      	b.n	80037e8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003772:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800377a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800377c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a1f      	ldr	r2, [pc, #124]	@ (8003800 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d004      	beq.n	8003792 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a1d      	ldr	r2, [pc, #116]	@ (8003804 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d10e      	bne.n	80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003792:	481b      	ldr	r0, [pc, #108]	@ (8003800 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003794:	f7ff ff06 	bl	80035a4 <LL_ADC_IsEnabled>
 8003798:	4604      	mov	r4, r0
 800379a:	481a      	ldr	r0, [pc, #104]	@ (8003804 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800379c:	f7ff ff02 	bl	80035a4 <LL_ADC_IsEnabled>
 80037a0:	4603      	mov	r3, r0
 80037a2:	4323      	orrs	r3, r4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	bf0c      	ite	eq
 80037a8:	2301      	moveq	r3, #1
 80037aa:	2300      	movne	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	e008      	b.n	80037c2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80037b0:	4817      	ldr	r0, [pc, #92]	@ (8003810 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80037b2:	f7ff fef7 	bl	80035a4 <LL_ADC_IsEnabled>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d010      	beq.n	80037e8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80037c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	4b12      	ldr	r3, [pc, #72]	@ (8003814 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80037d0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037d2:	e009      	b.n	80037e8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037d8:	f043 0220 	orr.w	r2, r3, #32
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80037e6:	e000      	b.n	80037ea <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80037f2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	378c      	adds	r7, #140	@ 0x8c
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd90      	pop	{r4, r7, pc}
 80037fe:	bf00      	nop
 8003800:	40022000 	.word	0x40022000
 8003804:	40022100 	.word	0x40022100
 8003808:	40022300 	.word	0x40022300
 800380c:	58026300 	.word	0x58026300
 8003810:	58026000 	.word	0x58026000
 8003814:	fffff0e0 	.word	0xfffff0e0

08003818 <__NVIC_SetPriorityGrouping>:
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003828:	4b0b      	ldr	r3, [pc, #44]	@ (8003858 <__NVIC_SetPriorityGrouping+0x40>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003834:	4013      	ands	r3, r2
 8003836:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003840:	4b06      	ldr	r3, [pc, #24]	@ (800385c <__NVIC_SetPriorityGrouping+0x44>)
 8003842:	4313      	orrs	r3, r2
 8003844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003846:	4a04      	ldr	r2, [pc, #16]	@ (8003858 <__NVIC_SetPriorityGrouping+0x40>)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	60d3      	str	r3, [r2, #12]
}
 800384c:	bf00      	nop
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	e000ed00 	.word	0xe000ed00
 800385c:	05fa0000 	.word	0x05fa0000

08003860 <__NVIC_GetPriorityGrouping>:
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003864:	4b04      	ldr	r3, [pc, #16]	@ (8003878 <__NVIC_GetPriorityGrouping+0x18>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	0a1b      	lsrs	r3, r3, #8
 800386a:	f003 0307 	and.w	r3, r3, #7
}
 800386e:	4618      	mov	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	e000ed00 	.word	0xe000ed00

0800387c <__NVIC_EnableIRQ>:
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800388a:	2b00      	cmp	r3, #0
 800388c:	db0b      	blt.n	80038a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800388e:	88fb      	ldrh	r3, [r7, #6]
 8003890:	f003 021f 	and.w	r2, r3, #31
 8003894:	4907      	ldr	r1, [pc, #28]	@ (80038b4 <__NVIC_EnableIRQ+0x38>)
 8003896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	2001      	movs	r0, #1
 800389e:	fa00 f202 	lsl.w	r2, r0, r2
 80038a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	e000e100 	.word	0xe000e100

080038b8 <__NVIC_SetPriority>:
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	6039      	str	r1, [r7, #0]
 80038c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80038c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	db0a      	blt.n	80038e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	490c      	ldr	r1, [pc, #48]	@ (8003904 <__NVIC_SetPriority+0x4c>)
 80038d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038d6:	0112      	lsls	r2, r2, #4
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	440b      	add	r3, r1
 80038dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80038e0:	e00a      	b.n	80038f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	4908      	ldr	r1, [pc, #32]	@ (8003908 <__NVIC_SetPriority+0x50>)
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	3b04      	subs	r3, #4
 80038f0:	0112      	lsls	r2, r2, #4
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	440b      	add	r3, r1
 80038f6:	761a      	strb	r2, [r3, #24]
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	e000e100 	.word	0xe000e100
 8003908:	e000ed00 	.word	0xe000ed00

0800390c <NVIC_EncodePriority>:
{
 800390c:	b480      	push	{r7}
 800390e:	b089      	sub	sp, #36	@ 0x24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f1c3 0307 	rsb	r3, r3, #7
 8003926:	2b04      	cmp	r3, #4
 8003928:	bf28      	it	cs
 800392a:	2304      	movcs	r3, #4
 800392c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	3304      	adds	r3, #4
 8003932:	2b06      	cmp	r3, #6
 8003934:	d902      	bls.n	800393c <NVIC_EncodePriority+0x30>
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	3b03      	subs	r3, #3
 800393a:	e000      	b.n	800393e <NVIC_EncodePriority+0x32>
 800393c:	2300      	movs	r3, #0
 800393e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003940:	f04f 32ff 	mov.w	r2, #4294967295
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43da      	mvns	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	401a      	ands	r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003954:	f04f 31ff 	mov.w	r1, #4294967295
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	fa01 f303 	lsl.w	r3, r1, r3
 800395e:	43d9      	mvns	r1, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003964:	4313      	orrs	r3, r2
}
 8003966:	4618      	mov	r0, r3
 8003968:	3724      	adds	r7, #36	@ 0x24
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3b01      	subs	r3, #1
 8003980:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003984:	d301      	bcc.n	800398a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003986:	2301      	movs	r3, #1
 8003988:	e00f      	b.n	80039aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800398a:	4a0a      	ldr	r2, [pc, #40]	@ (80039b4 <SysTick_Config+0x40>)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3b01      	subs	r3, #1
 8003990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003992:	210f      	movs	r1, #15
 8003994:	f04f 30ff 	mov.w	r0, #4294967295
 8003998:	f7ff ff8e 	bl	80038b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800399c:	4b05      	ldr	r3, [pc, #20]	@ (80039b4 <SysTick_Config+0x40>)
 800399e:	2200      	movs	r2, #0
 80039a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039a2:	4b04      	ldr	r3, [pc, #16]	@ (80039b4 <SysTick_Config+0x40>)
 80039a4:	2207      	movs	r2, #7
 80039a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	e000e010 	.word	0xe000e010

080039b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff ff29 	bl	8003818 <__NVIC_SetPriorityGrouping>
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b086      	sub	sp, #24
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	4603      	mov	r3, r0
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	607a      	str	r2, [r7, #4]
 80039da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039dc:	f7ff ff40 	bl	8003860 <__NVIC_GetPriorityGrouping>
 80039e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	6978      	ldr	r0, [r7, #20]
 80039e8:	f7ff ff90 	bl	800390c <NVIC_EncodePriority>
 80039ec:	4602      	mov	r2, r0
 80039ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039f2:	4611      	mov	r1, r2
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff ff5f 	bl	80038b8 <__NVIC_SetPriority>
}
 80039fa:	bf00      	nop
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b082      	sub	sp, #8
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	4603      	mov	r3, r0
 8003a0a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff ff33 	bl	800387c <__NVIC_EnableIRQ>
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff ffa4 	bl	8003974 <SysTick_Config>
 8003a2c:	4603      	mov	r3, r0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003a3c:	f3bf 8f5f 	dmb	sy
}
 8003a40:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003a42:	4b07      	ldr	r3, [pc, #28]	@ (8003a60 <HAL_MPU_Disable+0x28>)
 8003a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a46:	4a06      	ldr	r2, [pc, #24]	@ (8003a60 <HAL_MPU_Disable+0x28>)
 8003a48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a4c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003a4e:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <HAL_MPU_Disable+0x2c>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	605a      	str	r2, [r3, #4]
}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	e000ed00 	.word	0xe000ed00
 8003a64:	e000ed90 	.word	0xe000ed90

08003a68 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003a70:	4a0b      	ldr	r2, [pc, #44]	@ (8003aa0 <HAL_MPU_Enable+0x38>)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa4 <HAL_MPU_Enable+0x3c>)
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7e:	4a09      	ldr	r2, [pc, #36]	@ (8003aa4 <HAL_MPU_Enable+0x3c>)
 8003a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a84:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003a86:	f3bf 8f4f 	dsb	sy
}
 8003a8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a8c:	f3bf 8f6f 	isb	sy
}
 8003a90:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	e000ed90 	.word	0xe000ed90
 8003aa4:	e000ed00 	.word	0xe000ed00

08003aa8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	785a      	ldrb	r2, [r3, #1]
 8003ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b24 <HAL_MPU_ConfigRegion+0x7c>)
 8003ab6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b24 <HAL_MPU_ConfigRegion+0x7c>)
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	4a19      	ldr	r2, [pc, #100]	@ (8003b24 <HAL_MPU_ConfigRegion+0x7c>)
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003ac4:	4a17      	ldr	r2, [pc, #92]	@ (8003b24 <HAL_MPU_ConfigRegion+0x7c>)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	7b1b      	ldrb	r3, [r3, #12]
 8003ad0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	7adb      	ldrb	r3, [r3, #11]
 8003ad6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ad8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	7a9b      	ldrb	r3, [r3, #10]
 8003ade:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003ae0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	7b5b      	ldrb	r3, [r3, #13]
 8003ae6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003ae8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	7b9b      	ldrb	r3, [r3, #14]
 8003aee:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003af0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	7bdb      	ldrb	r3, [r3, #15]
 8003af6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003af8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	7a5b      	ldrb	r3, [r3, #9]
 8003afe:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003b00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	7a1b      	ldrb	r3, [r3, #8]
 8003b06:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003b08:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	7812      	ldrb	r2, [r2, #0]
 8003b0e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003b10:	4a04      	ldr	r2, [pc, #16]	@ (8003b24 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003b12:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003b14:	6113      	str	r3, [r2, #16]
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	e000ed90 	.word	0xe000ed90

08003b28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003b30:	f7fd fdc8 	bl	80016c4 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e312      	b.n	8004166 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a66      	ldr	r2, [pc, #408]	@ (8003ce0 <HAL_DMA_Init+0x1b8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d04a      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a65      	ldr	r2, [pc, #404]	@ (8003ce4 <HAL_DMA_Init+0x1bc>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d045      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a63      	ldr	r2, [pc, #396]	@ (8003ce8 <HAL_DMA_Init+0x1c0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d040      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a62      	ldr	r2, [pc, #392]	@ (8003cec <HAL_DMA_Init+0x1c4>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d03b      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a60      	ldr	r2, [pc, #384]	@ (8003cf0 <HAL_DMA_Init+0x1c8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d036      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a5f      	ldr	r2, [pc, #380]	@ (8003cf4 <HAL_DMA_Init+0x1cc>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d031      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a5d      	ldr	r2, [pc, #372]	@ (8003cf8 <HAL_DMA_Init+0x1d0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d02c      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a5c      	ldr	r2, [pc, #368]	@ (8003cfc <HAL_DMA_Init+0x1d4>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d027      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a5a      	ldr	r2, [pc, #360]	@ (8003d00 <HAL_DMA_Init+0x1d8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d022      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a59      	ldr	r2, [pc, #356]	@ (8003d04 <HAL_DMA_Init+0x1dc>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d01d      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a57      	ldr	r2, [pc, #348]	@ (8003d08 <HAL_DMA_Init+0x1e0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d018      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a56      	ldr	r2, [pc, #344]	@ (8003d0c <HAL_DMA_Init+0x1e4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d013      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a54      	ldr	r2, [pc, #336]	@ (8003d10 <HAL_DMA_Init+0x1e8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00e      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a53      	ldr	r2, [pc, #332]	@ (8003d14 <HAL_DMA_Init+0x1ec>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d009      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a51      	ldr	r2, [pc, #324]	@ (8003d18 <HAL_DMA_Init+0x1f0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d004      	beq.n	8003be0 <HAL_DMA_Init+0xb8>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a50      	ldr	r2, [pc, #320]	@ (8003d1c <HAL_DMA_Init+0x1f4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d101      	bne.n	8003be4 <HAL_DMA_Init+0xbc>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <HAL_DMA_Init+0xbe>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 813c 	beq.w	8003e64 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a37      	ldr	r2, [pc, #220]	@ (8003ce0 <HAL_DMA_Init+0x1b8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d04a      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a36      	ldr	r2, [pc, #216]	@ (8003ce4 <HAL_DMA_Init+0x1bc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d045      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a34      	ldr	r2, [pc, #208]	@ (8003ce8 <HAL_DMA_Init+0x1c0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d040      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a33      	ldr	r2, [pc, #204]	@ (8003cec <HAL_DMA_Init+0x1c4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d03b      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a31      	ldr	r2, [pc, #196]	@ (8003cf0 <HAL_DMA_Init+0x1c8>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d036      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a30      	ldr	r2, [pc, #192]	@ (8003cf4 <HAL_DMA_Init+0x1cc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d031      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a2e      	ldr	r2, [pc, #184]	@ (8003cf8 <HAL_DMA_Init+0x1d0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d02c      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a2d      	ldr	r2, [pc, #180]	@ (8003cfc <HAL_DMA_Init+0x1d4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d027      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a2b      	ldr	r2, [pc, #172]	@ (8003d00 <HAL_DMA_Init+0x1d8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d022      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a2a      	ldr	r2, [pc, #168]	@ (8003d04 <HAL_DMA_Init+0x1dc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d01d      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a28      	ldr	r2, [pc, #160]	@ (8003d08 <HAL_DMA_Init+0x1e0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d018      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a27      	ldr	r2, [pc, #156]	@ (8003d0c <HAL_DMA_Init+0x1e4>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d013      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a25      	ldr	r2, [pc, #148]	@ (8003d10 <HAL_DMA_Init+0x1e8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00e      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a24      	ldr	r2, [pc, #144]	@ (8003d14 <HAL_DMA_Init+0x1ec>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d009      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a22      	ldr	r2, [pc, #136]	@ (8003d18 <HAL_DMA_Init+0x1f0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d004      	beq.n	8003c9c <HAL_DMA_Init+0x174>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a21      	ldr	r2, [pc, #132]	@ (8003d1c <HAL_DMA_Init+0x1f4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d108      	bne.n	8003cae <HAL_DMA_Init+0x186>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0201 	bic.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	e007      	b.n	8003cbe <HAL_DMA_Init+0x196>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0201 	bic.w	r2, r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003cbe:	e02f      	b.n	8003d20 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cc0:	f7fd fd00 	bl	80016c4 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b05      	cmp	r3, #5
 8003ccc:	d928      	bls.n	8003d20 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2203      	movs	r2, #3
 8003cd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e242      	b.n	8004166 <HAL_DMA_Init+0x63e>
 8003ce0:	40020010 	.word	0x40020010
 8003ce4:	40020028 	.word	0x40020028
 8003ce8:	40020040 	.word	0x40020040
 8003cec:	40020058 	.word	0x40020058
 8003cf0:	40020070 	.word	0x40020070
 8003cf4:	40020088 	.word	0x40020088
 8003cf8:	400200a0 	.word	0x400200a0
 8003cfc:	400200b8 	.word	0x400200b8
 8003d00:	40020410 	.word	0x40020410
 8003d04:	40020428 	.word	0x40020428
 8003d08:	40020440 	.word	0x40020440
 8003d0c:	40020458 	.word	0x40020458
 8003d10:	40020470 	.word	0x40020470
 8003d14:	40020488 	.word	0x40020488
 8003d18:	400204a0 	.word	0x400204a0
 8003d1c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1c8      	bne.n	8003cc0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	4b83      	ldr	r3, [pc, #524]	@ (8003f48 <HAL_DMA_Init+0x420>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003d46:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d52:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d5e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d107      	bne.n	8003d84 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b28      	cmp	r3, #40	@ 0x28
 8003d8a:	d903      	bls.n	8003d94 <HAL_DMA_Init+0x26c>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d92:	d91f      	bls.n	8003dd4 <HAL_DMA_Init+0x2ac>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d9a:	d903      	bls.n	8003da4 <HAL_DMA_Init+0x27c>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2b42      	cmp	r3, #66	@ 0x42
 8003da2:	d917      	bls.n	8003dd4 <HAL_DMA_Init+0x2ac>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b46      	cmp	r3, #70	@ 0x46
 8003daa:	d903      	bls.n	8003db4 <HAL_DMA_Init+0x28c>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b48      	cmp	r3, #72	@ 0x48
 8003db2:	d90f      	bls.n	8003dd4 <HAL_DMA_Init+0x2ac>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b4e      	cmp	r3, #78	@ 0x4e
 8003dba:	d903      	bls.n	8003dc4 <HAL_DMA_Init+0x29c>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2b52      	cmp	r3, #82	@ 0x52
 8003dc2:	d907      	bls.n	8003dd4 <HAL_DMA_Init+0x2ac>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b73      	cmp	r3, #115	@ 0x73
 8003dca:	d905      	bls.n	8003dd8 <HAL_DMA_Init+0x2b0>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b77      	cmp	r3, #119	@ 0x77
 8003dd2:	d801      	bhi.n	8003dd8 <HAL_DMA_Init+0x2b0>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <HAL_DMA_Init+0x2b2>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003de4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f023 0307 	bic.w	r3, r3, #7
 8003dfc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d117      	bne.n	8003e40 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00e      	beq.n	8003e40 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f002 fb3a 	bl	800649c <DMA_CheckFifoParam>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2240      	movs	r2, #64	@ 0x40
 8003e32:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e192      	b.n	8004166 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f002 fa75 	bl	8006338 <DMA_CalcBaseAndBitshift>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	223f      	movs	r2, #63	@ 0x3f
 8003e5c:	409a      	lsls	r2, r3
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	609a      	str	r2, [r3, #8]
 8003e62:	e0c8      	b.n	8003ff6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a38      	ldr	r2, [pc, #224]	@ (8003f4c <HAL_DMA_Init+0x424>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d022      	beq.n	8003eb4 <HAL_DMA_Init+0x38c>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a37      	ldr	r2, [pc, #220]	@ (8003f50 <HAL_DMA_Init+0x428>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d01d      	beq.n	8003eb4 <HAL_DMA_Init+0x38c>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a35      	ldr	r2, [pc, #212]	@ (8003f54 <HAL_DMA_Init+0x42c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d018      	beq.n	8003eb4 <HAL_DMA_Init+0x38c>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a34      	ldr	r2, [pc, #208]	@ (8003f58 <HAL_DMA_Init+0x430>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d013      	beq.n	8003eb4 <HAL_DMA_Init+0x38c>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a32      	ldr	r2, [pc, #200]	@ (8003f5c <HAL_DMA_Init+0x434>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00e      	beq.n	8003eb4 <HAL_DMA_Init+0x38c>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a31      	ldr	r2, [pc, #196]	@ (8003f60 <HAL_DMA_Init+0x438>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d009      	beq.n	8003eb4 <HAL_DMA_Init+0x38c>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a2f      	ldr	r2, [pc, #188]	@ (8003f64 <HAL_DMA_Init+0x43c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d004      	beq.n	8003eb4 <HAL_DMA_Init+0x38c>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a2e      	ldr	r2, [pc, #184]	@ (8003f68 <HAL_DMA_Init+0x440>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d101      	bne.n	8003eb8 <HAL_DMA_Init+0x390>
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e000      	b.n	8003eba <HAL_DMA_Init+0x392>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 8092 	beq.w	8003fe4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a21      	ldr	r2, [pc, #132]	@ (8003f4c <HAL_DMA_Init+0x424>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d021      	beq.n	8003f0e <HAL_DMA_Init+0x3e6>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a20      	ldr	r2, [pc, #128]	@ (8003f50 <HAL_DMA_Init+0x428>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d01c      	beq.n	8003f0e <HAL_DMA_Init+0x3e6>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1e      	ldr	r2, [pc, #120]	@ (8003f54 <HAL_DMA_Init+0x42c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d017      	beq.n	8003f0e <HAL_DMA_Init+0x3e6>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8003f58 <HAL_DMA_Init+0x430>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d012      	beq.n	8003f0e <HAL_DMA_Init+0x3e6>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a1b      	ldr	r2, [pc, #108]	@ (8003f5c <HAL_DMA_Init+0x434>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00d      	beq.n	8003f0e <HAL_DMA_Init+0x3e6>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a1a      	ldr	r2, [pc, #104]	@ (8003f60 <HAL_DMA_Init+0x438>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d008      	beq.n	8003f0e <HAL_DMA_Init+0x3e6>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a18      	ldr	r2, [pc, #96]	@ (8003f64 <HAL_DMA_Init+0x43c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d003      	beq.n	8003f0e <HAL_DMA_Init+0x3e6>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a17      	ldr	r2, [pc, #92]	@ (8003f68 <HAL_DMA_Init+0x440>)
 8003f0c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2202      	movs	r2, #2
 8003f12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4b10      	ldr	r3, [pc, #64]	@ (8003f6c <HAL_DMA_Init+0x444>)
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b40      	cmp	r3, #64	@ 0x40
 8003f34:	d01c      	beq.n	8003f70 <HAL_DMA_Init+0x448>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2b80      	cmp	r3, #128	@ 0x80
 8003f3c:	d102      	bne.n	8003f44 <HAL_DMA_Init+0x41c>
 8003f3e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f42:	e016      	b.n	8003f72 <HAL_DMA_Init+0x44a>
 8003f44:	2300      	movs	r3, #0
 8003f46:	e014      	b.n	8003f72 <HAL_DMA_Init+0x44a>
 8003f48:	fe10803f 	.word	0xfe10803f
 8003f4c:	58025408 	.word	0x58025408
 8003f50:	5802541c 	.word	0x5802541c
 8003f54:	58025430 	.word	0x58025430
 8003f58:	58025444 	.word	0x58025444
 8003f5c:	58025458 	.word	0x58025458
 8003f60:	5802546c 	.word	0x5802546c
 8003f64:	58025480 	.word	0x58025480
 8003f68:	58025494 	.word	0x58025494
 8003f6c:	fffe000f 	.word	0xfffe000f
 8003f70:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68d2      	ldr	r2, [r2, #12]
 8003f76:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003f80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003f88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003f90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003f98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003fa0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4b6e      	ldr	r3, [pc, #440]	@ (8004170 <HAL_DMA_Init+0x648>)
 8003fb8:	4413      	add	r3, r2
 8003fba:	4a6e      	ldr	r2, [pc, #440]	@ (8004174 <HAL_DMA_Init+0x64c>)
 8003fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc0:	091b      	lsrs	r3, r3, #4
 8003fc2:	009a      	lsls	r2, r3, #2
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f002 f9b5 	bl	8006338 <DMA_CalcBaseAndBitshift>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd6:	f003 031f 	and.w	r3, r3, #31
 8003fda:	2201      	movs	r2, #1
 8003fdc:	409a      	lsls	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	605a      	str	r2, [r3, #4]
 8003fe2:	e008      	b.n	8003ff6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2240      	movs	r2, #64	@ 0x40
 8003fe8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2203      	movs	r2, #3
 8003fee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e0b7      	b.n	8004166 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a5f      	ldr	r2, [pc, #380]	@ (8004178 <HAL_DMA_Init+0x650>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d072      	beq.n	80040e6 <HAL_DMA_Init+0x5be>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a5d      	ldr	r2, [pc, #372]	@ (800417c <HAL_DMA_Init+0x654>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d06d      	beq.n	80040e6 <HAL_DMA_Init+0x5be>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a5c      	ldr	r2, [pc, #368]	@ (8004180 <HAL_DMA_Init+0x658>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d068      	beq.n	80040e6 <HAL_DMA_Init+0x5be>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a5a      	ldr	r2, [pc, #360]	@ (8004184 <HAL_DMA_Init+0x65c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d063      	beq.n	80040e6 <HAL_DMA_Init+0x5be>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a59      	ldr	r2, [pc, #356]	@ (8004188 <HAL_DMA_Init+0x660>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d05e      	beq.n	80040e6 <HAL_DMA_Init+0x5be>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a57      	ldr	r2, [pc, #348]	@ (800418c <HAL_DMA_Init+0x664>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d059      	beq.n	80040e6 <HAL_DMA_Init+0x5be>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a56      	ldr	r2, [pc, #344]	@ (8004190 <HAL_DMA_Init+0x668>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d054      	beq.n	80040e6 <HAL_DMA_Init+0x5be>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a54      	ldr	r2, [pc, #336]	@ (8004194 <HAL_DMA_Init+0x66c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d04f      	beq.n	80040e6 <HAL_DMA_Init+0x5be>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a53      	ldr	r2, [pc, #332]	@ (8004198 <HAL_DMA_Init+0x670>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d04a      	beq.n	80040e6 <HAL_DMA_Init+0x5be>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a51      	ldr	r2, [pc, #324]	@ (800419c <HAL_DMA_Init+0x674>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d045      	beq.n	80040e6 <HAL_DMA_Init+0x5be>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a50      	ldr	r2, [pc, #320]	@ (80041a0 <HAL_DMA_Init+0x678>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d040      	beq.n	80040e6 <HAL_DMA_Init+0x5be>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a4e      	ldr	r2, [pc, #312]	@ (80041a4 <HAL_DMA_Init+0x67c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d03b      	beq.n	80040e6 <HAL_DMA_Init+0x5be>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a4d      	ldr	r2, [pc, #308]	@ (80041a8 <HAL_DMA_Init+0x680>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d036      	beq.n	80040e6 <HAL_DMA_Init+0x5be>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a4b      	ldr	r2, [pc, #300]	@ (80041ac <HAL_DMA_Init+0x684>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d031      	beq.n	80040e6 <HAL_DMA_Init+0x5be>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a4a      	ldr	r2, [pc, #296]	@ (80041b0 <HAL_DMA_Init+0x688>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d02c      	beq.n	80040e6 <HAL_DMA_Init+0x5be>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a48      	ldr	r2, [pc, #288]	@ (80041b4 <HAL_DMA_Init+0x68c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d027      	beq.n	80040e6 <HAL_DMA_Init+0x5be>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a47      	ldr	r2, [pc, #284]	@ (80041b8 <HAL_DMA_Init+0x690>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d022      	beq.n	80040e6 <HAL_DMA_Init+0x5be>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a45      	ldr	r2, [pc, #276]	@ (80041bc <HAL_DMA_Init+0x694>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d01d      	beq.n	80040e6 <HAL_DMA_Init+0x5be>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a44      	ldr	r2, [pc, #272]	@ (80041c0 <HAL_DMA_Init+0x698>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d018      	beq.n	80040e6 <HAL_DMA_Init+0x5be>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a42      	ldr	r2, [pc, #264]	@ (80041c4 <HAL_DMA_Init+0x69c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d013      	beq.n	80040e6 <HAL_DMA_Init+0x5be>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a41      	ldr	r2, [pc, #260]	@ (80041c8 <HAL_DMA_Init+0x6a0>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00e      	beq.n	80040e6 <HAL_DMA_Init+0x5be>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a3f      	ldr	r2, [pc, #252]	@ (80041cc <HAL_DMA_Init+0x6a4>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d009      	beq.n	80040e6 <HAL_DMA_Init+0x5be>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a3e      	ldr	r2, [pc, #248]	@ (80041d0 <HAL_DMA_Init+0x6a8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d004      	beq.n	80040e6 <HAL_DMA_Init+0x5be>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a3c      	ldr	r2, [pc, #240]	@ (80041d4 <HAL_DMA_Init+0x6ac>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d101      	bne.n	80040ea <HAL_DMA_Init+0x5c2>
 80040e6:	2301      	movs	r3, #1
 80040e8:	e000      	b.n	80040ec <HAL_DMA_Init+0x5c4>
 80040ea:	2300      	movs	r3, #0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d032      	beq.n	8004156 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f002 fa4f 	bl	8006594 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	2b80      	cmp	r3, #128	@ 0x80
 80040fc:	d102      	bne.n	8004104 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004118:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d010      	beq.n	8004144 <HAL_DMA_Init+0x61c>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b08      	cmp	r3, #8
 8004128:	d80c      	bhi.n	8004144 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f002 facc 	bl	80066c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004140:	605a      	str	r2, [r3, #4]
 8004142:	e008      	b.n	8004156 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	a7fdabf8 	.word	0xa7fdabf8
 8004174:	cccccccd 	.word	0xcccccccd
 8004178:	40020010 	.word	0x40020010
 800417c:	40020028 	.word	0x40020028
 8004180:	40020040 	.word	0x40020040
 8004184:	40020058 	.word	0x40020058
 8004188:	40020070 	.word	0x40020070
 800418c:	40020088 	.word	0x40020088
 8004190:	400200a0 	.word	0x400200a0
 8004194:	400200b8 	.word	0x400200b8
 8004198:	40020410 	.word	0x40020410
 800419c:	40020428 	.word	0x40020428
 80041a0:	40020440 	.word	0x40020440
 80041a4:	40020458 	.word	0x40020458
 80041a8:	40020470 	.word	0x40020470
 80041ac:	40020488 	.word	0x40020488
 80041b0:	400204a0 	.word	0x400204a0
 80041b4:	400204b8 	.word	0x400204b8
 80041b8:	58025408 	.word	0x58025408
 80041bc:	5802541c 	.word	0x5802541c
 80041c0:	58025430 	.word	0x58025430
 80041c4:	58025444 	.word	0x58025444
 80041c8:	58025458 	.word	0x58025458
 80041cc:	5802546c 	.word	0x5802546c
 80041d0:	58025480 	.word	0x58025480
 80041d4:	58025494 	.word	0x58025494

080041d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e226      	b.n	8004642 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_DMA_Start_IT+0x2a>
 80041fe:	2302      	movs	r3, #2
 8004200:	e21f      	b.n	8004642 <HAL_DMA_Start_IT+0x46a>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b01      	cmp	r3, #1
 8004214:	f040 820a 	bne.w	800462c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2202      	movs	r2, #2
 800421c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a68      	ldr	r2, [pc, #416]	@ (80043cc <HAL_DMA_Start_IT+0x1f4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d04a      	beq.n	80042c6 <HAL_DMA_Start_IT+0xee>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a66      	ldr	r2, [pc, #408]	@ (80043d0 <HAL_DMA_Start_IT+0x1f8>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d045      	beq.n	80042c6 <HAL_DMA_Start_IT+0xee>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a65      	ldr	r2, [pc, #404]	@ (80043d4 <HAL_DMA_Start_IT+0x1fc>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d040      	beq.n	80042c6 <HAL_DMA_Start_IT+0xee>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a63      	ldr	r2, [pc, #396]	@ (80043d8 <HAL_DMA_Start_IT+0x200>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d03b      	beq.n	80042c6 <HAL_DMA_Start_IT+0xee>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a62      	ldr	r2, [pc, #392]	@ (80043dc <HAL_DMA_Start_IT+0x204>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d036      	beq.n	80042c6 <HAL_DMA_Start_IT+0xee>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a60      	ldr	r2, [pc, #384]	@ (80043e0 <HAL_DMA_Start_IT+0x208>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d031      	beq.n	80042c6 <HAL_DMA_Start_IT+0xee>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a5f      	ldr	r2, [pc, #380]	@ (80043e4 <HAL_DMA_Start_IT+0x20c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d02c      	beq.n	80042c6 <HAL_DMA_Start_IT+0xee>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a5d      	ldr	r2, [pc, #372]	@ (80043e8 <HAL_DMA_Start_IT+0x210>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d027      	beq.n	80042c6 <HAL_DMA_Start_IT+0xee>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a5c      	ldr	r2, [pc, #368]	@ (80043ec <HAL_DMA_Start_IT+0x214>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d022      	beq.n	80042c6 <HAL_DMA_Start_IT+0xee>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a5a      	ldr	r2, [pc, #360]	@ (80043f0 <HAL_DMA_Start_IT+0x218>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d01d      	beq.n	80042c6 <HAL_DMA_Start_IT+0xee>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a59      	ldr	r2, [pc, #356]	@ (80043f4 <HAL_DMA_Start_IT+0x21c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d018      	beq.n	80042c6 <HAL_DMA_Start_IT+0xee>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a57      	ldr	r2, [pc, #348]	@ (80043f8 <HAL_DMA_Start_IT+0x220>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d013      	beq.n	80042c6 <HAL_DMA_Start_IT+0xee>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a56      	ldr	r2, [pc, #344]	@ (80043fc <HAL_DMA_Start_IT+0x224>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00e      	beq.n	80042c6 <HAL_DMA_Start_IT+0xee>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a54      	ldr	r2, [pc, #336]	@ (8004400 <HAL_DMA_Start_IT+0x228>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d009      	beq.n	80042c6 <HAL_DMA_Start_IT+0xee>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a53      	ldr	r2, [pc, #332]	@ (8004404 <HAL_DMA_Start_IT+0x22c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d004      	beq.n	80042c6 <HAL_DMA_Start_IT+0xee>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a51      	ldr	r2, [pc, #324]	@ (8004408 <HAL_DMA_Start_IT+0x230>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d108      	bne.n	80042d8 <HAL_DMA_Start_IT+0x100>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0201 	bic.w	r2, r2, #1
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	e007      	b.n	80042e8 <HAL_DMA_Start_IT+0x110>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0201 	bic.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f001 fe76 	bl	8005fe0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a34      	ldr	r2, [pc, #208]	@ (80043cc <HAL_DMA_Start_IT+0x1f4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d04a      	beq.n	8004394 <HAL_DMA_Start_IT+0x1bc>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a33      	ldr	r2, [pc, #204]	@ (80043d0 <HAL_DMA_Start_IT+0x1f8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d045      	beq.n	8004394 <HAL_DMA_Start_IT+0x1bc>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a31      	ldr	r2, [pc, #196]	@ (80043d4 <HAL_DMA_Start_IT+0x1fc>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d040      	beq.n	8004394 <HAL_DMA_Start_IT+0x1bc>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a30      	ldr	r2, [pc, #192]	@ (80043d8 <HAL_DMA_Start_IT+0x200>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d03b      	beq.n	8004394 <HAL_DMA_Start_IT+0x1bc>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a2e      	ldr	r2, [pc, #184]	@ (80043dc <HAL_DMA_Start_IT+0x204>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d036      	beq.n	8004394 <HAL_DMA_Start_IT+0x1bc>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a2d      	ldr	r2, [pc, #180]	@ (80043e0 <HAL_DMA_Start_IT+0x208>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d031      	beq.n	8004394 <HAL_DMA_Start_IT+0x1bc>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a2b      	ldr	r2, [pc, #172]	@ (80043e4 <HAL_DMA_Start_IT+0x20c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d02c      	beq.n	8004394 <HAL_DMA_Start_IT+0x1bc>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a2a      	ldr	r2, [pc, #168]	@ (80043e8 <HAL_DMA_Start_IT+0x210>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d027      	beq.n	8004394 <HAL_DMA_Start_IT+0x1bc>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a28      	ldr	r2, [pc, #160]	@ (80043ec <HAL_DMA_Start_IT+0x214>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d022      	beq.n	8004394 <HAL_DMA_Start_IT+0x1bc>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a27      	ldr	r2, [pc, #156]	@ (80043f0 <HAL_DMA_Start_IT+0x218>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d01d      	beq.n	8004394 <HAL_DMA_Start_IT+0x1bc>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a25      	ldr	r2, [pc, #148]	@ (80043f4 <HAL_DMA_Start_IT+0x21c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d018      	beq.n	8004394 <HAL_DMA_Start_IT+0x1bc>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a24      	ldr	r2, [pc, #144]	@ (80043f8 <HAL_DMA_Start_IT+0x220>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d013      	beq.n	8004394 <HAL_DMA_Start_IT+0x1bc>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a22      	ldr	r2, [pc, #136]	@ (80043fc <HAL_DMA_Start_IT+0x224>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00e      	beq.n	8004394 <HAL_DMA_Start_IT+0x1bc>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a21      	ldr	r2, [pc, #132]	@ (8004400 <HAL_DMA_Start_IT+0x228>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d009      	beq.n	8004394 <HAL_DMA_Start_IT+0x1bc>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1f      	ldr	r2, [pc, #124]	@ (8004404 <HAL_DMA_Start_IT+0x22c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d004      	beq.n	8004394 <HAL_DMA_Start_IT+0x1bc>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1e      	ldr	r2, [pc, #120]	@ (8004408 <HAL_DMA_Start_IT+0x230>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d101      	bne.n	8004398 <HAL_DMA_Start_IT+0x1c0>
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <HAL_DMA_Start_IT+0x1c2>
 8004398:	2300      	movs	r3, #0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d036      	beq.n	800440c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f023 021e 	bic.w	r2, r3, #30
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 0216 	orr.w	r2, r2, #22
 80043b0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d03e      	beq.n	8004438 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f042 0208 	orr.w	r2, r2, #8
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	e035      	b.n	8004438 <HAL_DMA_Start_IT+0x260>
 80043cc:	40020010 	.word	0x40020010
 80043d0:	40020028 	.word	0x40020028
 80043d4:	40020040 	.word	0x40020040
 80043d8:	40020058 	.word	0x40020058
 80043dc:	40020070 	.word	0x40020070
 80043e0:	40020088 	.word	0x40020088
 80043e4:	400200a0 	.word	0x400200a0
 80043e8:	400200b8 	.word	0x400200b8
 80043ec:	40020410 	.word	0x40020410
 80043f0:	40020428 	.word	0x40020428
 80043f4:	40020440 	.word	0x40020440
 80043f8:	40020458 	.word	0x40020458
 80043fc:	40020470 	.word	0x40020470
 8004400:	40020488 	.word	0x40020488
 8004404:	400204a0 	.word	0x400204a0
 8004408:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f023 020e 	bic.w	r2, r3, #14
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 020a 	orr.w	r2, r2, #10
 800441e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004424:	2b00      	cmp	r3, #0
 8004426:	d007      	beq.n	8004438 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0204 	orr.w	r2, r2, #4
 8004436:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a83      	ldr	r2, [pc, #524]	@ (800464c <HAL_DMA_Start_IT+0x474>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d072      	beq.n	8004528 <HAL_DMA_Start_IT+0x350>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a82      	ldr	r2, [pc, #520]	@ (8004650 <HAL_DMA_Start_IT+0x478>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d06d      	beq.n	8004528 <HAL_DMA_Start_IT+0x350>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a80      	ldr	r2, [pc, #512]	@ (8004654 <HAL_DMA_Start_IT+0x47c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d068      	beq.n	8004528 <HAL_DMA_Start_IT+0x350>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a7f      	ldr	r2, [pc, #508]	@ (8004658 <HAL_DMA_Start_IT+0x480>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d063      	beq.n	8004528 <HAL_DMA_Start_IT+0x350>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a7d      	ldr	r2, [pc, #500]	@ (800465c <HAL_DMA_Start_IT+0x484>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d05e      	beq.n	8004528 <HAL_DMA_Start_IT+0x350>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a7c      	ldr	r2, [pc, #496]	@ (8004660 <HAL_DMA_Start_IT+0x488>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d059      	beq.n	8004528 <HAL_DMA_Start_IT+0x350>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a7a      	ldr	r2, [pc, #488]	@ (8004664 <HAL_DMA_Start_IT+0x48c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d054      	beq.n	8004528 <HAL_DMA_Start_IT+0x350>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a79      	ldr	r2, [pc, #484]	@ (8004668 <HAL_DMA_Start_IT+0x490>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d04f      	beq.n	8004528 <HAL_DMA_Start_IT+0x350>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a77      	ldr	r2, [pc, #476]	@ (800466c <HAL_DMA_Start_IT+0x494>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d04a      	beq.n	8004528 <HAL_DMA_Start_IT+0x350>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a76      	ldr	r2, [pc, #472]	@ (8004670 <HAL_DMA_Start_IT+0x498>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d045      	beq.n	8004528 <HAL_DMA_Start_IT+0x350>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a74      	ldr	r2, [pc, #464]	@ (8004674 <HAL_DMA_Start_IT+0x49c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d040      	beq.n	8004528 <HAL_DMA_Start_IT+0x350>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a73      	ldr	r2, [pc, #460]	@ (8004678 <HAL_DMA_Start_IT+0x4a0>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d03b      	beq.n	8004528 <HAL_DMA_Start_IT+0x350>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a71      	ldr	r2, [pc, #452]	@ (800467c <HAL_DMA_Start_IT+0x4a4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d036      	beq.n	8004528 <HAL_DMA_Start_IT+0x350>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a70      	ldr	r2, [pc, #448]	@ (8004680 <HAL_DMA_Start_IT+0x4a8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d031      	beq.n	8004528 <HAL_DMA_Start_IT+0x350>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a6e      	ldr	r2, [pc, #440]	@ (8004684 <HAL_DMA_Start_IT+0x4ac>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d02c      	beq.n	8004528 <HAL_DMA_Start_IT+0x350>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a6d      	ldr	r2, [pc, #436]	@ (8004688 <HAL_DMA_Start_IT+0x4b0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d027      	beq.n	8004528 <HAL_DMA_Start_IT+0x350>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a6b      	ldr	r2, [pc, #428]	@ (800468c <HAL_DMA_Start_IT+0x4b4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d022      	beq.n	8004528 <HAL_DMA_Start_IT+0x350>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a6a      	ldr	r2, [pc, #424]	@ (8004690 <HAL_DMA_Start_IT+0x4b8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d01d      	beq.n	8004528 <HAL_DMA_Start_IT+0x350>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a68      	ldr	r2, [pc, #416]	@ (8004694 <HAL_DMA_Start_IT+0x4bc>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d018      	beq.n	8004528 <HAL_DMA_Start_IT+0x350>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a67      	ldr	r2, [pc, #412]	@ (8004698 <HAL_DMA_Start_IT+0x4c0>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d013      	beq.n	8004528 <HAL_DMA_Start_IT+0x350>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a65      	ldr	r2, [pc, #404]	@ (800469c <HAL_DMA_Start_IT+0x4c4>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d00e      	beq.n	8004528 <HAL_DMA_Start_IT+0x350>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a64      	ldr	r2, [pc, #400]	@ (80046a0 <HAL_DMA_Start_IT+0x4c8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d009      	beq.n	8004528 <HAL_DMA_Start_IT+0x350>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a62      	ldr	r2, [pc, #392]	@ (80046a4 <HAL_DMA_Start_IT+0x4cc>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d004      	beq.n	8004528 <HAL_DMA_Start_IT+0x350>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a61      	ldr	r2, [pc, #388]	@ (80046a8 <HAL_DMA_Start_IT+0x4d0>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d101      	bne.n	800452c <HAL_DMA_Start_IT+0x354>
 8004528:	2301      	movs	r3, #1
 800452a:	e000      	b.n	800452e <HAL_DMA_Start_IT+0x356>
 800452c:	2300      	movs	r3, #0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d01a      	beq.n	8004568 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d007      	beq.n	8004550 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800454a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800454e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d007      	beq.n	8004568 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004562:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004566:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a37      	ldr	r2, [pc, #220]	@ (800464c <HAL_DMA_Start_IT+0x474>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d04a      	beq.n	8004608 <HAL_DMA_Start_IT+0x430>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a36      	ldr	r2, [pc, #216]	@ (8004650 <HAL_DMA_Start_IT+0x478>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d045      	beq.n	8004608 <HAL_DMA_Start_IT+0x430>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a34      	ldr	r2, [pc, #208]	@ (8004654 <HAL_DMA_Start_IT+0x47c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d040      	beq.n	8004608 <HAL_DMA_Start_IT+0x430>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a33      	ldr	r2, [pc, #204]	@ (8004658 <HAL_DMA_Start_IT+0x480>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d03b      	beq.n	8004608 <HAL_DMA_Start_IT+0x430>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a31      	ldr	r2, [pc, #196]	@ (800465c <HAL_DMA_Start_IT+0x484>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d036      	beq.n	8004608 <HAL_DMA_Start_IT+0x430>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a30      	ldr	r2, [pc, #192]	@ (8004660 <HAL_DMA_Start_IT+0x488>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d031      	beq.n	8004608 <HAL_DMA_Start_IT+0x430>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a2e      	ldr	r2, [pc, #184]	@ (8004664 <HAL_DMA_Start_IT+0x48c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d02c      	beq.n	8004608 <HAL_DMA_Start_IT+0x430>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a2d      	ldr	r2, [pc, #180]	@ (8004668 <HAL_DMA_Start_IT+0x490>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d027      	beq.n	8004608 <HAL_DMA_Start_IT+0x430>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a2b      	ldr	r2, [pc, #172]	@ (800466c <HAL_DMA_Start_IT+0x494>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d022      	beq.n	8004608 <HAL_DMA_Start_IT+0x430>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a2a      	ldr	r2, [pc, #168]	@ (8004670 <HAL_DMA_Start_IT+0x498>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d01d      	beq.n	8004608 <HAL_DMA_Start_IT+0x430>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a28      	ldr	r2, [pc, #160]	@ (8004674 <HAL_DMA_Start_IT+0x49c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d018      	beq.n	8004608 <HAL_DMA_Start_IT+0x430>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a27      	ldr	r2, [pc, #156]	@ (8004678 <HAL_DMA_Start_IT+0x4a0>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d013      	beq.n	8004608 <HAL_DMA_Start_IT+0x430>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a25      	ldr	r2, [pc, #148]	@ (800467c <HAL_DMA_Start_IT+0x4a4>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d00e      	beq.n	8004608 <HAL_DMA_Start_IT+0x430>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a24      	ldr	r2, [pc, #144]	@ (8004680 <HAL_DMA_Start_IT+0x4a8>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d009      	beq.n	8004608 <HAL_DMA_Start_IT+0x430>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a22      	ldr	r2, [pc, #136]	@ (8004684 <HAL_DMA_Start_IT+0x4ac>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d004      	beq.n	8004608 <HAL_DMA_Start_IT+0x430>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a21      	ldr	r2, [pc, #132]	@ (8004688 <HAL_DMA_Start_IT+0x4b0>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d108      	bne.n	800461a <HAL_DMA_Start_IT+0x442>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0201 	orr.w	r2, r2, #1
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	e012      	b.n	8004640 <HAL_DMA_Start_IT+0x468>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f042 0201 	orr.w	r2, r2, #1
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	e009      	b.n	8004640 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004632:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004640:	7dfb      	ldrb	r3, [r7, #23]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40020010 	.word	0x40020010
 8004650:	40020028 	.word	0x40020028
 8004654:	40020040 	.word	0x40020040
 8004658:	40020058 	.word	0x40020058
 800465c:	40020070 	.word	0x40020070
 8004660:	40020088 	.word	0x40020088
 8004664:	400200a0 	.word	0x400200a0
 8004668:	400200b8 	.word	0x400200b8
 800466c:	40020410 	.word	0x40020410
 8004670:	40020428 	.word	0x40020428
 8004674:	40020440 	.word	0x40020440
 8004678:	40020458 	.word	0x40020458
 800467c:	40020470 	.word	0x40020470
 8004680:	40020488 	.word	0x40020488
 8004684:	400204a0 	.word	0x400204a0
 8004688:	400204b8 	.word	0x400204b8
 800468c:	58025408 	.word	0x58025408
 8004690:	5802541c 	.word	0x5802541c
 8004694:	58025430 	.word	0x58025430
 8004698:	58025444 	.word	0x58025444
 800469c:	58025458 	.word	0x58025458
 80046a0:	5802546c 	.word	0x5802546c
 80046a4:	58025480 	.word	0x58025480
 80046a8:	58025494 	.word	0x58025494

080046ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80046b4:	f7fd f806 	bl	80016c4 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e2dc      	b.n	8004c7e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d008      	beq.n	80046e2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2280      	movs	r2, #128	@ 0x80
 80046d4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e2cd      	b.n	8004c7e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a76      	ldr	r2, [pc, #472]	@ (80048c0 <HAL_DMA_Abort+0x214>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d04a      	beq.n	8004782 <HAL_DMA_Abort+0xd6>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a74      	ldr	r2, [pc, #464]	@ (80048c4 <HAL_DMA_Abort+0x218>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d045      	beq.n	8004782 <HAL_DMA_Abort+0xd6>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a73      	ldr	r2, [pc, #460]	@ (80048c8 <HAL_DMA_Abort+0x21c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d040      	beq.n	8004782 <HAL_DMA_Abort+0xd6>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a71      	ldr	r2, [pc, #452]	@ (80048cc <HAL_DMA_Abort+0x220>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d03b      	beq.n	8004782 <HAL_DMA_Abort+0xd6>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a70      	ldr	r2, [pc, #448]	@ (80048d0 <HAL_DMA_Abort+0x224>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d036      	beq.n	8004782 <HAL_DMA_Abort+0xd6>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a6e      	ldr	r2, [pc, #440]	@ (80048d4 <HAL_DMA_Abort+0x228>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d031      	beq.n	8004782 <HAL_DMA_Abort+0xd6>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a6d      	ldr	r2, [pc, #436]	@ (80048d8 <HAL_DMA_Abort+0x22c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d02c      	beq.n	8004782 <HAL_DMA_Abort+0xd6>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a6b      	ldr	r2, [pc, #428]	@ (80048dc <HAL_DMA_Abort+0x230>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d027      	beq.n	8004782 <HAL_DMA_Abort+0xd6>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a6a      	ldr	r2, [pc, #424]	@ (80048e0 <HAL_DMA_Abort+0x234>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d022      	beq.n	8004782 <HAL_DMA_Abort+0xd6>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a68      	ldr	r2, [pc, #416]	@ (80048e4 <HAL_DMA_Abort+0x238>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d01d      	beq.n	8004782 <HAL_DMA_Abort+0xd6>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a67      	ldr	r2, [pc, #412]	@ (80048e8 <HAL_DMA_Abort+0x23c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d018      	beq.n	8004782 <HAL_DMA_Abort+0xd6>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a65      	ldr	r2, [pc, #404]	@ (80048ec <HAL_DMA_Abort+0x240>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d013      	beq.n	8004782 <HAL_DMA_Abort+0xd6>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a64      	ldr	r2, [pc, #400]	@ (80048f0 <HAL_DMA_Abort+0x244>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d00e      	beq.n	8004782 <HAL_DMA_Abort+0xd6>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a62      	ldr	r2, [pc, #392]	@ (80048f4 <HAL_DMA_Abort+0x248>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d009      	beq.n	8004782 <HAL_DMA_Abort+0xd6>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a61      	ldr	r2, [pc, #388]	@ (80048f8 <HAL_DMA_Abort+0x24c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d004      	beq.n	8004782 <HAL_DMA_Abort+0xd6>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a5f      	ldr	r2, [pc, #380]	@ (80048fc <HAL_DMA_Abort+0x250>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d101      	bne.n	8004786 <HAL_DMA_Abort+0xda>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <HAL_DMA_Abort+0xdc>
 8004786:	2300      	movs	r3, #0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d013      	beq.n	80047b4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 021e 	bic.w	r2, r2, #30
 800479a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695a      	ldr	r2, [r3, #20]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047aa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	617b      	str	r3, [r7, #20]
 80047b2:	e00a      	b.n	80047ca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 020e 	bic.w	r2, r2, #14
 80047c2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a3c      	ldr	r2, [pc, #240]	@ (80048c0 <HAL_DMA_Abort+0x214>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d072      	beq.n	80048ba <HAL_DMA_Abort+0x20e>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a3a      	ldr	r2, [pc, #232]	@ (80048c4 <HAL_DMA_Abort+0x218>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d06d      	beq.n	80048ba <HAL_DMA_Abort+0x20e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a39      	ldr	r2, [pc, #228]	@ (80048c8 <HAL_DMA_Abort+0x21c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d068      	beq.n	80048ba <HAL_DMA_Abort+0x20e>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a37      	ldr	r2, [pc, #220]	@ (80048cc <HAL_DMA_Abort+0x220>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d063      	beq.n	80048ba <HAL_DMA_Abort+0x20e>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a36      	ldr	r2, [pc, #216]	@ (80048d0 <HAL_DMA_Abort+0x224>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d05e      	beq.n	80048ba <HAL_DMA_Abort+0x20e>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a34      	ldr	r2, [pc, #208]	@ (80048d4 <HAL_DMA_Abort+0x228>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d059      	beq.n	80048ba <HAL_DMA_Abort+0x20e>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a33      	ldr	r2, [pc, #204]	@ (80048d8 <HAL_DMA_Abort+0x22c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d054      	beq.n	80048ba <HAL_DMA_Abort+0x20e>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a31      	ldr	r2, [pc, #196]	@ (80048dc <HAL_DMA_Abort+0x230>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d04f      	beq.n	80048ba <HAL_DMA_Abort+0x20e>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a30      	ldr	r2, [pc, #192]	@ (80048e0 <HAL_DMA_Abort+0x234>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d04a      	beq.n	80048ba <HAL_DMA_Abort+0x20e>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a2e      	ldr	r2, [pc, #184]	@ (80048e4 <HAL_DMA_Abort+0x238>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d045      	beq.n	80048ba <HAL_DMA_Abort+0x20e>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a2d      	ldr	r2, [pc, #180]	@ (80048e8 <HAL_DMA_Abort+0x23c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d040      	beq.n	80048ba <HAL_DMA_Abort+0x20e>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a2b      	ldr	r2, [pc, #172]	@ (80048ec <HAL_DMA_Abort+0x240>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d03b      	beq.n	80048ba <HAL_DMA_Abort+0x20e>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a2a      	ldr	r2, [pc, #168]	@ (80048f0 <HAL_DMA_Abort+0x244>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d036      	beq.n	80048ba <HAL_DMA_Abort+0x20e>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a28      	ldr	r2, [pc, #160]	@ (80048f4 <HAL_DMA_Abort+0x248>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d031      	beq.n	80048ba <HAL_DMA_Abort+0x20e>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a27      	ldr	r2, [pc, #156]	@ (80048f8 <HAL_DMA_Abort+0x24c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d02c      	beq.n	80048ba <HAL_DMA_Abort+0x20e>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a25      	ldr	r2, [pc, #148]	@ (80048fc <HAL_DMA_Abort+0x250>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d027      	beq.n	80048ba <HAL_DMA_Abort+0x20e>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a24      	ldr	r2, [pc, #144]	@ (8004900 <HAL_DMA_Abort+0x254>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d022      	beq.n	80048ba <HAL_DMA_Abort+0x20e>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a22      	ldr	r2, [pc, #136]	@ (8004904 <HAL_DMA_Abort+0x258>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d01d      	beq.n	80048ba <HAL_DMA_Abort+0x20e>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a21      	ldr	r2, [pc, #132]	@ (8004908 <HAL_DMA_Abort+0x25c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d018      	beq.n	80048ba <HAL_DMA_Abort+0x20e>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a1f      	ldr	r2, [pc, #124]	@ (800490c <HAL_DMA_Abort+0x260>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d013      	beq.n	80048ba <HAL_DMA_Abort+0x20e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a1e      	ldr	r2, [pc, #120]	@ (8004910 <HAL_DMA_Abort+0x264>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d00e      	beq.n	80048ba <HAL_DMA_Abort+0x20e>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004914 <HAL_DMA_Abort+0x268>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d009      	beq.n	80048ba <HAL_DMA_Abort+0x20e>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004918 <HAL_DMA_Abort+0x26c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d004      	beq.n	80048ba <HAL_DMA_Abort+0x20e>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a19      	ldr	r2, [pc, #100]	@ (800491c <HAL_DMA_Abort+0x270>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d132      	bne.n	8004920 <HAL_DMA_Abort+0x274>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e031      	b.n	8004922 <HAL_DMA_Abort+0x276>
 80048be:	bf00      	nop
 80048c0:	40020010 	.word	0x40020010
 80048c4:	40020028 	.word	0x40020028
 80048c8:	40020040 	.word	0x40020040
 80048cc:	40020058 	.word	0x40020058
 80048d0:	40020070 	.word	0x40020070
 80048d4:	40020088 	.word	0x40020088
 80048d8:	400200a0 	.word	0x400200a0
 80048dc:	400200b8 	.word	0x400200b8
 80048e0:	40020410 	.word	0x40020410
 80048e4:	40020428 	.word	0x40020428
 80048e8:	40020440 	.word	0x40020440
 80048ec:	40020458 	.word	0x40020458
 80048f0:	40020470 	.word	0x40020470
 80048f4:	40020488 	.word	0x40020488
 80048f8:	400204a0 	.word	0x400204a0
 80048fc:	400204b8 	.word	0x400204b8
 8004900:	58025408 	.word	0x58025408
 8004904:	5802541c 	.word	0x5802541c
 8004908:	58025430 	.word	0x58025430
 800490c:	58025444 	.word	0x58025444
 8004910:	58025458 	.word	0x58025458
 8004914:	5802546c 	.word	0x5802546c
 8004918:	58025480 	.word	0x58025480
 800491c:	58025494 	.word	0x58025494
 8004920:	2300      	movs	r3, #0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d007      	beq.n	8004936 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004930:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004934:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a6d      	ldr	r2, [pc, #436]	@ (8004af0 <HAL_DMA_Abort+0x444>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d04a      	beq.n	80049d6 <HAL_DMA_Abort+0x32a>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a6b      	ldr	r2, [pc, #428]	@ (8004af4 <HAL_DMA_Abort+0x448>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d045      	beq.n	80049d6 <HAL_DMA_Abort+0x32a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a6a      	ldr	r2, [pc, #424]	@ (8004af8 <HAL_DMA_Abort+0x44c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d040      	beq.n	80049d6 <HAL_DMA_Abort+0x32a>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a68      	ldr	r2, [pc, #416]	@ (8004afc <HAL_DMA_Abort+0x450>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d03b      	beq.n	80049d6 <HAL_DMA_Abort+0x32a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a67      	ldr	r2, [pc, #412]	@ (8004b00 <HAL_DMA_Abort+0x454>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d036      	beq.n	80049d6 <HAL_DMA_Abort+0x32a>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a65      	ldr	r2, [pc, #404]	@ (8004b04 <HAL_DMA_Abort+0x458>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d031      	beq.n	80049d6 <HAL_DMA_Abort+0x32a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a64      	ldr	r2, [pc, #400]	@ (8004b08 <HAL_DMA_Abort+0x45c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d02c      	beq.n	80049d6 <HAL_DMA_Abort+0x32a>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a62      	ldr	r2, [pc, #392]	@ (8004b0c <HAL_DMA_Abort+0x460>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d027      	beq.n	80049d6 <HAL_DMA_Abort+0x32a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a61      	ldr	r2, [pc, #388]	@ (8004b10 <HAL_DMA_Abort+0x464>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d022      	beq.n	80049d6 <HAL_DMA_Abort+0x32a>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a5f      	ldr	r2, [pc, #380]	@ (8004b14 <HAL_DMA_Abort+0x468>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d01d      	beq.n	80049d6 <HAL_DMA_Abort+0x32a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a5e      	ldr	r2, [pc, #376]	@ (8004b18 <HAL_DMA_Abort+0x46c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d018      	beq.n	80049d6 <HAL_DMA_Abort+0x32a>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a5c      	ldr	r2, [pc, #368]	@ (8004b1c <HAL_DMA_Abort+0x470>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d013      	beq.n	80049d6 <HAL_DMA_Abort+0x32a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a5b      	ldr	r2, [pc, #364]	@ (8004b20 <HAL_DMA_Abort+0x474>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00e      	beq.n	80049d6 <HAL_DMA_Abort+0x32a>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a59      	ldr	r2, [pc, #356]	@ (8004b24 <HAL_DMA_Abort+0x478>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d009      	beq.n	80049d6 <HAL_DMA_Abort+0x32a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a58      	ldr	r2, [pc, #352]	@ (8004b28 <HAL_DMA_Abort+0x47c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d004      	beq.n	80049d6 <HAL_DMA_Abort+0x32a>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a56      	ldr	r2, [pc, #344]	@ (8004b2c <HAL_DMA_Abort+0x480>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d108      	bne.n	80049e8 <HAL_DMA_Abort+0x33c>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0201 	bic.w	r2, r2, #1
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	e007      	b.n	80049f8 <HAL_DMA_Abort+0x34c>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0201 	bic.w	r2, r2, #1
 80049f6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80049f8:	e013      	b.n	8004a22 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049fa:	f7fc fe63 	bl	80016c4 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b05      	cmp	r3, #5
 8004a06:	d90c      	bls.n	8004a22 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2203      	movs	r2, #3
 8004a12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e12d      	b.n	8004c7e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1e5      	bne.n	80049fa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a2f      	ldr	r2, [pc, #188]	@ (8004af0 <HAL_DMA_Abort+0x444>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d04a      	beq.n	8004ace <HAL_DMA_Abort+0x422>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a2d      	ldr	r2, [pc, #180]	@ (8004af4 <HAL_DMA_Abort+0x448>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d045      	beq.n	8004ace <HAL_DMA_Abort+0x422>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a2c      	ldr	r2, [pc, #176]	@ (8004af8 <HAL_DMA_Abort+0x44c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d040      	beq.n	8004ace <HAL_DMA_Abort+0x422>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a2a      	ldr	r2, [pc, #168]	@ (8004afc <HAL_DMA_Abort+0x450>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d03b      	beq.n	8004ace <HAL_DMA_Abort+0x422>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a29      	ldr	r2, [pc, #164]	@ (8004b00 <HAL_DMA_Abort+0x454>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d036      	beq.n	8004ace <HAL_DMA_Abort+0x422>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a27      	ldr	r2, [pc, #156]	@ (8004b04 <HAL_DMA_Abort+0x458>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d031      	beq.n	8004ace <HAL_DMA_Abort+0x422>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a26      	ldr	r2, [pc, #152]	@ (8004b08 <HAL_DMA_Abort+0x45c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d02c      	beq.n	8004ace <HAL_DMA_Abort+0x422>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a24      	ldr	r2, [pc, #144]	@ (8004b0c <HAL_DMA_Abort+0x460>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d027      	beq.n	8004ace <HAL_DMA_Abort+0x422>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a23      	ldr	r2, [pc, #140]	@ (8004b10 <HAL_DMA_Abort+0x464>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d022      	beq.n	8004ace <HAL_DMA_Abort+0x422>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a21      	ldr	r2, [pc, #132]	@ (8004b14 <HAL_DMA_Abort+0x468>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d01d      	beq.n	8004ace <HAL_DMA_Abort+0x422>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a20      	ldr	r2, [pc, #128]	@ (8004b18 <HAL_DMA_Abort+0x46c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d018      	beq.n	8004ace <HAL_DMA_Abort+0x422>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8004b1c <HAL_DMA_Abort+0x470>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d013      	beq.n	8004ace <HAL_DMA_Abort+0x422>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a1d      	ldr	r2, [pc, #116]	@ (8004b20 <HAL_DMA_Abort+0x474>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d00e      	beq.n	8004ace <HAL_DMA_Abort+0x422>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8004b24 <HAL_DMA_Abort+0x478>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d009      	beq.n	8004ace <HAL_DMA_Abort+0x422>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a1a      	ldr	r2, [pc, #104]	@ (8004b28 <HAL_DMA_Abort+0x47c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d004      	beq.n	8004ace <HAL_DMA_Abort+0x422>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a18      	ldr	r2, [pc, #96]	@ (8004b2c <HAL_DMA_Abort+0x480>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d101      	bne.n	8004ad2 <HAL_DMA_Abort+0x426>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <HAL_DMA_Abort+0x428>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d02b      	beq.n	8004b30 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004adc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae2:	f003 031f 	and.w	r3, r3, #31
 8004ae6:	223f      	movs	r2, #63	@ 0x3f
 8004ae8:	409a      	lsls	r2, r3
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	609a      	str	r2, [r3, #8]
 8004aee:	e02a      	b.n	8004b46 <HAL_DMA_Abort+0x49a>
 8004af0:	40020010 	.word	0x40020010
 8004af4:	40020028 	.word	0x40020028
 8004af8:	40020040 	.word	0x40020040
 8004afc:	40020058 	.word	0x40020058
 8004b00:	40020070 	.word	0x40020070
 8004b04:	40020088 	.word	0x40020088
 8004b08:	400200a0 	.word	0x400200a0
 8004b0c:	400200b8 	.word	0x400200b8
 8004b10:	40020410 	.word	0x40020410
 8004b14:	40020428 	.word	0x40020428
 8004b18:	40020440 	.word	0x40020440
 8004b1c:	40020458 	.word	0x40020458
 8004b20:	40020470 	.word	0x40020470
 8004b24:	40020488 	.word	0x40020488
 8004b28:	400204a0 	.word	0x400204a0
 8004b2c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b34:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b3a:	f003 031f 	and.w	r3, r3, #31
 8004b3e:	2201      	movs	r2, #1
 8004b40:	409a      	lsls	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a4f      	ldr	r2, [pc, #316]	@ (8004c88 <HAL_DMA_Abort+0x5dc>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d072      	beq.n	8004c36 <HAL_DMA_Abort+0x58a>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a4d      	ldr	r2, [pc, #308]	@ (8004c8c <HAL_DMA_Abort+0x5e0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d06d      	beq.n	8004c36 <HAL_DMA_Abort+0x58a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a4c      	ldr	r2, [pc, #304]	@ (8004c90 <HAL_DMA_Abort+0x5e4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d068      	beq.n	8004c36 <HAL_DMA_Abort+0x58a>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a4a      	ldr	r2, [pc, #296]	@ (8004c94 <HAL_DMA_Abort+0x5e8>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d063      	beq.n	8004c36 <HAL_DMA_Abort+0x58a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a49      	ldr	r2, [pc, #292]	@ (8004c98 <HAL_DMA_Abort+0x5ec>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d05e      	beq.n	8004c36 <HAL_DMA_Abort+0x58a>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a47      	ldr	r2, [pc, #284]	@ (8004c9c <HAL_DMA_Abort+0x5f0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d059      	beq.n	8004c36 <HAL_DMA_Abort+0x58a>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a46      	ldr	r2, [pc, #280]	@ (8004ca0 <HAL_DMA_Abort+0x5f4>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d054      	beq.n	8004c36 <HAL_DMA_Abort+0x58a>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a44      	ldr	r2, [pc, #272]	@ (8004ca4 <HAL_DMA_Abort+0x5f8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d04f      	beq.n	8004c36 <HAL_DMA_Abort+0x58a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a43      	ldr	r2, [pc, #268]	@ (8004ca8 <HAL_DMA_Abort+0x5fc>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d04a      	beq.n	8004c36 <HAL_DMA_Abort+0x58a>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a41      	ldr	r2, [pc, #260]	@ (8004cac <HAL_DMA_Abort+0x600>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d045      	beq.n	8004c36 <HAL_DMA_Abort+0x58a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a40      	ldr	r2, [pc, #256]	@ (8004cb0 <HAL_DMA_Abort+0x604>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d040      	beq.n	8004c36 <HAL_DMA_Abort+0x58a>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a3e      	ldr	r2, [pc, #248]	@ (8004cb4 <HAL_DMA_Abort+0x608>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d03b      	beq.n	8004c36 <HAL_DMA_Abort+0x58a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a3d      	ldr	r2, [pc, #244]	@ (8004cb8 <HAL_DMA_Abort+0x60c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d036      	beq.n	8004c36 <HAL_DMA_Abort+0x58a>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a3b      	ldr	r2, [pc, #236]	@ (8004cbc <HAL_DMA_Abort+0x610>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d031      	beq.n	8004c36 <HAL_DMA_Abort+0x58a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a3a      	ldr	r2, [pc, #232]	@ (8004cc0 <HAL_DMA_Abort+0x614>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d02c      	beq.n	8004c36 <HAL_DMA_Abort+0x58a>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a38      	ldr	r2, [pc, #224]	@ (8004cc4 <HAL_DMA_Abort+0x618>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d027      	beq.n	8004c36 <HAL_DMA_Abort+0x58a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a37      	ldr	r2, [pc, #220]	@ (8004cc8 <HAL_DMA_Abort+0x61c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d022      	beq.n	8004c36 <HAL_DMA_Abort+0x58a>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a35      	ldr	r2, [pc, #212]	@ (8004ccc <HAL_DMA_Abort+0x620>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d01d      	beq.n	8004c36 <HAL_DMA_Abort+0x58a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a34      	ldr	r2, [pc, #208]	@ (8004cd0 <HAL_DMA_Abort+0x624>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d018      	beq.n	8004c36 <HAL_DMA_Abort+0x58a>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a32      	ldr	r2, [pc, #200]	@ (8004cd4 <HAL_DMA_Abort+0x628>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d013      	beq.n	8004c36 <HAL_DMA_Abort+0x58a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a31      	ldr	r2, [pc, #196]	@ (8004cd8 <HAL_DMA_Abort+0x62c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d00e      	beq.n	8004c36 <HAL_DMA_Abort+0x58a>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a2f      	ldr	r2, [pc, #188]	@ (8004cdc <HAL_DMA_Abort+0x630>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d009      	beq.n	8004c36 <HAL_DMA_Abort+0x58a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a2e      	ldr	r2, [pc, #184]	@ (8004ce0 <HAL_DMA_Abort+0x634>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d004      	beq.n	8004c36 <HAL_DMA_Abort+0x58a>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a2c      	ldr	r2, [pc, #176]	@ (8004ce4 <HAL_DMA_Abort+0x638>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d101      	bne.n	8004c3a <HAL_DMA_Abort+0x58e>
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <HAL_DMA_Abort+0x590>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d015      	beq.n	8004c6c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004c48:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00c      	beq.n	8004c6c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c60:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004c6a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40020010 	.word	0x40020010
 8004c8c:	40020028 	.word	0x40020028
 8004c90:	40020040 	.word	0x40020040
 8004c94:	40020058 	.word	0x40020058
 8004c98:	40020070 	.word	0x40020070
 8004c9c:	40020088 	.word	0x40020088
 8004ca0:	400200a0 	.word	0x400200a0
 8004ca4:	400200b8 	.word	0x400200b8
 8004ca8:	40020410 	.word	0x40020410
 8004cac:	40020428 	.word	0x40020428
 8004cb0:	40020440 	.word	0x40020440
 8004cb4:	40020458 	.word	0x40020458
 8004cb8:	40020470 	.word	0x40020470
 8004cbc:	40020488 	.word	0x40020488
 8004cc0:	400204a0 	.word	0x400204a0
 8004cc4:	400204b8 	.word	0x400204b8
 8004cc8:	58025408 	.word	0x58025408
 8004ccc:	5802541c 	.word	0x5802541c
 8004cd0:	58025430 	.word	0x58025430
 8004cd4:	58025444 	.word	0x58025444
 8004cd8:	58025458 	.word	0x58025458
 8004cdc:	5802546c 	.word	0x5802546c
 8004ce0:	58025480 	.word	0x58025480
 8004ce4:	58025494 	.word	0x58025494

08004ce8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e237      	b.n	800516a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d004      	beq.n	8004d10 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2280      	movs	r2, #128	@ 0x80
 8004d0a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e22c      	b.n	800516a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a5c      	ldr	r2, [pc, #368]	@ (8004e88 <HAL_DMA_Abort_IT+0x1a0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d04a      	beq.n	8004db0 <HAL_DMA_Abort_IT+0xc8>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a5b      	ldr	r2, [pc, #364]	@ (8004e8c <HAL_DMA_Abort_IT+0x1a4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d045      	beq.n	8004db0 <HAL_DMA_Abort_IT+0xc8>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a59      	ldr	r2, [pc, #356]	@ (8004e90 <HAL_DMA_Abort_IT+0x1a8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d040      	beq.n	8004db0 <HAL_DMA_Abort_IT+0xc8>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a58      	ldr	r2, [pc, #352]	@ (8004e94 <HAL_DMA_Abort_IT+0x1ac>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d03b      	beq.n	8004db0 <HAL_DMA_Abort_IT+0xc8>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a56      	ldr	r2, [pc, #344]	@ (8004e98 <HAL_DMA_Abort_IT+0x1b0>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d036      	beq.n	8004db0 <HAL_DMA_Abort_IT+0xc8>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a55      	ldr	r2, [pc, #340]	@ (8004e9c <HAL_DMA_Abort_IT+0x1b4>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d031      	beq.n	8004db0 <HAL_DMA_Abort_IT+0xc8>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a53      	ldr	r2, [pc, #332]	@ (8004ea0 <HAL_DMA_Abort_IT+0x1b8>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d02c      	beq.n	8004db0 <HAL_DMA_Abort_IT+0xc8>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a52      	ldr	r2, [pc, #328]	@ (8004ea4 <HAL_DMA_Abort_IT+0x1bc>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d027      	beq.n	8004db0 <HAL_DMA_Abort_IT+0xc8>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a50      	ldr	r2, [pc, #320]	@ (8004ea8 <HAL_DMA_Abort_IT+0x1c0>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d022      	beq.n	8004db0 <HAL_DMA_Abort_IT+0xc8>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a4f      	ldr	r2, [pc, #316]	@ (8004eac <HAL_DMA_Abort_IT+0x1c4>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d01d      	beq.n	8004db0 <HAL_DMA_Abort_IT+0xc8>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a4d      	ldr	r2, [pc, #308]	@ (8004eb0 <HAL_DMA_Abort_IT+0x1c8>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d018      	beq.n	8004db0 <HAL_DMA_Abort_IT+0xc8>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a4c      	ldr	r2, [pc, #304]	@ (8004eb4 <HAL_DMA_Abort_IT+0x1cc>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d013      	beq.n	8004db0 <HAL_DMA_Abort_IT+0xc8>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a4a      	ldr	r2, [pc, #296]	@ (8004eb8 <HAL_DMA_Abort_IT+0x1d0>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00e      	beq.n	8004db0 <HAL_DMA_Abort_IT+0xc8>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a49      	ldr	r2, [pc, #292]	@ (8004ebc <HAL_DMA_Abort_IT+0x1d4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d009      	beq.n	8004db0 <HAL_DMA_Abort_IT+0xc8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a47      	ldr	r2, [pc, #284]	@ (8004ec0 <HAL_DMA_Abort_IT+0x1d8>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d004      	beq.n	8004db0 <HAL_DMA_Abort_IT+0xc8>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a46      	ldr	r2, [pc, #280]	@ (8004ec4 <HAL_DMA_Abort_IT+0x1dc>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d101      	bne.n	8004db4 <HAL_DMA_Abort_IT+0xcc>
 8004db0:	2301      	movs	r3, #1
 8004db2:	e000      	b.n	8004db6 <HAL_DMA_Abort_IT+0xce>
 8004db4:	2300      	movs	r3, #0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 8086 	beq.w	8004ec8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2204      	movs	r2, #4
 8004dc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a2f      	ldr	r2, [pc, #188]	@ (8004e88 <HAL_DMA_Abort_IT+0x1a0>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d04a      	beq.n	8004e64 <HAL_DMA_Abort_IT+0x17c>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a2e      	ldr	r2, [pc, #184]	@ (8004e8c <HAL_DMA_Abort_IT+0x1a4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d045      	beq.n	8004e64 <HAL_DMA_Abort_IT+0x17c>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a2c      	ldr	r2, [pc, #176]	@ (8004e90 <HAL_DMA_Abort_IT+0x1a8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d040      	beq.n	8004e64 <HAL_DMA_Abort_IT+0x17c>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a2b      	ldr	r2, [pc, #172]	@ (8004e94 <HAL_DMA_Abort_IT+0x1ac>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d03b      	beq.n	8004e64 <HAL_DMA_Abort_IT+0x17c>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a29      	ldr	r2, [pc, #164]	@ (8004e98 <HAL_DMA_Abort_IT+0x1b0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d036      	beq.n	8004e64 <HAL_DMA_Abort_IT+0x17c>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a28      	ldr	r2, [pc, #160]	@ (8004e9c <HAL_DMA_Abort_IT+0x1b4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d031      	beq.n	8004e64 <HAL_DMA_Abort_IT+0x17c>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a26      	ldr	r2, [pc, #152]	@ (8004ea0 <HAL_DMA_Abort_IT+0x1b8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d02c      	beq.n	8004e64 <HAL_DMA_Abort_IT+0x17c>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a25      	ldr	r2, [pc, #148]	@ (8004ea4 <HAL_DMA_Abort_IT+0x1bc>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d027      	beq.n	8004e64 <HAL_DMA_Abort_IT+0x17c>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a23      	ldr	r2, [pc, #140]	@ (8004ea8 <HAL_DMA_Abort_IT+0x1c0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d022      	beq.n	8004e64 <HAL_DMA_Abort_IT+0x17c>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a22      	ldr	r2, [pc, #136]	@ (8004eac <HAL_DMA_Abort_IT+0x1c4>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d01d      	beq.n	8004e64 <HAL_DMA_Abort_IT+0x17c>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a20      	ldr	r2, [pc, #128]	@ (8004eb0 <HAL_DMA_Abort_IT+0x1c8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d018      	beq.n	8004e64 <HAL_DMA_Abort_IT+0x17c>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a1f      	ldr	r2, [pc, #124]	@ (8004eb4 <HAL_DMA_Abort_IT+0x1cc>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d013      	beq.n	8004e64 <HAL_DMA_Abort_IT+0x17c>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a1d      	ldr	r2, [pc, #116]	@ (8004eb8 <HAL_DMA_Abort_IT+0x1d0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00e      	beq.n	8004e64 <HAL_DMA_Abort_IT+0x17c>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8004ebc <HAL_DMA_Abort_IT+0x1d4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d009      	beq.n	8004e64 <HAL_DMA_Abort_IT+0x17c>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1a      	ldr	r2, [pc, #104]	@ (8004ec0 <HAL_DMA_Abort_IT+0x1d8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d004      	beq.n	8004e64 <HAL_DMA_Abort_IT+0x17c>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a19      	ldr	r2, [pc, #100]	@ (8004ec4 <HAL_DMA_Abort_IT+0x1dc>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d108      	bne.n	8004e76 <HAL_DMA_Abort_IT+0x18e>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0201 	bic.w	r2, r2, #1
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	e178      	b.n	8005168 <HAL_DMA_Abort_IT+0x480>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0201 	bic.w	r2, r2, #1
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	e16f      	b.n	8005168 <HAL_DMA_Abort_IT+0x480>
 8004e88:	40020010 	.word	0x40020010
 8004e8c:	40020028 	.word	0x40020028
 8004e90:	40020040 	.word	0x40020040
 8004e94:	40020058 	.word	0x40020058
 8004e98:	40020070 	.word	0x40020070
 8004e9c:	40020088 	.word	0x40020088
 8004ea0:	400200a0 	.word	0x400200a0
 8004ea4:	400200b8 	.word	0x400200b8
 8004ea8:	40020410 	.word	0x40020410
 8004eac:	40020428 	.word	0x40020428
 8004eb0:	40020440 	.word	0x40020440
 8004eb4:	40020458 	.word	0x40020458
 8004eb8:	40020470 	.word	0x40020470
 8004ebc:	40020488 	.word	0x40020488
 8004ec0:	400204a0 	.word	0x400204a0
 8004ec4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 020e 	bic.w	r2, r2, #14
 8004ed6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a6c      	ldr	r2, [pc, #432]	@ (8005090 <HAL_DMA_Abort_IT+0x3a8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d04a      	beq.n	8004f78 <HAL_DMA_Abort_IT+0x290>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a6b      	ldr	r2, [pc, #428]	@ (8005094 <HAL_DMA_Abort_IT+0x3ac>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d045      	beq.n	8004f78 <HAL_DMA_Abort_IT+0x290>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a69      	ldr	r2, [pc, #420]	@ (8005098 <HAL_DMA_Abort_IT+0x3b0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d040      	beq.n	8004f78 <HAL_DMA_Abort_IT+0x290>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a68      	ldr	r2, [pc, #416]	@ (800509c <HAL_DMA_Abort_IT+0x3b4>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d03b      	beq.n	8004f78 <HAL_DMA_Abort_IT+0x290>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a66      	ldr	r2, [pc, #408]	@ (80050a0 <HAL_DMA_Abort_IT+0x3b8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d036      	beq.n	8004f78 <HAL_DMA_Abort_IT+0x290>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a65      	ldr	r2, [pc, #404]	@ (80050a4 <HAL_DMA_Abort_IT+0x3bc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d031      	beq.n	8004f78 <HAL_DMA_Abort_IT+0x290>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a63      	ldr	r2, [pc, #396]	@ (80050a8 <HAL_DMA_Abort_IT+0x3c0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d02c      	beq.n	8004f78 <HAL_DMA_Abort_IT+0x290>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a62      	ldr	r2, [pc, #392]	@ (80050ac <HAL_DMA_Abort_IT+0x3c4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d027      	beq.n	8004f78 <HAL_DMA_Abort_IT+0x290>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a60      	ldr	r2, [pc, #384]	@ (80050b0 <HAL_DMA_Abort_IT+0x3c8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d022      	beq.n	8004f78 <HAL_DMA_Abort_IT+0x290>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a5f      	ldr	r2, [pc, #380]	@ (80050b4 <HAL_DMA_Abort_IT+0x3cc>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d01d      	beq.n	8004f78 <HAL_DMA_Abort_IT+0x290>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a5d      	ldr	r2, [pc, #372]	@ (80050b8 <HAL_DMA_Abort_IT+0x3d0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d018      	beq.n	8004f78 <HAL_DMA_Abort_IT+0x290>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a5c      	ldr	r2, [pc, #368]	@ (80050bc <HAL_DMA_Abort_IT+0x3d4>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d013      	beq.n	8004f78 <HAL_DMA_Abort_IT+0x290>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a5a      	ldr	r2, [pc, #360]	@ (80050c0 <HAL_DMA_Abort_IT+0x3d8>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00e      	beq.n	8004f78 <HAL_DMA_Abort_IT+0x290>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a59      	ldr	r2, [pc, #356]	@ (80050c4 <HAL_DMA_Abort_IT+0x3dc>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d009      	beq.n	8004f78 <HAL_DMA_Abort_IT+0x290>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a57      	ldr	r2, [pc, #348]	@ (80050c8 <HAL_DMA_Abort_IT+0x3e0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d004      	beq.n	8004f78 <HAL_DMA_Abort_IT+0x290>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a56      	ldr	r2, [pc, #344]	@ (80050cc <HAL_DMA_Abort_IT+0x3e4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d108      	bne.n	8004f8a <HAL_DMA_Abort_IT+0x2a2>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0201 	bic.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	e007      	b.n	8004f9a <HAL_DMA_Abort_IT+0x2b2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0201 	bic.w	r2, r2, #1
 8004f98:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a3c      	ldr	r2, [pc, #240]	@ (8005090 <HAL_DMA_Abort_IT+0x3a8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d072      	beq.n	800508a <HAL_DMA_Abort_IT+0x3a2>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a3a      	ldr	r2, [pc, #232]	@ (8005094 <HAL_DMA_Abort_IT+0x3ac>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d06d      	beq.n	800508a <HAL_DMA_Abort_IT+0x3a2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a39      	ldr	r2, [pc, #228]	@ (8005098 <HAL_DMA_Abort_IT+0x3b0>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d068      	beq.n	800508a <HAL_DMA_Abort_IT+0x3a2>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a37      	ldr	r2, [pc, #220]	@ (800509c <HAL_DMA_Abort_IT+0x3b4>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d063      	beq.n	800508a <HAL_DMA_Abort_IT+0x3a2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a36      	ldr	r2, [pc, #216]	@ (80050a0 <HAL_DMA_Abort_IT+0x3b8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d05e      	beq.n	800508a <HAL_DMA_Abort_IT+0x3a2>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a34      	ldr	r2, [pc, #208]	@ (80050a4 <HAL_DMA_Abort_IT+0x3bc>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d059      	beq.n	800508a <HAL_DMA_Abort_IT+0x3a2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a33      	ldr	r2, [pc, #204]	@ (80050a8 <HAL_DMA_Abort_IT+0x3c0>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d054      	beq.n	800508a <HAL_DMA_Abort_IT+0x3a2>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a31      	ldr	r2, [pc, #196]	@ (80050ac <HAL_DMA_Abort_IT+0x3c4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d04f      	beq.n	800508a <HAL_DMA_Abort_IT+0x3a2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a30      	ldr	r2, [pc, #192]	@ (80050b0 <HAL_DMA_Abort_IT+0x3c8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d04a      	beq.n	800508a <HAL_DMA_Abort_IT+0x3a2>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a2e      	ldr	r2, [pc, #184]	@ (80050b4 <HAL_DMA_Abort_IT+0x3cc>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d045      	beq.n	800508a <HAL_DMA_Abort_IT+0x3a2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a2d      	ldr	r2, [pc, #180]	@ (80050b8 <HAL_DMA_Abort_IT+0x3d0>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d040      	beq.n	800508a <HAL_DMA_Abort_IT+0x3a2>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a2b      	ldr	r2, [pc, #172]	@ (80050bc <HAL_DMA_Abort_IT+0x3d4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d03b      	beq.n	800508a <HAL_DMA_Abort_IT+0x3a2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a2a      	ldr	r2, [pc, #168]	@ (80050c0 <HAL_DMA_Abort_IT+0x3d8>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d036      	beq.n	800508a <HAL_DMA_Abort_IT+0x3a2>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a28      	ldr	r2, [pc, #160]	@ (80050c4 <HAL_DMA_Abort_IT+0x3dc>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d031      	beq.n	800508a <HAL_DMA_Abort_IT+0x3a2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a27      	ldr	r2, [pc, #156]	@ (80050c8 <HAL_DMA_Abort_IT+0x3e0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d02c      	beq.n	800508a <HAL_DMA_Abort_IT+0x3a2>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a25      	ldr	r2, [pc, #148]	@ (80050cc <HAL_DMA_Abort_IT+0x3e4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d027      	beq.n	800508a <HAL_DMA_Abort_IT+0x3a2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a24      	ldr	r2, [pc, #144]	@ (80050d0 <HAL_DMA_Abort_IT+0x3e8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d022      	beq.n	800508a <HAL_DMA_Abort_IT+0x3a2>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a22      	ldr	r2, [pc, #136]	@ (80050d4 <HAL_DMA_Abort_IT+0x3ec>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d01d      	beq.n	800508a <HAL_DMA_Abort_IT+0x3a2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a21      	ldr	r2, [pc, #132]	@ (80050d8 <HAL_DMA_Abort_IT+0x3f0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d018      	beq.n	800508a <HAL_DMA_Abort_IT+0x3a2>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a1f      	ldr	r2, [pc, #124]	@ (80050dc <HAL_DMA_Abort_IT+0x3f4>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d013      	beq.n	800508a <HAL_DMA_Abort_IT+0x3a2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a1e      	ldr	r2, [pc, #120]	@ (80050e0 <HAL_DMA_Abort_IT+0x3f8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d00e      	beq.n	800508a <HAL_DMA_Abort_IT+0x3a2>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a1c      	ldr	r2, [pc, #112]	@ (80050e4 <HAL_DMA_Abort_IT+0x3fc>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d009      	beq.n	800508a <HAL_DMA_Abort_IT+0x3a2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a1b      	ldr	r2, [pc, #108]	@ (80050e8 <HAL_DMA_Abort_IT+0x400>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d004      	beq.n	800508a <HAL_DMA_Abort_IT+0x3a2>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a19      	ldr	r2, [pc, #100]	@ (80050ec <HAL_DMA_Abort_IT+0x404>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d132      	bne.n	80050f0 <HAL_DMA_Abort_IT+0x408>
 800508a:	2301      	movs	r3, #1
 800508c:	e031      	b.n	80050f2 <HAL_DMA_Abort_IT+0x40a>
 800508e:	bf00      	nop
 8005090:	40020010 	.word	0x40020010
 8005094:	40020028 	.word	0x40020028
 8005098:	40020040 	.word	0x40020040
 800509c:	40020058 	.word	0x40020058
 80050a0:	40020070 	.word	0x40020070
 80050a4:	40020088 	.word	0x40020088
 80050a8:	400200a0 	.word	0x400200a0
 80050ac:	400200b8 	.word	0x400200b8
 80050b0:	40020410 	.word	0x40020410
 80050b4:	40020428 	.word	0x40020428
 80050b8:	40020440 	.word	0x40020440
 80050bc:	40020458 	.word	0x40020458
 80050c0:	40020470 	.word	0x40020470
 80050c4:	40020488 	.word	0x40020488
 80050c8:	400204a0 	.word	0x400204a0
 80050cc:	400204b8 	.word	0x400204b8
 80050d0:	58025408 	.word	0x58025408
 80050d4:	5802541c 	.word	0x5802541c
 80050d8:	58025430 	.word	0x58025430
 80050dc:	58025444 	.word	0x58025444
 80050e0:	58025458 	.word	0x58025458
 80050e4:	5802546c 	.word	0x5802546c
 80050e8:	58025480 	.word	0x58025480
 80050ec:	58025494 	.word	0x58025494
 80050f0:	2300      	movs	r3, #0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d028      	beq.n	8005148 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005100:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005104:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800510a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005110:	f003 031f 	and.w	r3, r3, #31
 8005114:	2201      	movs	r2, #1
 8005116:	409a      	lsls	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005124:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00c      	beq.n	8005148 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005138:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800513c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005146:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop

08005174 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b08a      	sub	sp, #40	@ 0x28
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005180:	4b67      	ldr	r3, [pc, #412]	@ (8005320 <HAL_DMA_IRQHandler+0x1ac>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a67      	ldr	r2, [pc, #412]	@ (8005324 <HAL_DMA_IRQHandler+0x1b0>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	0a9b      	lsrs	r3, r3, #10
 800518c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005192:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005198:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a5f      	ldr	r2, [pc, #380]	@ (8005328 <HAL_DMA_IRQHandler+0x1b4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d04a      	beq.n	8005246 <HAL_DMA_IRQHandler+0xd2>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a5d      	ldr	r2, [pc, #372]	@ (800532c <HAL_DMA_IRQHandler+0x1b8>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d045      	beq.n	8005246 <HAL_DMA_IRQHandler+0xd2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a5c      	ldr	r2, [pc, #368]	@ (8005330 <HAL_DMA_IRQHandler+0x1bc>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d040      	beq.n	8005246 <HAL_DMA_IRQHandler+0xd2>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a5a      	ldr	r2, [pc, #360]	@ (8005334 <HAL_DMA_IRQHandler+0x1c0>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d03b      	beq.n	8005246 <HAL_DMA_IRQHandler+0xd2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a59      	ldr	r2, [pc, #356]	@ (8005338 <HAL_DMA_IRQHandler+0x1c4>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d036      	beq.n	8005246 <HAL_DMA_IRQHandler+0xd2>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a57      	ldr	r2, [pc, #348]	@ (800533c <HAL_DMA_IRQHandler+0x1c8>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d031      	beq.n	8005246 <HAL_DMA_IRQHandler+0xd2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a56      	ldr	r2, [pc, #344]	@ (8005340 <HAL_DMA_IRQHandler+0x1cc>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d02c      	beq.n	8005246 <HAL_DMA_IRQHandler+0xd2>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a54      	ldr	r2, [pc, #336]	@ (8005344 <HAL_DMA_IRQHandler+0x1d0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d027      	beq.n	8005246 <HAL_DMA_IRQHandler+0xd2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a53      	ldr	r2, [pc, #332]	@ (8005348 <HAL_DMA_IRQHandler+0x1d4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d022      	beq.n	8005246 <HAL_DMA_IRQHandler+0xd2>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a51      	ldr	r2, [pc, #324]	@ (800534c <HAL_DMA_IRQHandler+0x1d8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d01d      	beq.n	8005246 <HAL_DMA_IRQHandler+0xd2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a50      	ldr	r2, [pc, #320]	@ (8005350 <HAL_DMA_IRQHandler+0x1dc>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d018      	beq.n	8005246 <HAL_DMA_IRQHandler+0xd2>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a4e      	ldr	r2, [pc, #312]	@ (8005354 <HAL_DMA_IRQHandler+0x1e0>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d013      	beq.n	8005246 <HAL_DMA_IRQHandler+0xd2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a4d      	ldr	r2, [pc, #308]	@ (8005358 <HAL_DMA_IRQHandler+0x1e4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00e      	beq.n	8005246 <HAL_DMA_IRQHandler+0xd2>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a4b      	ldr	r2, [pc, #300]	@ (800535c <HAL_DMA_IRQHandler+0x1e8>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d009      	beq.n	8005246 <HAL_DMA_IRQHandler+0xd2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a4a      	ldr	r2, [pc, #296]	@ (8005360 <HAL_DMA_IRQHandler+0x1ec>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d004      	beq.n	8005246 <HAL_DMA_IRQHandler+0xd2>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a48      	ldr	r2, [pc, #288]	@ (8005364 <HAL_DMA_IRQHandler+0x1f0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d101      	bne.n	800524a <HAL_DMA_IRQHandler+0xd6>
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <HAL_DMA_IRQHandler+0xd8>
 800524a:	2300      	movs	r3, #0
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 842b 	beq.w	8005aa8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005256:	f003 031f 	and.w	r3, r3, #31
 800525a:	2208      	movs	r2, #8
 800525c:	409a      	lsls	r2, r3
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	4013      	ands	r3, r2
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 80a2 	beq.w	80053ac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a2e      	ldr	r2, [pc, #184]	@ (8005328 <HAL_DMA_IRQHandler+0x1b4>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d04a      	beq.n	8005308 <HAL_DMA_IRQHandler+0x194>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a2d      	ldr	r2, [pc, #180]	@ (800532c <HAL_DMA_IRQHandler+0x1b8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d045      	beq.n	8005308 <HAL_DMA_IRQHandler+0x194>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a2b      	ldr	r2, [pc, #172]	@ (8005330 <HAL_DMA_IRQHandler+0x1bc>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d040      	beq.n	8005308 <HAL_DMA_IRQHandler+0x194>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a2a      	ldr	r2, [pc, #168]	@ (8005334 <HAL_DMA_IRQHandler+0x1c0>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d03b      	beq.n	8005308 <HAL_DMA_IRQHandler+0x194>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a28      	ldr	r2, [pc, #160]	@ (8005338 <HAL_DMA_IRQHandler+0x1c4>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d036      	beq.n	8005308 <HAL_DMA_IRQHandler+0x194>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a27      	ldr	r2, [pc, #156]	@ (800533c <HAL_DMA_IRQHandler+0x1c8>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d031      	beq.n	8005308 <HAL_DMA_IRQHandler+0x194>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a25      	ldr	r2, [pc, #148]	@ (8005340 <HAL_DMA_IRQHandler+0x1cc>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d02c      	beq.n	8005308 <HAL_DMA_IRQHandler+0x194>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a24      	ldr	r2, [pc, #144]	@ (8005344 <HAL_DMA_IRQHandler+0x1d0>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d027      	beq.n	8005308 <HAL_DMA_IRQHandler+0x194>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a22      	ldr	r2, [pc, #136]	@ (8005348 <HAL_DMA_IRQHandler+0x1d4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d022      	beq.n	8005308 <HAL_DMA_IRQHandler+0x194>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a21      	ldr	r2, [pc, #132]	@ (800534c <HAL_DMA_IRQHandler+0x1d8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d01d      	beq.n	8005308 <HAL_DMA_IRQHandler+0x194>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005350 <HAL_DMA_IRQHandler+0x1dc>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d018      	beq.n	8005308 <HAL_DMA_IRQHandler+0x194>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a1e      	ldr	r2, [pc, #120]	@ (8005354 <HAL_DMA_IRQHandler+0x1e0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d013      	beq.n	8005308 <HAL_DMA_IRQHandler+0x194>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005358 <HAL_DMA_IRQHandler+0x1e4>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00e      	beq.n	8005308 <HAL_DMA_IRQHandler+0x194>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a1b      	ldr	r2, [pc, #108]	@ (800535c <HAL_DMA_IRQHandler+0x1e8>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d009      	beq.n	8005308 <HAL_DMA_IRQHandler+0x194>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a19      	ldr	r2, [pc, #100]	@ (8005360 <HAL_DMA_IRQHandler+0x1ec>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <HAL_DMA_IRQHandler+0x194>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a18      	ldr	r2, [pc, #96]	@ (8005364 <HAL_DMA_IRQHandler+0x1f0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d12f      	bne.n	8005368 <HAL_DMA_IRQHandler+0x1f4>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	2b00      	cmp	r3, #0
 8005314:	bf14      	ite	ne
 8005316:	2301      	movne	r3, #1
 8005318:	2300      	moveq	r3, #0
 800531a:	b2db      	uxtb	r3, r3
 800531c:	e02e      	b.n	800537c <HAL_DMA_IRQHandler+0x208>
 800531e:	bf00      	nop
 8005320:	24000000 	.word	0x24000000
 8005324:	1b4e81b5 	.word	0x1b4e81b5
 8005328:	40020010 	.word	0x40020010
 800532c:	40020028 	.word	0x40020028
 8005330:	40020040 	.word	0x40020040
 8005334:	40020058 	.word	0x40020058
 8005338:	40020070 	.word	0x40020070
 800533c:	40020088 	.word	0x40020088
 8005340:	400200a0 	.word	0x400200a0
 8005344:	400200b8 	.word	0x400200b8
 8005348:	40020410 	.word	0x40020410
 800534c:	40020428 	.word	0x40020428
 8005350:	40020440 	.word	0x40020440
 8005354:	40020458 	.word	0x40020458
 8005358:	40020470 	.word	0x40020470
 800535c:	40020488 	.word	0x40020488
 8005360:	400204a0 	.word	0x400204a0
 8005364:	400204b8 	.word	0x400204b8
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0308 	and.w	r3, r3, #8
 8005372:	2b00      	cmp	r3, #0
 8005374:	bf14      	ite	ne
 8005376:	2301      	movne	r3, #1
 8005378:	2300      	moveq	r3, #0
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d015      	beq.n	80053ac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0204 	bic.w	r2, r2, #4
 800538e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005394:	f003 031f 	and.w	r3, r3, #31
 8005398:	2208      	movs	r2, #8
 800539a:	409a      	lsls	r2, r3
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a4:	f043 0201 	orr.w	r2, r3, #1
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d06e      	beq.n	80054a0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a69      	ldr	r2, [pc, #420]	@ (800556c <HAL_DMA_IRQHandler+0x3f8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d04a      	beq.n	8005462 <HAL_DMA_IRQHandler+0x2ee>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a67      	ldr	r2, [pc, #412]	@ (8005570 <HAL_DMA_IRQHandler+0x3fc>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d045      	beq.n	8005462 <HAL_DMA_IRQHandler+0x2ee>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a66      	ldr	r2, [pc, #408]	@ (8005574 <HAL_DMA_IRQHandler+0x400>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d040      	beq.n	8005462 <HAL_DMA_IRQHandler+0x2ee>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a64      	ldr	r2, [pc, #400]	@ (8005578 <HAL_DMA_IRQHandler+0x404>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d03b      	beq.n	8005462 <HAL_DMA_IRQHandler+0x2ee>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a63      	ldr	r2, [pc, #396]	@ (800557c <HAL_DMA_IRQHandler+0x408>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d036      	beq.n	8005462 <HAL_DMA_IRQHandler+0x2ee>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a61      	ldr	r2, [pc, #388]	@ (8005580 <HAL_DMA_IRQHandler+0x40c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d031      	beq.n	8005462 <HAL_DMA_IRQHandler+0x2ee>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a60      	ldr	r2, [pc, #384]	@ (8005584 <HAL_DMA_IRQHandler+0x410>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d02c      	beq.n	8005462 <HAL_DMA_IRQHandler+0x2ee>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a5e      	ldr	r2, [pc, #376]	@ (8005588 <HAL_DMA_IRQHandler+0x414>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d027      	beq.n	8005462 <HAL_DMA_IRQHandler+0x2ee>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a5d      	ldr	r2, [pc, #372]	@ (800558c <HAL_DMA_IRQHandler+0x418>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d022      	beq.n	8005462 <HAL_DMA_IRQHandler+0x2ee>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a5b      	ldr	r2, [pc, #364]	@ (8005590 <HAL_DMA_IRQHandler+0x41c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d01d      	beq.n	8005462 <HAL_DMA_IRQHandler+0x2ee>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a5a      	ldr	r2, [pc, #360]	@ (8005594 <HAL_DMA_IRQHandler+0x420>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d018      	beq.n	8005462 <HAL_DMA_IRQHandler+0x2ee>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a58      	ldr	r2, [pc, #352]	@ (8005598 <HAL_DMA_IRQHandler+0x424>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d013      	beq.n	8005462 <HAL_DMA_IRQHandler+0x2ee>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a57      	ldr	r2, [pc, #348]	@ (800559c <HAL_DMA_IRQHandler+0x428>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d00e      	beq.n	8005462 <HAL_DMA_IRQHandler+0x2ee>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a55      	ldr	r2, [pc, #340]	@ (80055a0 <HAL_DMA_IRQHandler+0x42c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d009      	beq.n	8005462 <HAL_DMA_IRQHandler+0x2ee>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a54      	ldr	r2, [pc, #336]	@ (80055a4 <HAL_DMA_IRQHandler+0x430>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d004      	beq.n	8005462 <HAL_DMA_IRQHandler+0x2ee>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a52      	ldr	r2, [pc, #328]	@ (80055a8 <HAL_DMA_IRQHandler+0x434>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d10a      	bne.n	8005478 <HAL_DMA_IRQHandler+0x304>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546c:	2b00      	cmp	r3, #0
 800546e:	bf14      	ite	ne
 8005470:	2301      	movne	r3, #1
 8005472:	2300      	moveq	r3, #0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	e003      	b.n	8005480 <HAL_DMA_IRQHandler+0x30c>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2300      	movs	r3, #0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00d      	beq.n	80054a0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005488:	f003 031f 	and.w	r3, r3, #31
 800548c:	2201      	movs	r2, #1
 800548e:	409a      	lsls	r2, r3
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005498:	f043 0202 	orr.w	r2, r3, #2
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054a4:	f003 031f 	and.w	r3, r3, #31
 80054a8:	2204      	movs	r2, #4
 80054aa:	409a      	lsls	r2, r3
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	4013      	ands	r3, r2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 808f 	beq.w	80055d4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a2c      	ldr	r2, [pc, #176]	@ (800556c <HAL_DMA_IRQHandler+0x3f8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d04a      	beq.n	8005556 <HAL_DMA_IRQHandler+0x3e2>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005570 <HAL_DMA_IRQHandler+0x3fc>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d045      	beq.n	8005556 <HAL_DMA_IRQHandler+0x3e2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a29      	ldr	r2, [pc, #164]	@ (8005574 <HAL_DMA_IRQHandler+0x400>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d040      	beq.n	8005556 <HAL_DMA_IRQHandler+0x3e2>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a27      	ldr	r2, [pc, #156]	@ (8005578 <HAL_DMA_IRQHandler+0x404>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d03b      	beq.n	8005556 <HAL_DMA_IRQHandler+0x3e2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a26      	ldr	r2, [pc, #152]	@ (800557c <HAL_DMA_IRQHandler+0x408>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d036      	beq.n	8005556 <HAL_DMA_IRQHandler+0x3e2>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a24      	ldr	r2, [pc, #144]	@ (8005580 <HAL_DMA_IRQHandler+0x40c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d031      	beq.n	8005556 <HAL_DMA_IRQHandler+0x3e2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a23      	ldr	r2, [pc, #140]	@ (8005584 <HAL_DMA_IRQHandler+0x410>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d02c      	beq.n	8005556 <HAL_DMA_IRQHandler+0x3e2>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a21      	ldr	r2, [pc, #132]	@ (8005588 <HAL_DMA_IRQHandler+0x414>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d027      	beq.n	8005556 <HAL_DMA_IRQHandler+0x3e2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a20      	ldr	r2, [pc, #128]	@ (800558c <HAL_DMA_IRQHandler+0x418>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d022      	beq.n	8005556 <HAL_DMA_IRQHandler+0x3e2>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1e      	ldr	r2, [pc, #120]	@ (8005590 <HAL_DMA_IRQHandler+0x41c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d01d      	beq.n	8005556 <HAL_DMA_IRQHandler+0x3e2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1d      	ldr	r2, [pc, #116]	@ (8005594 <HAL_DMA_IRQHandler+0x420>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d018      	beq.n	8005556 <HAL_DMA_IRQHandler+0x3e2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a1b      	ldr	r2, [pc, #108]	@ (8005598 <HAL_DMA_IRQHandler+0x424>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d013      	beq.n	8005556 <HAL_DMA_IRQHandler+0x3e2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1a      	ldr	r2, [pc, #104]	@ (800559c <HAL_DMA_IRQHandler+0x428>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d00e      	beq.n	8005556 <HAL_DMA_IRQHandler+0x3e2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a18      	ldr	r2, [pc, #96]	@ (80055a0 <HAL_DMA_IRQHandler+0x42c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d009      	beq.n	8005556 <HAL_DMA_IRQHandler+0x3e2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a17      	ldr	r2, [pc, #92]	@ (80055a4 <HAL_DMA_IRQHandler+0x430>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d004      	beq.n	8005556 <HAL_DMA_IRQHandler+0x3e2>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a15      	ldr	r2, [pc, #84]	@ (80055a8 <HAL_DMA_IRQHandler+0x434>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d12a      	bne.n	80055ac <HAL_DMA_IRQHandler+0x438>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	bf14      	ite	ne
 8005564:	2301      	movne	r3, #1
 8005566:	2300      	moveq	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	e023      	b.n	80055b4 <HAL_DMA_IRQHandler+0x440>
 800556c:	40020010 	.word	0x40020010
 8005570:	40020028 	.word	0x40020028
 8005574:	40020040 	.word	0x40020040
 8005578:	40020058 	.word	0x40020058
 800557c:	40020070 	.word	0x40020070
 8005580:	40020088 	.word	0x40020088
 8005584:	400200a0 	.word	0x400200a0
 8005588:	400200b8 	.word	0x400200b8
 800558c:	40020410 	.word	0x40020410
 8005590:	40020428 	.word	0x40020428
 8005594:	40020440 	.word	0x40020440
 8005598:	40020458 	.word	0x40020458
 800559c:	40020470 	.word	0x40020470
 80055a0:	40020488 	.word	0x40020488
 80055a4:	400204a0 	.word	0x400204a0
 80055a8:	400204b8 	.word	0x400204b8
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2300      	movs	r3, #0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00d      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055bc:	f003 031f 	and.w	r3, r3, #31
 80055c0:	2204      	movs	r2, #4
 80055c2:	409a      	lsls	r2, r3
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055cc:	f043 0204 	orr.w	r2, r3, #4
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055d8:	f003 031f 	and.w	r3, r3, #31
 80055dc:	2210      	movs	r2, #16
 80055de:	409a      	lsls	r2, r3
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	4013      	ands	r3, r2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 80a6 	beq.w	8005736 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a85      	ldr	r2, [pc, #532]	@ (8005804 <HAL_DMA_IRQHandler+0x690>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d04a      	beq.n	800568a <HAL_DMA_IRQHandler+0x516>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a83      	ldr	r2, [pc, #524]	@ (8005808 <HAL_DMA_IRQHandler+0x694>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d045      	beq.n	800568a <HAL_DMA_IRQHandler+0x516>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a82      	ldr	r2, [pc, #520]	@ (800580c <HAL_DMA_IRQHandler+0x698>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d040      	beq.n	800568a <HAL_DMA_IRQHandler+0x516>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a80      	ldr	r2, [pc, #512]	@ (8005810 <HAL_DMA_IRQHandler+0x69c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d03b      	beq.n	800568a <HAL_DMA_IRQHandler+0x516>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a7f      	ldr	r2, [pc, #508]	@ (8005814 <HAL_DMA_IRQHandler+0x6a0>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d036      	beq.n	800568a <HAL_DMA_IRQHandler+0x516>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a7d      	ldr	r2, [pc, #500]	@ (8005818 <HAL_DMA_IRQHandler+0x6a4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d031      	beq.n	800568a <HAL_DMA_IRQHandler+0x516>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a7c      	ldr	r2, [pc, #496]	@ (800581c <HAL_DMA_IRQHandler+0x6a8>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d02c      	beq.n	800568a <HAL_DMA_IRQHandler+0x516>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a7a      	ldr	r2, [pc, #488]	@ (8005820 <HAL_DMA_IRQHandler+0x6ac>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d027      	beq.n	800568a <HAL_DMA_IRQHandler+0x516>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a79      	ldr	r2, [pc, #484]	@ (8005824 <HAL_DMA_IRQHandler+0x6b0>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d022      	beq.n	800568a <HAL_DMA_IRQHandler+0x516>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a77      	ldr	r2, [pc, #476]	@ (8005828 <HAL_DMA_IRQHandler+0x6b4>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d01d      	beq.n	800568a <HAL_DMA_IRQHandler+0x516>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a76      	ldr	r2, [pc, #472]	@ (800582c <HAL_DMA_IRQHandler+0x6b8>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d018      	beq.n	800568a <HAL_DMA_IRQHandler+0x516>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a74      	ldr	r2, [pc, #464]	@ (8005830 <HAL_DMA_IRQHandler+0x6bc>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d013      	beq.n	800568a <HAL_DMA_IRQHandler+0x516>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a73      	ldr	r2, [pc, #460]	@ (8005834 <HAL_DMA_IRQHandler+0x6c0>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00e      	beq.n	800568a <HAL_DMA_IRQHandler+0x516>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a71      	ldr	r2, [pc, #452]	@ (8005838 <HAL_DMA_IRQHandler+0x6c4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d009      	beq.n	800568a <HAL_DMA_IRQHandler+0x516>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a70      	ldr	r2, [pc, #448]	@ (800583c <HAL_DMA_IRQHandler+0x6c8>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d004      	beq.n	800568a <HAL_DMA_IRQHandler+0x516>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a6e      	ldr	r2, [pc, #440]	@ (8005840 <HAL_DMA_IRQHandler+0x6cc>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d10a      	bne.n	80056a0 <HAL_DMA_IRQHandler+0x52c>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0308 	and.w	r3, r3, #8
 8005694:	2b00      	cmp	r3, #0
 8005696:	bf14      	ite	ne
 8005698:	2301      	movne	r3, #1
 800569a:	2300      	moveq	r3, #0
 800569c:	b2db      	uxtb	r3, r3
 800569e:	e009      	b.n	80056b4 <HAL_DMA_IRQHandler+0x540>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0304 	and.w	r3, r3, #4
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	bf14      	ite	ne
 80056ae:	2301      	movne	r3, #1
 80056b0:	2300      	moveq	r3, #0
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d03e      	beq.n	8005736 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056bc:	f003 031f 	and.w	r3, r3, #31
 80056c0:	2210      	movs	r2, #16
 80056c2:	409a      	lsls	r2, r3
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d018      	beq.n	8005708 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d108      	bne.n	80056f6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d024      	beq.n	8005736 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	4798      	blx	r3
 80056f4:	e01f      	b.n	8005736 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d01b      	beq.n	8005736 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	4798      	blx	r3
 8005706:	e016      	b.n	8005736 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005712:	2b00      	cmp	r3, #0
 8005714:	d107      	bne.n	8005726 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0208 	bic.w	r2, r2, #8
 8005724:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800573a:	f003 031f 	and.w	r3, r3, #31
 800573e:	2220      	movs	r2, #32
 8005740:	409a      	lsls	r2, r3
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	4013      	ands	r3, r2
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 8110 	beq.w	800596c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a2c      	ldr	r2, [pc, #176]	@ (8005804 <HAL_DMA_IRQHandler+0x690>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d04a      	beq.n	80057ec <HAL_DMA_IRQHandler+0x678>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a2b      	ldr	r2, [pc, #172]	@ (8005808 <HAL_DMA_IRQHandler+0x694>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d045      	beq.n	80057ec <HAL_DMA_IRQHandler+0x678>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a29      	ldr	r2, [pc, #164]	@ (800580c <HAL_DMA_IRQHandler+0x698>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d040      	beq.n	80057ec <HAL_DMA_IRQHandler+0x678>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a28      	ldr	r2, [pc, #160]	@ (8005810 <HAL_DMA_IRQHandler+0x69c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d03b      	beq.n	80057ec <HAL_DMA_IRQHandler+0x678>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a26      	ldr	r2, [pc, #152]	@ (8005814 <HAL_DMA_IRQHandler+0x6a0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d036      	beq.n	80057ec <HAL_DMA_IRQHandler+0x678>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a25      	ldr	r2, [pc, #148]	@ (8005818 <HAL_DMA_IRQHandler+0x6a4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d031      	beq.n	80057ec <HAL_DMA_IRQHandler+0x678>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a23      	ldr	r2, [pc, #140]	@ (800581c <HAL_DMA_IRQHandler+0x6a8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d02c      	beq.n	80057ec <HAL_DMA_IRQHandler+0x678>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a22      	ldr	r2, [pc, #136]	@ (8005820 <HAL_DMA_IRQHandler+0x6ac>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d027      	beq.n	80057ec <HAL_DMA_IRQHandler+0x678>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a20      	ldr	r2, [pc, #128]	@ (8005824 <HAL_DMA_IRQHandler+0x6b0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d022      	beq.n	80057ec <HAL_DMA_IRQHandler+0x678>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005828 <HAL_DMA_IRQHandler+0x6b4>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d01d      	beq.n	80057ec <HAL_DMA_IRQHandler+0x678>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a1d      	ldr	r2, [pc, #116]	@ (800582c <HAL_DMA_IRQHandler+0x6b8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d018      	beq.n	80057ec <HAL_DMA_IRQHandler+0x678>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a1c      	ldr	r2, [pc, #112]	@ (8005830 <HAL_DMA_IRQHandler+0x6bc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d013      	beq.n	80057ec <HAL_DMA_IRQHandler+0x678>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a1a      	ldr	r2, [pc, #104]	@ (8005834 <HAL_DMA_IRQHandler+0x6c0>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00e      	beq.n	80057ec <HAL_DMA_IRQHandler+0x678>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a19      	ldr	r2, [pc, #100]	@ (8005838 <HAL_DMA_IRQHandler+0x6c4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d009      	beq.n	80057ec <HAL_DMA_IRQHandler+0x678>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a17      	ldr	r2, [pc, #92]	@ (800583c <HAL_DMA_IRQHandler+0x6c8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d004      	beq.n	80057ec <HAL_DMA_IRQHandler+0x678>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a16      	ldr	r2, [pc, #88]	@ (8005840 <HAL_DMA_IRQHandler+0x6cc>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d12b      	bne.n	8005844 <HAL_DMA_IRQHandler+0x6d0>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0310 	and.w	r3, r3, #16
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	bf14      	ite	ne
 80057fa:	2301      	movne	r3, #1
 80057fc:	2300      	moveq	r3, #0
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	e02a      	b.n	8005858 <HAL_DMA_IRQHandler+0x6e4>
 8005802:	bf00      	nop
 8005804:	40020010 	.word	0x40020010
 8005808:	40020028 	.word	0x40020028
 800580c:	40020040 	.word	0x40020040
 8005810:	40020058 	.word	0x40020058
 8005814:	40020070 	.word	0x40020070
 8005818:	40020088 	.word	0x40020088
 800581c:	400200a0 	.word	0x400200a0
 8005820:	400200b8 	.word	0x400200b8
 8005824:	40020410 	.word	0x40020410
 8005828:	40020428 	.word	0x40020428
 800582c:	40020440 	.word	0x40020440
 8005830:	40020458 	.word	0x40020458
 8005834:	40020470 	.word	0x40020470
 8005838:	40020488 	.word	0x40020488
 800583c:	400204a0 	.word	0x400204a0
 8005840:	400204b8 	.word	0x400204b8
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	bf14      	ite	ne
 8005852:	2301      	movne	r3, #1
 8005854:	2300      	moveq	r3, #0
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 8087 	beq.w	800596c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005862:	f003 031f 	and.w	r3, r3, #31
 8005866:	2220      	movs	r2, #32
 8005868:	409a      	lsls	r2, r3
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b04      	cmp	r3, #4
 8005878:	d139      	bne.n	80058ee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0216 	bic.w	r2, r2, #22
 8005888:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695a      	ldr	r2, [r3, #20]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005898:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d103      	bne.n	80058aa <HAL_DMA_IRQHandler+0x736>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d007      	beq.n	80058ba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0208 	bic.w	r2, r2, #8
 80058b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058be:	f003 031f 	and.w	r3, r3, #31
 80058c2:	223f      	movs	r2, #63	@ 0x3f
 80058c4:	409a      	lsls	r2, r3
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 834a 	beq.w	8005f78 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	4798      	blx	r3
          }
          return;
 80058ec:	e344      	b.n	8005f78 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d018      	beq.n	800592e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d108      	bne.n	800591c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590e:	2b00      	cmp	r3, #0
 8005910:	d02c      	beq.n	800596c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	4798      	blx	r3
 800591a:	e027      	b.n	800596c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005920:	2b00      	cmp	r3, #0
 8005922:	d023      	beq.n	800596c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	4798      	blx	r3
 800592c:	e01e      	b.n	800596c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10f      	bne.n	800595c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0210 	bic.w	r2, r2, #16
 800594a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 8306 	beq.w	8005f82 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 8088 	beq.w	8005a94 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2204      	movs	r2, #4
 8005988:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a7a      	ldr	r2, [pc, #488]	@ (8005b7c <HAL_DMA_IRQHandler+0xa08>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d04a      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x8b8>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a79      	ldr	r2, [pc, #484]	@ (8005b80 <HAL_DMA_IRQHandler+0xa0c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d045      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x8b8>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a77      	ldr	r2, [pc, #476]	@ (8005b84 <HAL_DMA_IRQHandler+0xa10>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d040      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x8b8>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a76      	ldr	r2, [pc, #472]	@ (8005b88 <HAL_DMA_IRQHandler+0xa14>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d03b      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x8b8>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a74      	ldr	r2, [pc, #464]	@ (8005b8c <HAL_DMA_IRQHandler+0xa18>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d036      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x8b8>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a73      	ldr	r2, [pc, #460]	@ (8005b90 <HAL_DMA_IRQHandler+0xa1c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d031      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x8b8>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a71      	ldr	r2, [pc, #452]	@ (8005b94 <HAL_DMA_IRQHandler+0xa20>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d02c      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x8b8>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a70      	ldr	r2, [pc, #448]	@ (8005b98 <HAL_DMA_IRQHandler+0xa24>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d027      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x8b8>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a6e      	ldr	r2, [pc, #440]	@ (8005b9c <HAL_DMA_IRQHandler+0xa28>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d022      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x8b8>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a6d      	ldr	r2, [pc, #436]	@ (8005ba0 <HAL_DMA_IRQHandler+0xa2c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d01d      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x8b8>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a6b      	ldr	r2, [pc, #428]	@ (8005ba4 <HAL_DMA_IRQHandler+0xa30>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d018      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x8b8>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a6a      	ldr	r2, [pc, #424]	@ (8005ba8 <HAL_DMA_IRQHandler+0xa34>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d013      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x8b8>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a68      	ldr	r2, [pc, #416]	@ (8005bac <HAL_DMA_IRQHandler+0xa38>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d00e      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x8b8>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a67      	ldr	r2, [pc, #412]	@ (8005bb0 <HAL_DMA_IRQHandler+0xa3c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d009      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x8b8>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a65      	ldr	r2, [pc, #404]	@ (8005bb4 <HAL_DMA_IRQHandler+0xa40>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d004      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x8b8>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a64      	ldr	r2, [pc, #400]	@ (8005bb8 <HAL_DMA_IRQHandler+0xa44>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d108      	bne.n	8005a3e <HAL_DMA_IRQHandler+0x8ca>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0201 	bic.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	e007      	b.n	8005a4e <HAL_DMA_IRQHandler+0x8da>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0201 	bic.w	r2, r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	3301      	adds	r3, #1
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d307      	bcc.n	8005a6a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1f2      	bne.n	8005a4e <HAL_DMA_IRQHandler+0x8da>
 8005a68:	e000      	b.n	8005a6c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005a6a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d004      	beq.n	8005a84 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2203      	movs	r2, #3
 8005a7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005a82:	e003      	b.n	8005a8c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 8272 	beq.w	8005f82 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	4798      	blx	r3
 8005aa6:	e26c      	b.n	8005f82 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a43      	ldr	r2, [pc, #268]	@ (8005bbc <HAL_DMA_IRQHandler+0xa48>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d022      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x984>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a42      	ldr	r2, [pc, #264]	@ (8005bc0 <HAL_DMA_IRQHandler+0xa4c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d01d      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x984>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a40      	ldr	r2, [pc, #256]	@ (8005bc4 <HAL_DMA_IRQHandler+0xa50>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d018      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x984>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a3f      	ldr	r2, [pc, #252]	@ (8005bc8 <HAL_DMA_IRQHandler+0xa54>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d013      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x984>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a3d      	ldr	r2, [pc, #244]	@ (8005bcc <HAL_DMA_IRQHandler+0xa58>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d00e      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x984>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a3c      	ldr	r2, [pc, #240]	@ (8005bd0 <HAL_DMA_IRQHandler+0xa5c>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d009      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x984>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a3a      	ldr	r2, [pc, #232]	@ (8005bd4 <HAL_DMA_IRQHandler+0xa60>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d004      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x984>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a39      	ldr	r2, [pc, #228]	@ (8005bd8 <HAL_DMA_IRQHandler+0xa64>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d101      	bne.n	8005afc <HAL_DMA_IRQHandler+0x988>
 8005af8:	2301      	movs	r3, #1
 8005afa:	e000      	b.n	8005afe <HAL_DMA_IRQHandler+0x98a>
 8005afc:	2300      	movs	r3, #0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 823f 	beq.w	8005f82 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b10:	f003 031f 	and.w	r3, r3, #31
 8005b14:	2204      	movs	r2, #4
 8005b16:	409a      	lsls	r2, r3
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 80cd 	beq.w	8005cbc <HAL_DMA_IRQHandler+0xb48>
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 80c7 	beq.w	8005cbc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b32:	f003 031f 	and.w	r3, r3, #31
 8005b36:	2204      	movs	r2, #4
 8005b38:	409a      	lsls	r2, r3
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d049      	beq.n	8005bdc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d109      	bne.n	8005b66 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f000 8210 	beq.w	8005f7c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b64:	e20a      	b.n	8005f7c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 8206 	beq.w	8005f7c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b78:	e200      	b.n	8005f7c <HAL_DMA_IRQHandler+0xe08>
 8005b7a:	bf00      	nop
 8005b7c:	40020010 	.word	0x40020010
 8005b80:	40020028 	.word	0x40020028
 8005b84:	40020040 	.word	0x40020040
 8005b88:	40020058 	.word	0x40020058
 8005b8c:	40020070 	.word	0x40020070
 8005b90:	40020088 	.word	0x40020088
 8005b94:	400200a0 	.word	0x400200a0
 8005b98:	400200b8 	.word	0x400200b8
 8005b9c:	40020410 	.word	0x40020410
 8005ba0:	40020428 	.word	0x40020428
 8005ba4:	40020440 	.word	0x40020440
 8005ba8:	40020458 	.word	0x40020458
 8005bac:	40020470 	.word	0x40020470
 8005bb0:	40020488 	.word	0x40020488
 8005bb4:	400204a0 	.word	0x400204a0
 8005bb8:	400204b8 	.word	0x400204b8
 8005bbc:	58025408 	.word	0x58025408
 8005bc0:	5802541c 	.word	0x5802541c
 8005bc4:	58025430 	.word	0x58025430
 8005bc8:	58025444 	.word	0x58025444
 8005bcc:	58025458 	.word	0x58025458
 8005bd0:	5802546c 	.word	0x5802546c
 8005bd4:	58025480 	.word	0x58025480
 8005bd8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	f003 0320 	and.w	r3, r3, #32
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d160      	bne.n	8005ca8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a7f      	ldr	r2, [pc, #508]	@ (8005de8 <HAL_DMA_IRQHandler+0xc74>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d04a      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xb12>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a7d      	ldr	r2, [pc, #500]	@ (8005dec <HAL_DMA_IRQHandler+0xc78>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d045      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xb12>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a7c      	ldr	r2, [pc, #496]	@ (8005df0 <HAL_DMA_IRQHandler+0xc7c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d040      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xb12>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a7a      	ldr	r2, [pc, #488]	@ (8005df4 <HAL_DMA_IRQHandler+0xc80>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d03b      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xb12>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a79      	ldr	r2, [pc, #484]	@ (8005df8 <HAL_DMA_IRQHandler+0xc84>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d036      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xb12>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a77      	ldr	r2, [pc, #476]	@ (8005dfc <HAL_DMA_IRQHandler+0xc88>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d031      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xb12>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a76      	ldr	r2, [pc, #472]	@ (8005e00 <HAL_DMA_IRQHandler+0xc8c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d02c      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xb12>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a74      	ldr	r2, [pc, #464]	@ (8005e04 <HAL_DMA_IRQHandler+0xc90>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d027      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xb12>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a73      	ldr	r2, [pc, #460]	@ (8005e08 <HAL_DMA_IRQHandler+0xc94>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d022      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xb12>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a71      	ldr	r2, [pc, #452]	@ (8005e0c <HAL_DMA_IRQHandler+0xc98>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d01d      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xb12>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a70      	ldr	r2, [pc, #448]	@ (8005e10 <HAL_DMA_IRQHandler+0xc9c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d018      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xb12>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a6e      	ldr	r2, [pc, #440]	@ (8005e14 <HAL_DMA_IRQHandler+0xca0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d013      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xb12>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a6d      	ldr	r2, [pc, #436]	@ (8005e18 <HAL_DMA_IRQHandler+0xca4>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00e      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xb12>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a6b      	ldr	r2, [pc, #428]	@ (8005e1c <HAL_DMA_IRQHandler+0xca8>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d009      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xb12>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a6a      	ldr	r2, [pc, #424]	@ (8005e20 <HAL_DMA_IRQHandler+0xcac>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d004      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xb12>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a68      	ldr	r2, [pc, #416]	@ (8005e24 <HAL_DMA_IRQHandler+0xcb0>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d108      	bne.n	8005c98 <HAL_DMA_IRQHandler+0xb24>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0208 	bic.w	r2, r2, #8
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	e007      	b.n	8005ca8 <HAL_DMA_IRQHandler+0xb34>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0204 	bic.w	r2, r2, #4
 8005ca6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 8165 	beq.w	8005f7c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cba:	e15f      	b.n	8005f7c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cc0:	f003 031f 	and.w	r3, r3, #31
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	409a      	lsls	r2, r3
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 80c5 	beq.w	8005e5c <HAL_DMA_IRQHandler+0xce8>
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 80bf 	beq.w	8005e5c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ce2:	f003 031f 	and.w	r3, r3, #31
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	409a      	lsls	r2, r3
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d018      	beq.n	8005d2a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d109      	bne.n	8005d16 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 813a 	beq.w	8005f80 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d14:	e134      	b.n	8005f80 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f000 8130 	beq.w	8005f80 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d28:	e12a      	b.n	8005f80 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f003 0320 	and.w	r3, r3, #32
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f040 8089 	bne.w	8005e48 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a2b      	ldr	r2, [pc, #172]	@ (8005de8 <HAL_DMA_IRQHandler+0xc74>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d04a      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xc62>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a29      	ldr	r2, [pc, #164]	@ (8005dec <HAL_DMA_IRQHandler+0xc78>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d045      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xc62>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a28      	ldr	r2, [pc, #160]	@ (8005df0 <HAL_DMA_IRQHandler+0xc7c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d040      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xc62>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a26      	ldr	r2, [pc, #152]	@ (8005df4 <HAL_DMA_IRQHandler+0xc80>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d03b      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xc62>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a25      	ldr	r2, [pc, #148]	@ (8005df8 <HAL_DMA_IRQHandler+0xc84>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d036      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xc62>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a23      	ldr	r2, [pc, #140]	@ (8005dfc <HAL_DMA_IRQHandler+0xc88>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d031      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xc62>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a22      	ldr	r2, [pc, #136]	@ (8005e00 <HAL_DMA_IRQHandler+0xc8c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d02c      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xc62>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a20      	ldr	r2, [pc, #128]	@ (8005e04 <HAL_DMA_IRQHandler+0xc90>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d027      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xc62>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8005e08 <HAL_DMA_IRQHandler+0xc94>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d022      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xc62>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a1d      	ldr	r2, [pc, #116]	@ (8005e0c <HAL_DMA_IRQHandler+0xc98>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d01d      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xc62>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8005e10 <HAL_DMA_IRQHandler+0xc9c>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d018      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xc62>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a1a      	ldr	r2, [pc, #104]	@ (8005e14 <HAL_DMA_IRQHandler+0xca0>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d013      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xc62>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a19      	ldr	r2, [pc, #100]	@ (8005e18 <HAL_DMA_IRQHandler+0xca4>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d00e      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xc62>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a17      	ldr	r2, [pc, #92]	@ (8005e1c <HAL_DMA_IRQHandler+0xca8>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d009      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xc62>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a16      	ldr	r2, [pc, #88]	@ (8005e20 <HAL_DMA_IRQHandler+0xcac>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d004      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xc62>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a14      	ldr	r2, [pc, #80]	@ (8005e24 <HAL_DMA_IRQHandler+0xcb0>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d128      	bne.n	8005e28 <HAL_DMA_IRQHandler+0xcb4>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 0214 	bic.w	r2, r2, #20
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	e027      	b.n	8005e38 <HAL_DMA_IRQHandler+0xcc4>
 8005de8:	40020010 	.word	0x40020010
 8005dec:	40020028 	.word	0x40020028
 8005df0:	40020040 	.word	0x40020040
 8005df4:	40020058 	.word	0x40020058
 8005df8:	40020070 	.word	0x40020070
 8005dfc:	40020088 	.word	0x40020088
 8005e00:	400200a0 	.word	0x400200a0
 8005e04:	400200b8 	.word	0x400200b8
 8005e08:	40020410 	.word	0x40020410
 8005e0c:	40020428 	.word	0x40020428
 8005e10:	40020440 	.word	0x40020440
 8005e14:	40020458 	.word	0x40020458
 8005e18:	40020470 	.word	0x40020470
 8005e1c:	40020488 	.word	0x40020488
 8005e20:	400204a0 	.word	0x400204a0
 8005e24:	400204b8 	.word	0x400204b8
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 020a 	bic.w	r2, r2, #10
 8005e36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 8097 	beq.w	8005f80 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e5a:	e091      	b.n	8005f80 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e60:	f003 031f 	and.w	r3, r3, #31
 8005e64:	2208      	movs	r2, #8
 8005e66:	409a      	lsls	r2, r3
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 8088 	beq.w	8005f82 <HAL_DMA_IRQHandler+0xe0e>
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f003 0308 	and.w	r3, r3, #8
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 8082 	beq.w	8005f82 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a41      	ldr	r2, [pc, #260]	@ (8005f88 <HAL_DMA_IRQHandler+0xe14>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d04a      	beq.n	8005f1e <HAL_DMA_IRQHandler+0xdaa>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a3f      	ldr	r2, [pc, #252]	@ (8005f8c <HAL_DMA_IRQHandler+0xe18>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d045      	beq.n	8005f1e <HAL_DMA_IRQHandler+0xdaa>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a3e      	ldr	r2, [pc, #248]	@ (8005f90 <HAL_DMA_IRQHandler+0xe1c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d040      	beq.n	8005f1e <HAL_DMA_IRQHandler+0xdaa>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a3c      	ldr	r2, [pc, #240]	@ (8005f94 <HAL_DMA_IRQHandler+0xe20>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d03b      	beq.n	8005f1e <HAL_DMA_IRQHandler+0xdaa>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a3b      	ldr	r2, [pc, #236]	@ (8005f98 <HAL_DMA_IRQHandler+0xe24>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d036      	beq.n	8005f1e <HAL_DMA_IRQHandler+0xdaa>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a39      	ldr	r2, [pc, #228]	@ (8005f9c <HAL_DMA_IRQHandler+0xe28>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d031      	beq.n	8005f1e <HAL_DMA_IRQHandler+0xdaa>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a38      	ldr	r2, [pc, #224]	@ (8005fa0 <HAL_DMA_IRQHandler+0xe2c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d02c      	beq.n	8005f1e <HAL_DMA_IRQHandler+0xdaa>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a36      	ldr	r2, [pc, #216]	@ (8005fa4 <HAL_DMA_IRQHandler+0xe30>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d027      	beq.n	8005f1e <HAL_DMA_IRQHandler+0xdaa>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a35      	ldr	r2, [pc, #212]	@ (8005fa8 <HAL_DMA_IRQHandler+0xe34>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d022      	beq.n	8005f1e <HAL_DMA_IRQHandler+0xdaa>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a33      	ldr	r2, [pc, #204]	@ (8005fac <HAL_DMA_IRQHandler+0xe38>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d01d      	beq.n	8005f1e <HAL_DMA_IRQHandler+0xdaa>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a32      	ldr	r2, [pc, #200]	@ (8005fb0 <HAL_DMA_IRQHandler+0xe3c>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d018      	beq.n	8005f1e <HAL_DMA_IRQHandler+0xdaa>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a30      	ldr	r2, [pc, #192]	@ (8005fb4 <HAL_DMA_IRQHandler+0xe40>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d013      	beq.n	8005f1e <HAL_DMA_IRQHandler+0xdaa>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a2f      	ldr	r2, [pc, #188]	@ (8005fb8 <HAL_DMA_IRQHandler+0xe44>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d00e      	beq.n	8005f1e <HAL_DMA_IRQHandler+0xdaa>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a2d      	ldr	r2, [pc, #180]	@ (8005fbc <HAL_DMA_IRQHandler+0xe48>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d009      	beq.n	8005f1e <HAL_DMA_IRQHandler+0xdaa>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a2c      	ldr	r2, [pc, #176]	@ (8005fc0 <HAL_DMA_IRQHandler+0xe4c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d004      	beq.n	8005f1e <HAL_DMA_IRQHandler+0xdaa>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a2a      	ldr	r2, [pc, #168]	@ (8005fc4 <HAL_DMA_IRQHandler+0xe50>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d108      	bne.n	8005f30 <HAL_DMA_IRQHandler+0xdbc>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 021c 	bic.w	r2, r2, #28
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	e007      	b.n	8005f40 <HAL_DMA_IRQHandler+0xdcc>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 020e 	bic.w	r2, r2, #14
 8005f3e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f44:	f003 031f 	and.w	r3, r3, #31
 8005f48:	2201      	movs	r2, #1
 8005f4a:	409a      	lsls	r2, r3
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d009      	beq.n	8005f82 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	4798      	blx	r3
 8005f76:	e004      	b.n	8005f82 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005f78:	bf00      	nop
 8005f7a:	e002      	b.n	8005f82 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f7c:	bf00      	nop
 8005f7e:	e000      	b.n	8005f82 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f80:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005f82:	3728      	adds	r7, #40	@ 0x28
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	40020010 	.word	0x40020010
 8005f8c:	40020028 	.word	0x40020028
 8005f90:	40020040 	.word	0x40020040
 8005f94:	40020058 	.word	0x40020058
 8005f98:	40020070 	.word	0x40020070
 8005f9c:	40020088 	.word	0x40020088
 8005fa0:	400200a0 	.word	0x400200a0
 8005fa4:	400200b8 	.word	0x400200b8
 8005fa8:	40020410 	.word	0x40020410
 8005fac:	40020428 	.word	0x40020428
 8005fb0:	40020440 	.word	0x40020440
 8005fb4:	40020458 	.word	0x40020458
 8005fb8:	40020470 	.word	0x40020470
 8005fbc:	40020488 	.word	0x40020488
 8005fc0:	400204a0 	.word	0x400204a0
 8005fc4:	400204b8 	.word	0x400204b8

08005fc8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
 8005fec:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ff2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ff8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a7f      	ldr	r2, [pc, #508]	@ (80061fc <DMA_SetConfig+0x21c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d072      	beq.n	80060ea <DMA_SetConfig+0x10a>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a7d      	ldr	r2, [pc, #500]	@ (8006200 <DMA_SetConfig+0x220>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d06d      	beq.n	80060ea <DMA_SetConfig+0x10a>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a7c      	ldr	r2, [pc, #496]	@ (8006204 <DMA_SetConfig+0x224>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d068      	beq.n	80060ea <DMA_SetConfig+0x10a>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a7a      	ldr	r2, [pc, #488]	@ (8006208 <DMA_SetConfig+0x228>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d063      	beq.n	80060ea <DMA_SetConfig+0x10a>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a79      	ldr	r2, [pc, #484]	@ (800620c <DMA_SetConfig+0x22c>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d05e      	beq.n	80060ea <DMA_SetConfig+0x10a>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a77      	ldr	r2, [pc, #476]	@ (8006210 <DMA_SetConfig+0x230>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d059      	beq.n	80060ea <DMA_SetConfig+0x10a>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a76      	ldr	r2, [pc, #472]	@ (8006214 <DMA_SetConfig+0x234>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d054      	beq.n	80060ea <DMA_SetConfig+0x10a>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a74      	ldr	r2, [pc, #464]	@ (8006218 <DMA_SetConfig+0x238>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d04f      	beq.n	80060ea <DMA_SetConfig+0x10a>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a73      	ldr	r2, [pc, #460]	@ (800621c <DMA_SetConfig+0x23c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d04a      	beq.n	80060ea <DMA_SetConfig+0x10a>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a71      	ldr	r2, [pc, #452]	@ (8006220 <DMA_SetConfig+0x240>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d045      	beq.n	80060ea <DMA_SetConfig+0x10a>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a70      	ldr	r2, [pc, #448]	@ (8006224 <DMA_SetConfig+0x244>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d040      	beq.n	80060ea <DMA_SetConfig+0x10a>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a6e      	ldr	r2, [pc, #440]	@ (8006228 <DMA_SetConfig+0x248>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d03b      	beq.n	80060ea <DMA_SetConfig+0x10a>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a6d      	ldr	r2, [pc, #436]	@ (800622c <DMA_SetConfig+0x24c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d036      	beq.n	80060ea <DMA_SetConfig+0x10a>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a6b      	ldr	r2, [pc, #428]	@ (8006230 <DMA_SetConfig+0x250>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d031      	beq.n	80060ea <DMA_SetConfig+0x10a>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a6a      	ldr	r2, [pc, #424]	@ (8006234 <DMA_SetConfig+0x254>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d02c      	beq.n	80060ea <DMA_SetConfig+0x10a>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a68      	ldr	r2, [pc, #416]	@ (8006238 <DMA_SetConfig+0x258>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d027      	beq.n	80060ea <DMA_SetConfig+0x10a>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a67      	ldr	r2, [pc, #412]	@ (800623c <DMA_SetConfig+0x25c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d022      	beq.n	80060ea <DMA_SetConfig+0x10a>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a65      	ldr	r2, [pc, #404]	@ (8006240 <DMA_SetConfig+0x260>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d01d      	beq.n	80060ea <DMA_SetConfig+0x10a>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a64      	ldr	r2, [pc, #400]	@ (8006244 <DMA_SetConfig+0x264>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d018      	beq.n	80060ea <DMA_SetConfig+0x10a>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a62      	ldr	r2, [pc, #392]	@ (8006248 <DMA_SetConfig+0x268>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d013      	beq.n	80060ea <DMA_SetConfig+0x10a>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a61      	ldr	r2, [pc, #388]	@ (800624c <DMA_SetConfig+0x26c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00e      	beq.n	80060ea <DMA_SetConfig+0x10a>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a5f      	ldr	r2, [pc, #380]	@ (8006250 <DMA_SetConfig+0x270>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d009      	beq.n	80060ea <DMA_SetConfig+0x10a>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a5e      	ldr	r2, [pc, #376]	@ (8006254 <DMA_SetConfig+0x274>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d004      	beq.n	80060ea <DMA_SetConfig+0x10a>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a5c      	ldr	r2, [pc, #368]	@ (8006258 <DMA_SetConfig+0x278>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d101      	bne.n	80060ee <DMA_SetConfig+0x10e>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <DMA_SetConfig+0x110>
 80060ee:	2300      	movs	r3, #0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00d      	beq.n	8006110 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80060fc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006102:	2b00      	cmp	r3, #0
 8006104:	d004      	beq.n	8006110 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800610e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a39      	ldr	r2, [pc, #228]	@ (80061fc <DMA_SetConfig+0x21c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d04a      	beq.n	80061b0 <DMA_SetConfig+0x1d0>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a38      	ldr	r2, [pc, #224]	@ (8006200 <DMA_SetConfig+0x220>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d045      	beq.n	80061b0 <DMA_SetConfig+0x1d0>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a36      	ldr	r2, [pc, #216]	@ (8006204 <DMA_SetConfig+0x224>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d040      	beq.n	80061b0 <DMA_SetConfig+0x1d0>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a35      	ldr	r2, [pc, #212]	@ (8006208 <DMA_SetConfig+0x228>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d03b      	beq.n	80061b0 <DMA_SetConfig+0x1d0>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a33      	ldr	r2, [pc, #204]	@ (800620c <DMA_SetConfig+0x22c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d036      	beq.n	80061b0 <DMA_SetConfig+0x1d0>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a32      	ldr	r2, [pc, #200]	@ (8006210 <DMA_SetConfig+0x230>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d031      	beq.n	80061b0 <DMA_SetConfig+0x1d0>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a30      	ldr	r2, [pc, #192]	@ (8006214 <DMA_SetConfig+0x234>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d02c      	beq.n	80061b0 <DMA_SetConfig+0x1d0>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a2f      	ldr	r2, [pc, #188]	@ (8006218 <DMA_SetConfig+0x238>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d027      	beq.n	80061b0 <DMA_SetConfig+0x1d0>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a2d      	ldr	r2, [pc, #180]	@ (800621c <DMA_SetConfig+0x23c>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d022      	beq.n	80061b0 <DMA_SetConfig+0x1d0>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a2c      	ldr	r2, [pc, #176]	@ (8006220 <DMA_SetConfig+0x240>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d01d      	beq.n	80061b0 <DMA_SetConfig+0x1d0>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a2a      	ldr	r2, [pc, #168]	@ (8006224 <DMA_SetConfig+0x244>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d018      	beq.n	80061b0 <DMA_SetConfig+0x1d0>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a29      	ldr	r2, [pc, #164]	@ (8006228 <DMA_SetConfig+0x248>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d013      	beq.n	80061b0 <DMA_SetConfig+0x1d0>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a27      	ldr	r2, [pc, #156]	@ (800622c <DMA_SetConfig+0x24c>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d00e      	beq.n	80061b0 <DMA_SetConfig+0x1d0>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a26      	ldr	r2, [pc, #152]	@ (8006230 <DMA_SetConfig+0x250>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d009      	beq.n	80061b0 <DMA_SetConfig+0x1d0>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a24      	ldr	r2, [pc, #144]	@ (8006234 <DMA_SetConfig+0x254>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d004      	beq.n	80061b0 <DMA_SetConfig+0x1d0>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a23      	ldr	r2, [pc, #140]	@ (8006238 <DMA_SetConfig+0x258>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d101      	bne.n	80061b4 <DMA_SetConfig+0x1d4>
 80061b0:	2301      	movs	r3, #1
 80061b2:	e000      	b.n	80061b6 <DMA_SetConfig+0x1d6>
 80061b4:	2300      	movs	r3, #0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d059      	beq.n	800626e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061be:	f003 031f 	and.w	r3, r3, #31
 80061c2:	223f      	movs	r2, #63	@ 0x3f
 80061c4:	409a      	lsls	r2, r3
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80061d8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	2b40      	cmp	r3, #64	@ 0x40
 80061e8:	d138      	bne.n	800625c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80061fa:	e086      	b.n	800630a <DMA_SetConfig+0x32a>
 80061fc:	40020010 	.word	0x40020010
 8006200:	40020028 	.word	0x40020028
 8006204:	40020040 	.word	0x40020040
 8006208:	40020058 	.word	0x40020058
 800620c:	40020070 	.word	0x40020070
 8006210:	40020088 	.word	0x40020088
 8006214:	400200a0 	.word	0x400200a0
 8006218:	400200b8 	.word	0x400200b8
 800621c:	40020410 	.word	0x40020410
 8006220:	40020428 	.word	0x40020428
 8006224:	40020440 	.word	0x40020440
 8006228:	40020458 	.word	0x40020458
 800622c:	40020470 	.word	0x40020470
 8006230:	40020488 	.word	0x40020488
 8006234:	400204a0 	.word	0x400204a0
 8006238:	400204b8 	.word	0x400204b8
 800623c:	58025408 	.word	0x58025408
 8006240:	5802541c 	.word	0x5802541c
 8006244:	58025430 	.word	0x58025430
 8006248:	58025444 	.word	0x58025444
 800624c:	58025458 	.word	0x58025458
 8006250:	5802546c 	.word	0x5802546c
 8006254:	58025480 	.word	0x58025480
 8006258:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	60da      	str	r2, [r3, #12]
}
 800626c:	e04d      	b.n	800630a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a29      	ldr	r2, [pc, #164]	@ (8006318 <DMA_SetConfig+0x338>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d022      	beq.n	80062be <DMA_SetConfig+0x2de>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a27      	ldr	r2, [pc, #156]	@ (800631c <DMA_SetConfig+0x33c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d01d      	beq.n	80062be <DMA_SetConfig+0x2de>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a26      	ldr	r2, [pc, #152]	@ (8006320 <DMA_SetConfig+0x340>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d018      	beq.n	80062be <DMA_SetConfig+0x2de>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a24      	ldr	r2, [pc, #144]	@ (8006324 <DMA_SetConfig+0x344>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d013      	beq.n	80062be <DMA_SetConfig+0x2de>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a23      	ldr	r2, [pc, #140]	@ (8006328 <DMA_SetConfig+0x348>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d00e      	beq.n	80062be <DMA_SetConfig+0x2de>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a21      	ldr	r2, [pc, #132]	@ (800632c <DMA_SetConfig+0x34c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d009      	beq.n	80062be <DMA_SetConfig+0x2de>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a20      	ldr	r2, [pc, #128]	@ (8006330 <DMA_SetConfig+0x350>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d004      	beq.n	80062be <DMA_SetConfig+0x2de>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a1e      	ldr	r2, [pc, #120]	@ (8006334 <DMA_SetConfig+0x354>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d101      	bne.n	80062c2 <DMA_SetConfig+0x2e2>
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <DMA_SetConfig+0x2e4>
 80062c2:	2300      	movs	r3, #0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d020      	beq.n	800630a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062cc:	f003 031f 	and.w	r3, r3, #31
 80062d0:	2201      	movs	r2, #1
 80062d2:	409a      	lsls	r2, r3
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	2b40      	cmp	r3, #64	@ 0x40
 80062e6:	d108      	bne.n	80062fa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	60da      	str	r2, [r3, #12]
}
 80062f8:	e007      	b.n	800630a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	60da      	str	r2, [r3, #12]
}
 800630a:	bf00      	nop
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	58025408 	.word	0x58025408
 800631c:	5802541c 	.word	0x5802541c
 8006320:	58025430 	.word	0x58025430
 8006324:	58025444 	.word	0x58025444
 8006328:	58025458 	.word	0x58025458
 800632c:	5802546c 	.word	0x5802546c
 8006330:	58025480 	.word	0x58025480
 8006334:	58025494 	.word	0x58025494

08006338 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a42      	ldr	r2, [pc, #264]	@ (8006450 <DMA_CalcBaseAndBitshift+0x118>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d04a      	beq.n	80063e0 <DMA_CalcBaseAndBitshift+0xa8>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a41      	ldr	r2, [pc, #260]	@ (8006454 <DMA_CalcBaseAndBitshift+0x11c>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d045      	beq.n	80063e0 <DMA_CalcBaseAndBitshift+0xa8>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a3f      	ldr	r2, [pc, #252]	@ (8006458 <DMA_CalcBaseAndBitshift+0x120>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d040      	beq.n	80063e0 <DMA_CalcBaseAndBitshift+0xa8>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a3e      	ldr	r2, [pc, #248]	@ (800645c <DMA_CalcBaseAndBitshift+0x124>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d03b      	beq.n	80063e0 <DMA_CalcBaseAndBitshift+0xa8>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a3c      	ldr	r2, [pc, #240]	@ (8006460 <DMA_CalcBaseAndBitshift+0x128>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d036      	beq.n	80063e0 <DMA_CalcBaseAndBitshift+0xa8>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a3b      	ldr	r2, [pc, #236]	@ (8006464 <DMA_CalcBaseAndBitshift+0x12c>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d031      	beq.n	80063e0 <DMA_CalcBaseAndBitshift+0xa8>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a39      	ldr	r2, [pc, #228]	@ (8006468 <DMA_CalcBaseAndBitshift+0x130>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d02c      	beq.n	80063e0 <DMA_CalcBaseAndBitshift+0xa8>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a38      	ldr	r2, [pc, #224]	@ (800646c <DMA_CalcBaseAndBitshift+0x134>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d027      	beq.n	80063e0 <DMA_CalcBaseAndBitshift+0xa8>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a36      	ldr	r2, [pc, #216]	@ (8006470 <DMA_CalcBaseAndBitshift+0x138>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d022      	beq.n	80063e0 <DMA_CalcBaseAndBitshift+0xa8>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a35      	ldr	r2, [pc, #212]	@ (8006474 <DMA_CalcBaseAndBitshift+0x13c>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d01d      	beq.n	80063e0 <DMA_CalcBaseAndBitshift+0xa8>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a33      	ldr	r2, [pc, #204]	@ (8006478 <DMA_CalcBaseAndBitshift+0x140>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d018      	beq.n	80063e0 <DMA_CalcBaseAndBitshift+0xa8>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a32      	ldr	r2, [pc, #200]	@ (800647c <DMA_CalcBaseAndBitshift+0x144>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d013      	beq.n	80063e0 <DMA_CalcBaseAndBitshift+0xa8>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a30      	ldr	r2, [pc, #192]	@ (8006480 <DMA_CalcBaseAndBitshift+0x148>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00e      	beq.n	80063e0 <DMA_CalcBaseAndBitshift+0xa8>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a2f      	ldr	r2, [pc, #188]	@ (8006484 <DMA_CalcBaseAndBitshift+0x14c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d009      	beq.n	80063e0 <DMA_CalcBaseAndBitshift+0xa8>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006488 <DMA_CalcBaseAndBitshift+0x150>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d004      	beq.n	80063e0 <DMA_CalcBaseAndBitshift+0xa8>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a2c      	ldr	r2, [pc, #176]	@ (800648c <DMA_CalcBaseAndBitshift+0x154>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d101      	bne.n	80063e4 <DMA_CalcBaseAndBitshift+0xac>
 80063e0:	2301      	movs	r3, #1
 80063e2:	e000      	b.n	80063e6 <DMA_CalcBaseAndBitshift+0xae>
 80063e4:	2300      	movs	r3, #0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d024      	beq.n	8006434 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	3b10      	subs	r3, #16
 80063f2:	4a27      	ldr	r2, [pc, #156]	@ (8006490 <DMA_CalcBaseAndBitshift+0x158>)
 80063f4:	fba2 2303 	umull	r2, r3, r2, r3
 80063f8:	091b      	lsrs	r3, r3, #4
 80063fa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f003 0307 	and.w	r3, r3, #7
 8006402:	4a24      	ldr	r2, [pc, #144]	@ (8006494 <DMA_CalcBaseAndBitshift+0x15c>)
 8006404:	5cd3      	ldrb	r3, [r2, r3]
 8006406:	461a      	mov	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b03      	cmp	r3, #3
 8006410:	d908      	bls.n	8006424 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	461a      	mov	r2, r3
 8006418:	4b1f      	ldr	r3, [pc, #124]	@ (8006498 <DMA_CalcBaseAndBitshift+0x160>)
 800641a:	4013      	ands	r3, r2
 800641c:	1d1a      	adds	r2, r3, #4
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	659a      	str	r2, [r3, #88]	@ 0x58
 8006422:	e00d      	b.n	8006440 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	461a      	mov	r2, r3
 800642a:	4b1b      	ldr	r3, [pc, #108]	@ (8006498 <DMA_CalcBaseAndBitshift+0x160>)
 800642c:	4013      	ands	r3, r2
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	6593      	str	r3, [r2, #88]	@ 0x58
 8006432:	e005      	b.n	8006440 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006444:	4618      	mov	r0, r3
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	40020010 	.word	0x40020010
 8006454:	40020028 	.word	0x40020028
 8006458:	40020040 	.word	0x40020040
 800645c:	40020058 	.word	0x40020058
 8006460:	40020070 	.word	0x40020070
 8006464:	40020088 	.word	0x40020088
 8006468:	400200a0 	.word	0x400200a0
 800646c:	400200b8 	.word	0x400200b8
 8006470:	40020410 	.word	0x40020410
 8006474:	40020428 	.word	0x40020428
 8006478:	40020440 	.word	0x40020440
 800647c:	40020458 	.word	0x40020458
 8006480:	40020470 	.word	0x40020470
 8006484:	40020488 	.word	0x40020488
 8006488:	400204a0 	.word	0x400204a0
 800648c:	400204b8 	.word	0x400204b8
 8006490:	aaaaaaab 	.word	0xaaaaaaab
 8006494:	0800bb88 	.word	0x0800bb88
 8006498:	fffffc00 	.word	0xfffffc00

0800649c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d120      	bne.n	80064f2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b4:	2b03      	cmp	r3, #3
 80064b6:	d858      	bhi.n	800656a <DMA_CheckFifoParam+0xce>
 80064b8:	a201      	add	r2, pc, #4	@ (adr r2, 80064c0 <DMA_CheckFifoParam+0x24>)
 80064ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064be:	bf00      	nop
 80064c0:	080064d1 	.word	0x080064d1
 80064c4:	080064e3 	.word	0x080064e3
 80064c8:	080064d1 	.word	0x080064d1
 80064cc:	0800656b 	.word	0x0800656b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d048      	beq.n	800656e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064e0:	e045      	b.n	800656e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80064ea:	d142      	bne.n	8006572 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064f0:	e03f      	b.n	8006572 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064fa:	d123      	bne.n	8006544 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006500:	2b03      	cmp	r3, #3
 8006502:	d838      	bhi.n	8006576 <DMA_CheckFifoParam+0xda>
 8006504:	a201      	add	r2, pc, #4	@ (adr r2, 800650c <DMA_CheckFifoParam+0x70>)
 8006506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650a:	bf00      	nop
 800650c:	0800651d 	.word	0x0800651d
 8006510:	08006523 	.word	0x08006523
 8006514:	0800651d 	.word	0x0800651d
 8006518:	08006535 	.word	0x08006535
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	73fb      	strb	r3, [r7, #15]
        break;
 8006520:	e030      	b.n	8006584 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006526:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d025      	beq.n	800657a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006532:	e022      	b.n	800657a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006538:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800653c:	d11f      	bne.n	800657e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006542:	e01c      	b.n	800657e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006548:	2b02      	cmp	r3, #2
 800654a:	d902      	bls.n	8006552 <DMA_CheckFifoParam+0xb6>
 800654c:	2b03      	cmp	r3, #3
 800654e:	d003      	beq.n	8006558 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006550:	e018      	b.n	8006584 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	73fb      	strb	r3, [r7, #15]
        break;
 8006556:	e015      	b.n	8006584 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00e      	beq.n	8006582 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	73fb      	strb	r3, [r7, #15]
    break;
 8006568:	e00b      	b.n	8006582 <DMA_CheckFifoParam+0xe6>
        break;
 800656a:	bf00      	nop
 800656c:	e00a      	b.n	8006584 <DMA_CheckFifoParam+0xe8>
        break;
 800656e:	bf00      	nop
 8006570:	e008      	b.n	8006584 <DMA_CheckFifoParam+0xe8>
        break;
 8006572:	bf00      	nop
 8006574:	e006      	b.n	8006584 <DMA_CheckFifoParam+0xe8>
        break;
 8006576:	bf00      	nop
 8006578:	e004      	b.n	8006584 <DMA_CheckFifoParam+0xe8>
        break;
 800657a:	bf00      	nop
 800657c:	e002      	b.n	8006584 <DMA_CheckFifoParam+0xe8>
        break;
 800657e:	bf00      	nop
 8006580:	e000      	b.n	8006584 <DMA_CheckFifoParam+0xe8>
    break;
 8006582:	bf00      	nop
    }
  }

  return status;
 8006584:	7bfb      	ldrb	r3, [r7, #15]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop

08006594 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a38      	ldr	r2, [pc, #224]	@ (8006688 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d022      	beq.n	80065f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a36      	ldr	r2, [pc, #216]	@ (800668c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d01d      	beq.n	80065f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a35      	ldr	r2, [pc, #212]	@ (8006690 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d018      	beq.n	80065f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a33      	ldr	r2, [pc, #204]	@ (8006694 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d013      	beq.n	80065f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a32      	ldr	r2, [pc, #200]	@ (8006698 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d00e      	beq.n	80065f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a30      	ldr	r2, [pc, #192]	@ (800669c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d009      	beq.n	80065f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a2f      	ldr	r2, [pc, #188]	@ (80066a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d004      	beq.n	80065f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a2d      	ldr	r2, [pc, #180]	@ (80066a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d101      	bne.n	80065f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80065f2:	2301      	movs	r3, #1
 80065f4:	e000      	b.n	80065f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80065f6:	2300      	movs	r3, #0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d01a      	beq.n	8006632 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	b2db      	uxtb	r3, r3
 8006602:	3b08      	subs	r3, #8
 8006604:	4a28      	ldr	r2, [pc, #160]	@ (80066a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006606:	fba2 2303 	umull	r2, r3, r2, r3
 800660a:	091b      	lsrs	r3, r3, #4
 800660c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	4b26      	ldr	r3, [pc, #152]	@ (80066ac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006612:	4413      	add	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	461a      	mov	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a24      	ldr	r2, [pc, #144]	@ (80066b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006620:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f003 031f 	and.w	r3, r3, #31
 8006628:	2201      	movs	r2, #1
 800662a:	409a      	lsls	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006630:	e024      	b.n	800667c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	b2db      	uxtb	r3, r3
 8006638:	3b10      	subs	r3, #16
 800663a:	4a1e      	ldr	r2, [pc, #120]	@ (80066b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800663c:	fba2 2303 	umull	r2, r3, r2, r3
 8006640:	091b      	lsrs	r3, r3, #4
 8006642:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	4a1c      	ldr	r2, [pc, #112]	@ (80066b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d806      	bhi.n	800665a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	4a1b      	ldr	r2, [pc, #108]	@ (80066bc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d902      	bls.n	800665a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	3308      	adds	r3, #8
 8006658:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	4b18      	ldr	r3, [pc, #96]	@ (80066c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800665e:	4413      	add	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	461a      	mov	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a16      	ldr	r2, [pc, #88]	@ (80066c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800666c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f003 031f 	and.w	r3, r3, #31
 8006674:	2201      	movs	r2, #1
 8006676:	409a      	lsls	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800667c:	bf00      	nop
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	58025408 	.word	0x58025408
 800668c:	5802541c 	.word	0x5802541c
 8006690:	58025430 	.word	0x58025430
 8006694:	58025444 	.word	0x58025444
 8006698:	58025458 	.word	0x58025458
 800669c:	5802546c 	.word	0x5802546c
 80066a0:	58025480 	.word	0x58025480
 80066a4:	58025494 	.word	0x58025494
 80066a8:	cccccccd 	.word	0xcccccccd
 80066ac:	16009600 	.word	0x16009600
 80066b0:	58025880 	.word	0x58025880
 80066b4:	aaaaaaab 	.word	0xaaaaaaab
 80066b8:	400204b8 	.word	0x400204b8
 80066bc:	4002040f 	.word	0x4002040f
 80066c0:	10008200 	.word	0x10008200
 80066c4:	40020880 	.word	0x40020880

080066c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d04a      	beq.n	8006774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d847      	bhi.n	8006774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a25      	ldr	r2, [pc, #148]	@ (8006780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d022      	beq.n	8006734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a24      	ldr	r2, [pc, #144]	@ (8006784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d01d      	beq.n	8006734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a22      	ldr	r2, [pc, #136]	@ (8006788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d018      	beq.n	8006734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a21      	ldr	r2, [pc, #132]	@ (800678c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d013      	beq.n	8006734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a1f      	ldr	r2, [pc, #124]	@ (8006790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d00e      	beq.n	8006734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a1e      	ldr	r2, [pc, #120]	@ (8006794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d009      	beq.n	8006734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a1c      	ldr	r2, [pc, #112]	@ (8006798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d004      	beq.n	8006734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a1b      	ldr	r2, [pc, #108]	@ (800679c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d101      	bne.n	8006738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006734:	2301      	movs	r3, #1
 8006736:	e000      	b.n	800673a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006738:	2300      	movs	r3, #0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00a      	beq.n	8006754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	4b17      	ldr	r3, [pc, #92]	@ (80067a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006742:	4413      	add	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	461a      	mov	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a15      	ldr	r2, [pc, #84]	@ (80067a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006750:	671a      	str	r2, [r3, #112]	@ 0x70
 8006752:	e009      	b.n	8006768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	4b14      	ldr	r3, [pc, #80]	@ (80067a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006758:	4413      	add	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	461a      	mov	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a11      	ldr	r2, [pc, #68]	@ (80067ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006766:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	3b01      	subs	r3, #1
 800676c:	2201      	movs	r2, #1
 800676e:	409a      	lsls	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006774:	bf00      	nop
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	58025408 	.word	0x58025408
 8006784:	5802541c 	.word	0x5802541c
 8006788:	58025430 	.word	0x58025430
 800678c:	58025444 	.word	0x58025444
 8006790:	58025458 	.word	0x58025458
 8006794:	5802546c 	.word	0x5802546c
 8006798:	58025480 	.word	0x58025480
 800679c:	58025494 	.word	0x58025494
 80067a0:	1600963f 	.word	0x1600963f
 80067a4:	58025940 	.word	0x58025940
 80067a8:	1000823f 	.word	0x1000823f
 80067ac:	40020940 	.word	0x40020940

080067b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b089      	sub	sp, #36	@ 0x24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80067be:	4b86      	ldr	r3, [pc, #536]	@ (80069d8 <HAL_GPIO_Init+0x228>)
 80067c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80067c2:	e18c      	b.n	8006ade <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	2101      	movs	r1, #1
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	fa01 f303 	lsl.w	r3, r1, r3
 80067d0:	4013      	ands	r3, r2
 80067d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f000 817e 	beq.w	8006ad8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f003 0303 	and.w	r3, r3, #3
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d005      	beq.n	80067f4 <HAL_GPIO_Init+0x44>
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f003 0303 	and.w	r3, r3, #3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d130      	bne.n	8006856 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	2203      	movs	r2, #3
 8006800:	fa02 f303 	lsl.w	r3, r2, r3
 8006804:	43db      	mvns	r3, r3
 8006806:	69ba      	ldr	r2, [r7, #24]
 8006808:	4013      	ands	r3, r2
 800680a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	68da      	ldr	r2, [r3, #12]
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	005b      	lsls	r3, r3, #1
 8006814:	fa02 f303 	lsl.w	r3, r2, r3
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	4313      	orrs	r3, r2
 800681c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800682a:	2201      	movs	r2, #1
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	fa02 f303 	lsl.w	r3, r2, r3
 8006832:	43db      	mvns	r3, r3
 8006834:	69ba      	ldr	r2, [r7, #24]
 8006836:	4013      	ands	r3, r2
 8006838:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	091b      	lsrs	r3, r3, #4
 8006840:	f003 0201 	and.w	r2, r3, #1
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	fa02 f303 	lsl.w	r3, r2, r3
 800684a:	69ba      	ldr	r2, [r7, #24]
 800684c:	4313      	orrs	r3, r2
 800684e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f003 0303 	and.w	r3, r3, #3
 800685e:	2b03      	cmp	r3, #3
 8006860:	d017      	beq.n	8006892 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	005b      	lsls	r3, r3, #1
 800686c:	2203      	movs	r2, #3
 800686e:	fa02 f303 	lsl.w	r3, r2, r3
 8006872:	43db      	mvns	r3, r3
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	4013      	ands	r3, r2
 8006878:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	689a      	ldr	r2, [r3, #8]
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	fa02 f303 	lsl.w	r3, r2, r3
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	4313      	orrs	r3, r2
 800688a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	69ba      	ldr	r2, [r7, #24]
 8006890:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f003 0303 	and.w	r3, r3, #3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d123      	bne.n	80068e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	08da      	lsrs	r2, r3, #3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	3208      	adds	r2, #8
 80068a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	f003 0307 	and.w	r3, r3, #7
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	220f      	movs	r2, #15
 80068b6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ba:	43db      	mvns	r3, r3
 80068bc:	69ba      	ldr	r2, [r7, #24]
 80068be:	4013      	ands	r3, r2
 80068c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	691a      	ldr	r2, [r3, #16]
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	f003 0307 	and.w	r3, r3, #7
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	fa02 f303 	lsl.w	r3, r2, r3
 80068d2:	69ba      	ldr	r2, [r7, #24]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	08da      	lsrs	r2, r3, #3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	3208      	adds	r2, #8
 80068e0:	69b9      	ldr	r1, [r7, #24]
 80068e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	005b      	lsls	r3, r3, #1
 80068f0:	2203      	movs	r2, #3
 80068f2:	fa02 f303 	lsl.w	r3, r2, r3
 80068f6:	43db      	mvns	r3, r3
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	4013      	ands	r3, r2
 80068fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f003 0203 	and.w	r2, r3, #3
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	005b      	lsls	r3, r3, #1
 800690a:	fa02 f303 	lsl.w	r3, r2, r3
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	4313      	orrs	r3, r2
 8006912:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 80d8 	beq.w	8006ad8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006928:	4b2c      	ldr	r3, [pc, #176]	@ (80069dc <HAL_GPIO_Init+0x22c>)
 800692a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800692e:	4a2b      	ldr	r2, [pc, #172]	@ (80069dc <HAL_GPIO_Init+0x22c>)
 8006930:	f043 0302 	orr.w	r3, r3, #2
 8006934:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006938:	4b28      	ldr	r3, [pc, #160]	@ (80069dc <HAL_GPIO_Init+0x22c>)
 800693a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006946:	4a26      	ldr	r2, [pc, #152]	@ (80069e0 <HAL_GPIO_Init+0x230>)
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	089b      	lsrs	r3, r3, #2
 800694c:	3302      	adds	r3, #2
 800694e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	f003 0303 	and.w	r3, r3, #3
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	220f      	movs	r2, #15
 800695e:	fa02 f303 	lsl.w	r3, r2, r3
 8006962:	43db      	mvns	r3, r3
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	4013      	ands	r3, r2
 8006968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a1d      	ldr	r2, [pc, #116]	@ (80069e4 <HAL_GPIO_Init+0x234>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d04a      	beq.n	8006a08 <HAL_GPIO_Init+0x258>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a1c      	ldr	r2, [pc, #112]	@ (80069e8 <HAL_GPIO_Init+0x238>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d02b      	beq.n	80069d2 <HAL_GPIO_Init+0x222>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a1b      	ldr	r2, [pc, #108]	@ (80069ec <HAL_GPIO_Init+0x23c>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d025      	beq.n	80069ce <HAL_GPIO_Init+0x21e>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a1a      	ldr	r2, [pc, #104]	@ (80069f0 <HAL_GPIO_Init+0x240>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d01f      	beq.n	80069ca <HAL_GPIO_Init+0x21a>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a19      	ldr	r2, [pc, #100]	@ (80069f4 <HAL_GPIO_Init+0x244>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d019      	beq.n	80069c6 <HAL_GPIO_Init+0x216>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a18      	ldr	r2, [pc, #96]	@ (80069f8 <HAL_GPIO_Init+0x248>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d013      	beq.n	80069c2 <HAL_GPIO_Init+0x212>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a17      	ldr	r2, [pc, #92]	@ (80069fc <HAL_GPIO_Init+0x24c>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d00d      	beq.n	80069be <HAL_GPIO_Init+0x20e>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a16      	ldr	r2, [pc, #88]	@ (8006a00 <HAL_GPIO_Init+0x250>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d007      	beq.n	80069ba <HAL_GPIO_Init+0x20a>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a15      	ldr	r2, [pc, #84]	@ (8006a04 <HAL_GPIO_Init+0x254>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d101      	bne.n	80069b6 <HAL_GPIO_Init+0x206>
 80069b2:	2309      	movs	r3, #9
 80069b4:	e029      	b.n	8006a0a <HAL_GPIO_Init+0x25a>
 80069b6:	230a      	movs	r3, #10
 80069b8:	e027      	b.n	8006a0a <HAL_GPIO_Init+0x25a>
 80069ba:	2307      	movs	r3, #7
 80069bc:	e025      	b.n	8006a0a <HAL_GPIO_Init+0x25a>
 80069be:	2306      	movs	r3, #6
 80069c0:	e023      	b.n	8006a0a <HAL_GPIO_Init+0x25a>
 80069c2:	2305      	movs	r3, #5
 80069c4:	e021      	b.n	8006a0a <HAL_GPIO_Init+0x25a>
 80069c6:	2304      	movs	r3, #4
 80069c8:	e01f      	b.n	8006a0a <HAL_GPIO_Init+0x25a>
 80069ca:	2303      	movs	r3, #3
 80069cc:	e01d      	b.n	8006a0a <HAL_GPIO_Init+0x25a>
 80069ce:	2302      	movs	r3, #2
 80069d0:	e01b      	b.n	8006a0a <HAL_GPIO_Init+0x25a>
 80069d2:	2301      	movs	r3, #1
 80069d4:	e019      	b.n	8006a0a <HAL_GPIO_Init+0x25a>
 80069d6:	bf00      	nop
 80069d8:	58000080 	.word	0x58000080
 80069dc:	58024400 	.word	0x58024400
 80069e0:	58000400 	.word	0x58000400
 80069e4:	58020000 	.word	0x58020000
 80069e8:	58020400 	.word	0x58020400
 80069ec:	58020800 	.word	0x58020800
 80069f0:	58020c00 	.word	0x58020c00
 80069f4:	58021000 	.word	0x58021000
 80069f8:	58021400 	.word	0x58021400
 80069fc:	58021800 	.word	0x58021800
 8006a00:	58021c00 	.word	0x58021c00
 8006a04:	58022400 	.word	0x58022400
 8006a08:	2300      	movs	r3, #0
 8006a0a:	69fa      	ldr	r2, [r7, #28]
 8006a0c:	f002 0203 	and.w	r2, r2, #3
 8006a10:	0092      	lsls	r2, r2, #2
 8006a12:	4093      	lsls	r3, r2
 8006a14:	69ba      	ldr	r2, [r7, #24]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a1a:	4938      	ldr	r1, [pc, #224]	@ (8006afc <HAL_GPIO_Init+0x34c>)
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	089b      	lsrs	r3, r3, #2
 8006a20:	3302      	adds	r3, #2
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	43db      	mvns	r3, r3
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	4013      	ands	r3, r2
 8006a38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006a4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006a56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	43db      	mvns	r3, r3
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	4013      	ands	r3, r2
 8006a66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d003      	beq.n	8006a7c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006a7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	43db      	mvns	r3, r3
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	4013      	ands	r3, r2
 8006a92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	69ba      	ldr	r2, [r7, #24]
 8006aac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	43db      	mvns	r3, r3
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	4013      	ands	r3, r2
 8006abc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	3301      	adds	r3, #1
 8006adc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f47f ae6b 	bne.w	80067c4 <HAL_GPIO_Init+0x14>
  }
}
 8006aee:	bf00      	nop
 8006af0:	bf00      	nop
 8006af2:	3724      	adds	r7, #36	@ 0x24
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	58000400 	.word	0x58000400

08006b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	807b      	strh	r3, [r7, #2]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b10:	787b      	ldrb	r3, [r7, #1]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b16:	887a      	ldrh	r2, [r7, #2]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006b1c:	e003      	b.n	8006b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006b1e:	887b      	ldrh	r3, [r7, #2]
 8006b20:	041a      	lsls	r2, r3, #16
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	619a      	str	r2, [r3, #24]
}
 8006b26:	bf00      	nop
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
	...

08006b34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006b3c:	4b19      	ldr	r3, [pc, #100]	@ (8006ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b04      	cmp	r3, #4
 8006b46:	d00a      	beq.n	8006b5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006b48:	4b16      	ldr	r3, [pc, #88]	@ (8006ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f003 0307 	and.w	r3, r3, #7
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d001      	beq.n	8006b5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e01f      	b.n	8006b9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	e01d      	b.n	8006b9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006b5e:	4b11      	ldr	r3, [pc, #68]	@ (8006ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	f023 0207 	bic.w	r2, r3, #7
 8006b66:	490f      	ldr	r1, [pc, #60]	@ (8006ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006b6e:	f7fa fda9 	bl	80016c4 <HAL_GetTick>
 8006b72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b74:	e009      	b.n	8006b8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006b76:	f7fa fda5 	bl	80016c4 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b84:	d901      	bls.n	8006b8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e007      	b.n	8006b9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b8a:	4b06      	ldr	r3, [pc, #24]	@ (8006ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b96:	d1ee      	bne.n	8006b76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	58024800 	.word	0x58024800

08006ba8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08c      	sub	sp, #48	@ 0x30
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e3c8      	b.n	800734c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 8087 	beq.w	8006cd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bc8:	4b88      	ldr	r3, [pc, #544]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006bd2:	4b86      	ldr	r3, [pc, #536]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bda:	2b10      	cmp	r3, #16
 8006bdc:	d007      	beq.n	8006bee <HAL_RCC_OscConfig+0x46>
 8006bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be0:	2b18      	cmp	r3, #24
 8006be2:	d110      	bne.n	8006c06 <HAL_RCC_OscConfig+0x5e>
 8006be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be6:	f003 0303 	and.w	r3, r3, #3
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d10b      	bne.n	8006c06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bee:	4b7f      	ldr	r3, [pc, #508]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d06c      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x12c>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d168      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e3a2      	b.n	800734c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c0e:	d106      	bne.n	8006c1e <HAL_RCC_OscConfig+0x76>
 8006c10:	4b76      	ldr	r3, [pc, #472]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a75      	ldr	r2, [pc, #468]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006c16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c1a:	6013      	str	r3, [r2, #0]
 8006c1c:	e02e      	b.n	8006c7c <HAL_RCC_OscConfig+0xd4>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10c      	bne.n	8006c40 <HAL_RCC_OscConfig+0x98>
 8006c26:	4b71      	ldr	r3, [pc, #452]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a70      	ldr	r2, [pc, #448]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006c2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c30:	6013      	str	r3, [r2, #0]
 8006c32:	4b6e      	ldr	r3, [pc, #440]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a6d      	ldr	r2, [pc, #436]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006c38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c3c:	6013      	str	r3, [r2, #0]
 8006c3e:	e01d      	b.n	8006c7c <HAL_RCC_OscConfig+0xd4>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c48:	d10c      	bne.n	8006c64 <HAL_RCC_OscConfig+0xbc>
 8006c4a:	4b68      	ldr	r3, [pc, #416]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a67      	ldr	r2, [pc, #412]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006c50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c54:	6013      	str	r3, [r2, #0]
 8006c56:	4b65      	ldr	r3, [pc, #404]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a64      	ldr	r2, [pc, #400]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c60:	6013      	str	r3, [r2, #0]
 8006c62:	e00b      	b.n	8006c7c <HAL_RCC_OscConfig+0xd4>
 8006c64:	4b61      	ldr	r3, [pc, #388]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a60      	ldr	r2, [pc, #384]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006c6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c6e:	6013      	str	r3, [r2, #0]
 8006c70:	4b5e      	ldr	r3, [pc, #376]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a5d      	ldr	r2, [pc, #372]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006c76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d013      	beq.n	8006cac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c84:	f7fa fd1e 	bl	80016c4 <HAL_GetTick>
 8006c88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c8a:	e008      	b.n	8006c9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c8c:	f7fa fd1a 	bl	80016c4 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b64      	cmp	r3, #100	@ 0x64
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e356      	b.n	800734c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c9e:	4b53      	ldr	r3, [pc, #332]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0f0      	beq.n	8006c8c <HAL_RCC_OscConfig+0xe4>
 8006caa:	e014      	b.n	8006cd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cac:	f7fa fd0a 	bl	80016c4 <HAL_GetTick>
 8006cb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006cb2:	e008      	b.n	8006cc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cb4:	f7fa fd06 	bl	80016c4 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b64      	cmp	r3, #100	@ 0x64
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e342      	b.n	800734c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006cc6:	4b49      	ldr	r3, [pc, #292]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1f0      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x10c>
 8006cd2:	e000      	b.n	8006cd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 808c 	beq.w	8006dfc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ce4:	4b41      	ldr	r3, [pc, #260]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006cee:	4b3f      	ldr	r3, [pc, #252]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d007      	beq.n	8006d0a <HAL_RCC_OscConfig+0x162>
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	2b18      	cmp	r3, #24
 8006cfe:	d137      	bne.n	8006d70 <HAL_RCC_OscConfig+0x1c8>
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	f003 0303 	and.w	r3, r3, #3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d132      	bne.n	8006d70 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d0a:	4b38      	ldr	r3, [pc, #224]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0304 	and.w	r3, r3, #4
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d005      	beq.n	8006d22 <HAL_RCC_OscConfig+0x17a>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e314      	b.n	800734c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d22:	4b32      	ldr	r3, [pc, #200]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f023 0219 	bic.w	r2, r3, #25
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	492f      	ldr	r1, [pc, #188]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d34:	f7fa fcc6 	bl	80016c4 <HAL_GetTick>
 8006d38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d3a:	e008      	b.n	8006d4e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d3c:	f7fa fcc2 	bl	80016c4 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d901      	bls.n	8006d4e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e2fe      	b.n	800734c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d4e:	4b27      	ldr	r3, [pc, #156]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0304 	and.w	r3, r3, #4
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0f0      	beq.n	8006d3c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d5a:	4b24      	ldr	r3, [pc, #144]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	061b      	lsls	r3, r3, #24
 8006d68:	4920      	ldr	r1, [pc, #128]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d6e:	e045      	b.n	8006dfc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d026      	beq.n	8006dc6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d78:	4b1c      	ldr	r3, [pc, #112]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f023 0219 	bic.w	r2, r3, #25
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	4919      	ldr	r1, [pc, #100]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d8a:	f7fa fc9b 	bl	80016c4 <HAL_GetTick>
 8006d8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d90:	e008      	b.n	8006da4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d92:	f7fa fc97 	bl	80016c4 <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d901      	bls.n	8006da4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e2d3      	b.n	800734c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006da4:	4b11      	ldr	r3, [pc, #68]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d0f0      	beq.n	8006d92 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006db0:	4b0e      	ldr	r3, [pc, #56]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	061b      	lsls	r3, r3, #24
 8006dbe:	490b      	ldr	r1, [pc, #44]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	604b      	str	r3, [r1, #4]
 8006dc4:	e01a      	b.n	8006dfc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dc6:	4b09      	ldr	r3, [pc, #36]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a08      	ldr	r2, [pc, #32]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006dcc:	f023 0301 	bic.w	r3, r3, #1
 8006dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd2:	f7fa fc77 	bl	80016c4 <HAL_GetTick>
 8006dd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006dd8:	e00a      	b.n	8006df0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dda:	f7fa fc73 	bl	80016c4 <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d903      	bls.n	8006df0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e2af      	b.n	800734c <HAL_RCC_OscConfig+0x7a4>
 8006dec:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006df0:	4b96      	ldr	r3, [pc, #600]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1ee      	bne.n	8006dda <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0310 	and.w	r3, r3, #16
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d06a      	beq.n	8006ede <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e08:	4b90      	ldr	r3, [pc, #576]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e10:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e12:	4b8e      	ldr	r3, [pc, #568]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e16:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	2b08      	cmp	r3, #8
 8006e1c:	d007      	beq.n	8006e2e <HAL_RCC_OscConfig+0x286>
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	2b18      	cmp	r3, #24
 8006e22:	d11b      	bne.n	8006e5c <HAL_RCC_OscConfig+0x2b4>
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f003 0303 	and.w	r3, r3, #3
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d116      	bne.n	8006e5c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e2e:	4b87      	ldr	r3, [pc, #540]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d005      	beq.n	8006e46 <HAL_RCC_OscConfig+0x29e>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	2b80      	cmp	r3, #128	@ 0x80
 8006e40:	d001      	beq.n	8006e46 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e282      	b.n	800734c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e46:	4b81      	ldr	r3, [pc, #516]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	061b      	lsls	r3, r3, #24
 8006e54:	497d      	ldr	r1, [pc, #500]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e5a:	e040      	b.n	8006ede <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d023      	beq.n	8006eac <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006e64:	4b79      	ldr	r3, [pc, #484]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a78      	ldr	r2, [pc, #480]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e70:	f7fa fc28 	bl	80016c4 <HAL_GetTick>
 8006e74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e76:	e008      	b.n	8006e8a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006e78:	f7fa fc24 	bl	80016c4 <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d901      	bls.n	8006e8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e260      	b.n	800734c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e8a:	4b70      	ldr	r3, [pc, #448]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d0f0      	beq.n	8006e78 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e96:	4b6d      	ldr	r3, [pc, #436]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	061b      	lsls	r3, r3, #24
 8006ea4:	4969      	ldr	r1, [pc, #420]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60cb      	str	r3, [r1, #12]
 8006eaa:	e018      	b.n	8006ede <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006eac:	4b67      	ldr	r3, [pc, #412]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a66      	ldr	r2, [pc, #408]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006eb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb8:	f7fa fc04 	bl	80016c4 <HAL_GetTick>
 8006ebc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ebe:	e008      	b.n	8006ed2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006ec0:	f7fa fc00 	bl	80016c4 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d901      	bls.n	8006ed2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e23c      	b.n	800734c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ed2:	4b5e      	ldr	r3, [pc, #376]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1f0      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0308 	and.w	r3, r3, #8
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d036      	beq.n	8006f58 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d019      	beq.n	8006f26 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ef2:	4b56      	ldr	r3, [pc, #344]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006ef4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ef6:	4a55      	ldr	r2, [pc, #340]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006ef8:	f043 0301 	orr.w	r3, r3, #1
 8006efc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006efe:	f7fa fbe1 	bl	80016c4 <HAL_GetTick>
 8006f02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f04:	e008      	b.n	8006f18 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f06:	f7fa fbdd 	bl	80016c4 <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d901      	bls.n	8006f18 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e219      	b.n	800734c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f18:	4b4c      	ldr	r3, [pc, #304]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006f1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f1c:	f003 0302 	and.w	r3, r3, #2
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d0f0      	beq.n	8006f06 <HAL_RCC_OscConfig+0x35e>
 8006f24:	e018      	b.n	8006f58 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f26:	4b49      	ldr	r3, [pc, #292]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f2a:	4a48      	ldr	r2, [pc, #288]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006f2c:	f023 0301 	bic.w	r3, r3, #1
 8006f30:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f32:	f7fa fbc7 	bl	80016c4 <HAL_GetTick>
 8006f36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f38:	e008      	b.n	8006f4c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f3a:	f7fa fbc3 	bl	80016c4 <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d901      	bls.n	8006f4c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e1ff      	b.n	800734c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f4c:	4b3f      	ldr	r3, [pc, #252]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f50:	f003 0302 	and.w	r3, r3, #2
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1f0      	bne.n	8006f3a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0320 	and.w	r3, r3, #32
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d036      	beq.n	8006fd2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d019      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f6c:	4b37      	ldr	r3, [pc, #220]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a36      	ldr	r2, [pc, #216]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006f72:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006f76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f78:	f7fa fba4 	bl	80016c4 <HAL_GetTick>
 8006f7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f7e:	e008      	b.n	8006f92 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f80:	f7fa fba0 	bl	80016c4 <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e1dc      	b.n	800734c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f92:	4b2e      	ldr	r3, [pc, #184]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0f0      	beq.n	8006f80 <HAL_RCC_OscConfig+0x3d8>
 8006f9e:	e018      	b.n	8006fd2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a29      	ldr	r2, [pc, #164]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006fa6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006faa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006fac:	f7fa fb8a 	bl	80016c4 <HAL_GetTick>
 8006fb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006fb2:	e008      	b.n	8006fc6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fb4:	f7fa fb86 	bl	80016c4 <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d901      	bls.n	8006fc6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e1c2      	b.n	800734c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006fc6:	4b21      	ldr	r3, [pc, #132]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1f0      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 0304 	and.w	r3, r3, #4
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 8086 	beq.w	80070ec <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8007050 <HAL_RCC_OscConfig+0x4a8>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a1a      	ldr	r2, [pc, #104]	@ (8007050 <HAL_RCC_OscConfig+0x4a8>)
 8006fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fec:	f7fa fb6a 	bl	80016c4 <HAL_GetTick>
 8006ff0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ff2:	e008      	b.n	8007006 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ff4:	f7fa fb66 	bl	80016c4 <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	2b64      	cmp	r3, #100	@ 0x64
 8007000:	d901      	bls.n	8007006 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e1a2      	b.n	800734c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007006:	4b12      	ldr	r3, [pc, #72]	@ (8007050 <HAL_RCC_OscConfig+0x4a8>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800700e:	2b00      	cmp	r3, #0
 8007010:	d0f0      	beq.n	8006ff4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d106      	bne.n	8007028 <HAL_RCC_OscConfig+0x480>
 800701a:	4b0c      	ldr	r3, [pc, #48]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 800701c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800701e:	4a0b      	ldr	r2, [pc, #44]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8007020:	f043 0301 	orr.w	r3, r3, #1
 8007024:	6713      	str	r3, [r2, #112]	@ 0x70
 8007026:	e032      	b.n	800708e <HAL_RCC_OscConfig+0x4e6>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d111      	bne.n	8007054 <HAL_RCC_OscConfig+0x4ac>
 8007030:	4b06      	ldr	r3, [pc, #24]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8007032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007034:	4a05      	ldr	r2, [pc, #20]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8007036:	f023 0301 	bic.w	r3, r3, #1
 800703a:	6713      	str	r3, [r2, #112]	@ 0x70
 800703c:	4b03      	ldr	r3, [pc, #12]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 800703e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007040:	4a02      	ldr	r2, [pc, #8]	@ (800704c <HAL_RCC_OscConfig+0x4a4>)
 8007042:	f023 0304 	bic.w	r3, r3, #4
 8007046:	6713      	str	r3, [r2, #112]	@ 0x70
 8007048:	e021      	b.n	800708e <HAL_RCC_OscConfig+0x4e6>
 800704a:	bf00      	nop
 800704c:	58024400 	.word	0x58024400
 8007050:	58024800 	.word	0x58024800
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	2b05      	cmp	r3, #5
 800705a:	d10c      	bne.n	8007076 <HAL_RCC_OscConfig+0x4ce>
 800705c:	4b83      	ldr	r3, [pc, #524]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 800705e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007060:	4a82      	ldr	r2, [pc, #520]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 8007062:	f043 0304 	orr.w	r3, r3, #4
 8007066:	6713      	str	r3, [r2, #112]	@ 0x70
 8007068:	4b80      	ldr	r3, [pc, #512]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 800706a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800706c:	4a7f      	ldr	r2, [pc, #508]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 800706e:	f043 0301 	orr.w	r3, r3, #1
 8007072:	6713      	str	r3, [r2, #112]	@ 0x70
 8007074:	e00b      	b.n	800708e <HAL_RCC_OscConfig+0x4e6>
 8007076:	4b7d      	ldr	r3, [pc, #500]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 8007078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800707a:	4a7c      	ldr	r2, [pc, #496]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 800707c:	f023 0301 	bic.w	r3, r3, #1
 8007080:	6713      	str	r3, [r2, #112]	@ 0x70
 8007082:	4b7a      	ldr	r3, [pc, #488]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 8007084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007086:	4a79      	ldr	r2, [pc, #484]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 8007088:	f023 0304 	bic.w	r3, r3, #4
 800708c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d015      	beq.n	80070c2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007096:	f7fa fb15 	bl	80016c4 <HAL_GetTick>
 800709a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800709c:	e00a      	b.n	80070b4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800709e:	f7fa fb11 	bl	80016c4 <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d901      	bls.n	80070b4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e14b      	b.n	800734c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070b4:	4b6d      	ldr	r3, [pc, #436]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 80070b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070b8:	f003 0302 	and.w	r3, r3, #2
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d0ee      	beq.n	800709e <HAL_RCC_OscConfig+0x4f6>
 80070c0:	e014      	b.n	80070ec <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070c2:	f7fa faff 	bl	80016c4 <HAL_GetTick>
 80070c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80070c8:	e00a      	b.n	80070e0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070ca:	f7fa fafb 	bl	80016c4 <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070d8:	4293      	cmp	r3, r2
 80070da:	d901      	bls.n	80070e0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e135      	b.n	800734c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80070e0:	4b62      	ldr	r3, [pc, #392]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 80070e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070e4:	f003 0302 	and.w	r3, r3, #2
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1ee      	bne.n	80070ca <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 812a 	beq.w	800734a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80070f6:	4b5d      	ldr	r3, [pc, #372]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070fe:	2b18      	cmp	r3, #24
 8007100:	f000 80ba 	beq.w	8007278 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007108:	2b02      	cmp	r3, #2
 800710a:	f040 8095 	bne.w	8007238 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800710e:	4b57      	ldr	r3, [pc, #348]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a56      	ldr	r2, [pc, #344]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 8007114:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800711a:	f7fa fad3 	bl	80016c4 <HAL_GetTick>
 800711e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007120:	e008      	b.n	8007134 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007122:	f7fa facf 	bl	80016c4 <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d901      	bls.n	8007134 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e10b      	b.n	800734c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007134:	4b4d      	ldr	r3, [pc, #308]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1f0      	bne.n	8007122 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007140:	4b4a      	ldr	r3, [pc, #296]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 8007142:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007144:	4b4a      	ldr	r3, [pc, #296]	@ (8007270 <HAL_RCC_OscConfig+0x6c8>)
 8007146:	4013      	ands	r3, r2
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007150:	0112      	lsls	r2, r2, #4
 8007152:	430a      	orrs	r2, r1
 8007154:	4945      	ldr	r1, [pc, #276]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 8007156:	4313      	orrs	r3, r2
 8007158:	628b      	str	r3, [r1, #40]	@ 0x28
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800715e:	3b01      	subs	r3, #1
 8007160:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007168:	3b01      	subs	r3, #1
 800716a:	025b      	lsls	r3, r3, #9
 800716c:	b29b      	uxth	r3, r3
 800716e:	431a      	orrs	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007174:	3b01      	subs	r3, #1
 8007176:	041b      	lsls	r3, r3, #16
 8007178:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800717c:	431a      	orrs	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007182:	3b01      	subs	r3, #1
 8007184:	061b      	lsls	r3, r3, #24
 8007186:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800718a:	4938      	ldr	r1, [pc, #224]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 800718c:	4313      	orrs	r3, r2
 800718e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007190:	4b36      	ldr	r3, [pc, #216]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 8007192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007194:	4a35      	ldr	r2, [pc, #212]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 8007196:	f023 0301 	bic.w	r3, r3, #1
 800719a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800719c:	4b33      	ldr	r3, [pc, #204]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 800719e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071a0:	4b34      	ldr	r3, [pc, #208]	@ (8007274 <HAL_RCC_OscConfig+0x6cc>)
 80071a2:	4013      	ands	r3, r2
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80071a8:	00d2      	lsls	r2, r2, #3
 80071aa:	4930      	ldr	r1, [pc, #192]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80071b0:	4b2e      	ldr	r3, [pc, #184]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 80071b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b4:	f023 020c 	bic.w	r2, r3, #12
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071bc:	492b      	ldr	r1, [pc, #172]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80071c2:	4b2a      	ldr	r3, [pc, #168]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 80071c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c6:	f023 0202 	bic.w	r2, r3, #2
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ce:	4927      	ldr	r1, [pc, #156]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 80071d0:	4313      	orrs	r3, r2
 80071d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80071d4:	4b25      	ldr	r3, [pc, #148]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 80071d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d8:	4a24      	ldr	r2, [pc, #144]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 80071da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071e0:	4b22      	ldr	r3, [pc, #136]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 80071e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e4:	4a21      	ldr	r2, [pc, #132]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 80071e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80071ec:	4b1f      	ldr	r3, [pc, #124]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 80071ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f0:	4a1e      	ldr	r2, [pc, #120]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 80071f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80071f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80071f8:	4b1c      	ldr	r3, [pc, #112]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 80071fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071fc:	4a1b      	ldr	r2, [pc, #108]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 80071fe:	f043 0301 	orr.w	r3, r3, #1
 8007202:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007204:	4b19      	ldr	r3, [pc, #100]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a18      	ldr	r2, [pc, #96]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 800720a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800720e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007210:	f7fa fa58 	bl	80016c4 <HAL_GetTick>
 8007214:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007216:	e008      	b.n	800722a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007218:	f7fa fa54 	bl	80016c4 <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	2b02      	cmp	r3, #2
 8007224:	d901      	bls.n	800722a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e090      	b.n	800734c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800722a:	4b10      	ldr	r3, [pc, #64]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d0f0      	beq.n	8007218 <HAL_RCC_OscConfig+0x670>
 8007236:	e088      	b.n	800734a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007238:	4b0c      	ldr	r3, [pc, #48]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a0b      	ldr	r2, [pc, #44]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 800723e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007244:	f7fa fa3e 	bl	80016c4 <HAL_GetTick>
 8007248:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800724a:	e008      	b.n	800725e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800724c:	f7fa fa3a 	bl	80016c4 <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	2b02      	cmp	r3, #2
 8007258:	d901      	bls.n	800725e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e076      	b.n	800734c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800725e:	4b03      	ldr	r3, [pc, #12]	@ (800726c <HAL_RCC_OscConfig+0x6c4>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1f0      	bne.n	800724c <HAL_RCC_OscConfig+0x6a4>
 800726a:	e06e      	b.n	800734a <HAL_RCC_OscConfig+0x7a2>
 800726c:	58024400 	.word	0x58024400
 8007270:	fffffc0c 	.word	0xfffffc0c
 8007274:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007278:	4b36      	ldr	r3, [pc, #216]	@ (8007354 <HAL_RCC_OscConfig+0x7ac>)
 800727a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800727c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800727e:	4b35      	ldr	r3, [pc, #212]	@ (8007354 <HAL_RCC_OscConfig+0x7ac>)
 8007280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007282:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007288:	2b01      	cmp	r3, #1
 800728a:	d031      	beq.n	80072f0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	f003 0203 	and.w	r2, r3, #3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007296:	429a      	cmp	r2, r3
 8007298:	d12a      	bne.n	80072f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	091b      	lsrs	r3, r3, #4
 800729e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d122      	bne.n	80072f0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d11a      	bne.n	80072f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	0a5b      	lsrs	r3, r3, #9
 80072be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d111      	bne.n	80072f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	0c1b      	lsrs	r3, r3, #16
 80072d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072da:	429a      	cmp	r2, r3
 80072dc:	d108      	bne.n	80072f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	0e1b      	lsrs	r3, r3, #24
 80072e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d001      	beq.n	80072f4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e02b      	b.n	800734c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80072f4:	4b17      	ldr	r3, [pc, #92]	@ (8007354 <HAL_RCC_OscConfig+0x7ac>)
 80072f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072f8:	08db      	lsrs	r3, r3, #3
 80072fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	429a      	cmp	r2, r3
 8007308:	d01f      	beq.n	800734a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800730a:	4b12      	ldr	r3, [pc, #72]	@ (8007354 <HAL_RCC_OscConfig+0x7ac>)
 800730c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730e:	4a11      	ldr	r2, [pc, #68]	@ (8007354 <HAL_RCC_OscConfig+0x7ac>)
 8007310:	f023 0301 	bic.w	r3, r3, #1
 8007314:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007316:	f7fa f9d5 	bl	80016c4 <HAL_GetTick>
 800731a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800731c:	bf00      	nop
 800731e:	f7fa f9d1 	bl	80016c4 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007326:	4293      	cmp	r3, r2
 8007328:	d0f9      	beq.n	800731e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800732a:	4b0a      	ldr	r3, [pc, #40]	@ (8007354 <HAL_RCC_OscConfig+0x7ac>)
 800732c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800732e:	4b0a      	ldr	r3, [pc, #40]	@ (8007358 <HAL_RCC_OscConfig+0x7b0>)
 8007330:	4013      	ands	r3, r2
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007336:	00d2      	lsls	r2, r2, #3
 8007338:	4906      	ldr	r1, [pc, #24]	@ (8007354 <HAL_RCC_OscConfig+0x7ac>)
 800733a:	4313      	orrs	r3, r2
 800733c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800733e:	4b05      	ldr	r3, [pc, #20]	@ (8007354 <HAL_RCC_OscConfig+0x7ac>)
 8007340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007342:	4a04      	ldr	r2, [pc, #16]	@ (8007354 <HAL_RCC_OscConfig+0x7ac>)
 8007344:	f043 0301 	orr.w	r3, r3, #1
 8007348:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3730      	adds	r7, #48	@ 0x30
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	58024400 	.word	0x58024400
 8007358:	ffff0007 	.word	0xffff0007

0800735c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d101      	bne.n	8007370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e19c      	b.n	80076aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007370:	4b8a      	ldr	r3, [pc, #552]	@ (800759c <HAL_RCC_ClockConfig+0x240>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 030f 	and.w	r3, r3, #15
 8007378:	683a      	ldr	r2, [r7, #0]
 800737a:	429a      	cmp	r2, r3
 800737c:	d910      	bls.n	80073a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800737e:	4b87      	ldr	r3, [pc, #540]	@ (800759c <HAL_RCC_ClockConfig+0x240>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f023 020f 	bic.w	r2, r3, #15
 8007386:	4985      	ldr	r1, [pc, #532]	@ (800759c <HAL_RCC_ClockConfig+0x240>)
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	4313      	orrs	r3, r2
 800738c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800738e:	4b83      	ldr	r3, [pc, #524]	@ (800759c <HAL_RCC_ClockConfig+0x240>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 030f 	and.w	r3, r3, #15
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	429a      	cmp	r2, r3
 800739a:	d001      	beq.n	80073a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e184      	b.n	80076aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0304 	and.w	r3, r3, #4
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d010      	beq.n	80073ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	691a      	ldr	r2, [r3, #16]
 80073b0:	4b7b      	ldr	r3, [pc, #492]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d908      	bls.n	80073ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073bc:	4b78      	ldr	r3, [pc, #480]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	4975      	ldr	r1, [pc, #468]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0308 	and.w	r3, r3, #8
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d010      	beq.n	80073fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	695a      	ldr	r2, [r3, #20]
 80073de:	4b70      	ldr	r3, [pc, #448]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d908      	bls.n	80073fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80073ea:	4b6d      	ldr	r3, [pc, #436]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	496a      	ldr	r1, [pc, #424]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 80073f8:	4313      	orrs	r3, r2
 80073fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 0310 	and.w	r3, r3, #16
 8007404:	2b00      	cmp	r3, #0
 8007406:	d010      	beq.n	800742a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	699a      	ldr	r2, [r3, #24]
 800740c:	4b64      	ldr	r3, [pc, #400]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007414:	429a      	cmp	r2, r3
 8007416:	d908      	bls.n	800742a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007418:	4b61      	ldr	r3, [pc, #388]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 800741a:	69db      	ldr	r3, [r3, #28]
 800741c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	495e      	ldr	r1, [pc, #376]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 8007426:	4313      	orrs	r3, r2
 8007428:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0320 	and.w	r3, r3, #32
 8007432:	2b00      	cmp	r3, #0
 8007434:	d010      	beq.n	8007458 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	69da      	ldr	r2, [r3, #28]
 800743a:	4b59      	ldr	r3, [pc, #356]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007442:	429a      	cmp	r2, r3
 8007444:	d908      	bls.n	8007458 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007446:	4b56      	ldr	r3, [pc, #344]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	4953      	ldr	r1, [pc, #332]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 8007454:	4313      	orrs	r3, r2
 8007456:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0302 	and.w	r3, r3, #2
 8007460:	2b00      	cmp	r3, #0
 8007462:	d010      	beq.n	8007486 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68da      	ldr	r2, [r3, #12]
 8007468:	4b4d      	ldr	r3, [pc, #308]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	f003 030f 	and.w	r3, r3, #15
 8007470:	429a      	cmp	r2, r3
 8007472:	d908      	bls.n	8007486 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007474:	4b4a      	ldr	r3, [pc, #296]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	f023 020f 	bic.w	r2, r3, #15
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	4947      	ldr	r1, [pc, #284]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 8007482:	4313      	orrs	r3, r2
 8007484:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b00      	cmp	r3, #0
 8007490:	d055      	beq.n	800753e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007492:	4b43      	ldr	r3, [pc, #268]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	4940      	ldr	r1, [pc, #256]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d107      	bne.n	80074bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074ac:	4b3c      	ldr	r3, [pc, #240]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d121      	bne.n	80074fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e0f6      	b.n	80076aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	2b03      	cmp	r3, #3
 80074c2:	d107      	bne.n	80074d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074c4:	4b36      	ldr	r3, [pc, #216]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d115      	bne.n	80074fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e0ea      	b.n	80076aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d107      	bne.n	80074ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80074dc:	4b30      	ldr	r3, [pc, #192]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d109      	bne.n	80074fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e0de      	b.n	80076aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074ec:	4b2c      	ldr	r3, [pc, #176]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d101      	bne.n	80074fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e0d6      	b.n	80076aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80074fc:	4b28      	ldr	r3, [pc, #160]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	f023 0207 	bic.w	r2, r3, #7
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	4925      	ldr	r1, [pc, #148]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 800750a:	4313      	orrs	r3, r2
 800750c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800750e:	f7fa f8d9 	bl	80016c4 <HAL_GetTick>
 8007512:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007514:	e00a      	b.n	800752c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007516:	f7fa f8d5 	bl	80016c4 <HAL_GetTick>
 800751a:	4602      	mov	r2, r0
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007524:	4293      	cmp	r3, r2
 8007526:	d901      	bls.n	800752c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e0be      	b.n	80076aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800752c:	4b1c      	ldr	r3, [pc, #112]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	00db      	lsls	r3, r3, #3
 800753a:	429a      	cmp	r2, r3
 800753c:	d1eb      	bne.n	8007516 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0302 	and.w	r3, r3, #2
 8007546:	2b00      	cmp	r3, #0
 8007548:	d010      	beq.n	800756c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68da      	ldr	r2, [r3, #12]
 800754e:	4b14      	ldr	r3, [pc, #80]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	f003 030f 	and.w	r3, r3, #15
 8007556:	429a      	cmp	r2, r3
 8007558:	d208      	bcs.n	800756c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800755a:	4b11      	ldr	r3, [pc, #68]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	f023 020f 	bic.w	r2, r3, #15
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	490e      	ldr	r1, [pc, #56]	@ (80075a0 <HAL_RCC_ClockConfig+0x244>)
 8007568:	4313      	orrs	r3, r2
 800756a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800756c:	4b0b      	ldr	r3, [pc, #44]	@ (800759c <HAL_RCC_ClockConfig+0x240>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 030f 	and.w	r3, r3, #15
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	429a      	cmp	r2, r3
 8007578:	d214      	bcs.n	80075a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800757a:	4b08      	ldr	r3, [pc, #32]	@ (800759c <HAL_RCC_ClockConfig+0x240>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f023 020f 	bic.w	r2, r3, #15
 8007582:	4906      	ldr	r1, [pc, #24]	@ (800759c <HAL_RCC_ClockConfig+0x240>)
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	4313      	orrs	r3, r2
 8007588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800758a:	4b04      	ldr	r3, [pc, #16]	@ (800759c <HAL_RCC_ClockConfig+0x240>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 030f 	and.w	r3, r3, #15
 8007592:	683a      	ldr	r2, [r7, #0]
 8007594:	429a      	cmp	r2, r3
 8007596:	d005      	beq.n	80075a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e086      	b.n	80076aa <HAL_RCC_ClockConfig+0x34e>
 800759c:	52002000 	.word	0x52002000
 80075a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0304 	and.w	r3, r3, #4
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d010      	beq.n	80075d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	691a      	ldr	r2, [r3, #16]
 80075b4:	4b3f      	ldr	r3, [pc, #252]	@ (80076b4 <HAL_RCC_ClockConfig+0x358>)
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80075bc:	429a      	cmp	r2, r3
 80075be:	d208      	bcs.n	80075d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80075c0:	4b3c      	ldr	r3, [pc, #240]	@ (80076b4 <HAL_RCC_ClockConfig+0x358>)
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	4939      	ldr	r1, [pc, #228]	@ (80076b4 <HAL_RCC_ClockConfig+0x358>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 0308 	and.w	r3, r3, #8
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d010      	beq.n	8007600 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	695a      	ldr	r2, [r3, #20]
 80075e2:	4b34      	ldr	r3, [pc, #208]	@ (80076b4 <HAL_RCC_ClockConfig+0x358>)
 80075e4:	69db      	ldr	r3, [r3, #28]
 80075e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d208      	bcs.n	8007600 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80075ee:	4b31      	ldr	r3, [pc, #196]	@ (80076b4 <HAL_RCC_ClockConfig+0x358>)
 80075f0:	69db      	ldr	r3, [r3, #28]
 80075f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	492e      	ldr	r1, [pc, #184]	@ (80076b4 <HAL_RCC_ClockConfig+0x358>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0310 	and.w	r3, r3, #16
 8007608:	2b00      	cmp	r3, #0
 800760a:	d010      	beq.n	800762e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	699a      	ldr	r2, [r3, #24]
 8007610:	4b28      	ldr	r3, [pc, #160]	@ (80076b4 <HAL_RCC_ClockConfig+0x358>)
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007618:	429a      	cmp	r2, r3
 800761a:	d208      	bcs.n	800762e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800761c:	4b25      	ldr	r3, [pc, #148]	@ (80076b4 <HAL_RCC_ClockConfig+0x358>)
 800761e:	69db      	ldr	r3, [r3, #28]
 8007620:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	4922      	ldr	r1, [pc, #136]	@ (80076b4 <HAL_RCC_ClockConfig+0x358>)
 800762a:	4313      	orrs	r3, r2
 800762c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0320 	and.w	r3, r3, #32
 8007636:	2b00      	cmp	r3, #0
 8007638:	d010      	beq.n	800765c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	69da      	ldr	r2, [r3, #28]
 800763e:	4b1d      	ldr	r3, [pc, #116]	@ (80076b4 <HAL_RCC_ClockConfig+0x358>)
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007646:	429a      	cmp	r2, r3
 8007648:	d208      	bcs.n	800765c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800764a:	4b1a      	ldr	r3, [pc, #104]	@ (80076b4 <HAL_RCC_ClockConfig+0x358>)
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	69db      	ldr	r3, [r3, #28]
 8007656:	4917      	ldr	r1, [pc, #92]	@ (80076b4 <HAL_RCC_ClockConfig+0x358>)
 8007658:	4313      	orrs	r3, r2
 800765a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800765c:	f000 f834 	bl	80076c8 <HAL_RCC_GetSysClockFreq>
 8007660:	4602      	mov	r2, r0
 8007662:	4b14      	ldr	r3, [pc, #80]	@ (80076b4 <HAL_RCC_ClockConfig+0x358>)
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	0a1b      	lsrs	r3, r3, #8
 8007668:	f003 030f 	and.w	r3, r3, #15
 800766c:	4912      	ldr	r1, [pc, #72]	@ (80076b8 <HAL_RCC_ClockConfig+0x35c>)
 800766e:	5ccb      	ldrb	r3, [r1, r3]
 8007670:	f003 031f 	and.w	r3, r3, #31
 8007674:	fa22 f303 	lsr.w	r3, r2, r3
 8007678:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800767a:	4b0e      	ldr	r3, [pc, #56]	@ (80076b4 <HAL_RCC_ClockConfig+0x358>)
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	f003 030f 	and.w	r3, r3, #15
 8007682:	4a0d      	ldr	r2, [pc, #52]	@ (80076b8 <HAL_RCC_ClockConfig+0x35c>)
 8007684:	5cd3      	ldrb	r3, [r2, r3]
 8007686:	f003 031f 	and.w	r3, r3, #31
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	fa22 f303 	lsr.w	r3, r2, r3
 8007690:	4a0a      	ldr	r2, [pc, #40]	@ (80076bc <HAL_RCC_ClockConfig+0x360>)
 8007692:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007694:	4a0a      	ldr	r2, [pc, #40]	@ (80076c0 <HAL_RCC_ClockConfig+0x364>)
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800769a:	4b0a      	ldr	r3, [pc, #40]	@ (80076c4 <HAL_RCC_ClockConfig+0x368>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4618      	mov	r0, r3
 80076a0:	f7f9 ffc6 	bl	8001630 <HAL_InitTick>
 80076a4:	4603      	mov	r3, r0
 80076a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3718      	adds	r7, #24
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	58024400 	.word	0x58024400
 80076b8:	0800bb78 	.word	0x0800bb78
 80076bc:	24000004 	.word	0x24000004
 80076c0:	24000000 	.word	0x24000000
 80076c4:	24000008 	.word	0x24000008

080076c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b089      	sub	sp, #36	@ 0x24
 80076cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076ce:	4bb3      	ldr	r3, [pc, #716]	@ (800799c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076d6:	2b18      	cmp	r3, #24
 80076d8:	f200 8155 	bhi.w	8007986 <HAL_RCC_GetSysClockFreq+0x2be>
 80076dc:	a201      	add	r2, pc, #4	@ (adr r2, 80076e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80076de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e2:	bf00      	nop
 80076e4:	08007749 	.word	0x08007749
 80076e8:	08007987 	.word	0x08007987
 80076ec:	08007987 	.word	0x08007987
 80076f0:	08007987 	.word	0x08007987
 80076f4:	08007987 	.word	0x08007987
 80076f8:	08007987 	.word	0x08007987
 80076fc:	08007987 	.word	0x08007987
 8007700:	08007987 	.word	0x08007987
 8007704:	0800776f 	.word	0x0800776f
 8007708:	08007987 	.word	0x08007987
 800770c:	08007987 	.word	0x08007987
 8007710:	08007987 	.word	0x08007987
 8007714:	08007987 	.word	0x08007987
 8007718:	08007987 	.word	0x08007987
 800771c:	08007987 	.word	0x08007987
 8007720:	08007987 	.word	0x08007987
 8007724:	08007775 	.word	0x08007775
 8007728:	08007987 	.word	0x08007987
 800772c:	08007987 	.word	0x08007987
 8007730:	08007987 	.word	0x08007987
 8007734:	08007987 	.word	0x08007987
 8007738:	08007987 	.word	0x08007987
 800773c:	08007987 	.word	0x08007987
 8007740:	08007987 	.word	0x08007987
 8007744:	0800777b 	.word	0x0800777b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007748:	4b94      	ldr	r3, [pc, #592]	@ (800799c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0320 	and.w	r3, r3, #32
 8007750:	2b00      	cmp	r3, #0
 8007752:	d009      	beq.n	8007768 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007754:	4b91      	ldr	r3, [pc, #580]	@ (800799c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	08db      	lsrs	r3, r3, #3
 800775a:	f003 0303 	and.w	r3, r3, #3
 800775e:	4a90      	ldr	r2, [pc, #576]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007760:	fa22 f303 	lsr.w	r3, r2, r3
 8007764:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007766:	e111      	b.n	800798c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007768:	4b8d      	ldr	r3, [pc, #564]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800776a:	61bb      	str	r3, [r7, #24]
      break;
 800776c:	e10e      	b.n	800798c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800776e:	4b8d      	ldr	r3, [pc, #564]	@ (80079a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007770:	61bb      	str	r3, [r7, #24]
      break;
 8007772:	e10b      	b.n	800798c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007774:	4b8c      	ldr	r3, [pc, #560]	@ (80079a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007776:	61bb      	str	r3, [r7, #24]
      break;
 8007778:	e108      	b.n	800798c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800777a:	4b88      	ldr	r3, [pc, #544]	@ (800799c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800777c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800777e:	f003 0303 	and.w	r3, r3, #3
 8007782:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007784:	4b85      	ldr	r3, [pc, #532]	@ (800799c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007788:	091b      	lsrs	r3, r3, #4
 800778a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800778e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007790:	4b82      	ldr	r3, [pc, #520]	@ (800799c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007794:	f003 0301 	and.w	r3, r3, #1
 8007798:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800779a:	4b80      	ldr	r3, [pc, #512]	@ (800799c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800779c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800779e:	08db      	lsrs	r3, r3, #3
 80077a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	fb02 f303 	mul.w	r3, r2, r3
 80077aa:	ee07 3a90 	vmov	s15, r3
 80077ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 80e1 	beq.w	8007980 <HAL_RCC_GetSysClockFreq+0x2b8>
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	f000 8083 	beq.w	80078cc <HAL_RCC_GetSysClockFreq+0x204>
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	f200 80a1 	bhi.w	8007910 <HAL_RCC_GetSysClockFreq+0x248>
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d003      	beq.n	80077dc <HAL_RCC_GetSysClockFreq+0x114>
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d056      	beq.n	8007888 <HAL_RCC_GetSysClockFreq+0x1c0>
 80077da:	e099      	b.n	8007910 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077dc:	4b6f      	ldr	r3, [pc, #444]	@ (800799c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0320 	and.w	r3, r3, #32
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d02d      	beq.n	8007844 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077e8:	4b6c      	ldr	r3, [pc, #432]	@ (800799c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	08db      	lsrs	r3, r3, #3
 80077ee:	f003 0303 	and.w	r3, r3, #3
 80077f2:	4a6b      	ldr	r2, [pc, #428]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80077f4:	fa22 f303 	lsr.w	r3, r2, r3
 80077f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	ee07 3a90 	vmov	s15, r3
 8007800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	ee07 3a90 	vmov	s15, r3
 800780a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800780e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007812:	4b62      	ldr	r3, [pc, #392]	@ (800799c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800781a:	ee07 3a90 	vmov	s15, r3
 800781e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007822:	ed97 6a02 	vldr	s12, [r7, #8]
 8007826:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80079ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800782a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800782e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007832:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800783a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800783e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007842:	e087      	b.n	8007954 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	ee07 3a90 	vmov	s15, r3
 800784a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800784e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80079b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007856:	4b51      	ldr	r3, [pc, #324]	@ (800799c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800785a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800785e:	ee07 3a90 	vmov	s15, r3
 8007862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007866:	ed97 6a02 	vldr	s12, [r7, #8]
 800786a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80079ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800786e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007876:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800787a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800787e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007882:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007886:	e065      	b.n	8007954 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	ee07 3a90 	vmov	s15, r3
 800788e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007892:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80079b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800789a:	4b40      	ldr	r3, [pc, #256]	@ (800799c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800789c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800789e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a2:	ee07 3a90 	vmov	s15, r3
 80078a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80078ae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80079ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80078b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80078ca:	e043      	b.n	8007954 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	ee07 3a90 	vmov	s15, r3
 80078d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078d6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80079b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80078da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078de:	4b2f      	ldr	r3, [pc, #188]	@ (800799c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078e6:	ee07 3a90 	vmov	s15, r3
 80078ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80078f2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80079ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80078f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800790a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800790e:	e021      	b.n	8007954 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	ee07 3a90 	vmov	s15, r3
 8007916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800791a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80079b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800791e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007922:	4b1e      	ldr	r3, [pc, #120]	@ (800799c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800792a:	ee07 3a90 	vmov	s15, r3
 800792e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007932:	ed97 6a02 	vldr	s12, [r7, #8]
 8007936:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80079ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800793a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800793e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007942:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800794a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800794e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007952:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007954:	4b11      	ldr	r3, [pc, #68]	@ (800799c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007958:	0a5b      	lsrs	r3, r3, #9
 800795a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800795e:	3301      	adds	r3, #1
 8007960:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	ee07 3a90 	vmov	s15, r3
 8007968:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800796c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007978:	ee17 3a90 	vmov	r3, s15
 800797c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800797e:	e005      	b.n	800798c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007980:	2300      	movs	r3, #0
 8007982:	61bb      	str	r3, [r7, #24]
      break;
 8007984:	e002      	b.n	800798c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007986:	4b07      	ldr	r3, [pc, #28]	@ (80079a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007988:	61bb      	str	r3, [r7, #24]
      break;
 800798a:	bf00      	nop
  }

  return sysclockfreq;
 800798c:	69bb      	ldr	r3, [r7, #24]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3724      	adds	r7, #36	@ 0x24
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	58024400 	.word	0x58024400
 80079a0:	03d09000 	.word	0x03d09000
 80079a4:	003d0900 	.word	0x003d0900
 80079a8:	017d7840 	.word	0x017d7840
 80079ac:	46000000 	.word	0x46000000
 80079b0:	4c742400 	.word	0x4c742400
 80079b4:	4a742400 	.word	0x4a742400
 80079b8:	4bbebc20 	.word	0x4bbebc20

080079bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80079c2:	f7ff fe81 	bl	80076c8 <HAL_RCC_GetSysClockFreq>
 80079c6:	4602      	mov	r2, r0
 80079c8:	4b10      	ldr	r3, [pc, #64]	@ (8007a0c <HAL_RCC_GetHCLKFreq+0x50>)
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	0a1b      	lsrs	r3, r3, #8
 80079ce:	f003 030f 	and.w	r3, r3, #15
 80079d2:	490f      	ldr	r1, [pc, #60]	@ (8007a10 <HAL_RCC_GetHCLKFreq+0x54>)
 80079d4:	5ccb      	ldrb	r3, [r1, r3]
 80079d6:	f003 031f 	and.w	r3, r3, #31
 80079da:	fa22 f303 	lsr.w	r3, r2, r3
 80079de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80079e0:	4b0a      	ldr	r3, [pc, #40]	@ (8007a0c <HAL_RCC_GetHCLKFreq+0x50>)
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	f003 030f 	and.w	r3, r3, #15
 80079e8:	4a09      	ldr	r2, [pc, #36]	@ (8007a10 <HAL_RCC_GetHCLKFreq+0x54>)
 80079ea:	5cd3      	ldrb	r3, [r2, r3]
 80079ec:	f003 031f 	and.w	r3, r3, #31
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	fa22 f303 	lsr.w	r3, r2, r3
 80079f6:	4a07      	ldr	r2, [pc, #28]	@ (8007a14 <HAL_RCC_GetHCLKFreq+0x58>)
 80079f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80079fa:	4a07      	ldr	r2, [pc, #28]	@ (8007a18 <HAL_RCC_GetHCLKFreq+0x5c>)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007a00:	4b04      	ldr	r3, [pc, #16]	@ (8007a14 <HAL_RCC_GetHCLKFreq+0x58>)
 8007a02:	681b      	ldr	r3, [r3, #0]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	58024400 	.word	0x58024400
 8007a10:	0800bb78 	.word	0x0800bb78
 8007a14:	24000004 	.word	0x24000004
 8007a18:	24000000 	.word	0x24000000

08007a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007a20:	f7ff ffcc 	bl	80079bc <HAL_RCC_GetHCLKFreq>
 8007a24:	4602      	mov	r2, r0
 8007a26:	4b06      	ldr	r3, [pc, #24]	@ (8007a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	091b      	lsrs	r3, r3, #4
 8007a2c:	f003 0307 	and.w	r3, r3, #7
 8007a30:	4904      	ldr	r1, [pc, #16]	@ (8007a44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a32:	5ccb      	ldrb	r3, [r1, r3]
 8007a34:	f003 031f 	and.w	r3, r3, #31
 8007a38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	58024400 	.word	0x58024400
 8007a44:	0800bb78 	.word	0x0800bb78

08007a48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a4c:	b0c6      	sub	sp, #280	@ 0x118
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a54:	2300      	movs	r3, #0
 8007a56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a68:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007a6c:	2500      	movs	r5, #0
 8007a6e:	ea54 0305 	orrs.w	r3, r4, r5
 8007a72:	d049      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a7e:	d02f      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007a80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a84:	d828      	bhi.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007a86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a8a:	d01a      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007a8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a90:	d822      	bhi.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007a96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a9a:	d007      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007a9c:	e01c      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a9e:	4bab      	ldr	r3, [pc, #684]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa2:	4aaa      	ldr	r2, [pc, #680]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007aa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007aa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007aaa:	e01a      	b.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ab0:	3308      	adds	r3, #8
 8007ab2:	2102      	movs	r1, #2
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f002 fa49 	bl	8009f4c <RCCEx_PLL2_Config>
 8007aba:	4603      	mov	r3, r0
 8007abc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007ac0:	e00f      	b.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ac6:	3328      	adds	r3, #40	@ 0x28
 8007ac8:	2102      	movs	r1, #2
 8007aca:	4618      	mov	r0, r3
 8007acc:	f002 faf0 	bl	800a0b0 <RCCEx_PLL3_Config>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007ad6:	e004      	b.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ade:	e000      	b.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ae2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d10a      	bne.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007aea:	4b98      	ldr	r3, [pc, #608]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007aec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007af8:	4a94      	ldr	r2, [pc, #592]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007afa:	430b      	orrs	r3, r1
 8007afc:	6513      	str	r3, [r2, #80]	@ 0x50
 8007afe:	e003      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b10:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007b14:	f04f 0900 	mov.w	r9, #0
 8007b18:	ea58 0309 	orrs.w	r3, r8, r9
 8007b1c:	d047      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b24:	2b04      	cmp	r3, #4
 8007b26:	d82a      	bhi.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007b28:	a201      	add	r2, pc, #4	@ (adr r2, 8007b30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2e:	bf00      	nop
 8007b30:	08007b45 	.word	0x08007b45
 8007b34:	08007b53 	.word	0x08007b53
 8007b38:	08007b69 	.word	0x08007b69
 8007b3c:	08007b87 	.word	0x08007b87
 8007b40:	08007b87 	.word	0x08007b87
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b44:	4b81      	ldr	r3, [pc, #516]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b48:	4a80      	ldr	r2, [pc, #512]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b50:	e01a      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b56:	3308      	adds	r3, #8
 8007b58:	2100      	movs	r1, #0
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f002 f9f6 	bl	8009f4c <RCCEx_PLL2_Config>
 8007b60:	4603      	mov	r3, r0
 8007b62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b66:	e00f      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b6c:	3328      	adds	r3, #40	@ 0x28
 8007b6e:	2100      	movs	r1, #0
 8007b70:	4618      	mov	r0, r3
 8007b72:	f002 fa9d 	bl	800a0b0 <RCCEx_PLL3_Config>
 8007b76:	4603      	mov	r3, r0
 8007b78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b7c:	e004      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b84:	e000      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007b86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10a      	bne.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b90:	4b6e      	ldr	r3, [pc, #440]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b94:	f023 0107 	bic.w	r1, r3, #7
 8007b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b9e:	4a6b      	ldr	r2, [pc, #428]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007ba0:	430b      	orrs	r3, r1
 8007ba2:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ba4:	e003      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007baa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8007bba:	f04f 0b00 	mov.w	fp, #0
 8007bbe:	ea5a 030b 	orrs.w	r3, sl, fp
 8007bc2:	d05b      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007bcc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007bd0:	d03b      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007bd2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007bd6:	d834      	bhi.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007bd8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007bdc:	d037      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007bde:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007be2:	d82e      	bhi.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007be4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007be8:	d033      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007bea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007bee:	d828      	bhi.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007bf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007bf4:	d01a      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007bf6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007bfa:	d822      	bhi.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d003      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007c00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c04:	d007      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8007c06:	e01c      	b.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c08:	4b50      	ldr	r3, [pc, #320]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c0c:	4a4f      	ldr	r2, [pc, #316]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c14:	e01e      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c1a:	3308      	adds	r3, #8
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f002 f994 	bl	8009f4c <RCCEx_PLL2_Config>
 8007c24:	4603      	mov	r3, r0
 8007c26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007c2a:	e013      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c30:	3328      	adds	r3, #40	@ 0x28
 8007c32:	2100      	movs	r1, #0
 8007c34:	4618      	mov	r0, r3
 8007c36:	f002 fa3b 	bl	800a0b0 <RCCEx_PLL3_Config>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c40:	e008      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c48:	e004      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007c4a:	bf00      	nop
 8007c4c:	e002      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007c4e:	bf00      	nop
 8007c50:	e000      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007c52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10b      	bne.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007c5c:	4b3b      	ldr	r3, [pc, #236]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c60:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c6c:	4a37      	ldr	r2, [pc, #220]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007c6e:	430b      	orrs	r3, r1
 8007c70:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c72:	e003      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c84:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007c88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007c92:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007c96:	460b      	mov	r3, r1
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	d05d      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007ca4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007ca8:	d03b      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007caa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007cae:	d834      	bhi.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007cb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007cb4:	d037      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007cb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007cba:	d82e      	bhi.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007cbc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007cc0:	d033      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007cc2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007cc6:	d828      	bhi.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007cc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ccc:	d01a      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8007cce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007cd2:	d822      	bhi.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d003      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007cd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007cdc:	d007      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007cde:	e01c      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce4:	4a19      	ldr	r2, [pc, #100]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007ce6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007cec:	e01e      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cf2:	3308      	adds	r3, #8
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f002 f928 	bl	8009f4c <RCCEx_PLL2_Config>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007d02:	e013      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d08:	3328      	adds	r3, #40	@ 0x28
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f002 f9cf 	bl	800a0b0 <RCCEx_PLL3_Config>
 8007d12:	4603      	mov	r3, r0
 8007d14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d18:	e008      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d20:	e004      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007d22:	bf00      	nop
 8007d24:	e002      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007d26:	bf00      	nop
 8007d28:	e000      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10d      	bne.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007d34:	4b05      	ldr	r3, [pc, #20]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d38:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007d44:	4a01      	ldr	r2, [pc, #4]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007d46:	430b      	orrs	r3, r1
 8007d48:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d4a:	e005      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007d4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d60:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007d64:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007d68:	2300      	movs	r3, #0
 8007d6a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007d6e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007d72:	460b      	mov	r3, r1
 8007d74:	4313      	orrs	r3, r2
 8007d76:	d03a      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d7e:	2b30      	cmp	r3, #48	@ 0x30
 8007d80:	d01f      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8007d82:	2b30      	cmp	r3, #48	@ 0x30
 8007d84:	d819      	bhi.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007d86:	2b20      	cmp	r3, #32
 8007d88:	d00c      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007d8a:	2b20      	cmp	r3, #32
 8007d8c:	d815      	bhi.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d019      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007d92:	2b10      	cmp	r3, #16
 8007d94:	d111      	bne.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d96:	4baa      	ldr	r3, [pc, #680]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9a:	4aa9      	ldr	r2, [pc, #676]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007d9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007da0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007da2:	e011      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da8:	3308      	adds	r3, #8
 8007daa:	2102      	movs	r1, #2
 8007dac:	4618      	mov	r0, r3
 8007dae:	f002 f8cd 	bl	8009f4c <RCCEx_PLL2_Config>
 8007db2:	4603      	mov	r3, r0
 8007db4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007db8:	e006      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007dc0:	e002      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007dc2:	bf00      	nop
 8007dc4:	e000      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007dc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10a      	bne.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007dd0:	4b9b      	ldr	r3, [pc, #620]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dd4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dde:	4a98      	ldr	r2, [pc, #608]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007de0:	430b      	orrs	r3, r1
 8007de2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007de4:	e003      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007dfe:	2300      	movs	r3, #0
 8007e00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007e04:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007e08:	460b      	mov	r3, r1
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	d051      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e18:	d035      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8007e1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e1e:	d82e      	bhi.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007e20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e24:	d031      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007e26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e2a:	d828      	bhi.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007e2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e30:	d01a      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007e32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e36:	d822      	bhi.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d003      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007e3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e40:	d007      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007e42:	e01c      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e44:	4b7e      	ldr	r3, [pc, #504]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e48:	4a7d      	ldr	r2, [pc, #500]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e50:	e01c      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e56:	3308      	adds	r3, #8
 8007e58:	2100      	movs	r1, #0
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f002 f876 	bl	8009f4c <RCCEx_PLL2_Config>
 8007e60:	4603      	mov	r3, r0
 8007e62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e66:	e011      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e6c:	3328      	adds	r3, #40	@ 0x28
 8007e6e:	2100      	movs	r1, #0
 8007e70:	4618      	mov	r0, r3
 8007e72:	f002 f91d 	bl	800a0b0 <RCCEx_PLL3_Config>
 8007e76:	4603      	mov	r3, r0
 8007e78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e7c:	e006      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e84:	e002      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007e86:	bf00      	nop
 8007e88:	e000      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007e8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10a      	bne.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007e94:	4b6a      	ldr	r3, [pc, #424]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e98:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ea2:	4a67      	ldr	r2, [pc, #412]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ea4:	430b      	orrs	r3, r1
 8007ea6:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ea8:	e003      	b.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eaa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007eae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007ebe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007ec8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007ecc:	460b      	mov	r3, r1
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	d053      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ed8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007edc:	d033      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8007ede:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ee2:	d82c      	bhi.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007ee4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ee8:	d02f      	beq.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007eea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007eee:	d826      	bhi.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007ef0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ef4:	d02b      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007ef6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007efa:	d820      	bhi.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007efc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f00:	d012      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007f02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f06:	d81a      	bhi.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d022      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f10:	d115      	bne.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f16:	3308      	adds	r3, #8
 8007f18:	2101      	movs	r1, #1
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f002 f816 	bl	8009f4c <RCCEx_PLL2_Config>
 8007f20:	4603      	mov	r3, r0
 8007f22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007f26:	e015      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f2c:	3328      	adds	r3, #40	@ 0x28
 8007f2e:	2101      	movs	r1, #1
 8007f30:	4618      	mov	r0, r3
 8007f32:	f002 f8bd 	bl	800a0b0 <RCCEx_PLL3_Config>
 8007f36:	4603      	mov	r3, r0
 8007f38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007f3c:	e00a      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f44:	e006      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007f46:	bf00      	nop
 8007f48:	e004      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007f4a:	bf00      	nop
 8007f4c:	e002      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007f4e:	bf00      	nop
 8007f50:	e000      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007f52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10a      	bne.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007f5c:	4b38      	ldr	r3, [pc, #224]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f60:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f6a:	4a35      	ldr	r2, [pc, #212]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007f6c:	430b      	orrs	r3, r1
 8007f6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f70:	e003      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f82:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007f86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007f90:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007f94:	460b      	mov	r3, r1
 8007f96:	4313      	orrs	r3, r2
 8007f98:	d058      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007fa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fa6:	d033      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007fa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fac:	d82c      	bhi.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fb2:	d02f      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fb8:	d826      	bhi.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007fba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007fbe:	d02b      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007fc0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007fc4:	d820      	bhi.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007fc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fca:	d012      	beq.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007fcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fd0:	d81a      	bhi.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d022      	beq.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007fd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fda:	d115      	bne.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fe0:	3308      	adds	r3, #8
 8007fe2:	2101      	movs	r1, #1
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f001 ffb1 	bl	8009f4c <RCCEx_PLL2_Config>
 8007fea:	4603      	mov	r3, r0
 8007fec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007ff0:	e015      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff6:	3328      	adds	r3, #40	@ 0x28
 8007ff8:	2101      	movs	r1, #1
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f002 f858 	bl	800a0b0 <RCCEx_PLL3_Config>
 8008000:	4603      	mov	r3, r0
 8008002:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008006:	e00a      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800800e:	e006      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008010:	bf00      	nop
 8008012:	e004      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008014:	bf00      	nop
 8008016:	e002      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008018:	bf00      	nop
 800801a:	e000      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800801c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800801e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10e      	bne.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008026:	4b06      	ldr	r3, [pc, #24]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800802a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800802e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008032:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008036:	4a02      	ldr	r2, [pc, #8]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008038:	430b      	orrs	r3, r1
 800803a:	6593      	str	r3, [r2, #88]	@ 0x58
 800803c:	e006      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800803e:	bf00      	nop
 8008040:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008044:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008048:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800804c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008054:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008058:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800805c:	2300      	movs	r3, #0
 800805e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008062:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008066:	460b      	mov	r3, r1
 8008068:	4313      	orrs	r3, r2
 800806a:	d037      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800806c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008072:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008076:	d00e      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008078:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800807c:	d816      	bhi.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x664>
 800807e:	2b00      	cmp	r3, #0
 8008080:	d018      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008082:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008086:	d111      	bne.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008088:	4bc4      	ldr	r3, [pc, #784]	@ (800839c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800808a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800808c:	4ac3      	ldr	r2, [pc, #780]	@ (800839c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800808e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008092:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008094:	e00f      	b.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800809a:	3308      	adds	r3, #8
 800809c:	2101      	movs	r1, #1
 800809e:	4618      	mov	r0, r3
 80080a0:	f001 ff54 	bl	8009f4c <RCCEx_PLL2_Config>
 80080a4:	4603      	mov	r3, r0
 80080a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80080aa:	e004      	b.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80080b2:	e000      	b.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80080b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10a      	bne.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80080be:	4bb7      	ldr	r3, [pc, #732]	@ (800839c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080c2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80080c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080cc:	4ab3      	ldr	r2, [pc, #716]	@ (800839c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080ce:	430b      	orrs	r3, r1
 80080d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80080d2:	e003      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80080dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80080e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80080ec:	2300      	movs	r3, #0
 80080ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80080f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80080f6:	460b      	mov	r3, r1
 80080f8:	4313      	orrs	r3, r2
 80080fa:	d039      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80080fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008102:	2b03      	cmp	r3, #3
 8008104:	d81c      	bhi.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8008106:	a201      	add	r2, pc, #4	@ (adr r2, 800810c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800810c:	08008149 	.word	0x08008149
 8008110:	0800811d 	.word	0x0800811d
 8008114:	0800812b 	.word	0x0800812b
 8008118:	08008149 	.word	0x08008149
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800811c:	4b9f      	ldr	r3, [pc, #636]	@ (800839c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800811e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008120:	4a9e      	ldr	r2, [pc, #632]	@ (800839c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008122:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008126:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008128:	e00f      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800812a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800812e:	3308      	adds	r3, #8
 8008130:	2102      	movs	r1, #2
 8008132:	4618      	mov	r0, r3
 8008134:	f001 ff0a 	bl	8009f4c <RCCEx_PLL2_Config>
 8008138:	4603      	mov	r3, r0
 800813a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800813e:	e004      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008146:	e000      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008148:	bf00      	nop
    }

    if (ret == HAL_OK)
 800814a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10a      	bne.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008152:	4b92      	ldr	r3, [pc, #584]	@ (800839c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008156:	f023 0103 	bic.w	r1, r3, #3
 800815a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800815e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008160:	4a8e      	ldr	r2, [pc, #568]	@ (800839c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008162:	430b      	orrs	r3, r1
 8008164:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008166:	e003      	b.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008168:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800816c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800817c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008180:	2300      	movs	r3, #0
 8008182:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008186:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800818a:	460b      	mov	r3, r1
 800818c:	4313      	orrs	r3, r2
 800818e:	f000 8099 	beq.w	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008192:	4b83      	ldr	r3, [pc, #524]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a82      	ldr	r2, [pc, #520]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800819c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800819e:	f7f9 fa91 	bl	80016c4 <HAL_GetTick>
 80081a2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081a6:	e00b      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081a8:	f7f9 fa8c 	bl	80016c4 <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	2b64      	cmp	r3, #100	@ 0x64
 80081b6:	d903      	bls.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80081be:	e005      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081c0:	4b77      	ldr	r3, [pc, #476]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d0ed      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80081cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d173      	bne.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80081d4:	4b71      	ldr	r3, [pc, #452]	@ (800839c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80081d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80081d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80081e0:	4053      	eors	r3, r2
 80081e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d015      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80081ea:	4b6c      	ldr	r3, [pc, #432]	@ (800839c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80081ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081f2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80081f6:	4b69      	ldr	r3, [pc, #420]	@ (800839c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80081f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081fa:	4a68      	ldr	r2, [pc, #416]	@ (800839c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80081fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008200:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008202:	4b66      	ldr	r3, [pc, #408]	@ (800839c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008206:	4a65      	ldr	r2, [pc, #404]	@ (800839c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008208:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800820c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800820e:	4a63      	ldr	r2, [pc, #396]	@ (800839c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008210:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008214:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800821a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800821e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008222:	d118      	bne.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008224:	f7f9 fa4e 	bl	80016c4 <HAL_GetTick>
 8008228:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800822c:	e00d      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800822e:	f7f9 fa49 	bl	80016c4 <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008238:	1ad2      	subs	r2, r2, r3
 800823a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800823e:	429a      	cmp	r2, r3
 8008240:	d903      	bls.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8008248:	e005      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800824a:	4b54      	ldr	r3, [pc, #336]	@ (800839c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800824c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800824e:	f003 0302 	and.w	r3, r3, #2
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0eb      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008256:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800825a:	2b00      	cmp	r3, #0
 800825c:	d129      	bne.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800825e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008262:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800826a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800826e:	d10e      	bne.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008270:	4b4a      	ldr	r3, [pc, #296]	@ (800839c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800827c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008280:	091a      	lsrs	r2, r3, #4
 8008282:	4b48      	ldr	r3, [pc, #288]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008284:	4013      	ands	r3, r2
 8008286:	4a45      	ldr	r2, [pc, #276]	@ (800839c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008288:	430b      	orrs	r3, r1
 800828a:	6113      	str	r3, [r2, #16]
 800828c:	e005      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800828e:	4b43      	ldr	r3, [pc, #268]	@ (800839c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	4a42      	ldr	r2, [pc, #264]	@ (800839c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008294:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008298:	6113      	str	r3, [r2, #16]
 800829a:	4b40      	ldr	r3, [pc, #256]	@ (800839c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800829c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800829e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80082a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082aa:	4a3c      	ldr	r2, [pc, #240]	@ (800839c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082ac:	430b      	orrs	r3, r1
 80082ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80082b0:	e008      	b.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80082b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80082ba:	e003      	b.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80082c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082cc:	f002 0301 	and.w	r3, r2, #1
 80082d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082d4:	2300      	movs	r3, #0
 80082d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80082da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80082de:	460b      	mov	r3, r1
 80082e0:	4313      	orrs	r3, r2
 80082e2:	f000 808f 	beq.w	8008404 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80082e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082ec:	2b28      	cmp	r3, #40	@ 0x28
 80082ee:	d871      	bhi.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80082f0:	a201      	add	r2, pc, #4	@ (adr r2, 80082f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80082f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f6:	bf00      	nop
 80082f8:	080083dd 	.word	0x080083dd
 80082fc:	080083d5 	.word	0x080083d5
 8008300:	080083d5 	.word	0x080083d5
 8008304:	080083d5 	.word	0x080083d5
 8008308:	080083d5 	.word	0x080083d5
 800830c:	080083d5 	.word	0x080083d5
 8008310:	080083d5 	.word	0x080083d5
 8008314:	080083d5 	.word	0x080083d5
 8008318:	080083a9 	.word	0x080083a9
 800831c:	080083d5 	.word	0x080083d5
 8008320:	080083d5 	.word	0x080083d5
 8008324:	080083d5 	.word	0x080083d5
 8008328:	080083d5 	.word	0x080083d5
 800832c:	080083d5 	.word	0x080083d5
 8008330:	080083d5 	.word	0x080083d5
 8008334:	080083d5 	.word	0x080083d5
 8008338:	080083bf 	.word	0x080083bf
 800833c:	080083d5 	.word	0x080083d5
 8008340:	080083d5 	.word	0x080083d5
 8008344:	080083d5 	.word	0x080083d5
 8008348:	080083d5 	.word	0x080083d5
 800834c:	080083d5 	.word	0x080083d5
 8008350:	080083d5 	.word	0x080083d5
 8008354:	080083d5 	.word	0x080083d5
 8008358:	080083dd 	.word	0x080083dd
 800835c:	080083d5 	.word	0x080083d5
 8008360:	080083d5 	.word	0x080083d5
 8008364:	080083d5 	.word	0x080083d5
 8008368:	080083d5 	.word	0x080083d5
 800836c:	080083d5 	.word	0x080083d5
 8008370:	080083d5 	.word	0x080083d5
 8008374:	080083d5 	.word	0x080083d5
 8008378:	080083dd 	.word	0x080083dd
 800837c:	080083d5 	.word	0x080083d5
 8008380:	080083d5 	.word	0x080083d5
 8008384:	080083d5 	.word	0x080083d5
 8008388:	080083d5 	.word	0x080083d5
 800838c:	080083d5 	.word	0x080083d5
 8008390:	080083d5 	.word	0x080083d5
 8008394:	080083d5 	.word	0x080083d5
 8008398:	080083dd 	.word	0x080083dd
 800839c:	58024400 	.word	0x58024400
 80083a0:	58024800 	.word	0x58024800
 80083a4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ac:	3308      	adds	r3, #8
 80083ae:	2101      	movs	r1, #1
 80083b0:	4618      	mov	r0, r3
 80083b2:	f001 fdcb 	bl	8009f4c <RCCEx_PLL2_Config>
 80083b6:	4603      	mov	r3, r0
 80083b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80083bc:	e00f      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083c2:	3328      	adds	r3, #40	@ 0x28
 80083c4:	2101      	movs	r1, #1
 80083c6:	4618      	mov	r0, r3
 80083c8:	f001 fe72 	bl	800a0b0 <RCCEx_PLL3_Config>
 80083cc:	4603      	mov	r3, r0
 80083ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80083d2:	e004      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80083da:	e000      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80083dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10a      	bne.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80083e6:	4bbf      	ldr	r3, [pc, #764]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80083e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083ea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80083ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80083f4:	4abb      	ldr	r2, [pc, #748]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80083f6:	430b      	orrs	r3, r1
 80083f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80083fa:	e003      	b.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008400:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840c:	f002 0302 	and.w	r3, r2, #2
 8008410:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008414:	2300      	movs	r3, #0
 8008416:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800841a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800841e:	460b      	mov	r3, r1
 8008420:	4313      	orrs	r3, r2
 8008422:	d041      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800842a:	2b05      	cmp	r3, #5
 800842c:	d824      	bhi.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800842e:	a201      	add	r2, pc, #4	@ (adr r2, 8008434 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8008430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008434:	08008481 	.word	0x08008481
 8008438:	0800844d 	.word	0x0800844d
 800843c:	08008463 	.word	0x08008463
 8008440:	08008481 	.word	0x08008481
 8008444:	08008481 	.word	0x08008481
 8008448:	08008481 	.word	0x08008481
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800844c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008450:	3308      	adds	r3, #8
 8008452:	2101      	movs	r1, #1
 8008454:	4618      	mov	r0, r3
 8008456:	f001 fd79 	bl	8009f4c <RCCEx_PLL2_Config>
 800845a:	4603      	mov	r3, r0
 800845c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008460:	e00f      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008466:	3328      	adds	r3, #40	@ 0x28
 8008468:	2101      	movs	r1, #1
 800846a:	4618      	mov	r0, r3
 800846c:	f001 fe20 	bl	800a0b0 <RCCEx_PLL3_Config>
 8008470:	4603      	mov	r3, r0
 8008472:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008476:	e004      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800847e:	e000      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8008480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008482:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10a      	bne.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800848a:	4b96      	ldr	r3, [pc, #600]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800848c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800848e:	f023 0107 	bic.w	r1, r3, #7
 8008492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008496:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008498:	4a92      	ldr	r2, [pc, #584]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800849a:	430b      	orrs	r3, r1
 800849c:	6553      	str	r3, [r2, #84]	@ 0x54
 800849e:	e003      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80084a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b0:	f002 0304 	and.w	r3, r2, #4
 80084b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80084b8:	2300      	movs	r3, #0
 80084ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80084be:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80084c2:	460b      	mov	r3, r1
 80084c4:	4313      	orrs	r3, r2
 80084c6:	d044      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80084c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084d0:	2b05      	cmp	r3, #5
 80084d2:	d825      	bhi.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80084d4:	a201      	add	r2, pc, #4	@ (adr r2, 80084dc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80084d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084da:	bf00      	nop
 80084dc:	08008529 	.word	0x08008529
 80084e0:	080084f5 	.word	0x080084f5
 80084e4:	0800850b 	.word	0x0800850b
 80084e8:	08008529 	.word	0x08008529
 80084ec:	08008529 	.word	0x08008529
 80084f0:	08008529 	.word	0x08008529
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084f8:	3308      	adds	r3, #8
 80084fa:	2101      	movs	r1, #1
 80084fc:	4618      	mov	r0, r3
 80084fe:	f001 fd25 	bl	8009f4c <RCCEx_PLL2_Config>
 8008502:	4603      	mov	r3, r0
 8008504:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008508:	e00f      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800850a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800850e:	3328      	adds	r3, #40	@ 0x28
 8008510:	2101      	movs	r1, #1
 8008512:	4618      	mov	r0, r3
 8008514:	f001 fdcc 	bl	800a0b0 <RCCEx_PLL3_Config>
 8008518:	4603      	mov	r3, r0
 800851a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800851e:	e004      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008526:	e000      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8008528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800852a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10b      	bne.n	800854a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008532:	4b6c      	ldr	r3, [pc, #432]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008536:	f023 0107 	bic.w	r1, r3, #7
 800853a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800853e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008542:	4a68      	ldr	r2, [pc, #416]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008544:	430b      	orrs	r3, r1
 8008546:	6593      	str	r3, [r2, #88]	@ 0x58
 8008548:	e003      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800854a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800854e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855a:	f002 0320 	and.w	r3, r2, #32
 800855e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008562:	2300      	movs	r3, #0
 8008564:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008568:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800856c:	460b      	mov	r3, r1
 800856e:	4313      	orrs	r3, r2
 8008570:	d055      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008576:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800857a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800857e:	d033      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8008580:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008584:	d82c      	bhi.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800858a:	d02f      	beq.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800858c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008590:	d826      	bhi.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008592:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008596:	d02b      	beq.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008598:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800859c:	d820      	bhi.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800859e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085a2:	d012      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80085a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085a8:	d81a      	bhi.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d022      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80085ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085b2:	d115      	bne.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085b8:	3308      	adds	r3, #8
 80085ba:	2100      	movs	r1, #0
 80085bc:	4618      	mov	r0, r3
 80085be:	f001 fcc5 	bl	8009f4c <RCCEx_PLL2_Config>
 80085c2:	4603      	mov	r3, r0
 80085c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80085c8:	e015      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ce:	3328      	adds	r3, #40	@ 0x28
 80085d0:	2102      	movs	r1, #2
 80085d2:	4618      	mov	r0, r3
 80085d4:	f001 fd6c 	bl	800a0b0 <RCCEx_PLL3_Config>
 80085d8:	4603      	mov	r3, r0
 80085da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80085de:	e00a      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80085e6:	e006      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80085e8:	bf00      	nop
 80085ea:	e004      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80085ec:	bf00      	nop
 80085ee:	e002      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80085f0:	bf00      	nop
 80085f2:	e000      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80085f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10b      	bne.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80085fe:	4b39      	ldr	r3, [pc, #228]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008602:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800860a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800860e:	4a35      	ldr	r2, [pc, #212]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008610:	430b      	orrs	r3, r1
 8008612:	6553      	str	r3, [r2, #84]	@ 0x54
 8008614:	e003      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008616:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800861a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800861e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008626:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800862a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800862e:	2300      	movs	r3, #0
 8008630:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008634:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008638:	460b      	mov	r3, r1
 800863a:	4313      	orrs	r3, r2
 800863c:	d058      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800863e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008642:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008646:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800864a:	d033      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800864c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008650:	d82c      	bhi.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008652:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008656:	d02f      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008658:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800865c:	d826      	bhi.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800865e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008662:	d02b      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008664:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008668:	d820      	bhi.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800866a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800866e:	d012      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8008670:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008674:	d81a      	bhi.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008676:	2b00      	cmp	r3, #0
 8008678:	d022      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800867a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800867e:	d115      	bne.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008684:	3308      	adds	r3, #8
 8008686:	2100      	movs	r1, #0
 8008688:	4618      	mov	r0, r3
 800868a:	f001 fc5f 	bl	8009f4c <RCCEx_PLL2_Config>
 800868e:	4603      	mov	r3, r0
 8008690:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008694:	e015      	b.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800869a:	3328      	adds	r3, #40	@ 0x28
 800869c:	2102      	movs	r1, #2
 800869e:	4618      	mov	r0, r3
 80086a0:	f001 fd06 	bl	800a0b0 <RCCEx_PLL3_Config>
 80086a4:	4603      	mov	r3, r0
 80086a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80086aa:	e00a      	b.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80086b2:	e006      	b.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80086b4:	bf00      	nop
 80086b6:	e004      	b.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80086b8:	bf00      	nop
 80086ba:	e002      	b.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80086bc:	bf00      	nop
 80086be:	e000      	b.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80086c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10e      	bne.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80086ca:	4b06      	ldr	r3, [pc, #24]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80086cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086ce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80086d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80086da:	4a02      	ldr	r2, [pc, #8]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80086dc:	430b      	orrs	r3, r1
 80086de:	6593      	str	r3, [r2, #88]	@ 0x58
 80086e0:	e006      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80086e2:	bf00      	nop
 80086e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80086f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80086fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008700:	2300      	movs	r3, #0
 8008702:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008706:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800870a:	460b      	mov	r3, r1
 800870c:	4313      	orrs	r3, r2
 800870e:	d055      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008714:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008718:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800871c:	d033      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800871e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008722:	d82c      	bhi.n	800877e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008724:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008728:	d02f      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800872a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800872e:	d826      	bhi.n	800877e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008730:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008734:	d02b      	beq.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008736:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800873a:	d820      	bhi.n	800877e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800873c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008740:	d012      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8008742:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008746:	d81a      	bhi.n	800877e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008748:	2b00      	cmp	r3, #0
 800874a:	d022      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800874c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008750:	d115      	bne.n	800877e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008756:	3308      	adds	r3, #8
 8008758:	2100      	movs	r1, #0
 800875a:	4618      	mov	r0, r3
 800875c:	f001 fbf6 	bl	8009f4c <RCCEx_PLL2_Config>
 8008760:	4603      	mov	r3, r0
 8008762:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008766:	e015      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800876c:	3328      	adds	r3, #40	@ 0x28
 800876e:	2102      	movs	r1, #2
 8008770:	4618      	mov	r0, r3
 8008772:	f001 fc9d 	bl	800a0b0 <RCCEx_PLL3_Config>
 8008776:	4603      	mov	r3, r0
 8008778:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800877c:	e00a      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008784:	e006      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008786:	bf00      	nop
 8008788:	e004      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800878a:	bf00      	nop
 800878c:	e002      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800878e:	bf00      	nop
 8008790:	e000      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008792:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008794:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10b      	bne.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800879c:	4ba0      	ldr	r3, [pc, #640]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800879e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087a0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80087a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087ac:	4a9c      	ldr	r2, [pc, #624]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80087ae:	430b      	orrs	r3, r1
 80087b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80087b2:	e003      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80087bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c4:	f002 0308 	and.w	r3, r2, #8
 80087c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80087cc:	2300      	movs	r3, #0
 80087ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80087d2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80087d6:	460b      	mov	r3, r1
 80087d8:	4313      	orrs	r3, r2
 80087da:	d01e      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80087dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087e8:	d10c      	bne.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80087ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087ee:	3328      	adds	r3, #40	@ 0x28
 80087f0:	2102      	movs	r1, #2
 80087f2:	4618      	mov	r0, r3
 80087f4:	f001 fc5c 	bl	800a0b0 <RCCEx_PLL3_Config>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d002      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008804:	4b86      	ldr	r3, [pc, #536]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008808:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800880c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008810:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008814:	4a82      	ldr	r2, [pc, #520]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008816:	430b      	orrs	r3, r1
 8008818:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800881a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800881e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008822:	f002 0310 	and.w	r3, r2, #16
 8008826:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800882a:	2300      	movs	r3, #0
 800882c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008830:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008834:	460b      	mov	r3, r1
 8008836:	4313      	orrs	r3, r2
 8008838:	d01e      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800883a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800883e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008846:	d10c      	bne.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800884c:	3328      	adds	r3, #40	@ 0x28
 800884e:	2102      	movs	r1, #2
 8008850:	4618      	mov	r0, r3
 8008852:	f001 fc2d 	bl	800a0b0 <RCCEx_PLL3_Config>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008862:	4b6f      	ldr	r3, [pc, #444]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008866:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800886a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800886e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008872:	4a6b      	ldr	r2, [pc, #428]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008874:	430b      	orrs	r3, r1
 8008876:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800887c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008880:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008884:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008886:	2300      	movs	r3, #0
 8008888:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800888a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800888e:	460b      	mov	r3, r1
 8008890:	4313      	orrs	r3, r2
 8008892:	d03e      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008898:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800889c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088a0:	d022      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80088a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088a6:	d81b      	bhi.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d003      	beq.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80088ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088b0:	d00b      	beq.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80088b2:	e015      	b.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088b8:	3308      	adds	r3, #8
 80088ba:	2100      	movs	r1, #0
 80088bc:	4618      	mov	r0, r3
 80088be:	f001 fb45 	bl	8009f4c <RCCEx_PLL2_Config>
 80088c2:	4603      	mov	r3, r0
 80088c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80088c8:	e00f      	b.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088ce:	3328      	adds	r3, #40	@ 0x28
 80088d0:	2102      	movs	r1, #2
 80088d2:	4618      	mov	r0, r3
 80088d4:	f001 fbec 	bl	800a0b0 <RCCEx_PLL3_Config>
 80088d8:	4603      	mov	r3, r0
 80088da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80088de:	e004      	b.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80088e6:	e000      	b.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80088e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10b      	bne.n	800890a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80088f2:	4b4b      	ldr	r3, [pc, #300]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80088f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088f6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80088fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008902:	4a47      	ldr	r2, [pc, #284]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008904:	430b      	orrs	r3, r1
 8008906:	6593      	str	r3, [r2, #88]	@ 0x58
 8008908:	e003      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800890a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800890e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800891e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008920:	2300      	movs	r3, #0
 8008922:	677b      	str	r3, [r7, #116]	@ 0x74
 8008924:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008928:	460b      	mov	r3, r1
 800892a:	4313      	orrs	r3, r2
 800892c:	d03b      	beq.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800892e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008932:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008936:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800893a:	d01f      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800893c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008940:	d818      	bhi.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8008942:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008946:	d003      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008948:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800894c:	d007      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800894e:	e011      	b.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008950:	4b33      	ldr	r3, [pc, #204]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008954:	4a32      	ldr	r2, [pc, #200]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800895a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800895c:	e00f      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800895e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008962:	3328      	adds	r3, #40	@ 0x28
 8008964:	2101      	movs	r1, #1
 8008966:	4618      	mov	r0, r3
 8008968:	f001 fba2 	bl	800a0b0 <RCCEx_PLL3_Config>
 800896c:	4603      	mov	r3, r0
 800896e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8008972:	e004      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800897a:	e000      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800897c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800897e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10b      	bne.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008986:	4b26      	ldr	r3, [pc, #152]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800898a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800898e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008992:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008996:	4a22      	ldr	r2, [pc, #136]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008998:	430b      	orrs	r3, r1
 800899a:	6553      	str	r3, [r2, #84]	@ 0x54
 800899c:	e003      	b.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800899e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80089a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80089a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80089b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80089b4:	2300      	movs	r3, #0
 80089b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80089b8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80089bc:	460b      	mov	r3, r1
 80089be:	4313      	orrs	r3, r2
 80089c0:	d034      	beq.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80089c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d003      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80089cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089d0:	d007      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80089d2:	e011      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089d4:	4b12      	ldr	r3, [pc, #72]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80089d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d8:	4a11      	ldr	r2, [pc, #68]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80089da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80089e0:	e00e      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80089e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089e6:	3308      	adds	r3, #8
 80089e8:	2102      	movs	r1, #2
 80089ea:	4618      	mov	r0, r3
 80089ec:	f001 faae 	bl	8009f4c <RCCEx_PLL2_Config>
 80089f0:	4603      	mov	r3, r0
 80089f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80089f6:	e003      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80089fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d10d      	bne.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008a08:	4b05      	ldr	r3, [pc, #20]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a0c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a16:	4a02      	ldr	r2, [pc, #8]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008a18:	430b      	orrs	r3, r1
 8008a1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008a1c:	e006      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8008a1e:	bf00      	nop
 8008a20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a34:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008a38:	663b      	str	r3, [r7, #96]	@ 0x60
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a3e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008a42:	460b      	mov	r3, r1
 8008a44:	4313      	orrs	r3, r2
 8008a46:	d00c      	beq.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a4c:	3328      	adds	r3, #40	@ 0x28
 8008a4e:	2102      	movs	r1, #2
 8008a50:	4618      	mov	r0, r3
 8008a52:	f001 fb2d 	bl	800a0b0 <RCCEx_PLL3_Config>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008a6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a70:	2300      	movs	r3, #0
 8008a72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a74:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	d036      	beq.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a88:	d018      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008a8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a8e:	d811      	bhi.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a94:	d014      	beq.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008a96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a9a:	d80b      	bhi.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d011      	beq.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008aa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008aa4:	d106      	bne.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008aa6:	4bb7      	ldr	r3, [pc, #732]	@ (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aaa:	4ab6      	ldr	r2, [pc, #728]	@ (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ab0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008ab2:	e008      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008aba:	e004      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008abc:	bf00      	nop
 8008abe:	e002      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008ac0:	bf00      	nop
 8008ac2:	e000      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ac6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10a      	bne.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008ace:	4bad      	ldr	r3, [pc, #692]	@ (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ad2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ada:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008adc:	4aa9      	ldr	r2, [pc, #676]	@ (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008ade:	430b      	orrs	r3, r1
 8008ae0:	6553      	str	r3, [r2, #84]	@ 0x54
 8008ae2:	e003      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ae4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ae8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008af8:	653b      	str	r3, [r7, #80]	@ 0x50
 8008afa:	2300      	movs	r3, #0
 8008afc:	657b      	str	r3, [r7, #84]	@ 0x54
 8008afe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008b02:	460b      	mov	r3, r1
 8008b04:	4313      	orrs	r3, r2
 8008b06:	d009      	beq.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008b08:	4b9e      	ldr	r3, [pc, #632]	@ (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b0c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b16:	4a9b      	ldr	r2, [pc, #620]	@ (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b18:	430b      	orrs	r3, r1
 8008b1a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b24:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008b28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b2e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008b32:	460b      	mov	r3, r1
 8008b34:	4313      	orrs	r3, r2
 8008b36:	d009      	beq.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b38:	4b92      	ldr	r3, [pc, #584]	@ (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b3c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b46:	4a8f      	ldr	r2, [pc, #572]	@ (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b48:	430b      	orrs	r3, r1
 8008b4a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b54:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008b58:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b5e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008b62:	460b      	mov	r3, r1
 8008b64:	4313      	orrs	r3, r2
 8008b66:	d00e      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008b68:	4b86      	ldr	r3, [pc, #536]	@ (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b6a:	691b      	ldr	r3, [r3, #16]
 8008b6c:	4a85      	ldr	r2, [pc, #532]	@ (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008b72:	6113      	str	r3, [r2, #16]
 8008b74:	4b83      	ldr	r3, [pc, #524]	@ (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b76:	6919      	ldr	r1, [r3, #16]
 8008b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008b80:	4a80      	ldr	r2, [pc, #512]	@ (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b82:	430b      	orrs	r3, r1
 8008b84:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008b92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b94:	2300      	movs	r3, #0
 8008b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b98:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	d009      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008ba2:	4b78      	ldr	r3, [pc, #480]	@ (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ba6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bb0:	4a74      	ldr	r2, [pc, #464]	@ (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008bb2:	430b      	orrs	r3, r1
 8008bb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008bc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bc8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008bcc:	460b      	mov	r3, r1
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	d00a      	beq.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008bd2:	4b6c      	ldr	r3, [pc, #432]	@ (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bd6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008be2:	4a68      	ldr	r2, [pc, #416]	@ (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008be4:	430b      	orrs	r3, r1
 8008be6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008bf4:	f003 0301 	and.w	r3, r3, #1
 8008bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008bfa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008bfe:	460b      	mov	r3, r1
 8008c00:	4313      	orrs	r3, r2
 8008c02:	d011      	beq.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c08:	3308      	adds	r3, #8
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f001 f99d 	bl	8009f4c <RCCEx_PLL2_Config>
 8008c12:	4603      	mov	r3, r0
 8008c14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008c18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d003      	beq.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c30:	2100      	movs	r1, #0
 8008c32:	6239      	str	r1, [r7, #32]
 8008c34:	f003 0302 	and.w	r3, r3, #2
 8008c38:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c3a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008c3e:	460b      	mov	r3, r1
 8008c40:	4313      	orrs	r3, r2
 8008c42:	d011      	beq.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c48:	3308      	adds	r3, #8
 8008c4a:	2101      	movs	r1, #1
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f001 f97d 	bl	8009f4c <RCCEx_PLL2_Config>
 8008c52:	4603      	mov	r3, r0
 8008c54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008c58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d003      	beq.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c70:	2100      	movs	r1, #0
 8008c72:	61b9      	str	r1, [r7, #24]
 8008c74:	f003 0304 	and.w	r3, r3, #4
 8008c78:	61fb      	str	r3, [r7, #28]
 8008c7a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008c7e:	460b      	mov	r3, r1
 8008c80:	4313      	orrs	r3, r2
 8008c82:	d011      	beq.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c88:	3308      	adds	r3, #8
 8008c8a:	2102      	movs	r1, #2
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f001 f95d 	bl	8009f4c <RCCEx_PLL2_Config>
 8008c92:	4603      	mov	r3, r0
 8008c94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008c98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d003      	beq.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ca0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ca4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	6139      	str	r1, [r7, #16]
 8008cb4:	f003 0308 	and.w	r3, r3, #8
 8008cb8:	617b      	str	r3, [r7, #20]
 8008cba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	d011      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cc8:	3328      	adds	r3, #40	@ 0x28
 8008cca:	2100      	movs	r1, #0
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f001 f9ef 	bl	800a0b0 <RCCEx_PLL3_Config>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008cd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d003      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ce4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	60b9      	str	r1, [r7, #8]
 8008cf4:	f003 0310 	and.w	r3, r3, #16
 8008cf8:	60fb      	str	r3, [r7, #12]
 8008cfa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008cfe:	460b      	mov	r3, r1
 8008d00:	4313      	orrs	r3, r2
 8008d02:	d011      	beq.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d08:	3328      	adds	r3, #40	@ 0x28
 8008d0a:	2101      	movs	r1, #1
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f001 f9cf 	bl	800a0b0 <RCCEx_PLL3_Config>
 8008d12:	4603      	mov	r3, r0
 8008d14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008d18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d003      	beq.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d30:	2100      	movs	r1, #0
 8008d32:	6039      	str	r1, [r7, #0]
 8008d34:	f003 0320 	and.w	r3, r3, #32
 8008d38:	607b      	str	r3, [r7, #4]
 8008d3a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008d3e:	460b      	mov	r3, r1
 8008d40:	4313      	orrs	r3, r2
 8008d42:	d011      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d48:	3328      	adds	r3, #40	@ 0x28
 8008d4a:	2102      	movs	r1, #2
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f001 f9af 	bl	800a0b0 <RCCEx_PLL3_Config>
 8008d52:	4603      	mov	r3, r0
 8008d54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008d58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d003      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8008d68:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8008d70:	2300      	movs	r3, #0
 8008d72:	e000      	b.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d82:	bf00      	nop
 8008d84:	58024400 	.word	0x58024400

08008d88 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b090      	sub	sp, #64	@ 0x40
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008d92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d96:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008d9a:	430b      	orrs	r3, r1
 8008d9c:	f040 8094 	bne.w	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008da0:	4b9b      	ldr	r3, [pc, #620]	@ (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008da2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008da4:	f003 0307 	and.w	r3, r3, #7
 8008da8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dac:	2b04      	cmp	r3, #4
 8008dae:	f200 8087 	bhi.w	8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008db2:	a201      	add	r2, pc, #4	@ (adr r2, 8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db8:	08008dcd 	.word	0x08008dcd
 8008dbc:	08008df5 	.word	0x08008df5
 8008dc0:	08008e1d 	.word	0x08008e1d
 8008dc4:	08008eb9 	.word	0x08008eb9
 8008dc8:	08008e45 	.word	0x08008e45
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008dcc:	4b90      	ldr	r3, [pc, #576]	@ (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008dd8:	d108      	bne.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008dde:	4618      	mov	r0, r3
 8008de0:	f000 ff62 	bl	8009ca8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008de8:	f000 bc93 	b.w	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008dec:	2300      	movs	r3, #0
 8008dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008df0:	f000 bc8f 	b.w	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008df4:	4b86      	ldr	r3, [pc, #536]	@ (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e00:	d108      	bne.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e02:	f107 0318 	add.w	r3, r7, #24
 8008e06:	4618      	mov	r0, r3
 8008e08:	f000 fca6 	bl	8009758 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e10:	f000 bc7f 	b.w	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e14:	2300      	movs	r3, #0
 8008e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e18:	f000 bc7b 	b.w	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e1c:	4b7c      	ldr	r3, [pc, #496]	@ (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e28:	d108      	bne.n	8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e2a:	f107 030c 	add.w	r3, r7, #12
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 fde6 	bl	8009a00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e38:	f000 bc6b 	b.w	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e40:	f000 bc67 	b.w	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e44:	4b72      	ldr	r3, [pc, #456]	@ (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008e4c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e4e:	4b70      	ldr	r3, [pc, #448]	@ (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0304 	and.w	r3, r3, #4
 8008e56:	2b04      	cmp	r3, #4
 8008e58:	d10c      	bne.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d109      	bne.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e60:	4b6b      	ldr	r3, [pc, #428]	@ (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	08db      	lsrs	r3, r3, #3
 8008e66:	f003 0303 	and.w	r3, r3, #3
 8008e6a:	4a6a      	ldr	r2, [pc, #424]	@ (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e72:	e01f      	b.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e74:	4b66      	ldr	r3, [pc, #408]	@ (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e80:	d106      	bne.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e88:	d102      	bne.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008e8a:	4b63      	ldr	r3, [pc, #396]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e8e:	e011      	b.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e90:	4b5f      	ldr	r3, [pc, #380]	@ (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e9c:	d106      	bne.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ea0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ea4:	d102      	bne.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ea6:	4b5d      	ldr	r3, [pc, #372]	@ (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008eaa:	e003      	b.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008eac:	2300      	movs	r3, #0
 8008eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008eb0:	f000 bc2f 	b.w	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008eb4:	f000 bc2d 	b.w	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008eb8:	4b59      	ldr	r3, [pc, #356]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ebc:	f000 bc29 	b.w	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ec4:	f000 bc25 	b.w	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ecc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008ed0:	430b      	orrs	r3, r1
 8008ed2:	f040 80a7 	bne.w	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008ed6:	4b4e      	ldr	r3, [pc, #312]	@ (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eda:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008ede:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ee6:	d054      	beq.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008eee:	f200 808b 	bhi.w	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008ef8:	f000 8083 	beq.w	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008efe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008f02:	f200 8081 	bhi.w	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f0c:	d02f      	beq.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f14:	d878      	bhi.n	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d004      	beq.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008f22:	d012      	beq.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8008f24:	e070      	b.n	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f26:	4b3a      	ldr	r3, [pc, #232]	@ (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f32:	d107      	bne.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f000 feb5 	bl	8009ca8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f42:	e3e6      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f48:	e3e3      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f4a:	4b31      	ldr	r3, [pc, #196]	@ (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f56:	d107      	bne.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f58:	f107 0318 	add.w	r3, r7, #24
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f000 fbfb 	bl	8009758 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f66:	e3d4      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f6c:	e3d1      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f6e:	4b28      	ldr	r3, [pc, #160]	@ (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f7a:	d107      	bne.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f7c:	f107 030c 	add.w	r3, r7, #12
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 fd3d 	bl	8009a00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f8a:	e3c2      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f90:	e3bf      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f92:	4b1f      	ldr	r3, [pc, #124]	@ (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008f9a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0304 	and.w	r3, r3, #4
 8008fa4:	2b04      	cmp	r3, #4
 8008fa6:	d10c      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d109      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fae:	4b18      	ldr	r3, [pc, #96]	@ (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	08db      	lsrs	r3, r3, #3
 8008fb4:	f003 0303 	and.w	r3, r3, #3
 8008fb8:	4a16      	ldr	r2, [pc, #88]	@ (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008fba:	fa22 f303 	lsr.w	r3, r2, r3
 8008fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fc0:	e01e      	b.n	8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fc2:	4b13      	ldr	r3, [pc, #76]	@ (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fce:	d106      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fd6:	d102      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fdc:	e010      	b.n	8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fde:	4b0c      	ldr	r3, [pc, #48]	@ (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fe6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fea:	d106      	bne.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ff2:	d102      	bne.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ff4:	4b09      	ldr	r3, [pc, #36]	@ (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ff8:	e002      	b.n	8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008ffe:	e388      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009000:	e387      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009002:	4b07      	ldr	r3, [pc, #28]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009006:	e384      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009008:	2300      	movs	r3, #0
 800900a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800900c:	e381      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800900e:	bf00      	nop
 8009010:	58024400 	.word	0x58024400
 8009014:	03d09000 	.word	0x03d09000
 8009018:	003d0900 	.word	0x003d0900
 800901c:	017d7840 	.word	0x017d7840
 8009020:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009028:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800902c:	430b      	orrs	r3, r1
 800902e:	f040 809c 	bne.w	800916a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009032:	4b9e      	ldr	r3, [pc, #632]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009036:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800903a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800903c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800903e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009042:	d054      	beq.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8009044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009046:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800904a:	f200 808b 	bhi.w	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800904e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009050:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009054:	f000 8083 	beq.w	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8009058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800905a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800905e:	f200 8081 	bhi.w	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009064:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009068:	d02f      	beq.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800906a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800906c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009070:	d878      	bhi.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009074:	2b00      	cmp	r3, #0
 8009076:	d004      	beq.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800907e:	d012      	beq.n	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009080:	e070      	b.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009082:	4b8a      	ldr	r3, [pc, #552]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800908a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800908e:	d107      	bne.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009090:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009094:	4618      	mov	r0, r3
 8009096:	f000 fe07 	bl	8009ca8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800909a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800909c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800909e:	e338      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090a0:	2300      	movs	r3, #0
 80090a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090a4:	e335      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090a6:	4b81      	ldr	r3, [pc, #516]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090b2:	d107      	bne.n	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090b4:	f107 0318 	add.w	r3, r7, #24
 80090b8:	4618      	mov	r0, r3
 80090ba:	f000 fb4d 	bl	8009758 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090c2:	e326      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090c4:	2300      	movs	r3, #0
 80090c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090c8:	e323      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090ca:	4b78      	ldr	r3, [pc, #480]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090d6:	d107      	bne.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090d8:	f107 030c 	add.w	r3, r7, #12
 80090dc:	4618      	mov	r0, r3
 80090de:	f000 fc8f 	bl	8009a00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090e6:	e314      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090e8:	2300      	movs	r3, #0
 80090ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090ec:	e311      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090ee:	4b6f      	ldr	r3, [pc, #444]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80090f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80090f6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090f8:	4b6c      	ldr	r3, [pc, #432]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 0304 	and.w	r3, r3, #4
 8009100:	2b04      	cmp	r3, #4
 8009102:	d10c      	bne.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8009104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009106:	2b00      	cmp	r3, #0
 8009108:	d109      	bne.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800910a:	4b68      	ldr	r3, [pc, #416]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	08db      	lsrs	r3, r3, #3
 8009110:	f003 0303 	and.w	r3, r3, #3
 8009114:	4a66      	ldr	r2, [pc, #408]	@ (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8009116:	fa22 f303 	lsr.w	r3, r2, r3
 800911a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800911c:	e01e      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800911e:	4b63      	ldr	r3, [pc, #396]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009126:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800912a:	d106      	bne.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800912c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800912e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009132:	d102      	bne.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009134:	4b5f      	ldr	r3, [pc, #380]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8009136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009138:	e010      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800913a:	4b5c      	ldr	r3, [pc, #368]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009142:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009146:	d106      	bne.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8009148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800914a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800914e:	d102      	bne.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009150:	4b59      	ldr	r3, [pc, #356]	@ (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009152:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009154:	e002      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009156:	2300      	movs	r3, #0
 8009158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800915a:	e2da      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800915c:	e2d9      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800915e:	4b57      	ldr	r3, [pc, #348]	@ (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009162:	e2d6      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009164:	2300      	movs	r3, #0
 8009166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009168:	e2d3      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800916a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800916e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009172:	430b      	orrs	r3, r1
 8009174:	f040 80a7 	bne.w	80092c6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009178:	4b4c      	ldr	r3, [pc, #304]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800917a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800917c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009180:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009184:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009188:	d055      	beq.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800918a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800918c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009190:	f200 8096 	bhi.w	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009196:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800919a:	f000 8084 	beq.w	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800919e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80091a4:	f200 808c 	bhi.w	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80091a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091ae:	d030      	beq.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80091b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091b6:	f200 8083 	bhi.w	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80091ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d004      	beq.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80091c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091c6:	d012      	beq.n	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80091c8:	e07a      	b.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091ca:	4b38      	ldr	r3, [pc, #224]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091d6:	d107      	bne.n	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 fd63 	bl	8009ca8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091e6:	e294      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091e8:	2300      	movs	r3, #0
 80091ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091ec:	e291      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091ee:	4b2f      	ldr	r3, [pc, #188]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091fa:	d107      	bne.n	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091fc:	f107 0318 	add.w	r3, r7, #24
 8009200:	4618      	mov	r0, r3
 8009202:	f000 faa9 	bl	8009758 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800920a:	e282      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800920c:	2300      	movs	r3, #0
 800920e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009210:	e27f      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009212:	4b26      	ldr	r3, [pc, #152]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800921a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800921e:	d107      	bne.n	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009220:	f107 030c 	add.w	r3, r7, #12
 8009224:	4618      	mov	r0, r3
 8009226:	f000 fbeb 	bl	8009a00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800922e:	e270      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009230:	2300      	movs	r3, #0
 8009232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009234:	e26d      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009236:	4b1d      	ldr	r3, [pc, #116]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800923a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800923e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009240:	4b1a      	ldr	r3, [pc, #104]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 0304 	and.w	r3, r3, #4
 8009248:	2b04      	cmp	r3, #4
 800924a:	d10c      	bne.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800924c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800924e:	2b00      	cmp	r3, #0
 8009250:	d109      	bne.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009252:	4b16      	ldr	r3, [pc, #88]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	08db      	lsrs	r3, r3, #3
 8009258:	f003 0303 	and.w	r3, r3, #3
 800925c:	4a14      	ldr	r2, [pc, #80]	@ (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800925e:	fa22 f303 	lsr.w	r3, r2, r3
 8009262:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009264:	e01e      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009266:	4b11      	ldr	r3, [pc, #68]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800926e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009272:	d106      	bne.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009276:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800927a:	d102      	bne.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800927c:	4b0d      	ldr	r3, [pc, #52]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800927e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009280:	e010      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009282:	4b0a      	ldr	r3, [pc, #40]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800928a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800928e:	d106      	bne.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8009290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009292:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009296:	d102      	bne.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009298:	4b07      	ldr	r3, [pc, #28]	@ (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800929a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800929c:	e002      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800929e:	2300      	movs	r3, #0
 80092a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80092a2:	e236      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80092a4:	e235      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80092a6:	4b05      	ldr	r3, [pc, #20]	@ (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80092a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092aa:	e232      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80092ac:	58024400 	.word	0x58024400
 80092b0:	03d09000 	.word	0x03d09000
 80092b4:	003d0900 	.word	0x003d0900
 80092b8:	017d7840 	.word	0x017d7840
 80092bc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80092c0:	2300      	movs	r3, #0
 80092c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092c4:	e225      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80092c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092ca:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80092ce:	430b      	orrs	r3, r1
 80092d0:	f040 8085 	bne.w	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80092d4:	4b9c      	ldr	r3, [pc, #624]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80092d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092d8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80092dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80092de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80092e4:	d06b      	beq.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80092e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80092ec:	d874      	bhi.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80092ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80092f4:	d056      	beq.n	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80092f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80092fc:	d86c      	bhi.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80092fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009300:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009304:	d03b      	beq.n	800937e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8009306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009308:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800930c:	d864      	bhi.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800930e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009310:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009314:	d021      	beq.n	800935a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8009316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009318:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800931c:	d85c      	bhi.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800931e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009320:	2b00      	cmp	r3, #0
 8009322:	d004      	beq.n	800932e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8009324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800932a:	d004      	beq.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800932c:	e054      	b.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800932e:	f7fe fb75 	bl	8007a1c <HAL_RCC_GetPCLK1Freq>
 8009332:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009334:	e1ed      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009336:	4b84      	ldr	r3, [pc, #528]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800933e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009342:	d107      	bne.n	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009344:	f107 0318 	add.w	r3, r7, #24
 8009348:	4618      	mov	r0, r3
 800934a:	f000 fa05 	bl	8009758 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009352:	e1de      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009354:	2300      	movs	r3, #0
 8009356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009358:	e1db      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800935a:	4b7b      	ldr	r3, [pc, #492]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009362:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009366:	d107      	bne.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009368:	f107 030c 	add.w	r3, r7, #12
 800936c:	4618      	mov	r0, r3
 800936e:	f000 fb47 	bl	8009a00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009376:	e1cc      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009378:	2300      	movs	r3, #0
 800937a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800937c:	e1c9      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800937e:	4b72      	ldr	r3, [pc, #456]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f003 0304 	and.w	r3, r3, #4
 8009386:	2b04      	cmp	r3, #4
 8009388:	d109      	bne.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800938a:	4b6f      	ldr	r3, [pc, #444]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	08db      	lsrs	r3, r3, #3
 8009390:	f003 0303 	and.w	r3, r3, #3
 8009394:	4a6d      	ldr	r2, [pc, #436]	@ (800954c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8009396:	fa22 f303 	lsr.w	r3, r2, r3
 800939a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800939c:	e1b9      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800939e:	2300      	movs	r3, #0
 80093a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093a2:	e1b6      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80093a4:	4b68      	ldr	r3, [pc, #416]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093b0:	d102      	bne.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80093b2:	4b67      	ldr	r3, [pc, #412]	@ (8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80093b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093b6:	e1ac      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093b8:	2300      	movs	r3, #0
 80093ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093bc:	e1a9      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80093be:	4b62      	ldr	r3, [pc, #392]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093ca:	d102      	bne.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80093cc:	4b61      	ldr	r3, [pc, #388]	@ (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80093ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093d0:	e19f      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093d2:	2300      	movs	r3, #0
 80093d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093d6:	e19c      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80093d8:	2300      	movs	r3, #0
 80093da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093dc:	e199      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80093de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093e2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80093e6:	430b      	orrs	r3, r1
 80093e8:	d173      	bne.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80093ea:	4b57      	ldr	r3, [pc, #348]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80093ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80093f2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80093f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093fa:	d02f      	beq.n	800945c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80093fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009402:	d863      	bhi.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8009404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009406:	2b00      	cmp	r3, #0
 8009408:	d004      	beq.n	8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800940a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009410:	d012      	beq.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8009412:	e05b      	b.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009414:	4b4c      	ldr	r3, [pc, #304]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800941c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009420:	d107      	bne.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009422:	f107 0318 	add.w	r3, r7, #24
 8009426:	4618      	mov	r0, r3
 8009428:	f000 f996 	bl	8009758 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009430:	e16f      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009432:	2300      	movs	r3, #0
 8009434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009436:	e16c      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009438:	4b43      	ldr	r3, [pc, #268]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009440:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009444:	d107      	bne.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009446:	f107 030c 	add.w	r3, r7, #12
 800944a:	4618      	mov	r0, r3
 800944c:	f000 fad8 	bl	8009a00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009454:	e15d      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009456:	2300      	movs	r3, #0
 8009458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800945a:	e15a      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800945c:	4b3a      	ldr	r3, [pc, #232]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800945e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009460:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009464:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009466:	4b38      	ldr	r3, [pc, #224]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0304 	and.w	r3, r3, #4
 800946e:	2b04      	cmp	r3, #4
 8009470:	d10c      	bne.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8009472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009474:	2b00      	cmp	r3, #0
 8009476:	d109      	bne.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009478:	4b33      	ldr	r3, [pc, #204]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	08db      	lsrs	r3, r3, #3
 800947e:	f003 0303 	and.w	r3, r3, #3
 8009482:	4a32      	ldr	r2, [pc, #200]	@ (800954c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8009484:	fa22 f303 	lsr.w	r3, r2, r3
 8009488:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800948a:	e01e      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800948c:	4b2e      	ldr	r3, [pc, #184]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009494:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009498:	d106      	bne.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800949a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800949c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094a0:	d102      	bne.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80094a2:	4b2b      	ldr	r3, [pc, #172]	@ (8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80094a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094a6:	e010      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094a8:	4b27      	ldr	r3, [pc, #156]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094b4:	d106      	bne.n	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80094b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094bc:	d102      	bne.n	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80094be:	4b25      	ldr	r3, [pc, #148]	@ (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80094c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094c2:	e002      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80094c4:	2300      	movs	r3, #0
 80094c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80094c8:	e123      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80094ca:	e122      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80094cc:	2300      	movs	r3, #0
 80094ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094d0:	e11f      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80094d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094d6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80094da:	430b      	orrs	r3, r1
 80094dc:	d13c      	bne.n	8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80094de:	4b1a      	ldr	r3, [pc, #104]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80094e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094e6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80094e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d004      	beq.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80094ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094f4:	d012      	beq.n	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80094f6:	e023      	b.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094f8:	4b13      	ldr	r3, [pc, #76]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009500:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009504:	d107      	bne.n	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800950a:	4618      	mov	r0, r3
 800950c:	f000 fbcc 	bl	8009ca8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009514:	e0fd      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009516:	2300      	movs	r3, #0
 8009518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800951a:	e0fa      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800951c:	4b0a      	ldr	r3, [pc, #40]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009524:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009528:	d107      	bne.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800952a:	f107 0318 	add.w	r3, r7, #24
 800952e:	4618      	mov	r0, r3
 8009530:	f000 f912 	bl	8009758 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009534:	6a3b      	ldr	r3, [r7, #32]
 8009536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009538:	e0eb      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800953a:	2300      	movs	r3, #0
 800953c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800953e:	e0e8      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009540:	2300      	movs	r3, #0
 8009542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009544:	e0e5      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009546:	bf00      	nop
 8009548:	58024400 	.word	0x58024400
 800954c:	03d09000 	.word	0x03d09000
 8009550:	003d0900 	.word	0x003d0900
 8009554:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800955c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009560:	430b      	orrs	r3, r1
 8009562:	f040 8085 	bne.w	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009566:	4b6d      	ldr	r3, [pc, #436]	@ (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800956a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800956e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009572:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009576:	d06b      	beq.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8009578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800957a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800957e:	d874      	bhi.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009586:	d056      	beq.n	8009636 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8009588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800958a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800958e:	d86c      	bhi.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009592:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009596:	d03b      	beq.n	8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8009598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800959a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800959e:	d864      	bhi.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80095a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095a6:	d021      	beq.n	80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80095a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095ae:	d85c      	bhi.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80095b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d004      	beq.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80095b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095bc:	d004      	beq.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80095be:	e054      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80095c0:	f000 f8b4 	bl	800972c <HAL_RCCEx_GetD3PCLK1Freq>
 80095c4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80095c6:	e0a4      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095c8:	4b54      	ldr	r3, [pc, #336]	@ (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095d4:	d107      	bne.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095d6:	f107 0318 	add.w	r3, r7, #24
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 f8bc 	bl	8009758 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095e4:	e095      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80095e6:	2300      	movs	r3, #0
 80095e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095ea:	e092      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095ec:	4b4b      	ldr	r3, [pc, #300]	@ (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095f8:	d107      	bne.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095fa:	f107 030c 	add.w	r3, r7, #12
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 f9fe 	bl	8009a00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009608:	e083      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800960a:	2300      	movs	r3, #0
 800960c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800960e:	e080      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009610:	4b42      	ldr	r3, [pc, #264]	@ (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f003 0304 	and.w	r3, r3, #4
 8009618:	2b04      	cmp	r3, #4
 800961a:	d109      	bne.n	8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800961c:	4b3f      	ldr	r3, [pc, #252]	@ (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	08db      	lsrs	r3, r3, #3
 8009622:	f003 0303 	and.w	r3, r3, #3
 8009626:	4a3e      	ldr	r2, [pc, #248]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009628:	fa22 f303 	lsr.w	r3, r2, r3
 800962c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800962e:	e070      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009630:	2300      	movs	r3, #0
 8009632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009634:	e06d      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009636:	4b39      	ldr	r3, [pc, #228]	@ (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800963e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009642:	d102      	bne.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8009644:	4b37      	ldr	r3, [pc, #220]	@ (8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009648:	e063      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800964a:	2300      	movs	r3, #0
 800964c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800964e:	e060      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009650:	4b32      	ldr	r3, [pc, #200]	@ (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009658:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800965c:	d102      	bne.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800965e:	4b32      	ldr	r3, [pc, #200]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009662:	e056      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009664:	2300      	movs	r3, #0
 8009666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009668:	e053      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800966a:	2300      	movs	r3, #0
 800966c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800966e:	e050      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009670:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009674:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009678:	430b      	orrs	r3, r1
 800967a:	d148      	bne.n	800970e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800967c:	4b27      	ldr	r3, [pc, #156]	@ (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800967e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009680:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009684:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009688:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800968c:	d02a      	beq.n	80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800968e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009690:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009694:	d838      	bhi.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009698:	2b00      	cmp	r3, #0
 800969a:	d004      	beq.n	80096a6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800969c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096a2:	d00d      	beq.n	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80096a4:	e030      	b.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80096a6:	4b1d      	ldr	r3, [pc, #116]	@ (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096b2:	d102      	bne.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80096b4:	4b1c      	ldr	r3, [pc, #112]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80096b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096b8:	e02b      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80096ba:	2300      	movs	r3, #0
 80096bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096be:	e028      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80096c0:	4b16      	ldr	r3, [pc, #88]	@ (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80096cc:	d107      	bne.n	80096de <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 fae8 	bl	8009ca8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096dc:	e019      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80096de:	2300      	movs	r3, #0
 80096e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e2:	e016      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096e4:	4b0d      	ldr	r3, [pc, #52]	@ (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096f0:	d107      	bne.n	8009702 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096f2:	f107 0318 	add.w	r3, r7, #24
 80096f6:	4618      	mov	r0, r3
 80096f8:	f000 f82e 	bl	8009758 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009700:	e007      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009702:	2300      	movs	r3, #0
 8009704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009706:	e004      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009708:	2300      	movs	r3, #0
 800970a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800970c:	e001      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800970e:	2300      	movs	r3, #0
 8009710:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009714:	4618      	mov	r0, r3
 8009716:	3740      	adds	r7, #64	@ 0x40
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	58024400 	.word	0x58024400
 8009720:	03d09000 	.word	0x03d09000
 8009724:	003d0900 	.word	0x003d0900
 8009728:	017d7840 	.word	0x017d7840

0800972c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009730:	f7fe f944 	bl	80079bc <HAL_RCC_GetHCLKFreq>
 8009734:	4602      	mov	r2, r0
 8009736:	4b06      	ldr	r3, [pc, #24]	@ (8009750 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009738:	6a1b      	ldr	r3, [r3, #32]
 800973a:	091b      	lsrs	r3, r3, #4
 800973c:	f003 0307 	and.w	r3, r3, #7
 8009740:	4904      	ldr	r1, [pc, #16]	@ (8009754 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009742:	5ccb      	ldrb	r3, [r1, r3]
 8009744:	f003 031f 	and.w	r3, r3, #31
 8009748:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800974c:	4618      	mov	r0, r3
 800974e:	bd80      	pop	{r7, pc}
 8009750:	58024400 	.word	0x58024400
 8009754:	0800bb78 	.word	0x0800bb78

08009758 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009758:	b480      	push	{r7}
 800975a:	b089      	sub	sp, #36	@ 0x24
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009760:	4ba1      	ldr	r3, [pc, #644]	@ (80099e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009764:	f003 0303 	and.w	r3, r3, #3
 8009768:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800976a:	4b9f      	ldr	r3, [pc, #636]	@ (80099e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800976c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800976e:	0b1b      	lsrs	r3, r3, #12
 8009770:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009774:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009776:	4b9c      	ldr	r3, [pc, #624]	@ (80099e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800977a:	091b      	lsrs	r3, r3, #4
 800977c:	f003 0301 	and.w	r3, r3, #1
 8009780:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009782:	4b99      	ldr	r3, [pc, #612]	@ (80099e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009786:	08db      	lsrs	r3, r3, #3
 8009788:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800978c:	693a      	ldr	r2, [r7, #16]
 800978e:	fb02 f303 	mul.w	r3, r2, r3
 8009792:	ee07 3a90 	vmov	s15, r3
 8009796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800979a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f000 8111 	beq.w	80099c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	f000 8083 	beq.w	80098b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	f200 80a1 	bhi.w	80098f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d003      	beq.n	80097c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80097bc:	69bb      	ldr	r3, [r7, #24]
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d056      	beq.n	8009870 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80097c2:	e099      	b.n	80098f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097c4:	4b88      	ldr	r3, [pc, #544]	@ (80099e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f003 0320 	and.w	r3, r3, #32
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d02d      	beq.n	800982c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097d0:	4b85      	ldr	r3, [pc, #532]	@ (80099e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	08db      	lsrs	r3, r3, #3
 80097d6:	f003 0303 	and.w	r3, r3, #3
 80097da:	4a84      	ldr	r2, [pc, #528]	@ (80099ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80097dc:	fa22 f303 	lsr.w	r3, r2, r3
 80097e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	ee07 3a90 	vmov	s15, r3
 80097e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	ee07 3a90 	vmov	s15, r3
 80097f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097fa:	4b7b      	ldr	r3, [pc, #492]	@ (80099e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009802:	ee07 3a90 	vmov	s15, r3
 8009806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800980a:	ed97 6a03 	vldr	s12, [r7, #12]
 800980e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80099f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800981a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800981e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009826:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800982a:	e087      	b.n	800993c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	ee07 3a90 	vmov	s15, r3
 8009832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009836:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80099f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800983a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800983e:	4b6a      	ldr	r3, [pc, #424]	@ (80099e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009846:	ee07 3a90 	vmov	s15, r3
 800984a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800984e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009852:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80099f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800985a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800985e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800986a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800986e:	e065      	b.n	800993c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	ee07 3a90 	vmov	s15, r3
 8009876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800987a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80099f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800987e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009882:	4b59      	ldr	r3, [pc, #356]	@ (80099e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800988a:	ee07 3a90 	vmov	s15, r3
 800988e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009892:	ed97 6a03 	vldr	s12, [r7, #12]
 8009896:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80099f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800989a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800989e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098b2:	e043      	b.n	800993c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	ee07 3a90 	vmov	s15, r3
 80098ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80099fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80098c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098c6:	4b48      	ldr	r3, [pc, #288]	@ (80099e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ce:	ee07 3a90 	vmov	s15, r3
 80098d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80098da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80099f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098f6:	e021      	b.n	800993c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	ee07 3a90 	vmov	s15, r3
 80098fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009902:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80099f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800990a:	4b37      	ldr	r3, [pc, #220]	@ (80099e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800990c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800990e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009912:	ee07 3a90 	vmov	s15, r3
 8009916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800991a:	ed97 6a03 	vldr	s12, [r7, #12]
 800991e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80099f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800992a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800992e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800993a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800993c:	4b2a      	ldr	r3, [pc, #168]	@ (80099e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800993e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009940:	0a5b      	lsrs	r3, r3, #9
 8009942:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009946:	ee07 3a90 	vmov	s15, r3
 800994a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800994e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009952:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009956:	edd7 6a07 	vldr	s13, [r7, #28]
 800995a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800995e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009962:	ee17 2a90 	vmov	r2, s15
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800996a:	4b1f      	ldr	r3, [pc, #124]	@ (80099e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800996c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800996e:	0c1b      	lsrs	r3, r3, #16
 8009970:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009974:	ee07 3a90 	vmov	s15, r3
 8009978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800997c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009980:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009984:	edd7 6a07 	vldr	s13, [r7, #28]
 8009988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800998c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009990:	ee17 2a90 	vmov	r2, s15
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009998:	4b13      	ldr	r3, [pc, #76]	@ (80099e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800999a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800999c:	0e1b      	lsrs	r3, r3, #24
 800999e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099a2:	ee07 3a90 	vmov	s15, r3
 80099a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80099b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099be:	ee17 2a90 	vmov	r2, s15
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80099c6:	e008      	b.n	80099da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	609a      	str	r2, [r3, #8]
}
 80099da:	bf00      	nop
 80099dc:	3724      	adds	r7, #36	@ 0x24
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr
 80099e6:	bf00      	nop
 80099e8:	58024400 	.word	0x58024400
 80099ec:	03d09000 	.word	0x03d09000
 80099f0:	46000000 	.word	0x46000000
 80099f4:	4c742400 	.word	0x4c742400
 80099f8:	4a742400 	.word	0x4a742400
 80099fc:	4bbebc20 	.word	0x4bbebc20

08009a00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b089      	sub	sp, #36	@ 0x24
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a08:	4ba1      	ldr	r3, [pc, #644]	@ (8009c90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a0c:	f003 0303 	and.w	r3, r3, #3
 8009a10:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009a12:	4b9f      	ldr	r3, [pc, #636]	@ (8009c90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a16:	0d1b      	lsrs	r3, r3, #20
 8009a18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a1c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009a1e:	4b9c      	ldr	r3, [pc, #624]	@ (8009c90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a22:	0a1b      	lsrs	r3, r3, #8
 8009a24:	f003 0301 	and.w	r3, r3, #1
 8009a28:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009a2a:	4b99      	ldr	r3, [pc, #612]	@ (8009c90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a2e:	08db      	lsrs	r3, r3, #3
 8009a30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a34:	693a      	ldr	r2, [r7, #16]
 8009a36:	fb02 f303 	mul.w	r3, r2, r3
 8009a3a:	ee07 3a90 	vmov	s15, r3
 8009a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f000 8111 	beq.w	8009c70 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	f000 8083 	beq.w	8009b5c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	f200 80a1 	bhi.w	8009ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d003      	beq.n	8009a6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d056      	beq.n	8009b18 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009a6a:	e099      	b.n	8009ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a6c:	4b88      	ldr	r3, [pc, #544]	@ (8009c90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f003 0320 	and.w	r3, r3, #32
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d02d      	beq.n	8009ad4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a78:	4b85      	ldr	r3, [pc, #532]	@ (8009c90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	08db      	lsrs	r3, r3, #3
 8009a7e:	f003 0303 	and.w	r3, r3, #3
 8009a82:	4a84      	ldr	r2, [pc, #528]	@ (8009c94 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009a84:	fa22 f303 	lsr.w	r3, r2, r3
 8009a88:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	ee07 3a90 	vmov	s15, r3
 8009a90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	ee07 3a90 	vmov	s15, r3
 8009a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aa2:	4b7b      	ldr	r3, [pc, #492]	@ (8009c90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aaa:	ee07 3a90 	vmov	s15, r3
 8009aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ab6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009c98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ace:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009ad2:	e087      	b.n	8009be4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	ee07 3a90 	vmov	s15, r3
 8009ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ade:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009c9c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ae6:	4b6a      	ldr	r3, [pc, #424]	@ (8009c90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aee:	ee07 3a90 	vmov	s15, r3
 8009af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009afa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009c98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b16:	e065      	b.n	8009be4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	ee07 3a90 	vmov	s15, r3
 8009b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b22:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b2a:	4b59      	ldr	r3, [pc, #356]	@ (8009c90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b32:	ee07 3a90 	vmov	s15, r3
 8009b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b3e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009c98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b5a:	e043      	b.n	8009be4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	ee07 3a90 	vmov	s15, r3
 8009b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b66:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b6e:	4b48      	ldr	r3, [pc, #288]	@ (8009c90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b76:	ee07 3a90 	vmov	s15, r3
 8009b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b82:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009c98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b9e:	e021      	b.n	8009be4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	ee07 3a90 	vmov	s15, r3
 8009ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009baa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bb2:	4b37      	ldr	r3, [pc, #220]	@ (8009c90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bba:	ee07 3a90 	vmov	s15, r3
 8009bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bc6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009c98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009be2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009be4:	4b2a      	ldr	r3, [pc, #168]	@ (8009c90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009be8:	0a5b      	lsrs	r3, r3, #9
 8009bea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bee:	ee07 3a90 	vmov	s15, r3
 8009bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009bfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c0a:	ee17 2a90 	vmov	r2, s15
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009c12:	4b1f      	ldr	r3, [pc, #124]	@ (8009c90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c16:	0c1b      	lsrs	r3, r3, #16
 8009c18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c1c:	ee07 3a90 	vmov	s15, r3
 8009c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c38:	ee17 2a90 	vmov	r2, s15
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009c40:	4b13      	ldr	r3, [pc, #76]	@ (8009c90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c44:	0e1b      	lsrs	r3, r3, #24
 8009c46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c4a:	ee07 3a90 	vmov	s15, r3
 8009c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c66:	ee17 2a90 	vmov	r2, s15
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009c6e:	e008      	b.n	8009c82 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	609a      	str	r2, [r3, #8]
}
 8009c82:	bf00      	nop
 8009c84:	3724      	adds	r7, #36	@ 0x24
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	58024400 	.word	0x58024400
 8009c94:	03d09000 	.word	0x03d09000
 8009c98:	46000000 	.word	0x46000000
 8009c9c:	4c742400 	.word	0x4c742400
 8009ca0:	4a742400 	.word	0x4a742400
 8009ca4:	4bbebc20 	.word	0x4bbebc20

08009ca8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b089      	sub	sp, #36	@ 0x24
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009cb0:	4ba0      	ldr	r3, [pc, #640]	@ (8009f34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cb4:	f003 0303 	and.w	r3, r3, #3
 8009cb8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009cba:	4b9e      	ldr	r3, [pc, #632]	@ (8009f34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cbe:	091b      	lsrs	r3, r3, #4
 8009cc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009cc4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009cc6:	4b9b      	ldr	r3, [pc, #620]	@ (8009f34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cca:	f003 0301 	and.w	r3, r3, #1
 8009cce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009cd0:	4b98      	ldr	r3, [pc, #608]	@ (8009f34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cd4:	08db      	lsrs	r3, r3, #3
 8009cd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009cda:	693a      	ldr	r2, [r7, #16]
 8009cdc:	fb02 f303 	mul.w	r3, r2, r3
 8009ce0:	ee07 3a90 	vmov	s15, r3
 8009ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ce8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f000 8111 	beq.w	8009f16 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	f000 8083 	beq.w	8009e02 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	2b02      	cmp	r3, #2
 8009d00:	f200 80a1 	bhi.w	8009e46 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009d04:	69bb      	ldr	r3, [r7, #24]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d003      	beq.n	8009d12 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009d0a:	69bb      	ldr	r3, [r7, #24]
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d056      	beq.n	8009dbe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009d10:	e099      	b.n	8009e46 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d12:	4b88      	ldr	r3, [pc, #544]	@ (8009f34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 0320 	and.w	r3, r3, #32
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d02d      	beq.n	8009d7a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d1e:	4b85      	ldr	r3, [pc, #532]	@ (8009f34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	08db      	lsrs	r3, r3, #3
 8009d24:	f003 0303 	and.w	r3, r3, #3
 8009d28:	4a83      	ldr	r2, [pc, #524]	@ (8009f38 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d2e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	ee07 3a90 	vmov	s15, r3
 8009d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	ee07 3a90 	vmov	s15, r3
 8009d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d48:	4b7a      	ldr	r3, [pc, #488]	@ (8009f34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d50:	ee07 3a90 	vmov	s15, r3
 8009d54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d58:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d5c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009f3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d74:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009d78:	e087      	b.n	8009e8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	ee07 3a90 	vmov	s15, r3
 8009d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d84:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009f40 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009d88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d8c:	4b69      	ldr	r3, [pc, #420]	@ (8009f34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d94:	ee07 3a90 	vmov	s15, r3
 8009d98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009da0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009f3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009da4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009da8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009db0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009db8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dbc:	e065      	b.n	8009e8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	ee07 3a90 	vmov	s15, r3
 8009dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dc8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009f44 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009dcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dd0:	4b58      	ldr	r3, [pc, #352]	@ (8009f34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dd8:	ee07 3a90 	vmov	s15, r3
 8009ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009de0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009de4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009f3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009de8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009df0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009df4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dfc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e00:	e043      	b.n	8009e8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	ee07 3a90 	vmov	s15, r3
 8009e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e0c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009f48 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009e10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e14:	4b47      	ldr	r3, [pc, #284]	@ (8009f34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e1c:	ee07 3a90 	vmov	s15, r3
 8009e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e24:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e28:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009f3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e44:	e021      	b.n	8009e8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	ee07 3a90 	vmov	s15, r3
 8009e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e50:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009f40 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009e54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e58:	4b36      	ldr	r3, [pc, #216]	@ (8009f34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e60:	ee07 3a90 	vmov	s15, r3
 8009e64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e68:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e6c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009f3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e88:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009e8a:	4b2a      	ldr	r3, [pc, #168]	@ (8009f34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e8e:	0a5b      	lsrs	r3, r3, #9
 8009e90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e94:	ee07 3a90 	vmov	s15, r3
 8009e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ea0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ea4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eb0:	ee17 2a90 	vmov	r2, s15
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8009f34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ebc:	0c1b      	lsrs	r3, r3, #16
 8009ebe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ec2:	ee07 3a90 	vmov	s15, r3
 8009ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ece:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ed2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ede:	ee17 2a90 	vmov	r2, s15
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009ee6:	4b13      	ldr	r3, [pc, #76]	@ (8009f34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eea:	0e1b      	lsrs	r3, r3, #24
 8009eec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ef0:	ee07 3a90 	vmov	s15, r3
 8009ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ef8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009efc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f00:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f0c:	ee17 2a90 	vmov	r2, s15
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009f14:	e008      	b.n	8009f28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	609a      	str	r2, [r3, #8]
}
 8009f28:	bf00      	nop
 8009f2a:	3724      	adds	r7, #36	@ 0x24
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr
 8009f34:	58024400 	.word	0x58024400
 8009f38:	03d09000 	.word	0x03d09000
 8009f3c:	46000000 	.word	0x46000000
 8009f40:	4c742400 	.word	0x4c742400
 8009f44:	4a742400 	.word	0x4a742400
 8009f48:	4bbebc20 	.word	0x4bbebc20

08009f4c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f56:	2300      	movs	r3, #0
 8009f58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f5a:	4b53      	ldr	r3, [pc, #332]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 8009f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f5e:	f003 0303 	and.w	r3, r3, #3
 8009f62:	2b03      	cmp	r3, #3
 8009f64:	d101      	bne.n	8009f6a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	e099      	b.n	800a09e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009f6a:	4b4f      	ldr	r3, [pc, #316]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a4e      	ldr	r2, [pc, #312]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 8009f70:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009f74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f76:	f7f7 fba5 	bl	80016c4 <HAL_GetTick>
 8009f7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f7c:	e008      	b.n	8009f90 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009f7e:	f7f7 fba1 	bl	80016c4 <HAL_GetTick>
 8009f82:	4602      	mov	r2, r0
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	2b02      	cmp	r3, #2
 8009f8a:	d901      	bls.n	8009f90 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	e086      	b.n	800a09e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f90:	4b45      	ldr	r3, [pc, #276]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1f0      	bne.n	8009f7e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009f9c:	4b42      	ldr	r3, [pc, #264]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 8009f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	031b      	lsls	r3, r3, #12
 8009faa:	493f      	ldr	r1, [pc, #252]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 8009fac:	4313      	orrs	r3, r2
 8009fae:	628b      	str	r3, [r1, #40]	@ 0x28
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	025b      	lsls	r3, r3, #9
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	431a      	orrs	r2, r3
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	041b      	lsls	r3, r3, #16
 8009fce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009fd2:	431a      	orrs	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	691b      	ldr	r3, [r3, #16]
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	061b      	lsls	r3, r3, #24
 8009fdc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009fe0:	4931      	ldr	r1, [pc, #196]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009fe6:	4b30      	ldr	r3, [pc, #192]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 8009fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	695b      	ldr	r3, [r3, #20]
 8009ff2:	492d      	ldr	r1, [pc, #180]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009ff8:	4b2b      	ldr	r3, [pc, #172]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 8009ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ffc:	f023 0220 	bic.w	r2, r3, #32
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	699b      	ldr	r3, [r3, #24]
 800a004:	4928      	ldr	r1, [pc, #160]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 800a006:	4313      	orrs	r3, r2
 800a008:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a00a:	4b27      	ldr	r3, [pc, #156]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 800a00c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a00e:	4a26      	ldr	r2, [pc, #152]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 800a010:	f023 0310 	bic.w	r3, r3, #16
 800a014:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a016:	4b24      	ldr	r3, [pc, #144]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 800a018:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a01a:	4b24      	ldr	r3, [pc, #144]	@ (800a0ac <RCCEx_PLL2_Config+0x160>)
 800a01c:	4013      	ands	r3, r2
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	69d2      	ldr	r2, [r2, #28]
 800a022:	00d2      	lsls	r2, r2, #3
 800a024:	4920      	ldr	r1, [pc, #128]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 800a026:	4313      	orrs	r3, r2
 800a028:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a02a:	4b1f      	ldr	r3, [pc, #124]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 800a02c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a02e:	4a1e      	ldr	r2, [pc, #120]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 800a030:	f043 0310 	orr.w	r3, r3, #16
 800a034:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d106      	bne.n	800a04a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a03c:	4b1a      	ldr	r3, [pc, #104]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 800a03e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a040:	4a19      	ldr	r2, [pc, #100]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 800a042:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a046:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a048:	e00f      	b.n	800a06a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d106      	bne.n	800a05e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a050:	4b15      	ldr	r3, [pc, #84]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 800a052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a054:	4a14      	ldr	r2, [pc, #80]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 800a056:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a05a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a05c:	e005      	b.n	800a06a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a05e:	4b12      	ldr	r3, [pc, #72]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 800a060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a062:	4a11      	ldr	r2, [pc, #68]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 800a064:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a068:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a06a:	4b0f      	ldr	r3, [pc, #60]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a0e      	ldr	r2, [pc, #56]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 800a070:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a074:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a076:	f7f7 fb25 	bl	80016c4 <HAL_GetTick>
 800a07a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a07c:	e008      	b.n	800a090 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a07e:	f7f7 fb21 	bl	80016c4 <HAL_GetTick>
 800a082:	4602      	mov	r2, r0
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d901      	bls.n	800a090 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a08c:	2303      	movs	r3, #3
 800a08e:	e006      	b.n	800a09e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a090:	4b05      	ldr	r3, [pc, #20]	@ (800a0a8 <RCCEx_PLL2_Config+0x15c>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d0f0      	beq.n	800a07e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3710      	adds	r7, #16
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	58024400 	.word	0x58024400
 800a0ac:	ffff0007 	.word	0xffff0007

0800a0b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a0be:	4b53      	ldr	r3, [pc, #332]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a0c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0c2:	f003 0303 	and.w	r3, r3, #3
 800a0c6:	2b03      	cmp	r3, #3
 800a0c8:	d101      	bne.n	800a0ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e099      	b.n	800a202 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a0ce:	4b4f      	ldr	r3, [pc, #316]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a4e      	ldr	r2, [pc, #312]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a0d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a0d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0da:	f7f7 faf3 	bl	80016c4 <HAL_GetTick>
 800a0de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a0e0:	e008      	b.n	800a0f4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a0e2:	f7f7 faef 	bl	80016c4 <HAL_GetTick>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	1ad3      	subs	r3, r2, r3
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	d901      	bls.n	800a0f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	e086      	b.n	800a202 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a0f4:	4b45      	ldr	r3, [pc, #276]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1f0      	bne.n	800a0e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a100:	4b42      	ldr	r3, [pc, #264]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a104:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	051b      	lsls	r3, r3, #20
 800a10e:	493f      	ldr	r1, [pc, #252]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a110:	4313      	orrs	r3, r2
 800a112:	628b      	str	r3, [r1, #40]	@ 0x28
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	3b01      	subs	r3, #1
 800a11a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	3b01      	subs	r3, #1
 800a124:	025b      	lsls	r3, r3, #9
 800a126:	b29b      	uxth	r3, r3
 800a128:	431a      	orrs	r2, r3
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	3b01      	subs	r3, #1
 800a130:	041b      	lsls	r3, r3, #16
 800a132:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a136:	431a      	orrs	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	3b01      	subs	r3, #1
 800a13e:	061b      	lsls	r3, r3, #24
 800a140:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a144:	4931      	ldr	r1, [pc, #196]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a146:	4313      	orrs	r3, r2
 800a148:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a14a:	4b30      	ldr	r3, [pc, #192]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a14c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a14e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	695b      	ldr	r3, [r3, #20]
 800a156:	492d      	ldr	r1, [pc, #180]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a158:	4313      	orrs	r3, r2
 800a15a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a15c:	4b2b      	ldr	r3, [pc, #172]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a15e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a160:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	699b      	ldr	r3, [r3, #24]
 800a168:	4928      	ldr	r1, [pc, #160]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a16a:	4313      	orrs	r3, r2
 800a16c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a16e:	4b27      	ldr	r3, [pc, #156]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a172:	4a26      	ldr	r2, [pc, #152]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a174:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a178:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a17a:	4b24      	ldr	r3, [pc, #144]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a17c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a17e:	4b24      	ldr	r3, [pc, #144]	@ (800a210 <RCCEx_PLL3_Config+0x160>)
 800a180:	4013      	ands	r3, r2
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	69d2      	ldr	r2, [r2, #28]
 800a186:	00d2      	lsls	r2, r2, #3
 800a188:	4920      	ldr	r1, [pc, #128]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a18a:	4313      	orrs	r3, r2
 800a18c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a18e:	4b1f      	ldr	r3, [pc, #124]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a192:	4a1e      	ldr	r2, [pc, #120]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a194:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a198:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d106      	bne.n	800a1ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a1a0:	4b1a      	ldr	r3, [pc, #104]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a1a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1a4:	4a19      	ldr	r2, [pc, #100]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a1a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a1aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a1ac:	e00f      	b.n	800a1ce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d106      	bne.n	800a1c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a1b4:	4b15      	ldr	r3, [pc, #84]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a1b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1b8:	4a14      	ldr	r2, [pc, #80]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a1ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a1be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a1c0:	e005      	b.n	800a1ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a1c2:	4b12      	ldr	r3, [pc, #72]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1c6:	4a11      	ldr	r2, [pc, #68]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a1c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a1cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a1ce:	4b0f      	ldr	r3, [pc, #60]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a0e      	ldr	r2, [pc, #56]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a1d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1da:	f7f7 fa73 	bl	80016c4 <HAL_GetTick>
 800a1de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a1e0:	e008      	b.n	800a1f4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a1e2:	f7f7 fa6f 	bl	80016c4 <HAL_GetTick>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	2b02      	cmp	r3, #2
 800a1ee:	d901      	bls.n	800a1f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	e006      	b.n	800a202 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a1f4:	4b05      	ldr	r3, [pc, #20]	@ (800a20c <RCCEx_PLL3_Config+0x15c>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d0f0      	beq.n	800a1e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a200:	7bfb      	ldrb	r3, [r7, #15]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	58024400 	.word	0x58024400
 800a210:	ffff0007 	.word	0xffff0007

0800a214 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d101      	bne.n	800a226 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	e10f      	b.n	800a446 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a87      	ldr	r2, [pc, #540]	@ (800a450 <HAL_SPI_Init+0x23c>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d00f      	beq.n	800a256 <HAL_SPI_Init+0x42>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a86      	ldr	r2, [pc, #536]	@ (800a454 <HAL_SPI_Init+0x240>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d00a      	beq.n	800a256 <HAL_SPI_Init+0x42>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a84      	ldr	r2, [pc, #528]	@ (800a458 <HAL_SPI_Init+0x244>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d005      	beq.n	800a256 <HAL_SPI_Init+0x42>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	2b0f      	cmp	r3, #15
 800a250:	d901      	bls.n	800a256 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	e0f7      	b.n	800a446 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 fe98 	bl	800af8c <SPI_GetPacketSize>
 800a25c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a7b      	ldr	r2, [pc, #492]	@ (800a450 <HAL_SPI_Init+0x23c>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d00c      	beq.n	800a282 <HAL_SPI_Init+0x6e>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a79      	ldr	r2, [pc, #484]	@ (800a454 <HAL_SPI_Init+0x240>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d007      	beq.n	800a282 <HAL_SPI_Init+0x6e>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a78      	ldr	r2, [pc, #480]	@ (800a458 <HAL_SPI_Init+0x244>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d002      	beq.n	800a282 <HAL_SPI_Init+0x6e>
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2b08      	cmp	r3, #8
 800a280:	d811      	bhi.n	800a2a6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a286:	4a72      	ldr	r2, [pc, #456]	@ (800a450 <HAL_SPI_Init+0x23c>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d009      	beq.n	800a2a0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a70      	ldr	r2, [pc, #448]	@ (800a454 <HAL_SPI_Init+0x240>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d004      	beq.n	800a2a0 <HAL_SPI_Init+0x8c>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a6f      	ldr	r2, [pc, #444]	@ (800a458 <HAL_SPI_Init+0x244>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d104      	bne.n	800a2aa <HAL_SPI_Init+0x96>
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2b10      	cmp	r3, #16
 800a2a4:	d901      	bls.n	800a2aa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e0cd      	b.n	800a446 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d106      	bne.n	800a2c4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f7f6 fee6 	bl	8001090 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2202      	movs	r2, #2
 800a2c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f022 0201 	bic.w	r2, r2, #1
 800a2da:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a2e6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	699b      	ldr	r3, [r3, #24]
 800a2ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a2f0:	d119      	bne.n	800a326 <HAL_SPI_Init+0x112>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a2fa:	d103      	bne.n	800a304 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a300:	2b00      	cmp	r3, #0
 800a302:	d008      	beq.n	800a316 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10c      	bne.n	800a326 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a310:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a314:	d107      	bne.n	800a326 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a324:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d00f      	beq.n	800a352 <HAL_SPI_Init+0x13e>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	2b06      	cmp	r3, #6
 800a338:	d90b      	bls.n	800a352 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	430a      	orrs	r2, r1
 800a34e:	601a      	str	r2, [r3, #0]
 800a350:	e007      	b.n	800a362 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a360:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	69da      	ldr	r2, [r3, #28]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a36a:	431a      	orrs	r2, r3
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	431a      	orrs	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a374:	ea42 0103 	orr.w	r1, r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	68da      	ldr	r2, [r3, #12]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	430a      	orrs	r2, r1
 800a382:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a38c:	431a      	orrs	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a392:	431a      	orrs	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	699b      	ldr	r3, [r3, #24]
 800a398:	431a      	orrs	r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	431a      	orrs	r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	695b      	ldr	r3, [r3, #20]
 800a3a4:	431a      	orrs	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6a1b      	ldr	r3, [r3, #32]
 800a3aa:	431a      	orrs	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	431a      	orrs	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3b6:	431a      	orrs	r2, r3
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	431a      	orrs	r2, r3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3c2:	ea42 0103 	orr.w	r1, r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	430a      	orrs	r2, r1
 800a3d0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d113      	bne.n	800a402 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a3ec:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a400:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f022 0201 	bic.w	r2, r2, #1
 800a410:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00a      	beq.n	800a434 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	430a      	orrs	r2, r1
 800a432:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	40013000 	.word	0x40013000
 800a454:	40003800 	.word	0x40003800
 800a458:	40003c00 	.word	0x40003c00

0800a45c <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	4613      	mov	r3, r2
 800a468:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b01      	cmp	r3, #1
 800a474:	d001      	beq.n	800a47a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800a476:	2302      	movs	r3, #2
 800a478:	e126      	b.n	800a6c8 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d002      	beq.n	800a486 <HAL_SPI_Transmit_DMA+0x2a>
 800a480:	88fb      	ldrh	r3, [r7, #6]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d101      	bne.n	800a48a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e11e      	b.n	800a6c8 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a490:	2b01      	cmp	r3, #1
 800a492:	d101      	bne.n	800a498 <HAL_SPI_Transmit_DMA+0x3c>
 800a494:	2302      	movs	r3, #2
 800a496:	e117      	b.n	800a6c8 <HAL_SPI_Transmit_DMA+0x26c>
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2203      	movs	r2, #3
 800a4a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	88fa      	ldrh	r2, [r7, #6]
 800a4ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	88fa      	ldrh	r2, [r7, #6]
 800a4c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a4f0:	d108      	bne.n	800a504 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a500:	601a      	str	r2, [r3, #0]
 800a502:	e009      	b.n	800a518 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a516:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	2b0f      	cmp	r3, #15
 800a51e:	d905      	bls.n	800a52c <HAL_SPI_Transmit_DMA+0xd0>
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a524:	699b      	ldr	r3, [r3, #24]
 800a526:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a52a:	d10f      	bne.n	800a54c <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a530:	2b07      	cmp	r3, #7
 800a532:	d911      	bls.n	800a558 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a538:	699b      	ldr	r3, [r3, #24]
 800a53a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a53e:	d00b      	beq.n	800a558 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a544:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a546:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a54a:	d005      	beq.n	800a558 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2200      	movs	r2, #0
 800a550:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800a554:	2301      	movs	r3, #1
 800a556:	e0b7      	b.n	800a6c8 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	2b07      	cmp	r3, #7
 800a55e:	d820      	bhi.n	800a5a2 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a564:	699b      	ldr	r3, [r3, #24]
 800a566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a56a:	d109      	bne.n	800a580 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a572:	b29b      	uxth	r3, r3
 800a574:	3301      	adds	r3, #1
 800a576:	105b      	asrs	r3, r3, #1
 800a578:	b29a      	uxth	r2, r3
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a58a:	d11e      	bne.n	800a5ca <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a592:	b29b      	uxth	r3, r3
 800a594:	3303      	adds	r3, #3
 800a596:	109b      	asrs	r3, r3, #2
 800a598:	b29a      	uxth	r2, r3
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a5a0:	e013      	b.n	800a5ca <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	2b0f      	cmp	r3, #15
 800a5a8:	d80f      	bhi.n	800a5ca <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5ae:	699b      	ldr	r3, [r3, #24]
 800a5b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a5b4:	d109      	bne.n	800a5ca <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	3301      	adds	r3, #1
 800a5c0:	105b      	asrs	r3, r3, #1
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5ce:	4a40      	ldr	r2, [pc, #256]	@ (800a6d0 <HAL_SPI_Transmit_DMA+0x274>)
 800a5d0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5d6:	4a3f      	ldr	r2, [pc, #252]	@ (800a6d4 <HAL_SPI_Transmit_DMA+0x278>)
 800a5d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5de:	4a3e      	ldr	r2, [pc, #248]	@ (800a6d8 <HAL_SPI_Transmit_DMA+0x27c>)
 800a5e0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	689a      	ldr	r2, [r3, #8]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a5f8:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a602:	4619      	mov	r1, r3
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	3320      	adds	r3, #32
 800a60a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a612:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a614:	f7f9 fde0 	bl	80041d8 <HAL_DMA_Start_IT>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d011      	beq.n	800a642 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a624:	f043 0210 	orr.w	r2, r3, #16
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2201      	movs	r2, #1
 800a632:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e042      	b.n	800a6c8 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a646:	69db      	ldr	r3, [r3, #28]
 800a648:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a64c:	d108      	bne.n	800a660 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	6859      	ldr	r1, [r3, #4]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	4b20      	ldr	r3, [pc, #128]	@ (800a6dc <HAL_SPI_Transmit_DMA+0x280>)
 800a65a:	400b      	ands	r3, r1
 800a65c:	6053      	str	r3, [r2, #4]
 800a65e:	e009      	b.n	800a674 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	685a      	ldr	r2, [r3, #4]
 800a666:	4b1d      	ldr	r3, [pc, #116]	@ (800a6dc <HAL_SPI_Transmit_DMA+0x280>)
 800a668:	4013      	ands	r3, r2
 800a66a:	88f9      	ldrh	r1, [r7, #6]
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	6812      	ldr	r2, [r2, #0]
 800a670:	430b      	orrs	r3, r1
 800a672:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	689a      	ldr	r2, [r3, #8]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a682:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	691a      	ldr	r2, [r3, #16]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 800a692:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f042 0201 	orr.w	r2, r2, #1
 800a6a2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a6ac:	d107      	bne.n	800a6be <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6bc:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3710      	adds	r7, #16
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	0800acef 	.word	0x0800acef
 800a6d4:	0800aca9 	.word	0x0800aca9
 800a6d8:	0800ad0b 	.word	0x0800ad0b
 800a6dc:	ffff0000 	.word	0xffff0000

0800a6e0 <HAL_SPI_Abort>:
  *          + Set handle State to READY.
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;

  __IO uint32_t count;

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d101      	bne.n	800a6f6 <HAL_SPI_Abort+0x16>
 800a6f2:	2302      	movs	r3, #2
 800a6f4:	e0d9      	b.n	800a8aa <HAL_SPI_Abort+0x1ca>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set hspi->state to aborting to avoid any interaction */
  hspi->State = HAL_SPI_STATE_ABORT;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2207      	movs	r2, #7
 800a702:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Initialized local variable  */
  errorcode = HAL_OK;
 800a706:	2300      	movs	r3, #0
 800a708:	73fb      	strb	r3, [r7, #15]
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800a70a:	4b6a      	ldr	r3, [pc, #424]	@ (800a8b4 <HAL_SPI_Abort+0x1d4>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a6a      	ldr	r2, [pc, #424]	@ (800a8b8 <HAL_SPI_Abort+0x1d8>)
 800a710:	fba2 2303 	umull	r2, r3, r2, r3
 800a714:	0a5b      	lsrs	r3, r3, #9
 800a716:	2264      	movs	r2, #100	@ 0x64
 800a718:	fb02 f303 	mul.w	r3, r2, r3
 800a71c:	60bb      	str	r3, [r7, #8]

  /* If master communication on going, make sure current frame is done before closing the connection */
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a72c:	d15b      	bne.n	800a7e6 <HAL_SPI_Abort+0x106>
  {
    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	691a      	ldr	r2, [r3, #16]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f022 0208 	bic.w	r2, r2, #8
 800a73c:	611a      	str	r2, [r3, #16]
    do
    {
      count--;
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	3b01      	subs	r3, #1
 800a742:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d108      	bne.n	800a75c <HAL_SPI_Abort+0x7c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a750:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800a75a:	e006      	b.n	800a76a <HAL_SPI_Abort+0x8a>
      }
    } while (HAL_IS_BIT_SET(hspi->Instance->IER, SPI_IT_EOT));
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	691b      	ldr	r3, [r3, #16]
 800a762:	f003 0308 	and.w	r3, r3, #8
 800a766:	2b08      	cmp	r3, #8
 800a768:	d0e9      	beq.n	800a73e <HAL_SPI_Abort+0x5e>

    /* Request a Suspend transfer */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a778:	601a      	str	r2, [r3, #0]
    do
    {
      count--;
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	3b01      	subs	r3, #1
 800a77e:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d108      	bne.n	800a798 <HAL_SPI_Abort+0xb8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a78c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800a796:	e007      	b.n	800a7a8 <HAL_SPI_Abort+0xc8>
      }
    } while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a7a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7a6:	d0e8      	beq.n	800a77a <HAL_SPI_Abort+0x9a>

    /* Clear SUSP flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	699a      	ldr	r2, [r3, #24]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a7b6:	619a      	str	r2, [r3, #24]
    do
    {
      count--;
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	3b01      	subs	r3, #1
 800a7bc:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d108      	bne.n	800a7d6 <HAL_SPI_Abort+0xf6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800a7d4:	e007      	b.n	800a7e6 <HAL_SPI_Abort+0x106>
      }
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_SUSP));
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	695b      	ldr	r3, [r3, #20]
 800a7dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a7e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7e4:	d0e8      	beq.n	800a7b8 <HAL_SPI_Abort+0xd8>
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a7f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7f4:	d11b      	bne.n	800a82e <HAL_SPI_Abort+0x14e>
  {
    if (hspi->hdmatx != NULL)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d017      	beq.n	800a82e <HAL_SPI_Abort+0x14e>
    {
      /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
      hspi->hdmatx->XferAbortCallback = NULL;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a802:	2200      	movs	r2, #0
 800a804:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a80a:	4618      	mov	r0, r3
 800a80c:	f7f9 ff4e 	bl	80046ac <HAL_DMA_Abort>
 800a810:	4603      	mov	r3, r0
 800a812:	2b00      	cmp	r3, #0
 800a814:	d00b      	beq.n	800a82e <HAL_SPI_Abort+0x14e>
      {
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7fb fbd4 	bl	8005fc8 <HAL_DMA_GetError>
 800a820:	4603      	mov	r3, r0
 800a822:	2b20      	cmp	r3, #32
 800a824:	d103      	bne.n	800a82e <HAL_SPI_Abort+0x14e>
        {
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2240      	movs	r2, #64	@ 0x40
 800a82a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a838:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a83c:	d11b      	bne.n	800a876 <HAL_SPI_Abort+0x196>
  {
    if (hspi->hdmarx != NULL)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a842:	2b00      	cmp	r3, #0
 800a844:	d017      	beq.n	800a876 <HAL_SPI_Abort+0x196>
    {
      /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
      hspi->hdmarx->XferAbortCallback = NULL;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a84a:	2200      	movs	r2, #0
 800a84c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a852:	4618      	mov	r0, r3
 800a854:	f7f9 ff2a 	bl	80046ac <HAL_DMA_Abort>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00b      	beq.n	800a876 <HAL_SPI_Abort+0x196>
      {
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a862:	4618      	mov	r0, r3
 800a864:	f7fb fbb0 	bl	8005fc8 <HAL_DMA_GetError>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b20      	cmp	r3, #32
 800a86c:	d103      	bne.n	800a876 <HAL_SPI_Abort+0x196>
        {
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2240      	movs	r2, #64	@ 0x40
 800a872:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Proceed with abort procedure */
  SPI_AbortTransfer(hspi);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 fa84 	bl	800ad84 <SPI_AbortTransfer>

  /* Check error during Abort procedure */
  if (HAL_IS_BIT_SET(hspi->ErrorCode, HAL_SPI_ERROR_ABORT))
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a886:	2b40      	cmp	r3, #64	@ 0x40
 800a888:	d102      	bne.n	800a890 <HAL_SPI_Abort+0x1b0>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	73fb      	strb	r3, [r7, #15]
 800a88e:	e003      	b.n	800a898 <HAL_SPI_Abort+0x1b8>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2201      	movs	r2, #1
 800a89c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return errorcode;
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	24000000 	.word	0x24000000
 800a8b8:	057619f1 	.word	0x057619f1

0800a8bc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b08a      	sub	sp, #40	@ 0x28
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	691b      	ldr	r3, [r3, #16]
 800a8ca:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	695b      	ldr	r3, [r3, #20]
 800a8d2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a8d4:	6a3a      	ldr	r2, [r7, #32]
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	4013      	ands	r3, r2
 800a8da:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a8ee:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	3330      	adds	r3, #48	@ 0x30
 800a8f6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d010      	beq.n	800a924 <HAL_SPI_IRQHandler+0x68>
 800a902:	6a3b      	ldr	r3, [r7, #32]
 800a904:	f003 0308 	and.w	r3, r3, #8
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d00b      	beq.n	800a924 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	699a      	ldr	r2, [r3, #24]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a91a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 f9b9 	bl	800ac94 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800a922:	e192      	b.n	800ac4a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d113      	bne.n	800a956 <HAL_SPI_IRQHandler+0x9a>
 800a92e:	69bb      	ldr	r3, [r7, #24]
 800a930:	f003 0320 	and.w	r3, r3, #32
 800a934:	2b00      	cmp	r3, #0
 800a936:	d10e      	bne.n	800a956 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d009      	beq.n	800a956 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	4798      	blx	r3
    handled = 1UL;
 800a952:	2301      	movs	r3, #1
 800a954:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d10f      	bne.n	800a980 <HAL_SPI_IRQHandler+0xc4>
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	f003 0301 	and.w	r3, r3, #1
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00a      	beq.n	800a980 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a970:	2b00      	cmp	r3, #0
 800a972:	d105      	bne.n	800a980 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	4798      	blx	r3
    handled = 1UL;
 800a97c:	2301      	movs	r3, #1
 800a97e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a980:	69bb      	ldr	r3, [r7, #24]
 800a982:	f003 0320 	and.w	r3, r3, #32
 800a986:	2b00      	cmp	r3, #0
 800a988:	d10f      	bne.n	800a9aa <HAL_SPI_IRQHandler+0xee>
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	f003 0302 	and.w	r3, r3, #2
 800a990:	2b00      	cmp	r3, #0
 800a992:	d00a      	beq.n	800a9aa <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d105      	bne.n	800a9aa <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	4798      	blx	r3
    handled = 1UL;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f040 8147 	bne.w	800ac40 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	f003 0308 	and.w	r3, r3, #8
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f000 808b 	beq.w	800aad4 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	699a      	ldr	r2, [r3, #24]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f042 0208 	orr.w	r2, r2, #8
 800a9cc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	699a      	ldr	r2, [r3, #24]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f042 0210 	orr.w	r2, r2, #16
 800a9dc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	699a      	ldr	r2, [r3, #24]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a9ec:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	691a      	ldr	r2, [r3, #16]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f022 0208 	bic.w	r2, r2, #8
 800a9fc:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d13d      	bne.n	800aa88 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800aa0c:	e036      	b.n	800aa7c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	2b0f      	cmp	r3, #15
 800aa14:	d90b      	bls.n	800aa2e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa1e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800aa20:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa26:	1d1a      	adds	r2, r3, #4
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	665a      	str	r2, [r3, #100]	@ 0x64
 800aa2c:	e01d      	b.n	800aa6a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	2b07      	cmp	r3, #7
 800aa34:	d90b      	bls.n	800aa4e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa3a:	68fa      	ldr	r2, [r7, #12]
 800aa3c:	8812      	ldrh	r2, [r2, #0]
 800aa3e:	b292      	uxth	r2, r2
 800aa40:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa46:	1c9a      	adds	r2, r3, #2
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	665a      	str	r2, [r3, #100]	@ 0x64
 800aa4c:	e00d      	b.n	800aa6a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa5a:	7812      	ldrb	r2, [r2, #0]
 800aa5c:	b2d2      	uxtb	r2, r2
 800aa5e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa64:	1c5a      	adds	r2, r3, #1
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	3b01      	subs	r3, #1
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d1c2      	bne.n	800aa0e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 f9df 	bl	800ae4c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2201      	movs	r2, #1
 800aa92:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d003      	beq.n	800aaa8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f7f5 fe51 	bl	8000748 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800aaa6:	e0d0      	b.n	800ac4a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800aaa8:	7cfb      	ldrb	r3, [r7, #19]
 800aaaa:	2b05      	cmp	r3, #5
 800aaac:	d103      	bne.n	800aab6 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 f8dc 	bl	800ac6c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800aab4:	e0c6      	b.n	800ac44 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800aab6:	7cfb      	ldrb	r3, [r7, #19]
 800aab8:	2b04      	cmp	r3, #4
 800aaba:	d103      	bne.n	800aac4 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 f8cb 	bl	800ac58 <HAL_SPI_RxCpltCallback>
    return;
 800aac2:	e0bf      	b.n	800ac44 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800aac4:	7cfb      	ldrb	r3, [r7, #19]
 800aac6:	2b03      	cmp	r3, #3
 800aac8:	f040 80bc 	bne.w	800ac44 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f7f5 fe29 	bl	8000724 <HAL_SPI_TxCpltCallback>
    return;
 800aad2:	e0b7      	b.n	800ac44 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800aad4:	69bb      	ldr	r3, [r7, #24]
 800aad6:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800aada:	2b00      	cmp	r3, #0
 800aadc:	f000 80b5 	beq.w	800ac4a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00f      	beq.n	800ab0a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aaf0:	f043 0204 	orr.w	r2, r3, #4
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	699a      	ldr	r2, [r3, #24]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab08:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00f      	beq.n	800ab34 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab1a:	f043 0201 	orr.w	r2, r3, #1
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	699a      	ldr	r2, [r3, #24]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ab32:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00f      	beq.n	800ab5e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab44:	f043 0208 	orr.w	r2, r3, #8
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	699a      	ldr	r2, [r3, #24]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ab5c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	f003 0320 	and.w	r3, r3, #32
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d00f      	beq.n	800ab88 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab6e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	699a      	ldr	r2, [r3, #24]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f042 0220 	orr.w	r2, r2, #32
 800ab86:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d05a      	beq.n	800ac48 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f022 0201 	bic.w	r2, r2, #1
 800aba0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	6919      	ldr	r1, [r3, #16]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	4b28      	ldr	r3, [pc, #160]	@ (800ac50 <HAL_SPI_IRQHandler+0x394>)
 800abae:	400b      	ands	r3, r1
 800abb0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800abb8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800abbc:	d138      	bne.n	800ac30 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	689a      	ldr	r2, [r3, #8]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800abcc:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d013      	beq.n	800abfe <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800abda:	4a1e      	ldr	r2, [pc, #120]	@ (800ac54 <HAL_SPI_IRQHandler+0x398>)
 800abdc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7fa f880 	bl	8004ce8 <HAL_DMA_Abort_IT>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d007      	beq.n	800abfe <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abf4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d020      	beq.n	800ac48 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac0a:	4a12      	ldr	r2, [pc, #72]	@ (800ac54 <HAL_SPI_IRQHandler+0x398>)
 800ac0c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fa f868 	bl	8004ce8 <HAL_DMA_Abort_IT>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d014      	beq.n	800ac48 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac24:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ac2e:	e00b      	b.n	800ac48 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f7f5 fd85 	bl	8000748 <HAL_SPI_ErrorCallback>
    return;
 800ac3e:	e003      	b.n	800ac48 <HAL_SPI_IRQHandler+0x38c>
    return;
 800ac40:	bf00      	nop
 800ac42:	e002      	b.n	800ac4a <HAL_SPI_IRQHandler+0x38e>
    return;
 800ac44:	bf00      	nop
 800ac46:	e000      	b.n	800ac4a <HAL_SPI_IRQHandler+0x38e>
    return;
 800ac48:	bf00      	nop
  }
}
 800ac4a:	3728      	adds	r7, #40	@ 0x28
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	fffffc94 	.word	0xfffffc94
 800ac54:	0800ad51 	.word	0x0800ad51

0800ac58 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800ac60:	bf00      	nop
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800ac74:	bf00      	nop
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800ac88:	bf00      	nop
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800ac9c:	bf00      	nop
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acb4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	2b07      	cmp	r3, #7
 800acc0:	d011      	beq.n	800ace6 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800acc6:	69db      	ldr	r3, [r3, #28]
 800acc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800accc:	d103      	bne.n	800acd6 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800acce:	68f8      	ldr	r0, [r7, #12]
 800acd0:	f7f5 fd28 	bl	8000724 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800acd4:	e007      	b.n	800ace6 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	691a      	ldr	r2, [r3, #16]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f042 0208 	orr.w	r2, r2, #8
 800ace4:	611a      	str	r2, [r3, #16]
}
 800ace6:	bf00      	nop
 800ace8:	3710      	adds	r7, #16
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b084      	sub	sp, #16
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acfa:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f7ff ffbf 	bl	800ac80 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad02:	bf00      	nop
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b084      	sub	sp, #16
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad16:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f7fb f955 	bl	8005fc8 <HAL_DMA_GetError>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	d011      	beq.n	800ad48 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800ad24:	68f8      	ldr	r0, [r7, #12]
 800ad26:	f000 f891 	bl	800ae4c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad30:	f043 0210 	orr.w	r2, r3, #16
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f7f5 fd00 	bl	8000748 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800ad48:	bf00      	nop
 800ad4a:	3710      	adds	r7, #16
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad5c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2201      	movs	r2, #1
 800ad72:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f7f5 fce6 	bl	8000748 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad7c:	bf00      	nop
 800ad7e:	3710      	adds	r7, #16
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <SPI_AbortTransfer>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f022 0201 	bic.w	r2, r2, #1
 800ad9a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	6919      	ldr	r1, [r3, #16]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	4b28      	ldr	r3, [pc, #160]	@ (800ae48 <SPI_AbortTransfer+0xc4>)
 800ada8:	400b      	ands	r3, r1
 800adaa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Clear the Status flags in the SR register */
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	699a      	ldr	r2, [r3, #24]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f042 0208 	orr.w	r2, r2, #8
 800adba:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	699a      	ldr	r2, [r3, #24]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f042 0210 	orr.w	r2, r2, #16
 800adca:	619a      	str	r2, [r3, #24]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	689a      	ldr	r2, [r3, #8]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800adda:	609a      	str	r2, [r3, #8]

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	699a      	ldr	r2, [r3, #24]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800adea:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	699a      	ldr	r2, [r3, #24]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f042 0220 	orr.w	r2, r2, #32
 800adfa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	699a      	ldr	r2, [r3, #24]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ae0a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	699a      	ldr	r2, [r3, #24]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae1a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	699a      	ldr	r2, [r3, #24]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae2a:	619a      	str	r2, [r3, #24]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800ae3c:	bf00      	nop
 800ae3e:	370c      	adds	r7, #12
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr
 800ae48:	fffffc90 	.word	0xfffffc90

0800ae4c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b085      	sub	sp, #20
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	695b      	ldr	r3, [r3, #20]
 800ae5a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	699a      	ldr	r2, [r3, #24]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f042 0208 	orr.w	r2, r2, #8
 800ae6a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	699a      	ldr	r2, [r3, #24]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f042 0210 	orr.w	r2, r2, #16
 800ae7a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f022 0201 	bic.w	r2, r2, #1
 800ae8a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	6919      	ldr	r1, [r3, #16]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	4b3c      	ldr	r3, [pc, #240]	@ (800af88 <SPI_CloseTransfer+0x13c>)
 800ae98:	400b      	ands	r3, r1
 800ae9a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	689a      	ldr	r2, [r3, #8]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800aeaa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	2b04      	cmp	r3, #4
 800aeb6:	d014      	beq.n	800aee2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f003 0320 	and.w	r3, r3, #32
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d00f      	beq.n	800aee2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aec8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	699a      	ldr	r2, [r3, #24]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f042 0220 	orr.w	r2, r2, #32
 800aee0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	2b03      	cmp	r3, #3
 800aeec:	d014      	beq.n	800af18 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00f      	beq.n	800af18 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aefe:	f043 0204 	orr.w	r2, r3, #4
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	699a      	ldr	r2, [r3, #24]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af16:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00f      	beq.n	800af42 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af28:	f043 0201 	orr.w	r2, r3, #1
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	699a      	ldr	r2, [r3, #24]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af40:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00f      	beq.n	800af6c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af52:	f043 0208 	orr.w	r2, r3, #8
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	699a      	ldr	r2, [r3, #24]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800af6a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2200      	movs	r2, #0
 800af70:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800af7c:	bf00      	nop
 800af7e:	3714      	adds	r7, #20
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr
 800af88:	fffffc90 	.word	0xfffffc90

0800af8c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b085      	sub	sp, #20
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af98:	095b      	lsrs	r3, r3, #5
 800af9a:	3301      	adds	r3, #1
 800af9c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	3301      	adds	r3, #1
 800afa4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	3307      	adds	r3, #7
 800afaa:	08db      	lsrs	r3, r3, #3
 800afac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	68fa      	ldr	r2, [r7, #12]
 800afb2:	fb02 f303 	mul.w	r3, r2, r3
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3714      	adds	r7, #20
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr

0800afc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800afc2:	b580      	push	{r7, lr}
 800afc4:	b082      	sub	sp, #8
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d101      	bne.n	800afd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	e049      	b.n	800b068 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d106      	bne.n	800afee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f7f6 f93f 	bl	800126c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2202      	movs	r2, #2
 800aff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	3304      	adds	r3, #4
 800affe:	4619      	mov	r1, r3
 800b000:	4610      	mov	r0, r2
 800b002:	f000 faab 	bl	800b55c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2201      	movs	r2, #1
 800b00a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2201      	movs	r2, #1
 800b012:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2201      	movs	r2, #1
 800b01a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2201      	movs	r2, #1
 800b022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2201      	movs	r2, #1
 800b02a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2201      	movs	r2, #1
 800b032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2201      	movs	r2, #1
 800b03a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2201      	movs	r2, #1
 800b042:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2201      	movs	r2, #1
 800b04a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2201      	movs	r2, #1
 800b052:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2201      	movs	r2, #1
 800b05a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2201      	movs	r2, #1
 800b062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3708      	adds	r7, #8
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b070:	b480      	push	{r7}
 800b072:	b085      	sub	sp, #20
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	2b01      	cmp	r3, #1
 800b082:	d001      	beq.n	800b088 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b084:	2301      	movs	r3, #1
 800b086:	e056      	b.n	800b136 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2202      	movs	r2, #2
 800b08c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a2b      	ldr	r2, [pc, #172]	@ (800b144 <HAL_TIM_Base_Start+0xd4>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d02c      	beq.n	800b0f4 <HAL_TIM_Base_Start+0x84>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0a2:	d027      	beq.n	800b0f4 <HAL_TIM_Base_Start+0x84>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a27      	ldr	r2, [pc, #156]	@ (800b148 <HAL_TIM_Base_Start+0xd8>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d022      	beq.n	800b0f4 <HAL_TIM_Base_Start+0x84>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4a26      	ldr	r2, [pc, #152]	@ (800b14c <HAL_TIM_Base_Start+0xdc>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d01d      	beq.n	800b0f4 <HAL_TIM_Base_Start+0x84>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a24      	ldr	r2, [pc, #144]	@ (800b150 <HAL_TIM_Base_Start+0xe0>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d018      	beq.n	800b0f4 <HAL_TIM_Base_Start+0x84>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a23      	ldr	r2, [pc, #140]	@ (800b154 <HAL_TIM_Base_Start+0xe4>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d013      	beq.n	800b0f4 <HAL_TIM_Base_Start+0x84>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a21      	ldr	r2, [pc, #132]	@ (800b158 <HAL_TIM_Base_Start+0xe8>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d00e      	beq.n	800b0f4 <HAL_TIM_Base_Start+0x84>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4a20      	ldr	r2, [pc, #128]	@ (800b15c <HAL_TIM_Base_Start+0xec>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d009      	beq.n	800b0f4 <HAL_TIM_Base_Start+0x84>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a1e      	ldr	r2, [pc, #120]	@ (800b160 <HAL_TIM_Base_Start+0xf0>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d004      	beq.n	800b0f4 <HAL_TIM_Base_Start+0x84>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4a1d      	ldr	r2, [pc, #116]	@ (800b164 <HAL_TIM_Base_Start+0xf4>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d115      	bne.n	800b120 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	689a      	ldr	r2, [r3, #8]
 800b0fa:	4b1b      	ldr	r3, [pc, #108]	@ (800b168 <HAL_TIM_Base_Start+0xf8>)
 800b0fc:	4013      	ands	r3, r2
 800b0fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2b06      	cmp	r3, #6
 800b104:	d015      	beq.n	800b132 <HAL_TIM_Base_Start+0xc2>
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b10c:	d011      	beq.n	800b132 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f042 0201 	orr.w	r2, r2, #1
 800b11c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b11e:	e008      	b.n	800b132 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	681a      	ldr	r2, [r3, #0]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f042 0201 	orr.w	r2, r2, #1
 800b12e:	601a      	str	r2, [r3, #0]
 800b130:	e000      	b.n	800b134 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b132:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b134:	2300      	movs	r3, #0
}
 800b136:	4618      	mov	r0, r3
 800b138:	3714      	adds	r7, #20
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop
 800b144:	40010000 	.word	0x40010000
 800b148:	40000400 	.word	0x40000400
 800b14c:	40000800 	.word	0x40000800
 800b150:	40000c00 	.word	0x40000c00
 800b154:	40010400 	.word	0x40010400
 800b158:	40001800 	.word	0x40001800
 800b15c:	40014000 	.word	0x40014000
 800b160:	4000e000 	.word	0x4000e000
 800b164:	4000e400 	.word	0x4000e400
 800b168:	00010007 	.word	0x00010007

0800b16c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b085      	sub	sp, #20
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d001      	beq.n	800b184 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b180:	2301      	movs	r3, #1
 800b182:	e05e      	b.n	800b242 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2202      	movs	r2, #2
 800b188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68da      	ldr	r2, [r3, #12]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f042 0201 	orr.w	r2, r2, #1
 800b19a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a2b      	ldr	r2, [pc, #172]	@ (800b250 <HAL_TIM_Base_Start_IT+0xe4>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d02c      	beq.n	800b200 <HAL_TIM_Base_Start_IT+0x94>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1ae:	d027      	beq.n	800b200 <HAL_TIM_Base_Start_IT+0x94>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a27      	ldr	r2, [pc, #156]	@ (800b254 <HAL_TIM_Base_Start_IT+0xe8>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d022      	beq.n	800b200 <HAL_TIM_Base_Start_IT+0x94>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a26      	ldr	r2, [pc, #152]	@ (800b258 <HAL_TIM_Base_Start_IT+0xec>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d01d      	beq.n	800b200 <HAL_TIM_Base_Start_IT+0x94>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a24      	ldr	r2, [pc, #144]	@ (800b25c <HAL_TIM_Base_Start_IT+0xf0>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d018      	beq.n	800b200 <HAL_TIM_Base_Start_IT+0x94>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4a23      	ldr	r2, [pc, #140]	@ (800b260 <HAL_TIM_Base_Start_IT+0xf4>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d013      	beq.n	800b200 <HAL_TIM_Base_Start_IT+0x94>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4a21      	ldr	r2, [pc, #132]	@ (800b264 <HAL_TIM_Base_Start_IT+0xf8>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d00e      	beq.n	800b200 <HAL_TIM_Base_Start_IT+0x94>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a20      	ldr	r2, [pc, #128]	@ (800b268 <HAL_TIM_Base_Start_IT+0xfc>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d009      	beq.n	800b200 <HAL_TIM_Base_Start_IT+0x94>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a1e      	ldr	r2, [pc, #120]	@ (800b26c <HAL_TIM_Base_Start_IT+0x100>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d004      	beq.n	800b200 <HAL_TIM_Base_Start_IT+0x94>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a1d      	ldr	r2, [pc, #116]	@ (800b270 <HAL_TIM_Base_Start_IT+0x104>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d115      	bne.n	800b22c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	689a      	ldr	r2, [r3, #8]
 800b206:	4b1b      	ldr	r3, [pc, #108]	@ (800b274 <HAL_TIM_Base_Start_IT+0x108>)
 800b208:	4013      	ands	r3, r2
 800b20a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2b06      	cmp	r3, #6
 800b210:	d015      	beq.n	800b23e <HAL_TIM_Base_Start_IT+0xd2>
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b218:	d011      	beq.n	800b23e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f042 0201 	orr.w	r2, r2, #1
 800b228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b22a:	e008      	b.n	800b23e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f042 0201 	orr.w	r2, r2, #1
 800b23a:	601a      	str	r2, [r3, #0]
 800b23c:	e000      	b.n	800b240 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b23e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b240:	2300      	movs	r3, #0
}
 800b242:	4618      	mov	r0, r3
 800b244:	3714      	adds	r7, #20
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr
 800b24e:	bf00      	nop
 800b250:	40010000 	.word	0x40010000
 800b254:	40000400 	.word	0x40000400
 800b258:	40000800 	.word	0x40000800
 800b25c:	40000c00 	.word	0x40000c00
 800b260:	40010400 	.word	0x40010400
 800b264:	40001800 	.word	0x40001800
 800b268:	40014000 	.word	0x40014000
 800b26c:	4000e000 	.word	0x4000e000
 800b270:	4000e400 	.word	0x4000e400
 800b274:	00010007 	.word	0x00010007

0800b278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	691b      	ldr	r3, [r3, #16]
 800b28e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	f003 0302 	and.w	r3, r3, #2
 800b296:	2b00      	cmp	r3, #0
 800b298:	d020      	beq.n	800b2dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f003 0302 	and.w	r3, r3, #2
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d01b      	beq.n	800b2dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f06f 0202 	mvn.w	r2, #2
 800b2ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	699b      	ldr	r3, [r3, #24]
 800b2ba:	f003 0303 	and.w	r3, r3, #3
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d003      	beq.n	800b2ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 f92b 	bl	800b51e <HAL_TIM_IC_CaptureCallback>
 800b2c8:	e005      	b.n	800b2d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 f91d 	bl	800b50a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 f92e 	bl	800b532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	f003 0304 	and.w	r3, r3, #4
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d020      	beq.n	800b328 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f003 0304 	and.w	r3, r3, #4
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d01b      	beq.n	800b328 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f06f 0204 	mvn.w	r2, #4
 800b2f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2202      	movs	r2, #2
 800b2fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	699b      	ldr	r3, [r3, #24]
 800b306:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d003      	beq.n	800b316 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 f905 	bl	800b51e <HAL_TIM_IC_CaptureCallback>
 800b314:	e005      	b.n	800b322 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 f8f7 	bl	800b50a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 f908 	bl	800b532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	f003 0308 	and.w	r3, r3, #8
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d020      	beq.n	800b374 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f003 0308 	and.w	r3, r3, #8
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d01b      	beq.n	800b374 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f06f 0208 	mvn.w	r2, #8
 800b344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2204      	movs	r2, #4
 800b34a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	69db      	ldr	r3, [r3, #28]
 800b352:	f003 0303 	and.w	r3, r3, #3
 800b356:	2b00      	cmp	r3, #0
 800b358:	d003      	beq.n	800b362 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f000 f8df 	bl	800b51e <HAL_TIM_IC_CaptureCallback>
 800b360:	e005      	b.n	800b36e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 f8d1 	bl	800b50a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 f8e2 	bl	800b532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2200      	movs	r2, #0
 800b372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	f003 0310 	and.w	r3, r3, #16
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d020      	beq.n	800b3c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f003 0310 	and.w	r3, r3, #16
 800b384:	2b00      	cmp	r3, #0
 800b386:	d01b      	beq.n	800b3c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f06f 0210 	mvn.w	r2, #16
 800b390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2208      	movs	r2, #8
 800b396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	69db      	ldr	r3, [r3, #28]
 800b39e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d003      	beq.n	800b3ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 f8b9 	bl	800b51e <HAL_TIM_IC_CaptureCallback>
 800b3ac:	e005      	b.n	800b3ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 f8ab 	bl	800b50a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f000 f8bc 	bl	800b532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	f003 0301 	and.w	r3, r3, #1
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d00c      	beq.n	800b3e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f003 0301 	and.w	r3, r3, #1
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d007      	beq.n	800b3e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f06f 0201 	mvn.w	r2, #1
 800b3dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f7f4 ffa8 	bl	8000334 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d104      	bne.n	800b3f8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d00c      	beq.n	800b412 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d007      	beq.n	800b412 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b40a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f000 fb67 	bl	800bae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d00c      	beq.n	800b436 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b422:	2b00      	cmp	r3, #0
 800b424:	d007      	beq.n	800b436 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b42e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 fb5f 	bl	800baf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d00c      	beq.n	800b45a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b446:	2b00      	cmp	r3, #0
 800b448:	d007      	beq.n	800b45a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f000 f876 	bl	800b546 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	f003 0320 	and.w	r3, r3, #32
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00c      	beq.n	800b47e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f003 0320 	and.w	r3, r3, #32
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d007      	beq.n	800b47e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f06f 0220 	mvn.w	r2, #32
 800b476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 fb27 	bl	800bacc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b47e:	bf00      	nop
 800b480:	3710      	adds	r7, #16
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b486:	b580      	push	{r7, lr}
 800b488:	b082      	sub	sp, #8
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
 800b48e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b496:	2b01      	cmp	r3, #1
 800b498:	d101      	bne.n	800b49e <HAL_TIM_SlaveConfigSynchro+0x18>
 800b49a:	2302      	movs	r3, #2
 800b49c:	e031      	b.n	800b502 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2202      	movs	r2, #2
 800b4aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800b4ae:	6839      	ldr	r1, [r7, #0]
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 f905 	bl	800b6c0 <TIM_SlaveTimer_SetConfig>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d009      	beq.n	800b4d0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e018      	b.n	800b502 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	68da      	ldr	r2, [r3, #12]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b4de:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	68da      	ldr	r2, [r3, #12]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b4ee:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	3708      	adds	r7, #8
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b50a:	b480      	push	{r7}
 800b50c:	b083      	sub	sp, #12
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b512:	bf00      	nop
 800b514:	370c      	adds	r7, #12
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr

0800b51e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b51e:	b480      	push	{r7}
 800b520:	b083      	sub	sp, #12
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b526:	bf00      	nop
 800b528:	370c      	adds	r7, #12
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr

0800b532 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b532:	b480      	push	{r7}
 800b534:	b083      	sub	sp, #12
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b53a:	bf00      	nop
 800b53c:	370c      	adds	r7, #12
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr

0800b546 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b546:	b480      	push	{r7}
 800b548:	b083      	sub	sp, #12
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b54e:	bf00      	nop
 800b550:	370c      	adds	r7, #12
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr
	...

0800b55c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b085      	sub	sp, #20
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	4a4a      	ldr	r2, [pc, #296]	@ (800b698 <TIM_Base_SetConfig+0x13c>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d013      	beq.n	800b59c <TIM_Base_SetConfig+0x40>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b57a:	d00f      	beq.n	800b59c <TIM_Base_SetConfig+0x40>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	4a47      	ldr	r2, [pc, #284]	@ (800b69c <TIM_Base_SetConfig+0x140>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d00b      	beq.n	800b59c <TIM_Base_SetConfig+0x40>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	4a46      	ldr	r2, [pc, #280]	@ (800b6a0 <TIM_Base_SetConfig+0x144>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d007      	beq.n	800b59c <TIM_Base_SetConfig+0x40>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4a45      	ldr	r2, [pc, #276]	@ (800b6a4 <TIM_Base_SetConfig+0x148>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d003      	beq.n	800b59c <TIM_Base_SetConfig+0x40>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	4a44      	ldr	r2, [pc, #272]	@ (800b6a8 <TIM_Base_SetConfig+0x14c>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d108      	bne.n	800b5ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	68fa      	ldr	r2, [r7, #12]
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	4a39      	ldr	r2, [pc, #228]	@ (800b698 <TIM_Base_SetConfig+0x13c>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d027      	beq.n	800b606 <TIM_Base_SetConfig+0xaa>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5bc:	d023      	beq.n	800b606 <TIM_Base_SetConfig+0xaa>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	4a36      	ldr	r2, [pc, #216]	@ (800b69c <TIM_Base_SetConfig+0x140>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d01f      	beq.n	800b606 <TIM_Base_SetConfig+0xaa>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	4a35      	ldr	r2, [pc, #212]	@ (800b6a0 <TIM_Base_SetConfig+0x144>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d01b      	beq.n	800b606 <TIM_Base_SetConfig+0xaa>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4a34      	ldr	r2, [pc, #208]	@ (800b6a4 <TIM_Base_SetConfig+0x148>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d017      	beq.n	800b606 <TIM_Base_SetConfig+0xaa>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	4a33      	ldr	r2, [pc, #204]	@ (800b6a8 <TIM_Base_SetConfig+0x14c>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d013      	beq.n	800b606 <TIM_Base_SetConfig+0xaa>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4a32      	ldr	r2, [pc, #200]	@ (800b6ac <TIM_Base_SetConfig+0x150>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d00f      	beq.n	800b606 <TIM_Base_SetConfig+0xaa>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	4a31      	ldr	r2, [pc, #196]	@ (800b6b0 <TIM_Base_SetConfig+0x154>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d00b      	beq.n	800b606 <TIM_Base_SetConfig+0xaa>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	4a30      	ldr	r2, [pc, #192]	@ (800b6b4 <TIM_Base_SetConfig+0x158>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d007      	beq.n	800b606 <TIM_Base_SetConfig+0xaa>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	4a2f      	ldr	r2, [pc, #188]	@ (800b6b8 <TIM_Base_SetConfig+0x15c>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d003      	beq.n	800b606 <TIM_Base_SetConfig+0xaa>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	4a2e      	ldr	r2, [pc, #184]	@ (800b6bc <TIM_Base_SetConfig+0x160>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d108      	bne.n	800b618 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b60c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	68fa      	ldr	r2, [r7, #12]
 800b614:	4313      	orrs	r3, r2
 800b616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	695b      	ldr	r3, [r3, #20]
 800b622:	4313      	orrs	r3, r2
 800b624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	689a      	ldr	r2, [r3, #8]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4a16      	ldr	r2, [pc, #88]	@ (800b698 <TIM_Base_SetConfig+0x13c>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d00f      	beq.n	800b664 <TIM_Base_SetConfig+0x108>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	4a18      	ldr	r2, [pc, #96]	@ (800b6a8 <TIM_Base_SetConfig+0x14c>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d00b      	beq.n	800b664 <TIM_Base_SetConfig+0x108>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	4a17      	ldr	r2, [pc, #92]	@ (800b6ac <TIM_Base_SetConfig+0x150>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d007      	beq.n	800b664 <TIM_Base_SetConfig+0x108>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	4a16      	ldr	r2, [pc, #88]	@ (800b6b0 <TIM_Base_SetConfig+0x154>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d003      	beq.n	800b664 <TIM_Base_SetConfig+0x108>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4a15      	ldr	r2, [pc, #84]	@ (800b6b4 <TIM_Base_SetConfig+0x158>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d103      	bne.n	800b66c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	691a      	ldr	r2, [r3, #16]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2201      	movs	r2, #1
 800b670:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	691b      	ldr	r3, [r3, #16]
 800b676:	f003 0301 	and.w	r3, r3, #1
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d105      	bne.n	800b68a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	691b      	ldr	r3, [r3, #16]
 800b682:	f023 0201 	bic.w	r2, r3, #1
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	611a      	str	r2, [r3, #16]
  }
}
 800b68a:	bf00      	nop
 800b68c:	3714      	adds	r7, #20
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr
 800b696:	bf00      	nop
 800b698:	40010000 	.word	0x40010000
 800b69c:	40000400 	.word	0x40000400
 800b6a0:	40000800 	.word	0x40000800
 800b6a4:	40000c00 	.word	0x40000c00
 800b6a8:	40010400 	.word	0x40010400
 800b6ac:	40014000 	.word	0x40014000
 800b6b0:	40014400 	.word	0x40014400
 800b6b4:	40014800 	.word	0x40014800
 800b6b8:	4000e000 	.word	0x4000e000
 800b6bc:	4000e400 	.word	0x4000e400

0800b6c0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	689b      	ldr	r3, [r3, #8]
 800b6d4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b6d6:	693a      	ldr	r2, [r7, #16]
 800b6d8:	4b65      	ldr	r3, [pc, #404]	@ (800b870 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800b6da:	4013      	ands	r3, r2
 800b6dc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	693a      	ldr	r2, [r7, #16]
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b6e8:	693a      	ldr	r2, [r7, #16]
 800b6ea:	4b62      	ldr	r3, [pc, #392]	@ (800b874 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800b6ec:	4013      	ands	r3, r2
 800b6ee:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	693a      	ldr	r2, [r7, #16]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	693a      	ldr	r2, [r7, #16]
 800b700:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	4a5c      	ldr	r2, [pc, #368]	@ (800b878 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	f000 80ab 	beq.w	800b864 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b70e:	4a5a      	ldr	r2, [pc, #360]	@ (800b878 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800b710:	4293      	cmp	r3, r2
 800b712:	f200 80a4 	bhi.w	800b85e <TIM_SlaveTimer_SetConfig+0x19e>
 800b716:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b71a:	f000 80a3 	beq.w	800b864 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b71e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b722:	f200 809c 	bhi.w	800b85e <TIM_SlaveTimer_SetConfig+0x19e>
 800b726:	4a55      	ldr	r2, [pc, #340]	@ (800b87c <TIM_SlaveTimer_SetConfig+0x1bc>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	f000 809b 	beq.w	800b864 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b72e:	4a53      	ldr	r2, [pc, #332]	@ (800b87c <TIM_SlaveTimer_SetConfig+0x1bc>)
 800b730:	4293      	cmp	r3, r2
 800b732:	f200 8094 	bhi.w	800b85e <TIM_SlaveTimer_SetConfig+0x19e>
 800b736:	4a52      	ldr	r2, [pc, #328]	@ (800b880 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	f000 8093 	beq.w	800b864 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b73e:	4a50      	ldr	r2, [pc, #320]	@ (800b880 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800b740:	4293      	cmp	r3, r2
 800b742:	f200 808c 	bhi.w	800b85e <TIM_SlaveTimer_SetConfig+0x19e>
 800b746:	4a4f      	ldr	r2, [pc, #316]	@ (800b884 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	f000 808b 	beq.w	800b864 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b74e:	4a4d      	ldr	r2, [pc, #308]	@ (800b884 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800b750:	4293      	cmp	r3, r2
 800b752:	f200 8084 	bhi.w	800b85e <TIM_SlaveTimer_SetConfig+0x19e>
 800b756:	4a4c      	ldr	r2, [pc, #304]	@ (800b888 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	f000 8083 	beq.w	800b864 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b75e:	4a4a      	ldr	r2, [pc, #296]	@ (800b888 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d87c      	bhi.n	800b85e <TIM_SlaveTimer_SetConfig+0x19e>
 800b764:	4a49      	ldr	r2, [pc, #292]	@ (800b88c <TIM_SlaveTimer_SetConfig+0x1cc>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d07c      	beq.n	800b864 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b76a:	4a48      	ldr	r2, [pc, #288]	@ (800b88c <TIM_SlaveTimer_SetConfig+0x1cc>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d876      	bhi.n	800b85e <TIM_SlaveTimer_SetConfig+0x19e>
 800b770:	4a47      	ldr	r2, [pc, #284]	@ (800b890 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d076      	beq.n	800b864 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b776:	4a46      	ldr	r2, [pc, #280]	@ (800b890 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d870      	bhi.n	800b85e <TIM_SlaveTimer_SetConfig+0x19e>
 800b77c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b780:	d070      	beq.n	800b864 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b782:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b786:	d86a      	bhi.n	800b85e <TIM_SlaveTimer_SetConfig+0x19e>
 800b788:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b78c:	d06a      	beq.n	800b864 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b78e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b792:	d864      	bhi.n	800b85e <TIM_SlaveTimer_SetConfig+0x19e>
 800b794:	2b70      	cmp	r3, #112	@ 0x70
 800b796:	d01a      	beq.n	800b7ce <TIM_SlaveTimer_SetConfig+0x10e>
 800b798:	2b70      	cmp	r3, #112	@ 0x70
 800b79a:	d860      	bhi.n	800b85e <TIM_SlaveTimer_SetConfig+0x19e>
 800b79c:	2b60      	cmp	r3, #96	@ 0x60
 800b79e:	d054      	beq.n	800b84a <TIM_SlaveTimer_SetConfig+0x18a>
 800b7a0:	2b60      	cmp	r3, #96	@ 0x60
 800b7a2:	d85c      	bhi.n	800b85e <TIM_SlaveTimer_SetConfig+0x19e>
 800b7a4:	2b50      	cmp	r3, #80	@ 0x50
 800b7a6:	d046      	beq.n	800b836 <TIM_SlaveTimer_SetConfig+0x176>
 800b7a8:	2b50      	cmp	r3, #80	@ 0x50
 800b7aa:	d858      	bhi.n	800b85e <TIM_SlaveTimer_SetConfig+0x19e>
 800b7ac:	2b40      	cmp	r3, #64	@ 0x40
 800b7ae:	d019      	beq.n	800b7e4 <TIM_SlaveTimer_SetConfig+0x124>
 800b7b0:	2b40      	cmp	r3, #64	@ 0x40
 800b7b2:	d854      	bhi.n	800b85e <TIM_SlaveTimer_SetConfig+0x19e>
 800b7b4:	2b30      	cmp	r3, #48	@ 0x30
 800b7b6:	d055      	beq.n	800b864 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b7b8:	2b30      	cmp	r3, #48	@ 0x30
 800b7ba:	d850      	bhi.n	800b85e <TIM_SlaveTimer_SetConfig+0x19e>
 800b7bc:	2b20      	cmp	r3, #32
 800b7be:	d051      	beq.n	800b864 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b7c0:	2b20      	cmp	r3, #32
 800b7c2:	d84c      	bhi.n	800b85e <TIM_SlaveTimer_SetConfig+0x19e>
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d04d      	beq.n	800b864 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b7c8:	2b10      	cmp	r3, #16
 800b7ca:	d04b      	beq.n	800b864 <TIM_SlaveTimer_SetConfig+0x1a4>
 800b7cc:	e047      	b.n	800b85e <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800b7de:	f000 f8b8 	bl	800b952 <TIM_ETR_SetConfig>
      break;
 800b7e2:	e040      	b.n	800b866 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2b05      	cmp	r3, #5
 800b7ea:	d101      	bne.n	800b7f0 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	e03b      	b.n	800b868 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	6a1b      	ldr	r3, [r3, #32]
 800b7f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	6a1a      	ldr	r2, [r3, #32]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f022 0201 	bic.w	r2, r2, #1
 800b806:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	699b      	ldr	r3, [r3, #24]
 800b80e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b816:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	691b      	ldr	r3, [r3, #16]
 800b81c:	011b      	lsls	r3, r3, #4
 800b81e:	68ba      	ldr	r2, [r7, #8]
 800b820:	4313      	orrs	r3, r2
 800b822:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	68ba      	ldr	r2, [r7, #8]
 800b82a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	68fa      	ldr	r2, [r7, #12]
 800b832:	621a      	str	r2, [r3, #32]
      break;
 800b834:	e017      	b.n	800b866 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b842:	461a      	mov	r2, r3
 800b844:	f000 f826 	bl	800b894 <TIM_TI1_ConfigInputStage>
      break;
 800b848:	e00d      	b.n	800b866 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b856:	461a      	mov	r2, r3
 800b858:	f000 f84b 	bl	800b8f2 <TIM_TI2_ConfigInputStage>
      break;
 800b85c:	e003      	b.n	800b866 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800b85e:	2301      	movs	r3, #1
 800b860:	75fb      	strb	r3, [r7, #23]
      break;
 800b862:	e000      	b.n	800b866 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800b864:	bf00      	nop
  }

  return status;
 800b866:	7dfb      	ldrb	r3, [r7, #23]
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3718      	adds	r7, #24
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}
 800b870:	ffcfff8f 	.word	0xffcfff8f
 800b874:	fffefff8 	.word	0xfffefff8
 800b878:	00200010 	.word	0x00200010
 800b87c:	00100070 	.word	0x00100070
 800b880:	00100060 	.word	0x00100060
 800b884:	00100050 	.word	0x00100050
 800b888:	00100040 	.word	0x00100040
 800b88c:	00100030 	.word	0x00100030
 800b890:	00100020 	.word	0x00100020

0800b894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b894:	b480      	push	{r7}
 800b896:	b087      	sub	sp, #28
 800b898:	af00      	add	r7, sp, #0
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	60b9      	str	r1, [r7, #8]
 800b89e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	6a1b      	ldr	r3, [r3, #32]
 800b8a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6a1b      	ldr	r3, [r3, #32]
 800b8aa:	f023 0201 	bic.w	r2, r3, #1
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	699b      	ldr	r3, [r3, #24]
 800b8b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b8be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	011b      	lsls	r3, r3, #4
 800b8c4:	693a      	ldr	r2, [r7, #16]
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	f023 030a 	bic.w	r3, r3, #10
 800b8d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b8d2:	697a      	ldr	r2, [r7, #20]
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	693a      	ldr	r2, [r7, #16]
 800b8de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	697a      	ldr	r2, [r7, #20]
 800b8e4:	621a      	str	r2, [r3, #32]
}
 800b8e6:	bf00      	nop
 800b8e8:	371c      	adds	r7, #28
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr

0800b8f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8f2:	b480      	push	{r7}
 800b8f4:	b087      	sub	sp, #28
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	60f8      	str	r0, [r7, #12]
 800b8fa:	60b9      	str	r1, [r7, #8]
 800b8fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	6a1b      	ldr	r3, [r3, #32]
 800b902:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	6a1b      	ldr	r3, [r3, #32]
 800b908:	f023 0210 	bic.w	r2, r3, #16
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	699b      	ldr	r3, [r3, #24]
 800b914:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b91c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	031b      	lsls	r3, r3, #12
 800b922:	693a      	ldr	r2, [r7, #16]
 800b924:	4313      	orrs	r3, r2
 800b926:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b92e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	011b      	lsls	r3, r3, #4
 800b934:	697a      	ldr	r2, [r7, #20]
 800b936:	4313      	orrs	r3, r2
 800b938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	693a      	ldr	r2, [r7, #16]
 800b93e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	697a      	ldr	r2, [r7, #20]
 800b944:	621a      	str	r2, [r3, #32]
}
 800b946:	bf00      	nop
 800b948:	371c      	adds	r7, #28
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr

0800b952 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b952:	b480      	push	{r7}
 800b954:	b087      	sub	sp, #28
 800b956:	af00      	add	r7, sp, #0
 800b958:	60f8      	str	r0, [r7, #12]
 800b95a:	60b9      	str	r1, [r7, #8]
 800b95c:	607a      	str	r2, [r7, #4]
 800b95e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b96c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	021a      	lsls	r2, r3, #8
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	431a      	orrs	r2, r3
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	4313      	orrs	r3, r2
 800b97a:	697a      	ldr	r2, [r7, #20]
 800b97c:	4313      	orrs	r3, r2
 800b97e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	697a      	ldr	r2, [r7, #20]
 800b984:	609a      	str	r2, [r3, #8]
}
 800b986:	bf00      	nop
 800b988:	371c      	adds	r7, #28
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
	...

0800b994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d101      	bne.n	800b9ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b9a8:	2302      	movs	r3, #2
 800b9aa:	e077      	b.n	800ba9c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2202      	movs	r2, #2
 800b9b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	689b      	ldr	r3, [r3, #8]
 800b9ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a35      	ldr	r2, [pc, #212]	@ (800baa8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d004      	beq.n	800b9e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a34      	ldr	r2, [pc, #208]	@ (800baac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d108      	bne.n	800b9f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b9e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	68fa      	ldr	r2, [r7, #12]
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	68fa      	ldr	r2, [r7, #12]
 800ba00:	4313      	orrs	r3, r2
 800ba02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	68fa      	ldr	r2, [r7, #12]
 800ba0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4a25      	ldr	r2, [pc, #148]	@ (800baa8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d02c      	beq.n	800ba70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba1e:	d027      	beq.n	800ba70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4a22      	ldr	r2, [pc, #136]	@ (800bab0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d022      	beq.n	800ba70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4a21      	ldr	r2, [pc, #132]	@ (800bab4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d01d      	beq.n	800ba70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4a1f      	ldr	r2, [pc, #124]	@ (800bab8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d018      	beq.n	800ba70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4a1a      	ldr	r2, [pc, #104]	@ (800baac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d013      	beq.n	800ba70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a1b      	ldr	r2, [pc, #108]	@ (800babc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d00e      	beq.n	800ba70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a1a      	ldr	r2, [pc, #104]	@ (800bac0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d009      	beq.n	800ba70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a18      	ldr	r2, [pc, #96]	@ (800bac4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d004      	beq.n	800ba70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a17      	ldr	r2, [pc, #92]	@ (800bac8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d10c      	bne.n	800ba8a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	68ba      	ldr	r2, [r7, #8]
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	68ba      	ldr	r2, [r7, #8]
 800ba88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2200      	movs	r2, #0
 800ba96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ba9a:	2300      	movs	r3, #0
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3714      	adds	r7, #20
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr
 800baa8:	40010000 	.word	0x40010000
 800baac:	40010400 	.word	0x40010400
 800bab0:	40000400 	.word	0x40000400
 800bab4:	40000800 	.word	0x40000800
 800bab8:	40000c00 	.word	0x40000c00
 800babc:	40001800 	.word	0x40001800
 800bac0:	40014000 	.word	0x40014000
 800bac4:	4000e000 	.word	0x4000e000
 800bac8:	4000e400 	.word	0x4000e400

0800bacc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bad4:	bf00      	nop
 800bad6:	370c      	adds	r7, #12
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr

0800bae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b083      	sub	sp, #12
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bae8:	bf00      	nop
 800baea:	370c      	adds	r7, #12
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr

0800baf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bafc:	bf00      	nop
 800bafe:	370c      	adds	r7, #12
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr

0800bb08 <memset>:
 800bb08:	4402      	add	r2, r0
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d100      	bne.n	800bb12 <memset+0xa>
 800bb10:	4770      	bx	lr
 800bb12:	f803 1b01 	strb.w	r1, [r3], #1
 800bb16:	e7f9      	b.n	800bb0c <memset+0x4>

0800bb18 <__libc_init_array>:
 800bb18:	b570      	push	{r4, r5, r6, lr}
 800bb1a:	4d0d      	ldr	r5, [pc, #52]	@ (800bb50 <__libc_init_array+0x38>)
 800bb1c:	4c0d      	ldr	r4, [pc, #52]	@ (800bb54 <__libc_init_array+0x3c>)
 800bb1e:	1b64      	subs	r4, r4, r5
 800bb20:	10a4      	asrs	r4, r4, #2
 800bb22:	2600      	movs	r6, #0
 800bb24:	42a6      	cmp	r6, r4
 800bb26:	d109      	bne.n	800bb3c <__libc_init_array+0x24>
 800bb28:	4d0b      	ldr	r5, [pc, #44]	@ (800bb58 <__libc_init_array+0x40>)
 800bb2a:	4c0c      	ldr	r4, [pc, #48]	@ (800bb5c <__libc_init_array+0x44>)
 800bb2c:	f000 f818 	bl	800bb60 <_init>
 800bb30:	1b64      	subs	r4, r4, r5
 800bb32:	10a4      	asrs	r4, r4, #2
 800bb34:	2600      	movs	r6, #0
 800bb36:	42a6      	cmp	r6, r4
 800bb38:	d105      	bne.n	800bb46 <__libc_init_array+0x2e>
 800bb3a:	bd70      	pop	{r4, r5, r6, pc}
 800bb3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb40:	4798      	blx	r3
 800bb42:	3601      	adds	r6, #1
 800bb44:	e7ee      	b.n	800bb24 <__libc_init_array+0xc>
 800bb46:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb4a:	4798      	blx	r3
 800bb4c:	3601      	adds	r6, #1
 800bb4e:	e7f2      	b.n	800bb36 <__libc_init_array+0x1e>
 800bb50:	0800bb90 	.word	0x0800bb90
 800bb54:	0800bb90 	.word	0x0800bb90
 800bb58:	0800bb90 	.word	0x0800bb90
 800bb5c:	0800bb94 	.word	0x0800bb94

0800bb60 <_init>:
 800bb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb62:	bf00      	nop
 800bb64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb66:	bc08      	pop	{r3}
 800bb68:	469e      	mov	lr, r3
 800bb6a:	4770      	bx	lr

0800bb6c <_fini>:
 800bb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb6e:	bf00      	nop
 800bb70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb72:	bc08      	pop	{r3}
 800bb74:	469e      	mov	lr, r3
 800bb76:	4770      	bx	lr
