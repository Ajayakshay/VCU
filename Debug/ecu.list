
ecu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000336c  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003638  08003638  00004638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003648  08003648  00004648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800364c  0800364c  0000464c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08003650  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000074  24000010  08003660  00005010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000084  08003660  00005084  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000bc55  00000000  00000000  0000503e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001a53  00000000  00000000  00010c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a28  00000000  00000000  000126e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000007ba  00000000  00000000  00013110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000020d5  00000000  00000000  000138ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000db39  00000000  00000000  0001599f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00138656  00000000  00000000  000234d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0015bb2e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002940  00000000  00000000  0015bb74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000051  00000000  00000000  0015e4b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08003620 	.word	0x08003620

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08003620 	.word	0x08003620

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000310:	f000 f8c2 	bl	8000498 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000314:	f000 fa46 	bl	80007a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000318:	f000 f806 	bl	8000328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031c:	f000 f8a2 	bl	8000464 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000320:	f000 f860 	bl	80003e4 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000324:	bf00      	nop
 8000326:	e7fd      	b.n	8000324 <main+0x18>

08000328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b09c      	sub	sp, #112	@ 0x70
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000332:	224c      	movs	r2, #76	@ 0x4c
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f003 f946 	bl	80035c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2220      	movs	r2, #32
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f003 f940 	bl	80035c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000348:	2002      	movs	r0, #2
 800034a:	f000 fef5 	bl	8001138 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800034e:	2300      	movs	r3, #0
 8000350:	603b      	str	r3, [r7, #0]
 8000352:	4b23      	ldr	r3, [pc, #140]	@ (80003e0 <SystemClock_Config+0xb8>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800035a:	4a21      	ldr	r2, [pc, #132]	@ (80003e0 <SystemClock_Config+0xb8>)
 800035c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000360:	6193      	str	r3, [r2, #24]
 8000362:	4b1f      	ldr	r3, [pc, #124]	@ (80003e0 <SystemClock_Config+0xb8>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800036a:	603b      	str	r3, [r7, #0]
 800036c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800036e:	bf00      	nop
 8000370:	4b1b      	ldr	r3, [pc, #108]	@ (80003e0 <SystemClock_Config+0xb8>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000378:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800037c:	d1f8      	bne.n	8000370 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800037e:	2302      	movs	r3, #2
 8000380:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000382:	2301      	movs	r3, #1
 8000384:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000386:	2340      	movs	r3, #64	@ 0x40
 8000388:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800038a:	2300      	movs	r3, #0
 800038c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000392:	4618      	mov	r0, r3
 8000394:	f000 ff0a 	bl	80011ac <HAL_RCC_OscConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800039e:	f000 f8a7 	bl	80004f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a2:	233f      	movs	r3, #63	@ 0x3f
 80003a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003aa:	2300      	movs	r3, #0
 80003ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80003b6:	2340      	movs	r3, #64	@ 0x40
 80003b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003be:	2300      	movs	r3, #0
 80003c0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2101      	movs	r1, #1
 80003c6:	4618      	mov	r0, r3
 80003c8:	f001 faca 	bl	8001960 <HAL_RCC_ClockConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80003d2:	f000 f88d 	bl	80004f0 <Error_Handler>
  }
}
 80003d6:	bf00      	nop
 80003d8:	3770      	adds	r7, #112	@ 0x70
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	58024800 	.word	0x58024800

080003e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000458 <MX_I2C1_Init+0x74>)
 80003ea:	4a1c      	ldr	r2, [pc, #112]	@ (800045c <MX_I2C1_Init+0x78>)
 80003ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 80003ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000458 <MX_I2C1_Init+0x74>)
 80003f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000460 <MX_I2C1_Init+0x7c>)
 80003f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003f4:	4b18      	ldr	r3, [pc, #96]	@ (8000458 <MX_I2C1_Init+0x74>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003fa:	4b17      	ldr	r3, [pc, #92]	@ (8000458 <MX_I2C1_Init+0x74>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000400:	4b15      	ldr	r3, [pc, #84]	@ (8000458 <MX_I2C1_Init+0x74>)
 8000402:	2200      	movs	r2, #0
 8000404:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000406:	4b14      	ldr	r3, [pc, #80]	@ (8000458 <MX_I2C1_Init+0x74>)
 8000408:	2200      	movs	r2, #0
 800040a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800040c:	4b12      	ldr	r3, [pc, #72]	@ (8000458 <MX_I2C1_Init+0x74>)
 800040e:	2200      	movs	r2, #0
 8000410:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000412:	4b11      	ldr	r3, [pc, #68]	@ (8000458 <MX_I2C1_Init+0x74>)
 8000414:	2200      	movs	r2, #0
 8000416:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000418:	4b0f      	ldr	r3, [pc, #60]	@ (8000458 <MX_I2C1_Init+0x74>)
 800041a:	2200      	movs	r2, #0
 800041c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800041e:	480e      	ldr	r0, [pc, #56]	@ (8000458 <MX_I2C1_Init+0x74>)
 8000420:	f000 fd56 	bl	8000ed0 <HAL_I2C_Init>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800042a:	f000 f861 	bl	80004f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800042e:	2100      	movs	r1, #0
 8000430:	4809      	ldr	r0, [pc, #36]	@ (8000458 <MX_I2C1_Init+0x74>)
 8000432:	f000 fde9 	bl	8001008 <HAL_I2CEx_ConfigAnalogFilter>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800043c:	f000 f858 	bl	80004f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000440:	2100      	movs	r1, #0
 8000442:	4805      	ldr	r0, [pc, #20]	@ (8000458 <MX_I2C1_Init+0x74>)
 8000444:	f000 fe2b 	bl	800109e <HAL_I2CEx_ConfigDigitalFilter>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800044e:	f000 f84f 	bl	80004f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	2400002c 	.word	0x2400002c
 800045c:	40005400 	.word	0x40005400
 8000460:	00300f38 	.word	0x00300f38

08000464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046a:	4b0a      	ldr	r3, [pc, #40]	@ (8000494 <MX_GPIO_Init+0x30>)
 800046c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000470:	4a08      	ldr	r2, [pc, #32]	@ (8000494 <MX_GPIO_Init+0x30>)
 8000472:	f043 0302 	orr.w	r3, r3, #2
 8000476:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800047a:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <MX_GPIO_Init+0x30>)
 800047c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000480:	f003 0302 	and.w	r3, r3, #2
 8000484:	607b      	str	r3, [r7, #4]
 8000486:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000488:	bf00      	nop
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	58024400 	.word	0x58024400

08000498 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800049e:	463b      	mov	r3, r7
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
 80004a8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80004aa:	f000 faf1 	bl	8000a90 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80004ae:	2301      	movs	r3, #1
 80004b0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80004ba:	231f      	movs	r3, #31
 80004bc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80004be:	2387      	movs	r3, #135	@ 0x87
 80004c0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80004c6:	2300      	movs	r3, #0
 80004c8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80004ca:	2301      	movs	r3, #1
 80004cc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80004ce:	2301      	movs	r3, #1
 80004d0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80004d2:	2300      	movs	r3, #0
 80004d4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80004d6:	2300      	movs	r3, #0
 80004d8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004da:	463b      	mov	r3, r7
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 fb0f 	bl	8000b00 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80004e2:	2004      	movs	r0, #4
 80004e4:	f000 faec 	bl	8000ac0 <HAL_MPU_Enable>

}
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f4:	b672      	cpsid	i
}
 80004f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <Error_Handler+0x8>

080004fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000502:	4b0a      	ldr	r3, [pc, #40]	@ (800052c <HAL_MspInit+0x30>)
 8000504:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000508:	4a08      	ldr	r2, [pc, #32]	@ (800052c <HAL_MspInit+0x30>)
 800050a:	f043 0302 	orr.w	r3, r3, #2
 800050e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000512:	4b06      	ldr	r3, [pc, #24]	@ (800052c <HAL_MspInit+0x30>)
 8000514:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000518:	f003 0302 	and.w	r3, r3, #2
 800051c:	607b      	str	r3, [r7, #4]
 800051e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	58024400 	.word	0x58024400

08000530 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b0b8      	sub	sp, #224	@ 0xe0
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000548:	f107 0310 	add.w	r3, r7, #16
 800054c:	22b8      	movs	r2, #184	@ 0xb8
 800054e:	2100      	movs	r1, #0
 8000550:	4618      	mov	r0, r3
 8000552:	f003 f839 	bl	80035c8 <memset>
  if(hi2c->Instance==I2C1)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a26      	ldr	r2, [pc, #152]	@ (80005f4 <HAL_I2C_MspInit+0xc4>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d145      	bne.n	80005ec <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000560:	f04f 0208 	mov.w	r2, #8
 8000564:	f04f 0300 	mov.w	r3, #0
 8000568:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800056c:	2300      	movs	r3, #0
 800056e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000572:	f107 0310 	add.w	r3, r7, #16
 8000576:	4618      	mov	r0, r3
 8000578:	f001 fd22 	bl	8001fc0 <HAL_RCCEx_PeriphCLKConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000582:	f7ff ffb5 	bl	80004f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	4b1c      	ldr	r3, [pc, #112]	@ (80005f8 <HAL_I2C_MspInit+0xc8>)
 8000588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800058c:	4a1a      	ldr	r2, [pc, #104]	@ (80005f8 <HAL_I2C_MspInit+0xc8>)
 800058e:	f043 0302 	orr.w	r3, r3, #2
 8000592:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000596:	4b18      	ldr	r3, [pc, #96]	@ (80005f8 <HAL_I2C_MspInit+0xc8>)
 8000598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800059c:	f003 0302 	and.w	r3, r3, #2
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005a4:	23c0      	movs	r3, #192	@ 0xc0
 80005a6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005aa:	2312      	movs	r3, #18
 80005ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2300      	movs	r3, #0
 80005b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005bc:	2304      	movs	r3, #4
 80005be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005c6:	4619      	mov	r1, r3
 80005c8:	480c      	ldr	r0, [pc, #48]	@ (80005fc <HAL_I2C_MspInit+0xcc>)
 80005ca:	f000 fad9 	bl	8000b80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005ce:	4b0a      	ldr	r3, [pc, #40]	@ (80005f8 <HAL_I2C_MspInit+0xc8>)
 80005d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80005d4:	4a08      	ldr	r2, [pc, #32]	@ (80005f8 <HAL_I2C_MspInit+0xc8>)
 80005d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80005de:	4b06      	ldr	r3, [pc, #24]	@ (80005f8 <HAL_I2C_MspInit+0xc8>)
 80005e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80005e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80005ec:	bf00      	nop
 80005ee:	37e0      	adds	r7, #224	@ 0xe0
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40005400 	.word	0x40005400
 80005f8:	58024400 	.word	0x58024400
 80005fc:	58020400 	.word	0x58020400

08000600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <NMI_Handler+0x4>

08000608 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <HardFault_Handler+0x4>

08000610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <MemManage_Handler+0x4>

08000618 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <BusFault_Handler+0x4>

08000620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <UsageFault_Handler+0x4>

08000628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr

08000636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000656:	f000 f917 	bl	8000888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000664:	4b32      	ldr	r3, [pc, #200]	@ (8000730 <SystemInit+0xd0>)
 8000666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800066a:	4a31      	ldr	r2, [pc, #196]	@ (8000730 <SystemInit+0xd0>)
 800066c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000670:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000674:	4b2f      	ldr	r3, [pc, #188]	@ (8000734 <SystemInit+0xd4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f003 030f 	and.w	r3, r3, #15
 800067c:	2b06      	cmp	r3, #6
 800067e:	d807      	bhi.n	8000690 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000680:	4b2c      	ldr	r3, [pc, #176]	@ (8000734 <SystemInit+0xd4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f023 030f 	bic.w	r3, r3, #15
 8000688:	4a2a      	ldr	r2, [pc, #168]	@ (8000734 <SystemInit+0xd4>)
 800068a:	f043 0307 	orr.w	r3, r3, #7
 800068e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000690:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <SystemInit+0xd8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a28      	ldr	r2, [pc, #160]	@ (8000738 <SystemInit+0xd8>)
 8000696:	f043 0301 	orr.w	r3, r3, #1
 800069a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800069c:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <SystemInit+0xd8>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006a2:	4b25      	ldr	r3, [pc, #148]	@ (8000738 <SystemInit+0xd8>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	4924      	ldr	r1, [pc, #144]	@ (8000738 <SystemInit+0xd8>)
 80006a8:	4b24      	ldr	r3, [pc, #144]	@ (800073c <SystemInit+0xdc>)
 80006aa:	4013      	ands	r3, r2
 80006ac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ae:	4b21      	ldr	r3, [pc, #132]	@ (8000734 <SystemInit+0xd4>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f003 0308 	and.w	r3, r3, #8
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d007      	beq.n	80006ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000734 <SystemInit+0xd4>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f023 030f 	bic.w	r3, r3, #15
 80006c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000734 <SystemInit+0xd4>)
 80006c4:	f043 0307 	orr.w	r3, r3, #7
 80006c8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <SystemInit+0xd8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006d0:	4b19      	ldr	r3, [pc, #100]	@ (8000738 <SystemInit+0xd8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006d6:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <SystemInit+0xd8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006dc:	4b16      	ldr	r3, [pc, #88]	@ (8000738 <SystemInit+0xd8>)
 80006de:	4a18      	ldr	r2, [pc, #96]	@ (8000740 <SystemInit+0xe0>)
 80006e0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <SystemInit+0xd8>)
 80006e4:	4a17      	ldr	r2, [pc, #92]	@ (8000744 <SystemInit+0xe4>)
 80006e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80006e8:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <SystemInit+0xd8>)
 80006ea:	4a17      	ldr	r2, [pc, #92]	@ (8000748 <SystemInit+0xe8>)
 80006ec:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <SystemInit+0xd8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006f4:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <SystemInit+0xd8>)
 80006f6:	4a14      	ldr	r2, [pc, #80]	@ (8000748 <SystemInit+0xe8>)
 80006f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <SystemInit+0xd8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000700:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <SystemInit+0xd8>)
 8000702:	4a11      	ldr	r2, [pc, #68]	@ (8000748 <SystemInit+0xe8>)
 8000704:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000706:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <SystemInit+0xd8>)
 8000708:	2200      	movs	r2, #0
 800070a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800070c:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <SystemInit+0xd8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a09      	ldr	r2, [pc, #36]	@ (8000738 <SystemInit+0xd8>)
 8000712:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000716:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000718:	4b07      	ldr	r3, [pc, #28]	@ (8000738 <SystemInit+0xd8>)
 800071a:	2200      	movs	r2, #0
 800071c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <SystemInit+0xec>)
 8000720:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000724:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	e000ed00 	.word	0xe000ed00
 8000734:	52002000 	.word	0x52002000
 8000738:	58024400 	.word	0x58024400
 800073c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000740:	02020200 	.word	0x02020200
 8000744:	01ff0000 	.word	0x01ff0000
 8000748:	01010280 	.word	0x01010280
 800074c:	52004000 	.word	0x52004000

08000750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000750:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000788 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000754:	f7ff ff84 	bl	8000660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000758:	480c      	ldr	r0, [pc, #48]	@ (800078c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800075a:	490d      	ldr	r1, [pc, #52]	@ (8000790 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800075c:	4a0d      	ldr	r2, [pc, #52]	@ (8000794 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000760:	e002      	b.n	8000768 <LoopCopyDataInit>

08000762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000766:	3304      	adds	r3, #4

08000768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800076c:	d3f9      	bcc.n	8000762 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076e:	4a0a      	ldr	r2, [pc, #40]	@ (8000798 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000770:	4c0a      	ldr	r4, [pc, #40]	@ (800079c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000774:	e001      	b.n	800077a <LoopFillZerobss>

08000776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000778:	3204      	adds	r2, #4

0800077a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800077c:	d3fb      	bcc.n	8000776 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800077e:	f002 ff2b 	bl	80035d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000782:	f7ff fdc3 	bl	800030c <main>
  bx  lr
 8000786:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000788:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800078c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000790:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000794:	08003650 	.word	0x08003650
  ldr r2, =_sbss
 8000798:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800079c:	24000084 	.word	0x24000084

080007a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007a0:	e7fe      	b.n	80007a0 <ADC3_IRQHandler>
	...

080007a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007aa:	2003      	movs	r0, #3
 80007ac:	f000 f93e 	bl	8000a2c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80007b0:	f001 fa8c 	bl	8001ccc <HAL_RCC_GetSysClockFreq>
 80007b4:	4602      	mov	r2, r0
 80007b6:	4b15      	ldr	r3, [pc, #84]	@ (800080c <HAL_Init+0x68>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	0a1b      	lsrs	r3, r3, #8
 80007bc:	f003 030f 	and.w	r3, r3, #15
 80007c0:	4913      	ldr	r1, [pc, #76]	@ (8000810 <HAL_Init+0x6c>)
 80007c2:	5ccb      	ldrb	r3, [r1, r3]
 80007c4:	f003 031f 	and.w	r3, r3, #31
 80007c8:	fa22 f303 	lsr.w	r3, r2, r3
 80007cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80007ce:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <HAL_Init+0x68>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	f003 030f 	and.w	r3, r3, #15
 80007d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000810 <HAL_Init+0x6c>)
 80007d8:	5cd3      	ldrb	r3, [r2, r3]
 80007da:	f003 031f 	and.w	r3, r3, #31
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	fa22 f303 	lsr.w	r3, r2, r3
 80007e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000814 <HAL_Init+0x70>)
 80007e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80007e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000818 <HAL_Init+0x74>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007ee:	200f      	movs	r0, #15
 80007f0:	f000 f814 	bl	800081c <HAL_InitTick>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	e002      	b.n	8000804 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80007fe:	f7ff fe7d 	bl	80004fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000802:	2300      	movs	r3, #0
}
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	58024400 	.word	0x58024400
 8000810:	08003638 	.word	0x08003638
 8000814:	24000004 	.word	0x24000004
 8000818:	24000000 	.word	0x24000000

0800081c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000824:	4b15      	ldr	r3, [pc, #84]	@ (800087c <HAL_InitTick+0x60>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d101      	bne.n	8000830 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800082c:	2301      	movs	r3, #1
 800082e:	e021      	b.n	8000874 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000830:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <HAL_InitTick+0x64>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b11      	ldr	r3, [pc, #68]	@ (800087c <HAL_InitTick+0x60>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4619      	mov	r1, r3
 800083a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800083e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000842:	fbb2 f3f3 	udiv	r3, r2, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f000 f915 	bl	8000a76 <HAL_SYSTICK_Config>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	e00e      	b.n	8000874 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b0f      	cmp	r3, #15
 800085a:	d80a      	bhi.n	8000872 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800085c:	2200      	movs	r2, #0
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	f000 f8ed 	bl	8000a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000868:	4a06      	ldr	r2, [pc, #24]	@ (8000884 <HAL_InitTick+0x68>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800086e:	2300      	movs	r3, #0
 8000870:	e000      	b.n	8000874 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	2400000c 	.word	0x2400000c
 8000880:	24000000 	.word	0x24000000
 8000884:	24000008 	.word	0x24000008

08000888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <HAL_IncTick+0x20>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <HAL_IncTick+0x24>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4413      	add	r3, r2
 8000898:	4a04      	ldr	r2, [pc, #16]	@ (80008ac <HAL_IncTick+0x24>)
 800089a:	6013      	str	r3, [r2, #0]
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	2400000c 	.word	0x2400000c
 80008ac:	24000080 	.word	0x24000080

080008b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return uwTick;
 80008b4:	4b03      	ldr	r3, [pc, #12]	@ (80008c4 <HAL_GetTick+0x14>)
 80008b6:	681b      	ldr	r3, [r3, #0]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	24000080 	.word	0x24000080

080008c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <__NVIC_SetPriorityGrouping+0x40>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008e4:	4013      	ands	r3, r2
 80008e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80008f0:	4b06      	ldr	r3, [pc, #24]	@ (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008f2:	4313      	orrs	r3, r2
 80008f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f6:	4a04      	ldr	r2, [pc, #16]	@ (8000908 <__NVIC_SetPriorityGrouping+0x40>)
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	60d3      	str	r3, [r2, #12]
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000ed00 	.word	0xe000ed00
 800090c:	05fa0000 	.word	0x05fa0000

08000910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000914:	4b04      	ldr	r3, [pc, #16]	@ (8000928 <__NVIC_GetPriorityGrouping+0x18>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	0a1b      	lsrs	r3, r3, #8
 800091a:	f003 0307 	and.w	r3, r3, #7
}
 800091e:	4618      	mov	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	6039      	str	r1, [r7, #0]
 8000936:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000938:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800093c:	2b00      	cmp	r3, #0
 800093e:	db0a      	blt.n	8000956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	490c      	ldr	r1, [pc, #48]	@ (8000978 <__NVIC_SetPriority+0x4c>)
 8000946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800094a:	0112      	lsls	r2, r2, #4
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	440b      	add	r3, r1
 8000950:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000954:	e00a      	b.n	800096c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4908      	ldr	r1, [pc, #32]	@ (800097c <__NVIC_SetPriority+0x50>)
 800095c:	88fb      	ldrh	r3, [r7, #6]
 800095e:	f003 030f 	and.w	r3, r3, #15
 8000962:	3b04      	subs	r3, #4
 8000964:	0112      	lsls	r2, r2, #4
 8000966:	b2d2      	uxtb	r2, r2
 8000968:	440b      	add	r3, r1
 800096a:	761a      	strb	r2, [r3, #24]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	e000e100 	.word	0xe000e100
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000980:	b480      	push	{r7}
 8000982:	b089      	sub	sp, #36	@ 0x24
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	f1c3 0307 	rsb	r3, r3, #7
 800099a:	2b04      	cmp	r3, #4
 800099c:	bf28      	it	cs
 800099e:	2304      	movcs	r3, #4
 80009a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3304      	adds	r3, #4
 80009a6:	2b06      	cmp	r3, #6
 80009a8:	d902      	bls.n	80009b0 <NVIC_EncodePriority+0x30>
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3b03      	subs	r3, #3
 80009ae:	e000      	b.n	80009b2 <NVIC_EncodePriority+0x32>
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	f04f 32ff 	mov.w	r2, #4294967295
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43da      	mvns	r2, r3
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	401a      	ands	r2, r3
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c8:	f04f 31ff 	mov.w	r1, #4294967295
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	43d9      	mvns	r1, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	4313      	orrs	r3, r2
         );
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3724      	adds	r7, #36	@ 0x24
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
	...

080009e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009f8:	d301      	bcc.n	80009fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fa:	2301      	movs	r3, #1
 80009fc:	e00f      	b.n	8000a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000a28 <SysTick_Config+0x40>)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a06:	210f      	movs	r1, #15
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	f7ff ff8e 	bl	800092c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a10:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <SysTick_Config+0x40>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a16:	4b04      	ldr	r3, [pc, #16]	@ (8000a28 <SysTick_Config+0x40>)
 8000a18:	2207      	movs	r2, #7
 8000a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	e000e010 	.word	0xe000e010

08000a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff ff47 	bl	80008c8 <__NVIC_SetPriorityGrouping>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	4603      	mov	r3, r0
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
 8000a4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a50:	f7ff ff5e 	bl	8000910 <__NVIC_GetPriorityGrouping>
 8000a54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	68b9      	ldr	r1, [r7, #8]
 8000a5a:	6978      	ldr	r0, [r7, #20]
 8000a5c:	f7ff ff90 	bl	8000980 <NVIC_EncodePriority>
 8000a60:	4602      	mov	r2, r0
 8000a62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff5f 	bl	800092c <__NVIC_SetPriority>
}
 8000a6e:	bf00      	nop
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff ffb2 	bl	80009e8 <SysTick_Config>
 8000a84:	4603      	mov	r3, r0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000a94:	f3bf 8f5f 	dmb	sy
}
 8000a98:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000a9a:	4b07      	ldr	r3, [pc, #28]	@ (8000ab8 <HAL_MPU_Disable+0x28>)
 8000a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a9e:	4a06      	ldr	r2, [pc, #24]	@ (8000ab8 <HAL_MPU_Disable+0x28>)
 8000aa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000aa4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000aa6:	4b05      	ldr	r3, [pc, #20]	@ (8000abc <HAL_MPU_Disable+0x2c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	605a      	str	r2, [r3, #4]
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00
 8000abc:	e000ed90 	.word	0xe000ed90

08000ac0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000ac8:	4a0b      	ldr	r2, [pc, #44]	@ (8000af8 <HAL_MPU_Enable+0x38>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <HAL_MPU_Enable+0x3c>)
 8000ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ad6:	4a09      	ldr	r2, [pc, #36]	@ (8000afc <HAL_MPU_Enable+0x3c>)
 8000ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000adc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000ade:	f3bf 8f4f 	dsb	sy
}
 8000ae2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ae4:	f3bf 8f6f 	isb	sy
}
 8000ae8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed90 	.word	0xe000ed90
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	785a      	ldrb	r2, [r3, #1]
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b7c <HAL_MPU_ConfigRegion+0x7c>)
 8000b0e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000b10:	4b1a      	ldr	r3, [pc, #104]	@ (8000b7c <HAL_MPU_ConfigRegion+0x7c>)
 8000b12:	691b      	ldr	r3, [r3, #16]
 8000b14:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <HAL_MPU_ConfigRegion+0x7c>)
 8000b16:	f023 0301 	bic.w	r3, r3, #1
 8000b1a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000b1c:	4a17      	ldr	r2, [pc, #92]	@ (8000b7c <HAL_MPU_ConfigRegion+0x7c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	7b1b      	ldrb	r3, [r3, #12]
 8000b28:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	7adb      	ldrb	r3, [r3, #11]
 8000b2e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	7a9b      	ldrb	r3, [r3, #10]
 8000b36:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000b38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	7b5b      	ldrb	r3, [r3, #13]
 8000b3e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000b40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	7b9b      	ldrb	r3, [r3, #14]
 8000b46:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000b48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	7bdb      	ldrb	r3, [r3, #15]
 8000b4e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000b50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	7a5b      	ldrb	r3, [r3, #9]
 8000b56:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000b58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	7a1b      	ldrb	r3, [r3, #8]
 8000b5e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000b60:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	7812      	ldrb	r2, [r2, #0]
 8000b66:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b68:	4a04      	ldr	r2, [pc, #16]	@ (8000b7c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b6a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b6c:	6113      	str	r3, [r2, #16]
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed90 	.word	0xe000ed90

08000b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	@ 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000b8e:	4b86      	ldr	r3, [pc, #536]	@ (8000da8 <HAL_GPIO_Init+0x228>)
 8000b90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000b92:	e18c      	b.n	8000eae <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	2101      	movs	r1, #1
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f000 817e 	beq.w	8000ea8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d005      	beq.n	8000bc4 <HAL_GPIO_Init+0x44>
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d130      	bne.n	8000c26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	2203      	movs	r2, #3
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	69ba      	ldr	r2, [r7, #24]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	68da      	ldr	r2, [r3, #12]
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	4013      	ands	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	091b      	lsrs	r3, r3, #4
 8000c10:	f003 0201 	and.w	r2, r3, #1
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0303 	and.w	r3, r3, #3
 8000c2e:	2b03      	cmp	r3, #3
 8000c30:	d017      	beq.n	8000c62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	4013      	ands	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d123      	bne.n	8000cb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	08da      	lsrs	r2, r3, #3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3208      	adds	r2, #8
 8000c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	220f      	movs	r2, #15
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	691a      	ldr	r2, [r3, #16]
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	f003 0307 	and.w	r3, r3, #7
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	08da      	lsrs	r2, r3, #3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3208      	adds	r2, #8
 8000cb0:	69b9      	ldr	r1, [r7, #24]
 8000cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0203 	and.w	r2, r3, #3
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f000 80d8 	beq.w	8000ea8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf8:	4b2c      	ldr	r3, [pc, #176]	@ (8000dac <HAL_GPIO_Init+0x22c>)
 8000cfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cfe:	4a2b      	ldr	r2, [pc, #172]	@ (8000dac <HAL_GPIO_Init+0x22c>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d08:	4b28      	ldr	r3, [pc, #160]	@ (8000dac <HAL_GPIO_Init+0x22c>)
 8000d0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d16:	4a26      	ldr	r2, [pc, #152]	@ (8000db0 <HAL_GPIO_Init+0x230>)
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	3302      	adds	r3, #2
 8000d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f003 0303 	and.w	r3, r3, #3
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	220f      	movs	r2, #15
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4013      	ands	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000db4 <HAL_GPIO_Init+0x234>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d04a      	beq.n	8000dd8 <HAL_GPIO_Init+0x258>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a1c      	ldr	r2, [pc, #112]	@ (8000db8 <HAL_GPIO_Init+0x238>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d02b      	beq.n	8000da2 <HAL_GPIO_Init+0x222>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dbc <HAL_GPIO_Init+0x23c>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d025      	beq.n	8000d9e <HAL_GPIO_Init+0x21e>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a1a      	ldr	r2, [pc, #104]	@ (8000dc0 <HAL_GPIO_Init+0x240>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d01f      	beq.n	8000d9a <HAL_GPIO_Init+0x21a>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a19      	ldr	r2, [pc, #100]	@ (8000dc4 <HAL_GPIO_Init+0x244>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d019      	beq.n	8000d96 <HAL_GPIO_Init+0x216>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a18      	ldr	r2, [pc, #96]	@ (8000dc8 <HAL_GPIO_Init+0x248>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d013      	beq.n	8000d92 <HAL_GPIO_Init+0x212>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a17      	ldr	r2, [pc, #92]	@ (8000dcc <HAL_GPIO_Init+0x24c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d00d      	beq.n	8000d8e <HAL_GPIO_Init+0x20e>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a16      	ldr	r2, [pc, #88]	@ (8000dd0 <HAL_GPIO_Init+0x250>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d007      	beq.n	8000d8a <HAL_GPIO_Init+0x20a>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a15      	ldr	r2, [pc, #84]	@ (8000dd4 <HAL_GPIO_Init+0x254>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d101      	bne.n	8000d86 <HAL_GPIO_Init+0x206>
 8000d82:	2309      	movs	r3, #9
 8000d84:	e029      	b.n	8000dda <HAL_GPIO_Init+0x25a>
 8000d86:	230a      	movs	r3, #10
 8000d88:	e027      	b.n	8000dda <HAL_GPIO_Init+0x25a>
 8000d8a:	2307      	movs	r3, #7
 8000d8c:	e025      	b.n	8000dda <HAL_GPIO_Init+0x25a>
 8000d8e:	2306      	movs	r3, #6
 8000d90:	e023      	b.n	8000dda <HAL_GPIO_Init+0x25a>
 8000d92:	2305      	movs	r3, #5
 8000d94:	e021      	b.n	8000dda <HAL_GPIO_Init+0x25a>
 8000d96:	2304      	movs	r3, #4
 8000d98:	e01f      	b.n	8000dda <HAL_GPIO_Init+0x25a>
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e01d      	b.n	8000dda <HAL_GPIO_Init+0x25a>
 8000d9e:	2302      	movs	r3, #2
 8000da0:	e01b      	b.n	8000dda <HAL_GPIO_Init+0x25a>
 8000da2:	2301      	movs	r3, #1
 8000da4:	e019      	b.n	8000dda <HAL_GPIO_Init+0x25a>
 8000da6:	bf00      	nop
 8000da8:	58000080 	.word	0x58000080
 8000dac:	58024400 	.word	0x58024400
 8000db0:	58000400 	.word	0x58000400
 8000db4:	58020000 	.word	0x58020000
 8000db8:	58020400 	.word	0x58020400
 8000dbc:	58020800 	.word	0x58020800
 8000dc0:	58020c00 	.word	0x58020c00
 8000dc4:	58021000 	.word	0x58021000
 8000dc8:	58021400 	.word	0x58021400
 8000dcc:	58021800 	.word	0x58021800
 8000dd0:	58021c00 	.word	0x58021c00
 8000dd4:	58022400 	.word	0x58022400
 8000dd8:	2300      	movs	r3, #0
 8000dda:	69fa      	ldr	r2, [r7, #28]
 8000ddc:	f002 0203 	and.w	r2, r2, #3
 8000de0:	0092      	lsls	r2, r2, #2
 8000de2:	4093      	lsls	r3, r2
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dea:	4938      	ldr	r1, [pc, #224]	@ (8000ecc <HAL_GPIO_Init+0x34c>)
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	089b      	lsrs	r3, r3, #2
 8000df0:	3302      	adds	r3, #2
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	43db      	mvns	r3, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4013      	ands	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000e1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d003      	beq.n	8000e4c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000e4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d003      	beq.n	8000e78 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f47f ae6b 	bne.w	8000b94 <HAL_GPIO_Init+0x14>
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	bf00      	nop
 8000ec2:	3724      	adds	r7, #36	@ 0x24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	58000400 	.word	0x58000400

08000ed0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e08b      	b.n	8000ffa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d106      	bne.n	8000efc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff fb1a 	bl	8000530 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2224      	movs	r2, #36	@ 0x24
 8000f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f022 0201 	bic.w	r2, r2, #1
 8000f12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000f20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d107      	bne.n	8000f4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	e006      	b.n	8000f58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000f56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d108      	bne.n	8000f72 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	e007      	b.n	8000f82 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000f80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6859      	ldr	r1, [r3, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001004 <HAL_I2C_Init+0x134>)
 8000f8e:	430b      	orrs	r3, r1
 8000f90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000fa0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	691a      	ldr	r2, [r3, #16]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69d9      	ldr	r1, [r3, #28]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a1a      	ldr	r2, [r3, #32]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f042 0201 	orr.w	r2, r2, #1
 8000fda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	02008000 	.word	0x02008000

08001008 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b20      	cmp	r3, #32
 800101c:	d138      	bne.n	8001090 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001024:	2b01      	cmp	r3, #1
 8001026:	d101      	bne.n	800102c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001028:	2302      	movs	r3, #2
 800102a:	e032      	b.n	8001092 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2201      	movs	r2, #1
 8001030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2224      	movs	r2, #36	@ 0x24
 8001038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 0201 	bic.w	r2, r2, #1
 800104a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800105a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6819      	ldr	r1, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	430a      	orrs	r2, r1
 800106a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 0201 	orr.w	r2, r2, #1
 800107a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2220      	movs	r2, #32
 8001080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	e000      	b.n	8001092 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001090:	2302      	movs	r3, #2
  }
}
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800109e:	b480      	push	{r7}
 80010a0:	b085      	sub	sp, #20
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b20      	cmp	r3, #32
 80010b2:	d139      	bne.n	8001128 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d101      	bne.n	80010c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80010be:	2302      	movs	r3, #2
 80010c0:	e033      	b.n	800112a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2224      	movs	r2, #36	@ 0x24
 80010ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 0201 	bic.w	r2, r2, #1
 80010e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80010f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0201 	orr.w	r2, r2, #1
 8001112:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2220      	movs	r2, #32
 8001118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	e000      	b.n	800112a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001128:	2302      	movs	r3, #2
  }
}
 800112a:	4618      	mov	r0, r3
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001140:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <HAL_PWREx_ConfigSupply+0x70>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	2b04      	cmp	r3, #4
 800114a:	d00a      	beq.n	8001162 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800114c:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <HAL_PWREx_ConfigSupply+0x70>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	429a      	cmp	r2, r3
 8001158:	d001      	beq.n	800115e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e01f      	b.n	800119e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e01d      	b.n	800119e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <HAL_PWREx_ConfigSupply+0x70>)
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	f023 0207 	bic.w	r2, r3, #7
 800116a:	490f      	ldr	r1, [pc, #60]	@ (80011a8 <HAL_PWREx_ConfigSupply+0x70>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4313      	orrs	r3, r2
 8001170:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001172:	f7ff fb9d 	bl	80008b0 <HAL_GetTick>
 8001176:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001178:	e009      	b.n	800118e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800117a:	f7ff fb99 	bl	80008b0 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001188:	d901      	bls.n	800118e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e007      	b.n	800119e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <HAL_PWREx_ConfigSupply+0x70>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001196:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800119a:	d1ee      	bne.n	800117a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	58024800 	.word	0x58024800

080011ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08c      	sub	sp, #48	@ 0x30
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e3c8      	b.n	8001950 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 8087 	beq.w	80012da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011cc:	4b88      	ldr	r3, [pc, #544]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80011d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011d6:	4b86      	ldr	r3, [pc, #536]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 80011d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011da:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80011dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011de:	2b10      	cmp	r3, #16
 80011e0:	d007      	beq.n	80011f2 <HAL_RCC_OscConfig+0x46>
 80011e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011e4:	2b18      	cmp	r3, #24
 80011e6:	d110      	bne.n	800120a <HAL_RCC_OscConfig+0x5e>
 80011e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d10b      	bne.n	800120a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f2:	4b7f      	ldr	r3, [pc, #508]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d06c      	beq.n	80012d8 <HAL_RCC_OscConfig+0x12c>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d168      	bne.n	80012d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e3a2      	b.n	8001950 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001212:	d106      	bne.n	8001222 <HAL_RCC_OscConfig+0x76>
 8001214:	4b76      	ldr	r3, [pc, #472]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a75      	ldr	r2, [pc, #468]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 800121a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	e02e      	b.n	8001280 <HAL_RCC_OscConfig+0xd4>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10c      	bne.n	8001244 <HAL_RCC_OscConfig+0x98>
 800122a:	4b71      	ldr	r3, [pc, #452]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a70      	ldr	r2, [pc, #448]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 8001230:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	4b6e      	ldr	r3, [pc, #440]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a6d      	ldr	r2, [pc, #436]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 800123c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e01d      	b.n	8001280 <HAL_RCC_OscConfig+0xd4>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800124c:	d10c      	bne.n	8001268 <HAL_RCC_OscConfig+0xbc>
 800124e:	4b68      	ldr	r3, [pc, #416]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a67      	ldr	r2, [pc, #412]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 8001254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b65      	ldr	r3, [pc, #404]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a64      	ldr	r2, [pc, #400]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 8001260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e00b      	b.n	8001280 <HAL_RCC_OscConfig+0xd4>
 8001268:	4b61      	ldr	r3, [pc, #388]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a60      	ldr	r2, [pc, #384]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 800126e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b5e      	ldr	r3, [pc, #376]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a5d      	ldr	r2, [pc, #372]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 800127a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800127e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d013      	beq.n	80012b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001288:	f7ff fb12 	bl	80008b0 <HAL_GetTick>
 800128c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001290:	f7ff fb0e 	bl	80008b0 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b64      	cmp	r3, #100	@ 0x64
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e356      	b.n	8001950 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012a2:	4b53      	ldr	r3, [pc, #332]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f0      	beq.n	8001290 <HAL_RCC_OscConfig+0xe4>
 80012ae:	e014      	b.n	80012da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b0:	f7ff fafe 	bl	80008b0 <HAL_GetTick>
 80012b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b8:	f7ff fafa 	bl	80008b0 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b64      	cmp	r3, #100	@ 0x64
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e342      	b.n	8001950 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012ca:	4b49      	ldr	r3, [pc, #292]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f0      	bne.n	80012b8 <HAL_RCC_OscConfig+0x10c>
 80012d6:	e000      	b.n	80012da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 808c 	beq.w	8001400 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012e8:	4b41      	ldr	r3, [pc, #260]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80012f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012f2:	4b3f      	ldr	r3, [pc, #252]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 80012f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80012f8:	6a3b      	ldr	r3, [r7, #32]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d007      	beq.n	800130e <HAL_RCC_OscConfig+0x162>
 80012fe:	6a3b      	ldr	r3, [r7, #32]
 8001300:	2b18      	cmp	r3, #24
 8001302:	d137      	bne.n	8001374 <HAL_RCC_OscConfig+0x1c8>
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d132      	bne.n	8001374 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800130e:	4b38      	ldr	r3, [pc, #224]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	2b00      	cmp	r3, #0
 8001318:	d005      	beq.n	8001326 <HAL_RCC_OscConfig+0x17a>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e314      	b.n	8001950 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001326:	4b32      	ldr	r3, [pc, #200]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 0219 	bic.w	r2, r3, #25
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	492f      	ldr	r1, [pc, #188]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 8001334:	4313      	orrs	r3, r2
 8001336:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001338:	f7ff faba 	bl	80008b0 <HAL_GetTick>
 800133c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001340:	f7ff fab6 	bl	80008b0 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e2fe      	b.n	8001950 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001352:	4b27      	ldr	r3, [pc, #156]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135e:	4b24      	ldr	r3, [pc, #144]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	061b      	lsls	r3, r3, #24
 800136c:	4920      	ldr	r1, [pc, #128]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 800136e:	4313      	orrs	r3, r2
 8001370:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001372:	e045      	b.n	8001400 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d026      	beq.n	80013ca <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800137c:	4b1c      	ldr	r3, [pc, #112]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f023 0219 	bic.w	r2, r3, #25
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	4919      	ldr	r1, [pc, #100]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138e:	f7ff fa8f 	bl	80008b0 <HAL_GetTick>
 8001392:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001396:	f7ff fa8b 	bl	80008b0 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e2d3      	b.n	8001950 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013a8:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0f0      	beq.n	8001396 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b4:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	061b      	lsls	r3, r3, #24
 80013c2:	490b      	ldr	r1, [pc, #44]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	604b      	str	r3, [r1, #4]
 80013c8:	e01a      	b.n	8001400 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ca:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a08      	ldr	r2, [pc, #32]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 80013d0:	f023 0301 	bic.w	r3, r3, #1
 80013d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d6:	f7ff fa6b 	bl	80008b0 <HAL_GetTick>
 80013da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013dc:	e00a      	b.n	80013f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013de:	f7ff fa67 	bl	80008b0 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d903      	bls.n	80013f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e2af      	b.n	8001950 <HAL_RCC_OscConfig+0x7a4>
 80013f0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013f4:	4b96      	ldr	r3, [pc, #600]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1ee      	bne.n	80013de <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0310 	and.w	r3, r3, #16
 8001408:	2b00      	cmp	r3, #0
 800140a:	d06a      	beq.n	80014e2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800140c:	4b90      	ldr	r3, [pc, #576]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001414:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001416:	4b8e      	ldr	r3, [pc, #568]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 8001418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800141a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	2b08      	cmp	r3, #8
 8001420:	d007      	beq.n	8001432 <HAL_RCC_OscConfig+0x286>
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	2b18      	cmp	r3, #24
 8001426:	d11b      	bne.n	8001460 <HAL_RCC_OscConfig+0x2b4>
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	2b01      	cmp	r3, #1
 8001430:	d116      	bne.n	8001460 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001432:	4b87      	ldr	r3, [pc, #540]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800143a:	2b00      	cmp	r3, #0
 800143c:	d005      	beq.n	800144a <HAL_RCC_OscConfig+0x29e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	2b80      	cmp	r3, #128	@ 0x80
 8001444:	d001      	beq.n	800144a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e282      	b.n	8001950 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800144a:	4b81      	ldr	r3, [pc, #516]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	061b      	lsls	r3, r3, #24
 8001458:	497d      	ldr	r1, [pc, #500]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 800145a:	4313      	orrs	r3, r2
 800145c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800145e:	e040      	b.n	80014e2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d023      	beq.n	80014b0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001468:	4b79      	ldr	r3, [pc, #484]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a78      	ldr	r2, [pc, #480]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 800146e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff fa1c 	bl	80008b0 <HAL_GetTick>
 8001478:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800147c:	f7ff fa18 	bl	80008b0 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e260      	b.n	8001950 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800148e:	4b70      	ldr	r3, [pc, #448]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800149a:	4b6d      	ldr	r3, [pc, #436]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	061b      	lsls	r3, r3, #24
 80014a8:	4969      	ldr	r1, [pc, #420]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	60cb      	str	r3, [r1, #12]
 80014ae:	e018      	b.n	80014e2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80014b0:	4b67      	ldr	r3, [pc, #412]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a66      	ldr	r2, [pc, #408]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 80014b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80014ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014bc:	f7ff f9f8 	bl	80008b0 <HAL_GetTick>
 80014c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80014c4:	f7ff f9f4 	bl	80008b0 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e23c      	b.n	8001950 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014d6:	4b5e      	ldr	r3, [pc, #376]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d036      	beq.n	800155c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d019      	beq.n	800152a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f6:	4b56      	ldr	r3, [pc, #344]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 80014f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014fa:	4a55      	ldr	r2, [pc, #340]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001502:	f7ff f9d5 	bl	80008b0 <HAL_GetTick>
 8001506:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800150a:	f7ff f9d1 	bl	80008b0 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e219      	b.n	8001950 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800151c:	4b4c      	ldr	r3, [pc, #304]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 800151e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x35e>
 8001528:	e018      	b.n	800155c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800152a:	4b49      	ldr	r3, [pc, #292]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 800152c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800152e:	4a48      	ldr	r2, [pc, #288]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 8001530:	f023 0301 	bic.w	r3, r3, #1
 8001534:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001536:	f7ff f9bb 	bl	80008b0 <HAL_GetTick>
 800153a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800153e:	f7ff f9b7 	bl	80008b0 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e1ff      	b.n	8001950 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001550:	4b3f      	ldr	r3, [pc, #252]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 8001552:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f0      	bne.n	800153e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0320 	and.w	r3, r3, #32
 8001564:	2b00      	cmp	r3, #0
 8001566:	d036      	beq.n	80015d6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d019      	beq.n	80015a4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001570:	4b37      	ldr	r3, [pc, #220]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a36      	ldr	r2, [pc, #216]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 8001576:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800157a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800157c:	f7ff f998 	bl	80008b0 <HAL_GetTick>
 8001580:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001584:	f7ff f994 	bl	80008b0 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e1dc      	b.n	8001950 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001596:	4b2e      	ldr	r3, [pc, #184]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0x3d8>
 80015a2:	e018      	b.n	80015d6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a29      	ldr	r2, [pc, #164]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 80015aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80015ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80015b0:	f7ff f97e 	bl	80008b0 <HAL_GetTick>
 80015b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015b8:	f7ff f97a 	bl	80008b0 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e1c2      	b.n	8001950 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015ca:	4b21      	ldr	r3, [pc, #132]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 8086 	beq.w	80016f0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <HAL_RCC_OscConfig+0x4a8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001654 <HAL_RCC_OscConfig+0x4a8>)
 80015ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80015f0:	f7ff f95e 	bl	80008b0 <HAL_GetTick>
 80015f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f8:	f7ff f95a 	bl	80008b0 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	@ 0x64
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e1a2      	b.n	8001950 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800160a:	4b12      	ldr	r3, [pc, #72]	@ (8001654 <HAL_RCC_OscConfig+0x4a8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d106      	bne.n	800162c <HAL_RCC_OscConfig+0x480>
 800161e:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001622:	4a0b      	ldr	r2, [pc, #44]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6713      	str	r3, [r2, #112]	@ 0x70
 800162a:	e032      	b.n	8001692 <HAL_RCC_OscConfig+0x4e6>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d111      	bne.n	8001658 <HAL_RCC_OscConfig+0x4ac>
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001638:	4a05      	ldr	r2, [pc, #20]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 800163a:	f023 0301 	bic.w	r3, r3, #1
 800163e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001640:	4b03      	ldr	r3, [pc, #12]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 8001642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001644:	4a02      	ldr	r2, [pc, #8]	@ (8001650 <HAL_RCC_OscConfig+0x4a4>)
 8001646:	f023 0304 	bic.w	r3, r3, #4
 800164a:	6713      	str	r3, [r2, #112]	@ 0x70
 800164c:	e021      	b.n	8001692 <HAL_RCC_OscConfig+0x4e6>
 800164e:	bf00      	nop
 8001650:	58024400 	.word	0x58024400
 8001654:	58024800 	.word	0x58024800
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b05      	cmp	r3, #5
 800165e:	d10c      	bne.n	800167a <HAL_RCC_OscConfig+0x4ce>
 8001660:	4b83      	ldr	r3, [pc, #524]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 8001662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001664:	4a82      	ldr	r2, [pc, #520]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 8001666:	f043 0304 	orr.w	r3, r3, #4
 800166a:	6713      	str	r3, [r2, #112]	@ 0x70
 800166c:	4b80      	ldr	r3, [pc, #512]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 800166e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001670:	4a7f      	ldr	r2, [pc, #508]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6713      	str	r3, [r2, #112]	@ 0x70
 8001678:	e00b      	b.n	8001692 <HAL_RCC_OscConfig+0x4e6>
 800167a:	4b7d      	ldr	r3, [pc, #500]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 800167c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800167e:	4a7c      	ldr	r2, [pc, #496]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 8001680:	f023 0301 	bic.w	r3, r3, #1
 8001684:	6713      	str	r3, [r2, #112]	@ 0x70
 8001686:	4b7a      	ldr	r3, [pc, #488]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 8001688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800168a:	4a79      	ldr	r2, [pc, #484]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 800168c:	f023 0304 	bic.w	r3, r3, #4
 8001690:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d015      	beq.n	80016c6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169a:	f7ff f909 	bl	80008b0 <HAL_GetTick>
 800169e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016a0:	e00a      	b.n	80016b8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a2:	f7ff f905 	bl	80008b0 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e14b      	b.n	8001950 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016b8:	4b6d      	ldr	r3, [pc, #436]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 80016ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0ee      	beq.n	80016a2 <HAL_RCC_OscConfig+0x4f6>
 80016c4:	e014      	b.n	80016f0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c6:	f7ff f8f3 	bl	80008b0 <HAL_GetTick>
 80016ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016cc:	e00a      	b.n	80016e4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ce:	f7ff f8ef 	bl	80008b0 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016dc:	4293      	cmp	r3, r2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e135      	b.n	8001950 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016e4:	4b62      	ldr	r3, [pc, #392]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 80016e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1ee      	bne.n	80016ce <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 812a 	beq.w	800194e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80016fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001702:	2b18      	cmp	r3, #24
 8001704:	f000 80ba 	beq.w	800187c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170c:	2b02      	cmp	r3, #2
 800170e:	f040 8095 	bne.w	800183c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001712:	4b57      	ldr	r3, [pc, #348]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a56      	ldr	r2, [pc, #344]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 8001718:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800171c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171e:	f7ff f8c7 	bl	80008b0 <HAL_GetTick>
 8001722:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001726:	f7ff f8c3 	bl	80008b0 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e10b      	b.n	8001950 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001738:	4b4d      	ldr	r3, [pc, #308]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f0      	bne.n	8001726 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001744:	4b4a      	ldr	r3, [pc, #296]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 8001746:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001748:	4b4a      	ldr	r3, [pc, #296]	@ (8001874 <HAL_RCC_OscConfig+0x6c8>)
 800174a:	4013      	ands	r3, r2
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	430a      	orrs	r2, r1
 8001758:	4945      	ldr	r1, [pc, #276]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 800175a:	4313      	orrs	r3, r2
 800175c:	628b      	str	r3, [r1, #40]	@ 0x28
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	3b01      	subs	r3, #1
 8001764:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800176c:	3b01      	subs	r3, #1
 800176e:	025b      	lsls	r3, r3, #9
 8001770:	b29b      	uxth	r3, r3
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001778:	3b01      	subs	r3, #1
 800177a:	041b      	lsls	r3, r3, #16
 800177c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001786:	3b01      	subs	r3, #1
 8001788:	061b      	lsls	r3, r3, #24
 800178a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800178e:	4938      	ldr	r1, [pc, #224]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 8001790:	4313      	orrs	r3, r2
 8001792:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001794:	4b36      	ldr	r3, [pc, #216]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 8001796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001798:	4a35      	ldr	r2, [pc, #212]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80017a0:	4b33      	ldr	r3, [pc, #204]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 80017a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017a4:	4b34      	ldr	r3, [pc, #208]	@ (8001878 <HAL_RCC_OscConfig+0x6cc>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80017ac:	00d2      	lsls	r2, r2, #3
 80017ae:	4930      	ldr	r1, [pc, #192]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80017b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 80017b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b8:	f023 020c 	bic.w	r2, r3, #12
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c0:	492b      	ldr	r1, [pc, #172]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80017c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 80017c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ca:	f023 0202 	bic.w	r2, r3, #2
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d2:	4927      	ldr	r1, [pc, #156]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80017d8:	4b25      	ldr	r3, [pc, #148]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 80017da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017dc:	4a24      	ldr	r2, [pc, #144]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 80017de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80017e4:	4b22      	ldr	r3, [pc, #136]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 80017e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e8:	4a21      	ldr	r2, [pc, #132]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 80017ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80017f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 80017f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f4:	4a1e      	ldr	r2, [pc, #120]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 80017f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80017fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 80017fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001800:	4a1b      	ldr	r2, [pc, #108]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001808:	4b19      	ldr	r3, [pc, #100]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a18      	ldr	r2, [pc, #96]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 800180e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001814:	f7ff f84c 	bl	80008b0 <HAL_GetTick>
 8001818:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181c:	f7ff f848 	bl	80008b0 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e090      	b.n	8001950 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800182e:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0x670>
 800183a:	e088      	b.n	800194e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183c:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0b      	ldr	r2, [pc, #44]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 8001842:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001848:	f7ff f832 	bl	80008b0 <HAL_GetTick>
 800184c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001850:	f7ff f82e 	bl	80008b0 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e076      	b.n	8001950 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001862:	4b03      	ldr	r3, [pc, #12]	@ (8001870 <HAL_RCC_OscConfig+0x6c4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x6a4>
 800186e:	e06e      	b.n	800194e <HAL_RCC_OscConfig+0x7a2>
 8001870:	58024400 	.word	0x58024400
 8001874:	fffffc0c 	.word	0xfffffc0c
 8001878:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800187c:	4b36      	ldr	r3, [pc, #216]	@ (8001958 <HAL_RCC_OscConfig+0x7ac>)
 800187e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001880:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001882:	4b35      	ldr	r3, [pc, #212]	@ (8001958 <HAL_RCC_OscConfig+0x7ac>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188c:	2b01      	cmp	r3, #1
 800188e:	d031      	beq.n	80018f4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	f003 0203 	and.w	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800189a:	429a      	cmp	r2, r3
 800189c:	d12a      	bne.n	80018f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	091b      	lsrs	r3, r3, #4
 80018a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d122      	bne.n	80018f4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d11a      	bne.n	80018f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	0a5b      	lsrs	r3, r3, #9
 80018c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018ca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d111      	bne.n	80018f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	0c1b      	lsrs	r3, r3, #16
 80018d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d108      	bne.n	80018f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	0e1b      	lsrs	r3, r3, #24
 80018e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e02b      	b.n	8001950 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80018f8:	4b17      	ldr	r3, [pc, #92]	@ (8001958 <HAL_RCC_OscConfig+0x7ac>)
 80018fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018fc:	08db      	lsrs	r3, r3, #3
 80018fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001902:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	429a      	cmp	r2, r3
 800190c:	d01f      	beq.n	800194e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800190e:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <HAL_RCC_OscConfig+0x7ac>)
 8001910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001912:	4a11      	ldr	r2, [pc, #68]	@ (8001958 <HAL_RCC_OscConfig+0x7ac>)
 8001914:	f023 0301 	bic.w	r3, r3, #1
 8001918:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800191a:	f7fe ffc9 	bl	80008b0 <HAL_GetTick>
 800191e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001920:	bf00      	nop
 8001922:	f7fe ffc5 	bl	80008b0 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192a:	4293      	cmp	r3, r2
 800192c:	d0f9      	beq.n	8001922 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800192e:	4b0a      	ldr	r3, [pc, #40]	@ (8001958 <HAL_RCC_OscConfig+0x7ac>)
 8001930:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001932:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <HAL_RCC_OscConfig+0x7b0>)
 8001934:	4013      	ands	r3, r2
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800193a:	00d2      	lsls	r2, r2, #3
 800193c:	4906      	ldr	r1, [pc, #24]	@ (8001958 <HAL_RCC_OscConfig+0x7ac>)
 800193e:	4313      	orrs	r3, r2
 8001940:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001942:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <HAL_RCC_OscConfig+0x7ac>)
 8001944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001946:	4a04      	ldr	r2, [pc, #16]	@ (8001958 <HAL_RCC_OscConfig+0x7ac>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3730      	adds	r7, #48	@ 0x30
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	58024400 	.word	0x58024400
 800195c:	ffff0007 	.word	0xffff0007

08001960 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e19c      	b.n	8001cae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001974:	4b8a      	ldr	r3, [pc, #552]	@ (8001ba0 <HAL_RCC_ClockConfig+0x240>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 030f 	and.w	r3, r3, #15
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d910      	bls.n	80019a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b87      	ldr	r3, [pc, #540]	@ (8001ba0 <HAL_RCC_ClockConfig+0x240>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 020f 	bic.w	r2, r3, #15
 800198a:	4985      	ldr	r1, [pc, #532]	@ (8001ba0 <HAL_RCC_ClockConfig+0x240>)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001992:	4b83      	ldr	r3, [pc, #524]	@ (8001ba0 <HAL_RCC_ClockConfig+0x240>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e184      	b.n	8001cae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d010      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691a      	ldr	r2, [r3, #16]
 80019b4:	4b7b      	ldr	r3, [pc, #492]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019bc:	429a      	cmp	r2, r3
 80019be:	d908      	bls.n	80019d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80019c0:	4b78      	ldr	r3, [pc, #480]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	4975      	ldr	r1, [pc, #468]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d010      	beq.n	8001a00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	4b70      	ldr	r3, [pc, #448]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d908      	bls.n	8001a00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80019ee:	4b6d      	ldr	r3, [pc, #436]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	496a      	ldr	r1, [pc, #424]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0310 	and.w	r3, r3, #16
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d010      	beq.n	8001a2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699a      	ldr	r2, [r3, #24]
 8001a10:	4b64      	ldr	r3, [pc, #400]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d908      	bls.n	8001a2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a1c:	4b61      	ldr	r3, [pc, #388]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	495e      	ldr	r1, [pc, #376]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0320 	and.w	r3, r3, #32
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d010      	beq.n	8001a5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69da      	ldr	r2, [r3, #28]
 8001a3e:	4b59      	ldr	r3, [pc, #356]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d908      	bls.n	8001a5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001a4a:	4b56      	ldr	r3, [pc, #344]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4953      	ldr	r1, [pc, #332]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d010      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d908      	bls.n	8001a8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a78:	4b4a      	ldr	r3, [pc, #296]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f023 020f 	bic.w	r2, r3, #15
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	4947      	ldr	r1, [pc, #284]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d055      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001a96:	4b43      	ldr	r3, [pc, #268]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	4940      	ldr	r1, [pc, #256]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d107      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ab0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d121      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0f6      	b.n	8001cae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	d107      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ac8:	4b36      	ldr	r3, [pc, #216]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d115      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0ea      	b.n	8001cae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ae0:	4b30      	ldr	r3, [pc, #192]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d109      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0de      	b.n	8001cae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001af0:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0d6      	b.n	8001cae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b00:	4b28      	ldr	r3, [pc, #160]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	f023 0207 	bic.w	r2, r3, #7
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	4925      	ldr	r1, [pc, #148]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b12:	f7fe fecd 	bl	80008b0 <HAL_GetTick>
 8001b16:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b18:	e00a      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1a:	f7fe fec9 	bl	80008b0 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e0be      	b.n	8001cae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b30:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d1eb      	bne.n	8001b1a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d010      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d208      	bcs.n	8001b70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	f023 020f 	bic.w	r2, r3, #15
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	490e      	ldr	r1, [pc, #56]	@ (8001ba4 <HAL_RCC_ClockConfig+0x244>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <HAL_RCC_ClockConfig+0x240>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d214      	bcs.n	8001ba8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b08      	ldr	r3, [pc, #32]	@ (8001ba0 <HAL_RCC_ClockConfig+0x240>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 020f 	bic.w	r2, r3, #15
 8001b86:	4906      	ldr	r1, [pc, #24]	@ (8001ba0 <HAL_RCC_ClockConfig+0x240>)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b04      	ldr	r3, [pc, #16]	@ (8001ba0 <HAL_RCC_ClockConfig+0x240>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e086      	b.n	8001cae <HAL_RCC_ClockConfig+0x34e>
 8001ba0:	52002000 	.word	0x52002000
 8001ba4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d010      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	4b3f      	ldr	r3, [pc, #252]	@ (8001cb8 <HAL_RCC_ClockConfig+0x358>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d208      	bcs.n	8001bd6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001bc4:	4b3c      	ldr	r3, [pc, #240]	@ (8001cb8 <HAL_RCC_ClockConfig+0x358>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	4939      	ldr	r1, [pc, #228]	@ (8001cb8 <HAL_RCC_ClockConfig+0x358>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d010      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	4b34      	ldr	r3, [pc, #208]	@ (8001cb8 <HAL_RCC_ClockConfig+0x358>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d208      	bcs.n	8001c04 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001bf2:	4b31      	ldr	r3, [pc, #196]	@ (8001cb8 <HAL_RCC_ClockConfig+0x358>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	492e      	ldr	r1, [pc, #184]	@ (8001cb8 <HAL_RCC_ClockConfig+0x358>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0310 	and.w	r3, r3, #16
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d010      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699a      	ldr	r2, [r3, #24]
 8001c14:	4b28      	ldr	r3, [pc, #160]	@ (8001cb8 <HAL_RCC_ClockConfig+0x358>)
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d208      	bcs.n	8001c32 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c20:	4b25      	ldr	r3, [pc, #148]	@ (8001cb8 <HAL_RCC_ClockConfig+0x358>)
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	4922      	ldr	r1, [pc, #136]	@ (8001cb8 <HAL_RCC_ClockConfig+0x358>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0320 	and.w	r3, r3, #32
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d010      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69da      	ldr	r2, [r3, #28]
 8001c42:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <HAL_RCC_ClockConfig+0x358>)
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d208      	bcs.n	8001c60 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb8 <HAL_RCC_ClockConfig+0x358>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	4917      	ldr	r1, [pc, #92]	@ (8001cb8 <HAL_RCC_ClockConfig+0x358>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c60:	f000 f834 	bl	8001ccc <HAL_RCC_GetSysClockFreq>
 8001c64:	4602      	mov	r2, r0
 8001c66:	4b14      	ldr	r3, [pc, #80]	@ (8001cb8 <HAL_RCC_ClockConfig+0x358>)
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	0a1b      	lsrs	r3, r3, #8
 8001c6c:	f003 030f 	and.w	r3, r3, #15
 8001c70:	4912      	ldr	r1, [pc, #72]	@ (8001cbc <HAL_RCC_ClockConfig+0x35c>)
 8001c72:	5ccb      	ldrb	r3, [r1, r3]
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb8 <HAL_RCC_ClockConfig+0x358>)
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	4a0d      	ldr	r2, [pc, #52]	@ (8001cbc <HAL_RCC_ClockConfig+0x35c>)
 8001c88:	5cd3      	ldrb	r3, [r2, r3]
 8001c8a:	f003 031f 	and.w	r3, r3, #31
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
 8001c94:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <HAL_RCC_ClockConfig+0x360>)
 8001c96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c98:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <HAL_RCC_ClockConfig+0x364>)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <HAL_RCC_ClockConfig+0x368>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fdba 	bl	800081c <HAL_InitTick>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	58024400 	.word	0x58024400
 8001cbc:	08003638 	.word	0x08003638
 8001cc0:	24000004 	.word	0x24000004
 8001cc4:	24000000 	.word	0x24000000
 8001cc8:	24000008 	.word	0x24000008

08001ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	@ 0x24
 8001cd0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cd2:	4bb3      	ldr	r3, [pc, #716]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cda:	2b18      	cmp	r3, #24
 8001cdc:	f200 8155 	bhi.w	8001f8a <HAL_RCC_GetSysClockFreq+0x2be>
 8001ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ce8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce6:	bf00      	nop
 8001ce8:	08001d4d 	.word	0x08001d4d
 8001cec:	08001f8b 	.word	0x08001f8b
 8001cf0:	08001f8b 	.word	0x08001f8b
 8001cf4:	08001f8b 	.word	0x08001f8b
 8001cf8:	08001f8b 	.word	0x08001f8b
 8001cfc:	08001f8b 	.word	0x08001f8b
 8001d00:	08001f8b 	.word	0x08001f8b
 8001d04:	08001f8b 	.word	0x08001f8b
 8001d08:	08001d73 	.word	0x08001d73
 8001d0c:	08001f8b 	.word	0x08001f8b
 8001d10:	08001f8b 	.word	0x08001f8b
 8001d14:	08001f8b 	.word	0x08001f8b
 8001d18:	08001f8b 	.word	0x08001f8b
 8001d1c:	08001f8b 	.word	0x08001f8b
 8001d20:	08001f8b 	.word	0x08001f8b
 8001d24:	08001f8b 	.word	0x08001f8b
 8001d28:	08001d79 	.word	0x08001d79
 8001d2c:	08001f8b 	.word	0x08001f8b
 8001d30:	08001f8b 	.word	0x08001f8b
 8001d34:	08001f8b 	.word	0x08001f8b
 8001d38:	08001f8b 	.word	0x08001f8b
 8001d3c:	08001f8b 	.word	0x08001f8b
 8001d40:	08001f8b 	.word	0x08001f8b
 8001d44:	08001f8b 	.word	0x08001f8b
 8001d48:	08001d7f 	.word	0x08001d7f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d4c:	4b94      	ldr	r3, [pc, #592]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0320 	and.w	r3, r3, #32
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d009      	beq.n	8001d6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001d58:	4b91      	ldr	r3, [pc, #580]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	08db      	lsrs	r3, r3, #3
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	4a90      	ldr	r2, [pc, #576]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d64:	fa22 f303 	lsr.w	r3, r2, r3
 8001d68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001d6a:	e111      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001d6c:	4b8d      	ldr	r3, [pc, #564]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d6e:	61bb      	str	r3, [r7, #24]
      break;
 8001d70:	e10e      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001d72:	4b8d      	ldr	r3, [pc, #564]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001d74:	61bb      	str	r3, [r7, #24]
      break;
 8001d76:	e10b      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001d78:	4b8c      	ldr	r3, [pc, #560]	@ (8001fac <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001d7a:	61bb      	str	r3, [r7, #24]
      break;
 8001d7c:	e108      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d7e:	4b88      	ldr	r3, [pc, #544]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001d88:	4b85      	ldr	r3, [pc, #532]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d92:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001d94:	4b82      	ldr	r3, [pc, #520]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001d9e:	4b80      	ldr	r3, [pc, #512]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da2:	08db      	lsrs	r3, r3, #3
 8001da4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	fb02 f303 	mul.w	r3, r2, r3
 8001dae:	ee07 3a90 	vmov	s15, r3
 8001db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001db6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 80e1 	beq.w	8001f84 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	f000 8083 	beq.w	8001ed0 <HAL_RCC_GetSysClockFreq+0x204>
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	f200 80a1 	bhi.w	8001f14 <HAL_RCC_GetSysClockFreq+0x248>
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0x114>
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d056      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0x1c0>
 8001dde:	e099      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001de0:	4b6f      	ldr	r3, [pc, #444]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0320 	and.w	r3, r3, #32
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d02d      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001dec:	4b6c      	ldr	r3, [pc, #432]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	08db      	lsrs	r3, r3, #3
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	4a6b      	ldr	r2, [pc, #428]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	ee07 3a90 	vmov	s15, r3
 8001e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	ee07 3a90 	vmov	s15, r3
 8001e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e16:	4b62      	ldr	r3, [pc, #392]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e1e:	ee07 3a90 	vmov	s15, r3
 8001e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e26:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e2a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8001fb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e42:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001e46:	e087      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	ee07 3a90 	vmov	s15, r3
 8001e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e52:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001fb4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e5a:	4b51      	ldr	r3, [pc, #324]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e6e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8001fb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e8a:	e065      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e96:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001fb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e9e:	4b40      	ldr	r3, [pc, #256]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ea6:	ee07 3a90 	vmov	s15, r3
 8001eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eae:	ed97 6a02 	vldr	s12, [r7, #8]
 8001eb2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8001fb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001ece:	e043      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eda:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001fbc <HAL_RCC_GetSysClockFreq+0x2f0>
 8001ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ee2:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eea:	ee07 3a90 	vmov	s15, r3
 8001eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ef2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ef6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8001fb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f12:	e021      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	ee07 3a90 	vmov	s15, r3
 8001f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f1e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001fb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f26:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f2e:	ee07 3a90 	vmov	s15, r3
 8001f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f36:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f3a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8001fb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f56:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001f58:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5c:	0a5b      	lsrs	r3, r3, #9
 8001f5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f62:	3301      	adds	r3, #1
 8001f64:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	ee07 3a90 	vmov	s15, r3
 8001f6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f70:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f7c:	ee17 3a90 	vmov	r3, s15
 8001f80:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001f82:	e005      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]
      break;
 8001f88:	e002      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001f8a:	4b07      	ldr	r3, [pc, #28]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f8c:	61bb      	str	r3, [r7, #24]
      break;
 8001f8e:	bf00      	nop
  }

  return sysclockfreq;
 8001f90:	69bb      	ldr	r3, [r7, #24]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3724      	adds	r7, #36	@ 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	58024400 	.word	0x58024400
 8001fa4:	03d09000 	.word	0x03d09000
 8001fa8:	003d0900 	.word	0x003d0900
 8001fac:	017d7840 	.word	0x017d7840
 8001fb0:	46000000 	.word	0x46000000
 8001fb4:	4c742400 	.word	0x4c742400
 8001fb8:	4a742400 	.word	0x4a742400
 8001fbc:	4bbebc20 	.word	0x4bbebc20

08001fc0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fc4:	b0c6      	sub	sp, #280	@ 0x118
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8001fe4:	2500      	movs	r5, #0
 8001fe6:	ea54 0305 	orrs.w	r3, r4, r5
 8001fea:	d049      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8001fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001ff0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ff2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8001ff6:	d02f      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8001ff8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8001ffc:	d828      	bhi.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8001ffe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002002:	d01a      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002004:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002008:	d822      	bhi.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800200e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002012:	d007      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002014:	e01c      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002016:	4bab      	ldr	r3, [pc, #684]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201a:	4aaa      	ldr	r2, [pc, #680]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800201c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002020:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002022:	e01a      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002028:	3308      	adds	r3, #8
 800202a:	2102      	movs	r1, #2
 800202c:	4618      	mov	r0, r3
 800202e:	f001 f967 	bl	8003300 <RCCEx_PLL2_Config>
 8002032:	4603      	mov	r3, r0
 8002034:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002038:	e00f      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800203a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800203e:	3328      	adds	r3, #40	@ 0x28
 8002040:	2102      	movs	r1, #2
 8002042:	4618      	mov	r0, r3
 8002044:	f001 fa0e 	bl	8003464 <RCCEx_PLL3_Config>
 8002048:	4603      	mov	r3, r0
 800204a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800204e:	e004      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002056:	e000      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800205a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10a      	bne.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002062:	4b98      	ldr	r3, [pc, #608]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002064:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002066:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800206a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800206e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002070:	4a94      	ldr	r2, [pc, #592]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002072:	430b      	orrs	r3, r1
 8002074:	6513      	str	r3, [r2, #80]	@ 0x50
 8002076:	e003      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002078:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800207c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002088:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800208c:	f04f 0900 	mov.w	r9, #0
 8002090:	ea58 0309 	orrs.w	r3, r8, r9
 8002094:	d047      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800209a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209c:	2b04      	cmp	r3, #4
 800209e:	d82a      	bhi.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80020a0:	a201      	add	r2, pc, #4	@ (adr r2, 80020a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80020a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a6:	bf00      	nop
 80020a8:	080020bd 	.word	0x080020bd
 80020ac:	080020cb 	.word	0x080020cb
 80020b0:	080020e1 	.word	0x080020e1
 80020b4:	080020ff 	.word	0x080020ff
 80020b8:	080020ff 	.word	0x080020ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020bc:	4b81      	ldr	r3, [pc, #516]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80020be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c0:	4a80      	ldr	r2, [pc, #512]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80020c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80020c8:	e01a      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80020ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80020ce:	3308      	adds	r3, #8
 80020d0:	2100      	movs	r1, #0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f001 f914 	bl	8003300 <RCCEx_PLL2_Config>
 80020d8:	4603      	mov	r3, r0
 80020da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80020de:	e00f      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80020e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80020e4:	3328      	adds	r3, #40	@ 0x28
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f001 f9bb 	bl	8003464 <RCCEx_PLL3_Config>
 80020ee:	4603      	mov	r3, r0
 80020f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80020f4:	e004      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80020fc:	e000      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80020fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002100:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10a      	bne.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002108:	4b6e      	ldr	r3, [pc, #440]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800210a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800210c:	f023 0107 	bic.w	r1, r3, #7
 8002110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002116:	4a6b      	ldr	r2, [pc, #428]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002118:	430b      	orrs	r3, r1
 800211a:	6513      	str	r3, [r2, #80]	@ 0x50
 800211c:	e003      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800211e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002122:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800212a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8002132:	f04f 0b00 	mov.w	fp, #0
 8002136:	ea5a 030b 	orrs.w	r3, sl, fp
 800213a:	d05b      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800213c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002140:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002144:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002148:	d03b      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800214a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800214e:	d834      	bhi.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002150:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002154:	d037      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002156:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800215a:	d82e      	bhi.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800215c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002160:	d033      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002162:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002166:	d828      	bhi.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002168:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800216c:	d01a      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800216e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002172:	d822      	bhi.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002178:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800217c:	d007      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800217e:	e01c      	b.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002180:	4b50      	ldr	r3, [pc, #320]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002184:	4a4f      	ldr	r2, [pc, #316]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800218a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800218c:	e01e      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800218e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002192:	3308      	adds	r3, #8
 8002194:	2100      	movs	r1, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f001 f8b2 	bl	8003300 <RCCEx_PLL2_Config>
 800219c:	4603      	mov	r3, r0
 800219e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80021a2:	e013      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80021a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80021a8:	3328      	adds	r3, #40	@ 0x28
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f001 f959 	bl	8003464 <RCCEx_PLL3_Config>
 80021b2:	4603      	mov	r3, r0
 80021b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80021b8:	e008      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80021c0:	e004      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80021c2:	bf00      	nop
 80021c4:	e002      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80021c6:	bf00      	nop
 80021c8:	e000      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80021ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80021cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10b      	bne.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80021d4:	4b3b      	ldr	r3, [pc, #236]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80021d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80021dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80021e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80021e4:	4a37      	ldr	r2, [pc, #220]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80021e6:	430b      	orrs	r3, r1
 80021e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80021ea:	e003      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80021f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80021f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80021f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002200:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002204:	2300      	movs	r3, #0
 8002206:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800220a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800220e:	460b      	mov	r3, r1
 8002210:	4313      	orrs	r3, r2
 8002212:	d05d      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002218:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800221c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002220:	d03b      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002222:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002226:	d834      	bhi.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002228:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800222c:	d037      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800222e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002232:	d82e      	bhi.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002234:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002238:	d033      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800223a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800223e:	d828      	bhi.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002240:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002244:	d01a      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002246:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800224a:	d822      	bhi.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002250:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002254:	d007      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002256:	e01c      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002258:	4b1a      	ldr	r3, [pc, #104]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800225a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225c:	4a19      	ldr	r2, [pc, #100]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800225e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002262:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002264:	e01e      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800226a:	3308      	adds	r3, #8
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f001 f846 	bl	8003300 <RCCEx_PLL2_Config>
 8002274:	4603      	mov	r3, r0
 8002276:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800227a:	e013      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800227c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002280:	3328      	adds	r3, #40	@ 0x28
 8002282:	2100      	movs	r1, #0
 8002284:	4618      	mov	r0, r3
 8002286:	f001 f8ed 	bl	8003464 <RCCEx_PLL3_Config>
 800228a:	4603      	mov	r3, r0
 800228c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002290:	e008      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002298:	e004      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800229a:	bf00      	nop
 800229c:	e002      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800229e:	bf00      	nop
 80022a0:	e000      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80022a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80022a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10d      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80022ac:	4b05      	ldr	r3, [pc, #20]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80022ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80022b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80022b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80022bc:	4a01      	ldr	r2, [pc, #4]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80022be:	430b      	orrs	r3, r1
 80022c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80022c2:	e005      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80022c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80022cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80022d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80022d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80022dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80022e0:	2300      	movs	r3, #0
 80022e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80022e6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4313      	orrs	r3, r2
 80022ee:	d03a      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80022f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80022f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f6:	2b30      	cmp	r3, #48	@ 0x30
 80022f8:	d01f      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80022fa:	2b30      	cmp	r3, #48	@ 0x30
 80022fc:	d819      	bhi.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80022fe:	2b20      	cmp	r3, #32
 8002300:	d00c      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002302:	2b20      	cmp	r3, #32
 8002304:	d815      	bhi.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002306:	2b00      	cmp	r3, #0
 8002308:	d019      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800230a:	2b10      	cmp	r3, #16
 800230c:	d111      	bne.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800230e:	4baa      	ldr	r3, [pc, #680]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002312:	4aa9      	ldr	r2, [pc, #676]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002314:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002318:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800231a:	e011      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800231c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002320:	3308      	adds	r3, #8
 8002322:	2102      	movs	r1, #2
 8002324:	4618      	mov	r0, r3
 8002326:	f000 ffeb 	bl	8003300 <RCCEx_PLL2_Config>
 800232a:	4603      	mov	r3, r0
 800232c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002330:	e006      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002338:	e002      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800233a:	bf00      	nop
 800233c:	e000      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800233e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002340:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10a      	bne.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002348:	4b9b      	ldr	r3, [pc, #620]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800234a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002356:	4a98      	ldr	r2, [pc, #608]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002358:	430b      	orrs	r3, r1
 800235a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800235c:	e003      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800235e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002362:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800236a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002372:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002376:	2300      	movs	r3, #0
 8002378:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800237c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002380:	460b      	mov	r3, r1
 8002382:	4313      	orrs	r3, r2
 8002384:	d051      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800238a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800238c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002390:	d035      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8002392:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002396:	d82e      	bhi.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002398:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800239c:	d031      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800239e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80023a2:	d828      	bhi.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80023a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023a8:	d01a      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80023aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023ae:	d822      	bhi.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80023b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023b8:	d007      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80023ba:	e01c      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023bc:	4b7e      	ldr	r3, [pc, #504]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80023be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c0:	4a7d      	ldr	r2, [pc, #500]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80023c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80023c8:	e01c      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80023ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80023ce:	3308      	adds	r3, #8
 80023d0:	2100      	movs	r1, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 ff94 	bl	8003300 <RCCEx_PLL2_Config>
 80023d8:	4603      	mov	r3, r0
 80023da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80023de:	e011      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80023e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80023e4:	3328      	adds	r3, #40	@ 0x28
 80023e6:	2100      	movs	r1, #0
 80023e8:	4618      	mov	r0, r3
 80023ea:	f001 f83b 	bl	8003464 <RCCEx_PLL3_Config>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80023f4:	e006      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80023fc:	e002      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80023fe:	bf00      	nop
 8002400:	e000      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002402:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002404:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10a      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800240c:	4b6a      	ldr	r3, [pc, #424]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800240e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002410:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241a:	4a67      	ldr	r2, [pc, #412]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800241c:	430b      	orrs	r3, r1
 800241e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002420:	e003      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002422:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002426:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800242a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800242e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002432:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002436:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800243a:	2300      	movs	r3, #0
 800243c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002440:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002444:	460b      	mov	r3, r1
 8002446:	4313      	orrs	r3, r2
 8002448:	d053      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800244a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800244e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002450:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002454:	d033      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8002456:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800245a:	d82c      	bhi.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800245c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002460:	d02f      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8002462:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002466:	d826      	bhi.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002468:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800246c:	d02b      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800246e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002472:	d820      	bhi.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002474:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002478:	d012      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800247a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800247e:	d81a      	bhi.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002480:	2b00      	cmp	r3, #0
 8002482:	d022      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002488:	d115      	bne.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800248a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800248e:	3308      	adds	r3, #8
 8002490:	2101      	movs	r1, #1
 8002492:	4618      	mov	r0, r3
 8002494:	f000 ff34 	bl	8003300 <RCCEx_PLL2_Config>
 8002498:	4603      	mov	r3, r0
 800249a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800249e:	e015      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80024a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80024a4:	3328      	adds	r3, #40	@ 0x28
 80024a6:	2101      	movs	r1, #1
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 ffdb 	bl	8003464 <RCCEx_PLL3_Config>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80024b4:	e00a      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80024bc:	e006      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80024be:	bf00      	nop
 80024c0:	e004      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80024c2:	bf00      	nop
 80024c4:	e002      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80024c6:	bf00      	nop
 80024c8:	e000      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80024ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10a      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80024d4:	4b38      	ldr	r3, [pc, #224]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80024d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024d8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80024dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80024e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e2:	4a35      	ldr	r2, [pc, #212]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80024e4:	430b      	orrs	r3, r1
 80024e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80024e8:	e003      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80024ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80024f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80024f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80024fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002502:	2300      	movs	r3, #0
 8002504:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002508:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800250c:	460b      	mov	r3, r1
 800250e:	4313      	orrs	r3, r2
 8002510:	d058      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002516:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800251a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800251e:	d033      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002520:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002524:	d82c      	bhi.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800252a:	d02f      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800252c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002530:	d826      	bhi.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002532:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002536:	d02b      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002538:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800253c:	d820      	bhi.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800253e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002542:	d012      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8002544:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002548:	d81a      	bhi.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800254a:	2b00      	cmp	r3, #0
 800254c:	d022      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800254e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002552:	d115      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002558:	3308      	adds	r3, #8
 800255a:	2101      	movs	r1, #1
 800255c:	4618      	mov	r0, r3
 800255e:	f000 fecf 	bl	8003300 <RCCEx_PLL2_Config>
 8002562:	4603      	mov	r3, r0
 8002564:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002568:	e015      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800256a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800256e:	3328      	adds	r3, #40	@ 0x28
 8002570:	2101      	movs	r1, #1
 8002572:	4618      	mov	r0, r3
 8002574:	f000 ff76 	bl	8003464 <RCCEx_PLL3_Config>
 8002578:	4603      	mov	r3, r0
 800257a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800257e:	e00a      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002586:	e006      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002588:	bf00      	nop
 800258a:	e004      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800258c:	bf00      	nop
 800258e:	e002      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002590:	bf00      	nop
 8002592:	e000      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002596:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10e      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800259e:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80025a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80025a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80025aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80025ae:	4a02      	ldr	r2, [pc, #8]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80025b0:	430b      	orrs	r3, r1
 80025b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80025b4:	e006      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80025b6:	bf00      	nop
 80025b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80025c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80025c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80025c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025cc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80025d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025d4:	2300      	movs	r3, #0
 80025d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80025da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80025de:	460b      	mov	r3, r1
 80025e0:	4313      	orrs	r3, r2
 80025e2:	d037      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80025e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80025e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025ee:	d00e      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80025f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025f4:	d816      	bhi.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d018      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80025fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025fe:	d111      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002600:	4bc4      	ldr	r3, [pc, #784]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002604:	4ac3      	ldr	r2, [pc, #780]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002606:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800260a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800260c:	e00f      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800260e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002612:	3308      	adds	r3, #8
 8002614:	2101      	movs	r1, #1
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fe72 	bl	8003300 <RCCEx_PLL2_Config>
 800261c:	4603      	mov	r3, r0
 800261e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002622:	e004      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800262a:	e000      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800262c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800262e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10a      	bne.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002636:	4bb7      	ldr	r3, [pc, #732]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800263a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800263e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002644:	4ab3      	ldr	r2, [pc, #716]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002646:	430b      	orrs	r3, r1
 8002648:	6513      	str	r3, [r2, #80]	@ 0x50
 800264a:	e003      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800264c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002650:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002660:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002664:	2300      	movs	r3, #0
 8002666:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800266a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800266e:	460b      	mov	r3, r1
 8002670:	4313      	orrs	r3, r2
 8002672:	d039      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800267a:	2b03      	cmp	r3, #3
 800267c:	d81c      	bhi.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800267e:	a201      	add	r2, pc, #4	@ (adr r2, 8002684 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002684:	080026c1 	.word	0x080026c1
 8002688:	08002695 	.word	0x08002695
 800268c:	080026a3 	.word	0x080026a3
 8002690:	080026c1 	.word	0x080026c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002694:	4b9f      	ldr	r3, [pc, #636]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002698:	4a9e      	ldr	r2, [pc, #632]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800269a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800269e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80026a0:	e00f      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80026a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80026a6:	3308      	adds	r3, #8
 80026a8:	2102      	movs	r1, #2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fe28 	bl	8003300 <RCCEx_PLL2_Config>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80026b6:	e004      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80026be:	e000      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80026c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10a      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80026ca:	4b92      	ldr	r3, [pc, #584]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80026cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ce:	f023 0103 	bic.w	r1, r3, #3
 80026d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80026d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d8:	4a8e      	ldr	r2, [pc, #568]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80026da:	430b      	orrs	r3, r1
 80026dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026de:	e003      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80026e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80026ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80026f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80026f8:	2300      	movs	r3, #0
 80026fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80026fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002702:	460b      	mov	r3, r1
 8002704:	4313      	orrs	r3, r2
 8002706:	f000 8099 	beq.w	800283c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800270a:	4b83      	ldr	r3, [pc, #524]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a82      	ldr	r2, [pc, #520]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002714:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002716:	f7fe f8cb 	bl	80008b0 <HAL_GetTick>
 800271a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800271e:	e00b      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002720:	f7fe f8c6 	bl	80008b0 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b64      	cmp	r3, #100	@ 0x64
 800272e:	d903      	bls.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002736:	e005      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002738:	4b77      	ldr	r3, [pc, #476]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0ed      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002744:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002748:	2b00      	cmp	r3, #0
 800274a:	d173      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800274c:	4b71      	ldr	r3, [pc, #452]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800274e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002754:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002758:	4053      	eors	r3, r2
 800275a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800275e:	2b00      	cmp	r3, #0
 8002760:	d015      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002762:	4b6c      	ldr	r3, [pc, #432]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002766:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800276a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800276e:	4b69      	ldr	r3, [pc, #420]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002772:	4a68      	ldr	r2, [pc, #416]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002778:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800277a:	4b66      	ldr	r3, [pc, #408]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800277c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277e:	4a65      	ldr	r2, [pc, #404]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002780:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002784:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002786:	4a63      	ldr	r2, [pc, #396]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002788:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800278c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800278e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002792:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002796:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800279a:	d118      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279c:	f7fe f888 	bl	80008b0 <HAL_GetTick>
 80027a0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027a4:	e00d      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a6:	f7fe f883 	bl	80008b0 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80027b0:	1ad2      	subs	r2, r2, r3
 80027b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d903      	bls.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80027c0:	e005      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027c2:	4b54      	ldr	r3, [pc, #336]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80027c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0eb      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80027ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d129      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80027de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027e6:	d10e      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80027e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80027f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80027f8:	091a      	lsrs	r2, r3, #4
 80027fa:	4b48      	ldr	r3, [pc, #288]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	4a45      	ldr	r2, [pc, #276]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002800:	430b      	orrs	r3, r1
 8002802:	6113      	str	r3, [r2, #16]
 8002804:	e005      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002806:	4b43      	ldr	r3, [pc, #268]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	4a42      	ldr	r2, [pc, #264]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800280c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002810:	6113      	str	r3, [r2, #16]
 8002812:	4b40      	ldr	r3, [pc, #256]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002814:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800281a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800281e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002822:	4a3c      	ldr	r2, [pc, #240]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002824:	430b      	orrs	r3, r1
 8002826:	6713      	str	r3, [r2, #112]	@ 0x70
 8002828:	e008      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800282a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800282e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8002832:	e003      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002834:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002838:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800283c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002844:	f002 0301 	and.w	r3, r2, #1
 8002848:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800284c:	2300      	movs	r3, #0
 800284e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002852:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002856:	460b      	mov	r3, r1
 8002858:	4313      	orrs	r3, r2
 800285a:	f000 808f 	beq.w	800297c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800285e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002862:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002864:	2b28      	cmp	r3, #40	@ 0x28
 8002866:	d871      	bhi.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002868:	a201      	add	r2, pc, #4	@ (adr r2, 8002870 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800286a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286e:	bf00      	nop
 8002870:	08002955 	.word	0x08002955
 8002874:	0800294d 	.word	0x0800294d
 8002878:	0800294d 	.word	0x0800294d
 800287c:	0800294d 	.word	0x0800294d
 8002880:	0800294d 	.word	0x0800294d
 8002884:	0800294d 	.word	0x0800294d
 8002888:	0800294d 	.word	0x0800294d
 800288c:	0800294d 	.word	0x0800294d
 8002890:	08002921 	.word	0x08002921
 8002894:	0800294d 	.word	0x0800294d
 8002898:	0800294d 	.word	0x0800294d
 800289c:	0800294d 	.word	0x0800294d
 80028a0:	0800294d 	.word	0x0800294d
 80028a4:	0800294d 	.word	0x0800294d
 80028a8:	0800294d 	.word	0x0800294d
 80028ac:	0800294d 	.word	0x0800294d
 80028b0:	08002937 	.word	0x08002937
 80028b4:	0800294d 	.word	0x0800294d
 80028b8:	0800294d 	.word	0x0800294d
 80028bc:	0800294d 	.word	0x0800294d
 80028c0:	0800294d 	.word	0x0800294d
 80028c4:	0800294d 	.word	0x0800294d
 80028c8:	0800294d 	.word	0x0800294d
 80028cc:	0800294d 	.word	0x0800294d
 80028d0:	08002955 	.word	0x08002955
 80028d4:	0800294d 	.word	0x0800294d
 80028d8:	0800294d 	.word	0x0800294d
 80028dc:	0800294d 	.word	0x0800294d
 80028e0:	0800294d 	.word	0x0800294d
 80028e4:	0800294d 	.word	0x0800294d
 80028e8:	0800294d 	.word	0x0800294d
 80028ec:	0800294d 	.word	0x0800294d
 80028f0:	08002955 	.word	0x08002955
 80028f4:	0800294d 	.word	0x0800294d
 80028f8:	0800294d 	.word	0x0800294d
 80028fc:	0800294d 	.word	0x0800294d
 8002900:	0800294d 	.word	0x0800294d
 8002904:	0800294d 	.word	0x0800294d
 8002908:	0800294d 	.word	0x0800294d
 800290c:	0800294d 	.word	0x0800294d
 8002910:	08002955 	.word	0x08002955
 8002914:	58024400 	.word	0x58024400
 8002918:	58024800 	.word	0x58024800
 800291c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002924:	3308      	adds	r3, #8
 8002926:	2101      	movs	r1, #1
 8002928:	4618      	mov	r0, r3
 800292a:	f000 fce9 	bl	8003300 <RCCEx_PLL2_Config>
 800292e:	4603      	mov	r3, r0
 8002930:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002934:	e00f      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800293a:	3328      	adds	r3, #40	@ 0x28
 800293c:	2101      	movs	r1, #1
 800293e:	4618      	mov	r0, r3
 8002940:	f000 fd90 	bl	8003464 <RCCEx_PLL3_Config>
 8002944:	4603      	mov	r3, r0
 8002946:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800294a:	e004      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002952:	e000      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002956:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10a      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800295e:	4bbf      	ldr	r3, [pc, #764]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002962:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800296a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800296c:	4abb      	ldr	r2, [pc, #748]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800296e:	430b      	orrs	r3, r1
 8002970:	6553      	str	r3, [r2, #84]	@ 0x54
 8002972:	e003      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002974:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002978:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800297c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	f002 0302 	and.w	r3, r2, #2
 8002988:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800298c:	2300      	movs	r3, #0
 800298e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002992:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002996:	460b      	mov	r3, r1
 8002998:	4313      	orrs	r3, r2
 800299a:	d041      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800299c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029a2:	2b05      	cmp	r3, #5
 80029a4:	d824      	bhi.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80029a6:	a201      	add	r2, pc, #4	@ (adr r2, 80029ac <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80029a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ac:	080029f9 	.word	0x080029f9
 80029b0:	080029c5 	.word	0x080029c5
 80029b4:	080029db 	.word	0x080029db
 80029b8:	080029f9 	.word	0x080029f9
 80029bc:	080029f9 	.word	0x080029f9
 80029c0:	080029f9 	.word	0x080029f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029c8:	3308      	adds	r3, #8
 80029ca:	2101      	movs	r1, #1
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 fc97 	bl	8003300 <RCCEx_PLL2_Config>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80029d8:	e00f      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80029da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029de:	3328      	adds	r3, #40	@ 0x28
 80029e0:	2101      	movs	r1, #1
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fd3e 	bl	8003464 <RCCEx_PLL3_Config>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80029ee:	e004      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80029f6:	e000      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80029f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10a      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002a02:	4b96      	ldr	r3, [pc, #600]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a06:	f023 0107 	bic.w	r1, r3, #7
 8002a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a10:	4a92      	ldr	r2, [pc, #584]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002a12:	430b      	orrs	r3, r1
 8002a14:	6553      	str	r3, [r2, #84]	@ 0x54
 8002a16:	e003      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002a1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a28:	f002 0304 	and.w	r3, r2, #4
 8002a2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a36:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	d044      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a48:	2b05      	cmp	r3, #5
 8002a4a:	d825      	bhi.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8002a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a54 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8002a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a52:	bf00      	nop
 8002a54:	08002aa1 	.word	0x08002aa1
 8002a58:	08002a6d 	.word	0x08002a6d
 8002a5c:	08002a83 	.word	0x08002a83
 8002a60:	08002aa1 	.word	0x08002aa1
 8002a64:	08002aa1 	.word	0x08002aa1
 8002a68:	08002aa1 	.word	0x08002aa1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a70:	3308      	adds	r3, #8
 8002a72:	2101      	movs	r1, #1
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 fc43 	bl	8003300 <RCCEx_PLL2_Config>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002a80:	e00f      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a86:	3328      	adds	r3, #40	@ 0x28
 8002a88:	2101      	movs	r1, #1
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 fcea 	bl	8003464 <RCCEx_PLL3_Config>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002a96:	e004      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002a9e:	e000      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8002aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aa2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10b      	bne.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002aaa:	4b6c      	ldr	r3, [pc, #432]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aae:	f023 0107 	bic.w	r1, r3, #7
 8002ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aba:	4a68      	ldr	r2, [pc, #416]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002abc:	430b      	orrs	r3, r1
 8002abe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ac0:	e003      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ac6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad2:	f002 0320 	and.w	r3, r2, #32
 8002ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002ada:	2300      	movs	r3, #0
 8002adc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002ae0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	d055      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002af6:	d033      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8002af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002afc:	d82c      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b02:	d02f      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8002b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b08:	d826      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002b0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002b0e:	d02b      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8002b10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002b14:	d820      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002b16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b1a:	d012      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8002b1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b20:	d81a      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d022      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8002b26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b2a:	d115      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b30:	3308      	adds	r3, #8
 8002b32:	2100      	movs	r1, #0
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 fbe3 	bl	8003300 <RCCEx_PLL2_Config>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002b40:	e015      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b46:	3328      	adds	r3, #40	@ 0x28
 8002b48:	2102      	movs	r1, #2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fc8a 	bl	8003464 <RCCEx_PLL3_Config>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002b56:	e00a      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002b5e:	e006      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002b60:	bf00      	nop
 8002b62:	e004      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002b64:	bf00      	nop
 8002b66:	e002      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002b68:	bf00      	nop
 8002b6a:	e000      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10b      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b76:	4b39      	ldr	r3, [pc, #228]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b86:	4a35      	ldr	r2, [pc, #212]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	6553      	str	r3, [r2, #84]	@ 0x54
 8002b8c:	e003      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002b92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002ba2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002bac:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	d058      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bbe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002bc2:	d033      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8002bc4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002bc8:	d82c      	bhi.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8002bca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bce:	d02f      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8002bd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bd4:	d826      	bhi.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8002bd6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002bda:	d02b      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8002bdc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002be0:	d820      	bhi.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8002be2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002be6:	d012      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8002be8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bec:	d81a      	bhi.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d022      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8002bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bf6:	d115      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bfc:	3308      	adds	r3, #8
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 fb7d 	bl	8003300 <RCCEx_PLL2_Config>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002c0c:	e015      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c12:	3328      	adds	r3, #40	@ 0x28
 8002c14:	2102      	movs	r1, #2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 fc24 	bl	8003464 <RCCEx_PLL3_Config>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002c22:	e00a      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002c2a:	e006      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8002c2c:	bf00      	nop
 8002c2e:	e004      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8002c30:	bf00      	nop
 8002c32:	e002      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8002c34:	bf00      	nop
 8002c36:	e000      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8002c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10e      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c42:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c46:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8002c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c52:	4a02      	ldr	r2, [pc, #8]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002c54:	430b      	orrs	r3, r1
 8002c56:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c58:	e006      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8002c5a:	bf00      	nop
 8002c5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c70:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002c74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c7e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002c82:	460b      	mov	r3, r1
 8002c84:	4313      	orrs	r3, r2
 8002c86:	d055      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c90:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002c94:	d033      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8002c96:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002c9a:	d82c      	bhi.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8002c9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ca0:	d02f      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8002ca2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ca6:	d826      	bhi.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8002ca8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002cac:	d02b      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8002cae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002cb2:	d820      	bhi.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8002cb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cb8:	d012      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8002cba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cbe:	d81a      	bhi.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d022      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8002cc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cc8:	d115      	bne.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cce:	3308      	adds	r3, #8
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 fb14 	bl	8003300 <RCCEx_PLL2_Config>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002cde:	e015      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ce4:	3328      	adds	r3, #40	@ 0x28
 8002ce6:	2102      	movs	r1, #2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 fbbb 	bl	8003464 <RCCEx_PLL3_Config>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002cf4:	e00a      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002cfc:	e006      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8002cfe:	bf00      	nop
 8002d00:	e004      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8002d02:	bf00      	nop
 8002d04:	e002      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8002d06:	bf00      	nop
 8002d08:	e000      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8002d0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10b      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002d14:	4ba0      	ldr	r3, [pc, #640]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d18:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8002d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d24:	4a9c      	ldr	r2, [pc, #624]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002d26:	430b      	orrs	r3, r1
 8002d28:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d2a:	e003      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8002d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3c:	f002 0308 	and.w	r3, r2, #8
 8002d40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d44:	2300      	movs	r3, #0
 8002d46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002d4a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4313      	orrs	r3, r2
 8002d52:	d01e      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8002d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d60:	d10c      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d66:	3328      	adds	r3, #40	@ 0x28
 8002d68:	2102      	movs	r1, #2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 fb7a 	bl	8003464 <RCCEx_PLL3_Config>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8002d7c:	4b86      	ldr	r3, [pc, #536]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d80:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d8c:	4a82      	ldr	r2, [pc, #520]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002d8e:	430b      	orrs	r3, r1
 8002d90:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9a:	f002 0310 	and.w	r3, r2, #16
 8002d9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002da2:	2300      	movs	r3, #0
 8002da4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002da8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002dac:	460b      	mov	r3, r1
 8002dae:	4313      	orrs	r3, r2
 8002db0:	d01e      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8002db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dbe:	d10c      	bne.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002dc4:	3328      	adds	r3, #40	@ 0x28
 8002dc6:	2102      	movs	r1, #2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 fb4b 	bl	8003464 <RCCEx_PLL3_Config>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002dda:	4b6f      	ldr	r3, [pc, #444]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dde:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dea:	4a6b      	ldr	r2, [pc, #428]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002dec:	430b      	orrs	r3, r1
 8002dee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8002dfc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002dfe:	2300      	movs	r3, #0
 8002e00:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e02:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8002e06:	460b      	mov	r3, r1
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	d03e      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8002e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002e14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e18:	d022      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8002e1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e1e:	d81b      	bhi.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8002e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e28:	d00b      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8002e2a:	e015      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e30:	3308      	adds	r3, #8
 8002e32:	2100      	movs	r1, #0
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 fa63 	bl	8003300 <RCCEx_PLL2_Config>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002e40:	e00f      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e46:	3328      	adds	r3, #40	@ 0x28
 8002e48:	2102      	movs	r1, #2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fb0a 	bl	8003464 <RCCEx_PLL3_Config>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002e56:	e004      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002e5e:	e000      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8002e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10b      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e6a:	4b4b      	ldr	r3, [pc, #300]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002e7a:	4a47      	ldr	r2, [pc, #284]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e80:	e003      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e86:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e92:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8002e96:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e98:	2300      	movs	r3, #0
 8002e9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e9c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	d03b      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8002ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002eae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002eb2:	d01f      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8002eb4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002eb8:	d818      	bhi.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8002eba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ebe:	d003      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8002ec0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ec4:	d007      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8002ec6:	e011      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ec8:	4b33      	ldr	r3, [pc, #204]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ecc:	4a32      	ldr	r2, [pc, #200]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002ece:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ed2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8002ed4:	e00f      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002eda:	3328      	adds	r3, #40	@ 0x28
 8002edc:	2101      	movs	r1, #1
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fac0 	bl	8003464 <RCCEx_PLL3_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8002eea:	e004      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8002ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ef6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10b      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002efe:	4b26      	ldr	r3, [pc, #152]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f0e:	4a22      	ldr	r2, [pc, #136]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002f10:	430b      	orrs	r3, r1
 8002f12:	6553      	str	r3, [r2, #84]	@ 0x54
 8002f14:	e003      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f1a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f26:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8002f2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f30:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8002f34:	460b      	mov	r3, r1
 8002f36:	4313      	orrs	r3, r2
 8002f38:	d034      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8002f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8002f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f48:	d007      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8002f4a:	e011      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f4c:	4b12      	ldr	r3, [pc, #72]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f50:	4a11      	ldr	r2, [pc, #68]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002f52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8002f58:	e00e      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f5e:	3308      	adds	r3, #8
 8002f60:	2102      	movs	r1, #2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f9cc 	bl	8003300 <RCCEx_PLL2_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8002f6e:	e003      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002f76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10d      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002f80:	4b05      	ldr	r3, [pc, #20]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f84:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f8e:	4a02      	ldr	r2, [pc, #8]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002f90:	430b      	orrs	r3, r1
 8002f92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f94:	e006      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8002f96:	bf00      	nop
 8002f98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002fa0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8002fb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	667b      	str	r3, [r7, #100]	@ 0x64
 8002fb6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8002fba:	460b      	mov	r3, r1
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	d00c      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fc4:	3328      	adds	r3, #40	@ 0x28
 8002fc6:	2102      	movs	r1, #2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 fa4b 	bl	8003464 <RCCEx_PLL3_Config>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8002fe6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fe8:	2300      	movs	r3, #0
 8002fea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fec:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	d036      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8002ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ffa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ffc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003000:	d018      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003002:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003006:	d811      	bhi.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003008:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800300c:	d014      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800300e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003012:	d80b      	bhi.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003014:	2b00      	cmp	r3, #0
 8003016:	d011      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003018:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800301c:	d106      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800301e:	4bb7      	ldr	r3, [pc, #732]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003022:	4ab6      	ldr	r2, [pc, #728]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003024:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003028:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800302a:	e008      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003032:	e004      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003034:	bf00      	nop
 8003036:	e002      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003038:	bf00      	nop
 800303a:	e000      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800303c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800303e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10a      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003046:	4bad      	ldr	r3, [pc, #692]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800304e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003052:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003054:	4aa9      	ldr	r2, [pc, #676]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003056:	430b      	orrs	r3, r1
 8003058:	6553      	str	r3, [r2, #84]	@ 0x54
 800305a:	e003      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003060:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003070:	653b      	str	r3, [r7, #80]	@ 0x50
 8003072:	2300      	movs	r3, #0
 8003074:	657b      	str	r3, [r7, #84]	@ 0x54
 8003076:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800307a:	460b      	mov	r3, r1
 800307c:	4313      	orrs	r3, r2
 800307e:	d009      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003080:	4b9e      	ldr	r3, [pc, #632]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003084:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800308c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308e:	4a9b      	ldr	r2, [pc, #620]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003090:	430b      	orrs	r3, r1
 8003092:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80030a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030a2:	2300      	movs	r3, #0
 80030a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030a6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80030aa:	460b      	mov	r3, r1
 80030ac:	4313      	orrs	r3, r2
 80030ae:	d009      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030b0:	4b92      	ldr	r3, [pc, #584]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80030b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030b4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80030b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030be:	4a8f      	ldr	r2, [pc, #572]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80030c0:	430b      	orrs	r3, r1
 80030c2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80030c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030cc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80030d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80030d2:	2300      	movs	r3, #0
 80030d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80030d6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80030da:	460b      	mov	r3, r1
 80030dc:	4313      	orrs	r3, r2
 80030de:	d00e      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030e0:	4b86      	ldr	r3, [pc, #536]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	4a85      	ldr	r2, [pc, #532]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80030e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80030ea:	6113      	str	r3, [r2, #16]
 80030ec:	4b83      	ldr	r3, [pc, #524]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80030ee:	6919      	ldr	r1, [r3, #16]
 80030f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80030f8:	4a80      	ldr	r2, [pc, #512]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80030fa:	430b      	orrs	r3, r1
 80030fc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80030fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003106:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800310a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800310c:	2300      	movs	r3, #0
 800310e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003110:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003114:	460b      	mov	r3, r1
 8003116:	4313      	orrs	r3, r2
 8003118:	d009      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800311a:	4b78      	ldr	r3, [pc, #480]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800311c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800311e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003128:	4a74      	ldr	r2, [pc, #464]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800312a:	430b      	orrs	r3, r1
 800312c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800312e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003136:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800313a:	633b      	str	r3, [r7, #48]	@ 0x30
 800313c:	2300      	movs	r3, #0
 800313e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003140:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003144:	460b      	mov	r3, r1
 8003146:	4313      	orrs	r3, r2
 8003148:	d00a      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800314a:	4b6c      	ldr	r3, [pc, #432]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800314c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800314e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800315a:	4a68      	ldr	r2, [pc, #416]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800315c:	430b      	orrs	r3, r1
 800315e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003168:	2100      	movs	r1, #0
 800316a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003172:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003176:	460b      	mov	r3, r1
 8003178:	4313      	orrs	r3, r2
 800317a:	d011      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800317c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003180:	3308      	adds	r3, #8
 8003182:	2100      	movs	r1, #0
 8003184:	4618      	mov	r0, r3
 8003186:	f000 f8bb 	bl	8003300 <RCCEx_PLL2_Config>
 800318a:	4603      	mov	r3, r0
 800318c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003190:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003198:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800319c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80031a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a8:	2100      	movs	r1, #0
 80031aa:	6239      	str	r1, [r7, #32]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80031b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80031b6:	460b      	mov	r3, r1
 80031b8:	4313      	orrs	r3, r2
 80031ba:	d011      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031c0:	3308      	adds	r3, #8
 80031c2:	2101      	movs	r1, #1
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 f89b 	bl	8003300 <RCCEx_PLL2_Config>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80031d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80031e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e8:	2100      	movs	r1, #0
 80031ea:	61b9      	str	r1, [r7, #24]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	61fb      	str	r3, [r7, #28]
 80031f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80031f6:	460b      	mov	r3, r1
 80031f8:	4313      	orrs	r3, r2
 80031fa:	d011      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80031fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003200:	3308      	adds	r3, #8
 8003202:	2102      	movs	r1, #2
 8003204:	4618      	mov	r0, r3
 8003206:	f000 f87b 	bl	8003300 <RCCEx_PLL2_Config>
 800320a:	4603      	mov	r3, r0
 800320c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003210:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003218:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800321c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003228:	2100      	movs	r1, #0
 800322a:	6139      	str	r1, [r7, #16]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003236:	460b      	mov	r3, r1
 8003238:	4313      	orrs	r3, r2
 800323a:	d011      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800323c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003240:	3328      	adds	r3, #40	@ 0x28
 8003242:	2100      	movs	r1, #0
 8003244:	4618      	mov	r0, r3
 8003246:	f000 f90d 	bl	8003464 <RCCEx_PLL3_Config>
 800324a:	4603      	mov	r3, r0
 800324c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8003250:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003258:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800325c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003268:	2100      	movs	r1, #0
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003276:	460b      	mov	r3, r1
 8003278:	4313      	orrs	r3, r2
 800327a:	d011      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800327c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003280:	3328      	adds	r3, #40	@ 0x28
 8003282:	2101      	movs	r1, #1
 8003284:	4618      	mov	r0, r3
 8003286:	f000 f8ed 	bl	8003464 <RCCEx_PLL3_Config>
 800328a:	4603      	mov	r3, r0
 800328c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003290:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003298:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800329c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80032a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a8:	2100      	movs	r1, #0
 80032aa:	6039      	str	r1, [r7, #0]
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	607b      	str	r3, [r7, #4]
 80032b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80032b6:	460b      	mov	r3, r1
 80032b8:	4313      	orrs	r3, r2
 80032ba:	d011      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032c0:	3328      	adds	r3, #40	@ 0x28
 80032c2:	2102      	movs	r1, #2
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 f8cd 	bl	8003464 <RCCEx_PLL3_Config>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80032d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80032e0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	e000      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80032f4:	46bd      	mov	sp, r7
 80032f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032fa:	bf00      	nop
 80032fc:	58024400 	.word	0x58024400

08003300 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800330e:	4b53      	ldr	r3, [pc, #332]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 8003310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	2b03      	cmp	r3, #3
 8003318:	d101      	bne.n	800331e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e099      	b.n	8003452 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800331e:	4b4f      	ldr	r3, [pc, #316]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a4e      	ldr	r2, [pc, #312]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 8003324:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800332a:	f7fd fac1 	bl	80008b0 <HAL_GetTick>
 800332e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003330:	e008      	b.n	8003344 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003332:	f7fd fabd 	bl	80008b0 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e086      	b.n	8003452 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003344:	4b45      	ldr	r3, [pc, #276]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1f0      	bne.n	8003332 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003350:	4b42      	ldr	r3, [pc, #264]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 8003352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003354:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	031b      	lsls	r3, r3, #12
 800335e:	493f      	ldr	r1, [pc, #252]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 8003360:	4313      	orrs	r3, r2
 8003362:	628b      	str	r3, [r1, #40]	@ 0x28
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	3b01      	subs	r3, #1
 800336a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	3b01      	subs	r3, #1
 8003374:	025b      	lsls	r3, r3, #9
 8003376:	b29b      	uxth	r3, r3
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	3b01      	subs	r3, #1
 8003380:	041b      	lsls	r3, r3, #16
 8003382:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	3b01      	subs	r3, #1
 800338e:	061b      	lsls	r3, r3, #24
 8003390:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003394:	4931      	ldr	r1, [pc, #196]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 8003396:	4313      	orrs	r3, r2
 8003398:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800339a:	4b30      	ldr	r3, [pc, #192]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 800339c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	492d      	ldr	r1, [pc, #180]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80033ac:	4b2b      	ldr	r3, [pc, #172]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 80033ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b0:	f023 0220 	bic.w	r2, r3, #32
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	4928      	ldr	r1, [pc, #160]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80033be:	4b27      	ldr	r3, [pc, #156]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 80033c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c2:	4a26      	ldr	r2, [pc, #152]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 80033c4:	f023 0310 	bic.w	r3, r3, #16
 80033c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80033ca:	4b24      	ldr	r3, [pc, #144]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 80033cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033ce:	4b24      	ldr	r3, [pc, #144]	@ (8003460 <RCCEx_PLL2_Config+0x160>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	69d2      	ldr	r2, [r2, #28]
 80033d6:	00d2      	lsls	r2, r2, #3
 80033d8:	4920      	ldr	r1, [pc, #128]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80033de:	4b1f      	ldr	r3, [pc, #124]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 80033e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e2:	4a1e      	ldr	r2, [pc, #120]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 80033e4:	f043 0310 	orr.w	r3, r3, #16
 80033e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d106      	bne.n	80033fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80033f0:	4b1a      	ldr	r3, [pc, #104]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 80033f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f4:	4a19      	ldr	r2, [pc, #100]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 80033f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80033fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80033fc:	e00f      	b.n	800341e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d106      	bne.n	8003412 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003404:	4b15      	ldr	r3, [pc, #84]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 8003406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003408:	4a14      	ldr	r2, [pc, #80]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 800340a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800340e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003410:	e005      	b.n	800341e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003412:	4b12      	ldr	r3, [pc, #72]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 8003414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003416:	4a11      	ldr	r2, [pc, #68]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 8003418:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800341c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800341e:	4b0f      	ldr	r3, [pc, #60]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a0e      	ldr	r2, [pc, #56]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 8003424:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003428:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800342a:	f7fd fa41 	bl	80008b0 <HAL_GetTick>
 800342e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003430:	e008      	b.n	8003444 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003432:	f7fd fa3d 	bl	80008b0 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e006      	b.n	8003452 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003444:	4b05      	ldr	r3, [pc, #20]	@ (800345c <RCCEx_PLL2_Config+0x15c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0f0      	beq.n	8003432 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003450:	7bfb      	ldrb	r3, [r7, #15]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	58024400 	.word	0x58024400
 8003460:	ffff0007 	.word	0xffff0007

08003464 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003472:	4b53      	ldr	r3, [pc, #332]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 8003474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	2b03      	cmp	r3, #3
 800347c:	d101      	bne.n	8003482 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e099      	b.n	80035b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003482:	4b4f      	ldr	r3, [pc, #316]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a4e      	ldr	r2, [pc, #312]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 8003488:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800348c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800348e:	f7fd fa0f 	bl	80008b0 <HAL_GetTick>
 8003492:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003494:	e008      	b.n	80034a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003496:	f7fd fa0b 	bl	80008b0 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e086      	b.n	80035b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80034a8:	4b45      	ldr	r3, [pc, #276]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f0      	bne.n	8003496 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80034b4:	4b42      	ldr	r3, [pc, #264]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 80034b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	051b      	lsls	r3, r3, #20
 80034c2:	493f      	ldr	r1, [pc, #252]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	025b      	lsls	r3, r3, #9
 80034da:	b29b      	uxth	r3, r3
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	041b      	lsls	r3, r3, #16
 80034e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	3b01      	subs	r3, #1
 80034f2:	061b      	lsls	r3, r3, #24
 80034f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80034f8:	4931      	ldr	r1, [pc, #196]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80034fe:	4b30      	ldr	r3, [pc, #192]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 8003500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003502:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	492d      	ldr	r1, [pc, #180]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 800350c:	4313      	orrs	r3, r2
 800350e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003510:	4b2b      	ldr	r3, [pc, #172]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 8003512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003514:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	4928      	ldr	r1, [pc, #160]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 800351e:	4313      	orrs	r3, r2
 8003520:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003522:	4b27      	ldr	r3, [pc, #156]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 8003524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003526:	4a26      	ldr	r2, [pc, #152]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 8003528:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800352c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800352e:	4b24      	ldr	r3, [pc, #144]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 8003530:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003532:	4b24      	ldr	r3, [pc, #144]	@ (80035c4 <RCCEx_PLL3_Config+0x160>)
 8003534:	4013      	ands	r3, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	69d2      	ldr	r2, [r2, #28]
 800353a:	00d2      	lsls	r2, r2, #3
 800353c:	4920      	ldr	r1, [pc, #128]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 800353e:	4313      	orrs	r3, r2
 8003540:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003542:	4b1f      	ldr	r3, [pc, #124]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 8003544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003546:	4a1e      	ldr	r2, [pc, #120]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 8003548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800354c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d106      	bne.n	8003562 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003554:	4b1a      	ldr	r3, [pc, #104]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 8003556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003558:	4a19      	ldr	r2, [pc, #100]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 800355a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800355e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003560:	e00f      	b.n	8003582 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d106      	bne.n	8003576 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003568:	4b15      	ldr	r3, [pc, #84]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 800356a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356c:	4a14      	ldr	r2, [pc, #80]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 800356e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003572:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003574:	e005      	b.n	8003582 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003576:	4b12      	ldr	r3, [pc, #72]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 8003578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357a:	4a11      	ldr	r2, [pc, #68]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 800357c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003580:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003582:	4b0f      	ldr	r3, [pc, #60]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a0e      	ldr	r2, [pc, #56]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 8003588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800358c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800358e:	f7fd f98f 	bl	80008b0 <HAL_GetTick>
 8003592:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003594:	e008      	b.n	80035a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003596:	f7fd f98b 	bl	80008b0 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e006      	b.n	80035b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80035a8:	4b05      	ldr	r3, [pc, #20]	@ (80035c0 <RCCEx_PLL3_Config+0x15c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0f0      	beq.n	8003596 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	58024400 	.word	0x58024400
 80035c4:	ffff0007 	.word	0xffff0007

080035c8 <memset>:
 80035c8:	4402      	add	r2, r0
 80035ca:	4603      	mov	r3, r0
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d100      	bne.n	80035d2 <memset+0xa>
 80035d0:	4770      	bx	lr
 80035d2:	f803 1b01 	strb.w	r1, [r3], #1
 80035d6:	e7f9      	b.n	80035cc <memset+0x4>

080035d8 <__libc_init_array>:
 80035d8:	b570      	push	{r4, r5, r6, lr}
 80035da:	4d0d      	ldr	r5, [pc, #52]	@ (8003610 <__libc_init_array+0x38>)
 80035dc:	4c0d      	ldr	r4, [pc, #52]	@ (8003614 <__libc_init_array+0x3c>)
 80035de:	1b64      	subs	r4, r4, r5
 80035e0:	10a4      	asrs	r4, r4, #2
 80035e2:	2600      	movs	r6, #0
 80035e4:	42a6      	cmp	r6, r4
 80035e6:	d109      	bne.n	80035fc <__libc_init_array+0x24>
 80035e8:	4d0b      	ldr	r5, [pc, #44]	@ (8003618 <__libc_init_array+0x40>)
 80035ea:	4c0c      	ldr	r4, [pc, #48]	@ (800361c <__libc_init_array+0x44>)
 80035ec:	f000 f818 	bl	8003620 <_init>
 80035f0:	1b64      	subs	r4, r4, r5
 80035f2:	10a4      	asrs	r4, r4, #2
 80035f4:	2600      	movs	r6, #0
 80035f6:	42a6      	cmp	r6, r4
 80035f8:	d105      	bne.n	8003606 <__libc_init_array+0x2e>
 80035fa:	bd70      	pop	{r4, r5, r6, pc}
 80035fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003600:	4798      	blx	r3
 8003602:	3601      	adds	r6, #1
 8003604:	e7ee      	b.n	80035e4 <__libc_init_array+0xc>
 8003606:	f855 3b04 	ldr.w	r3, [r5], #4
 800360a:	4798      	blx	r3
 800360c:	3601      	adds	r6, #1
 800360e:	e7f2      	b.n	80035f6 <__libc_init_array+0x1e>
 8003610:	08003648 	.word	0x08003648
 8003614:	08003648 	.word	0x08003648
 8003618:	08003648 	.word	0x08003648
 800361c:	0800364c 	.word	0x0800364c

08003620 <_init>:
 8003620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003622:	bf00      	nop
 8003624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003626:	bc08      	pop	{r3}
 8003628:	469e      	mov	lr, r3
 800362a:	4770      	bx	lr

0800362c <_fini>:
 800362c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362e:	bf00      	nop
 8003630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003632:	bc08      	pop	{r3}
 8003634:	469e      	mov	lr, r3
 8003636:	4770      	bx	lr
