
ecu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000816c  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08008438  08008438  00009438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008450  08008450  00009450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08008454  08008454  00009454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08008458  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002b8  24000010  08008468  0000a010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240002c8  08008468  0000a2c8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000103e3  00000000  00000000  0000a03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000235d  00000000  00000000  0001a421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000d08  00000000  00000000  0001c780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000009f7  00000000  00000000  0001d488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00002bae  00000000  00000000  0001de7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00013750  00000000  00000000  00020a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013d46d  00000000  00000000  0003417d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001715ea  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000035ac  00000000  00000000  00171630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000051  00000000  00000000  00174bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08008420 	.word	0x08008420

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08008420 	.word	0x08008420

0800030c <SPI_CS_Enable>:
volatile SPI_Message SPI_queue[SPI_QUEUE_SIZE];
volatile uint8_t queue_head = 0;
volatile uint8_t queue_tail = 0;
volatile uint8_t is_transmitting = 0;

void SPI_CS_Enable(void) {
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI_CS_GPIO_PORT, SPI_CS_PIN, GPIO_PIN_RESET); // Active LOW
 8000310:	2200      	movs	r2, #0
 8000312:	2108      	movs	r1, #8
 8000314:	4802      	ldr	r0, [pc, #8]	@ (8000320 <SPI_CS_Enable+0x14>)
 8000316:	f003 fefd 	bl	8004114 <HAL_GPIO_WritePin>
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	58020000 	.word	0x58020000

08000324 <SPI_CS_Disable>:

void SPI_CS_Disable(void) {
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI_CS_GPIO_PORT, SPI_CS_PIN, GPIO_PIN_SET); // Inactive HIGH
 8000328:	2201      	movs	r2, #1
 800032a:	2108      	movs	r1, #8
 800032c:	4802      	ldr	r0, [pc, #8]	@ (8000338 <SPI_CS_Disable+0x14>)
 800032e:	f003 fef1 	bl	8004114 <HAL_GPIO_WritePin>
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	58020000 	.word	0x58020000

0800033c <Process_SPI_Queue>:
    return HAL_OK;
}

//Add to Queue if busy

HAL_StatusTypeDef Process_SPI_Queue(void) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
    if (queue_head == queue_tail) {
 8000342:	4b3e      	ldr	r3, [pc, #248]	@ (800043c <Process_SPI_Queue+0x100>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	b2da      	uxtb	r2, r3
 8000348:	4b3d      	ldr	r3, [pc, #244]	@ (8000440 <Process_SPI_Queue+0x104>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	b2db      	uxtb	r3, r3
 800034e:	429a      	cmp	r2, r3
 8000350:	d104      	bne.n	800035c <Process_SPI_Queue+0x20>
        is_transmitting = 0;
 8000352:	4b3c      	ldr	r3, [pc, #240]	@ (8000444 <Process_SPI_Queue+0x108>)
 8000354:	2200      	movs	r2, #0
 8000356:	701a      	strb	r2, [r3, #0]
        return HAL_OK;
 8000358:	2300      	movs	r3, #0
 800035a:	e06b      	b.n	8000434 <Process_SPI_Queue+0xf8>
    }

    is_transmitting = 1;
 800035c:	4b39      	ldr	r3, [pc, #228]	@ (8000444 <Process_SPI_Queue+0x108>)
 800035e:	2201      	movs	r2, #1
 8000360:	701a      	strb	r2, [r3, #0]
    __attribute__((aligned(4))) static uint8_t tx_buffer[5];
    uint8_t data_size;

    switch(SPI_queue[queue_head].msg_type) {
 8000362:	4b36      	ldr	r3, [pc, #216]	@ (800043c <Process_SPI_Queue+0x100>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	b2db      	uxtb	r3, r3
 8000368:	4619      	mov	r1, r3
 800036a:	4a37      	ldr	r2, [pc, #220]	@ (8000448 <Process_SPI_Queue+0x10c>)
 800036c:	460b      	mov	r3, r1
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	440b      	add	r3, r1
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	4413      	add	r3, r2
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	b2db      	uxtb	r3, r3
 800037a:	2b00      	cmp	r3, #0
 800037c:	d002      	beq.n	8000384 <Process_SPI_Queue+0x48>
 800037e:	2b01      	cmp	r3, #1
 8000380:	d022      	beq.n	80003c8 <Process_SPI_Queue+0x8c>
 8000382:	e033      	b.n	80003ec <Process_SPI_Queue+0xb0>
        case MSG_FLOAT_WITH_TYPE:
            tx_buffer[0] = SPI_queue[queue_head].payload.float_msg.val_type;
 8000384:	4b2d      	ldr	r3, [pc, #180]	@ (800043c <Process_SPI_Queue+0x100>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	b2db      	uxtb	r3, r3
 800038a:	4619      	mov	r1, r3
 800038c:	4a2e      	ldr	r2, [pc, #184]	@ (8000448 <Process_SPI_Queue+0x10c>)
 800038e:	460b      	mov	r3, r1
 8000390:	005b      	lsls	r3, r3, #1
 8000392:	440b      	add	r3, r1
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	4413      	add	r3, r2
 8000398:	3304      	adds	r3, #4
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	b2da      	uxtb	r2, r3
 800039e:	4b2b      	ldr	r3, [pc, #172]	@ (800044c <Process_SPI_Queue+0x110>)
 80003a0:	701a      	strb	r2, [r3, #0]
            memcpy(&tx_buffer[1], (const void*)&SPI_queue[queue_head].payload.float_msg.value, 4);
 80003a2:	4b26      	ldr	r3, [pc, #152]	@ (800043c <Process_SPI_Queue+0x100>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	461a      	mov	r2, r3
 80003aa:	4613      	mov	r3, r2
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	4413      	add	r3, r2
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	4a25      	ldr	r2, [pc, #148]	@ (8000448 <Process_SPI_Queue+0x10c>)
 80003b4:	4413      	add	r3, r2
 80003b6:	3308      	adds	r3, #8
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	461a      	mov	r2, r3
 80003bc:	4b23      	ldr	r3, [pc, #140]	@ (800044c <Process_SPI_Queue+0x110>)
 80003be:	f8c3 2001 	str.w	r2, [r3, #1]
            data_size = 5;
 80003c2:	2305      	movs	r3, #5
 80003c4:	71fb      	strb	r3, [r7, #7]
            break;
 80003c6:	e013      	b.n	80003f0 <Process_SPI_Queue+0xb4>

        case MSG_RAW_16BIT:
            memcpy(tx_buffer, (const void*)&SPI_queue[queue_head].payload.raw_16bit, 2);
 80003c8:	4b1c      	ldr	r3, [pc, #112]	@ (800043c <Process_SPI_Queue+0x100>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	461a      	mov	r2, r3
 80003d0:	4613      	mov	r3, r2
 80003d2:	005b      	lsls	r3, r3, #1
 80003d4:	4413      	add	r3, r2
 80003d6:	009b      	lsls	r3, r3, #2
 80003d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000448 <Process_SPI_Queue+0x10c>)
 80003da:	4413      	add	r3, r2
 80003dc:	3304      	adds	r3, #4
 80003de:	881b      	ldrh	r3, [r3, #0]
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	4b1a      	ldr	r3, [pc, #104]	@ (800044c <Process_SPI_Queue+0x110>)
 80003e4:	801a      	strh	r2, [r3, #0]
            data_size = 2;
 80003e6:	2302      	movs	r3, #2
 80003e8:	71fb      	strb	r3, [r7, #7]
            break;
 80003ea:	e001      	b.n	80003f0 <Process_SPI_Queue+0xb4>

        default:
            return HAL_ERROR;
 80003ec:	2301      	movs	r3, #1
 80003ee:	e021      	b.n	8000434 <Process_SPI_Queue+0xf8>
    }

    queue_head = (queue_head + 1) % SPI_QUEUE_SIZE;
 80003f0:	4b12      	ldr	r3, [pc, #72]	@ (800043c <Process_SPI_Queue+0x100>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	3301      	adds	r3, #1
 80003f8:	425a      	negs	r2, r3
 80003fa:	f003 030f 	and.w	r3, r3, #15
 80003fe:	f002 020f 	and.w	r2, r2, #15
 8000402:	bf58      	it	pl
 8000404:	4253      	negpl	r3, r2
 8000406:	b2da      	uxtb	r2, r3
 8000408:	4b0c      	ldr	r3, [pc, #48]	@ (800043c <Process_SPI_Queue+0x100>)
 800040a:	701a      	strb	r2, [r3, #0]

    SPI_CS_Enable();
 800040c:	f7ff ff7e 	bl	800030c <SPI_CS_Enable>
    HAL_StatusTypeDef status = HAL_SPI_Transmit_DMA(SPI, tx_buffer, data_size);
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	b29b      	uxth	r3, r3
 8000414:	461a      	mov	r2, r3
 8000416:	490d      	ldr	r1, [pc, #52]	@ (800044c <Process_SPI_Queue+0x110>)
 8000418:	480d      	ldr	r0, [pc, #52]	@ (8000450 <Process_SPI_Queue+0x114>)
 800041a:	f007 fa21 	bl	8007860 <HAL_SPI_Transmit_DMA>
 800041e:	4603      	mov	r3, r0
 8000420:	71bb      	strb	r3, [r7, #6]
    if (status != HAL_OK) {
 8000422:	79bb      	ldrb	r3, [r7, #6]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d004      	beq.n	8000432 <Process_SPI_Queue+0xf6>
        SPI_CS_Disable();
 8000428:	f7ff ff7c 	bl	8000324 <SPI_CS_Disable>
        is_transmitting = 0;
 800042c:	4b05      	ldr	r3, [pc, #20]	@ (8000444 <Process_SPI_Queue+0x108>)
 800042e:	2200      	movs	r2, #0
 8000430:	701a      	strb	r2, [r3, #0]
    }
    return status;
 8000432:	79bb      	ldrb	r3, [r7, #6]
}
 8000434:	4618      	mov	r0, r3
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	240000ec 	.word	0x240000ec
 8000440:	240000ed 	.word	0x240000ed
 8000444:	240000ee 	.word	0x240000ee
 8000448:	2400002c 	.word	0x2400002c
 800044c:	240000f0 	.word	0x240000f0
 8000450:	240001c4 	.word	0x240001c4

08000454 <HAL_SPI_TxCpltCallback>:

// --- SPI Transmission Complete Callback ---
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
    if (hspi == SPI) {
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a05      	ldr	r2, [pc, #20]	@ (8000474 <HAL_SPI_TxCpltCallback+0x20>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d103      	bne.n	800046c <HAL_SPI_TxCpltCallback+0x18>
        // Process next message (if any)
    	SPI_CS_Disable();
 8000464:	f7ff ff5e 	bl	8000324 <SPI_CS_Disable>
        Process_SPI_Queue();
 8000468:	f7ff ff68 	bl	800033c <Process_SPI_Queue>
    }
}
 800046c:	bf00      	nop
 800046e:	3708      	adds	r7, #8
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	240001c4 	.word	0x240001c4

08000478 <HAL_SPI_ErrorCallback>:

// --- SPI Error Handling ---
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	if (hspi == SPI) {
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a07      	ldr	r2, [pc, #28]	@ (80004a0 <HAL_SPI_ErrorCallback+0x28>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d107      	bne.n	8000498 <HAL_SPI_ErrorCallback+0x20>
		HAL_SPI_Abort(SPI);  // Force-release SPI bus
 8000488:	4805      	ldr	r0, [pc, #20]	@ (80004a0 <HAL_SPI_ErrorCallback+0x28>)
 800048a:	f007 fb2b 	bl	8007ae4 <HAL_SPI_Abort>
	    is_transmitting = 0;
 800048e:	4b05      	ldr	r3, [pc, #20]	@ (80004a4 <HAL_SPI_ErrorCallback+0x2c>)
 8000490:	2200      	movs	r2, #0
 8000492:	701a      	strb	r2, [r3, #0]
	    Process_SPI_Queue();  // Retry
 8000494:	f7ff ff52 	bl	800033c <Process_SPI_Queue>
	}
}
 8000498:	bf00      	nop
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	240001c4 	.word	0x240001c4
 80004a4:	240000ee 	.word	0x240000ee

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80004ac:	f000 f980 	bl	80007b0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b0:	f000 fc1c 	bl	8000cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b4:	f000 f80a 	bl	80004cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b8:	f000 f936 	bl	8000728 <MX_GPIO_Init>
  MX_DMA_Init();
 80004bc:	f000 f90c 	bl	80006d8 <MX_DMA_Init>
  MX_I2C1_Init();
 80004c0:	f000 f874 	bl	80005ac <MX_I2C1_Init>
  MX_SPI1_Init();
 80004c4:	f000 f8b2 	bl	800062c <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c8:	bf00      	nop
 80004ca:	e7fd      	b.n	80004c8 <main+0x20>

080004cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b09c      	sub	sp, #112	@ 0x70
 80004d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004d6:	224c      	movs	r2, #76	@ 0x4c
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f007 ff73 	bl	80083c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2220      	movs	r2, #32
 80004e4:	2100      	movs	r1, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f007 ff6d 	bl	80083c6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004ec:	2002      	movs	r0, #2
 80004ee:	f004 fe4b 	bl	8005188 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004f2:	2300      	movs	r3, #0
 80004f4:	603b      	str	r3, [r7, #0]
 80004f6:	4b2c      	ldr	r3, [pc, #176]	@ (80005a8 <SystemClock_Config+0xdc>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80004fe:	4a2a      	ldr	r2, [pc, #168]	@ (80005a8 <SystemClock_Config+0xdc>)
 8000500:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000504:	6193      	str	r3, [r2, #24]
 8000506:	4b28      	ldr	r3, [pc, #160]	@ (80005a8 <SystemClock_Config+0xdc>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000512:	bf00      	nop
 8000514:	4b24      	ldr	r3, [pc, #144]	@ (80005a8 <SystemClock_Config+0xdc>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800051c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000520:	d1f8      	bne.n	8000514 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000522:	2302      	movs	r3, #2
 8000524:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000526:	2301      	movs	r3, #1
 8000528:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800052a:	2340      	movs	r3, #64	@ 0x40
 800052c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052e:	2302      	movs	r3, #2
 8000530:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000532:	2300      	movs	r3, #0
 8000534:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000536:	2304      	movs	r3, #4
 8000538:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800053a:	230c      	movs	r3, #12
 800053c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800053e:	2302      	movs	r3, #2
 8000540:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000542:	2303      	movs	r3, #3
 8000544:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000546:	2302      	movs	r3, #2
 8000548:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800054a:	230c      	movs	r3, #12
 800054c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800054e:	2300      	movs	r3, #0
 8000550:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800055a:	4618      	mov	r0, r3
 800055c:	f004 fe4e 	bl	80051fc <HAL_RCC_OscConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000566:	f000 f94f 	bl	8000808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056a:	233f      	movs	r3, #63	@ 0x3f
 800056c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800056e:	2300      	movs	r3, #0
 8000570:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800057e:	2340      	movs	r3, #64	@ 0x40
 8000580:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2101      	movs	r1, #1
 800058e:	4618      	mov	r0, r3
 8000590:	f005 fa0e 	bl	80059b0 <HAL_RCC_ClockConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800059a:	f000 f935 	bl	8000808 <Error_Handler>
  }
}
 800059e:	bf00      	nop
 80005a0:	3770      	adds	r7, #112	@ 0x70
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	58024800 	.word	0x58024800

080005ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000620 <MX_I2C1_Init+0x74>)
 80005b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 80005b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000620 <MX_I2C1_Init+0x74>)
 80005b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000628 <MX_I2C1_Init+0x7c>)
 80005ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005bc:	4b18      	ldr	r3, [pc, #96]	@ (8000620 <MX_I2C1_Init+0x74>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005c2:	4b17      	ldr	r3, [pc, #92]	@ (8000620 <MX_I2C1_Init+0x74>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005c8:	4b15      	ldr	r3, [pc, #84]	@ (8000620 <MX_I2C1_Init+0x74>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005ce:	4b14      	ldr	r3, [pc, #80]	@ (8000620 <MX_I2C1_Init+0x74>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005d4:	4b12      	ldr	r3, [pc, #72]	@ (8000620 <MX_I2C1_Init+0x74>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005da:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <MX_I2C1_Init+0x74>)
 80005dc:	2200      	movs	r2, #0
 80005de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000620 <MX_I2C1_Init+0x74>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005e6:	480e      	ldr	r0, [pc, #56]	@ (8000620 <MX_I2C1_Init+0x74>)
 80005e8:	f003 fdae 	bl	8004148 <HAL_I2C_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005f2:	f000 f909 	bl	8000808 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005f6:	2100      	movs	r1, #0
 80005f8:	4809      	ldr	r0, [pc, #36]	@ (8000620 <MX_I2C1_Init+0x74>)
 80005fa:	f004 fd2e 	bl	800505a <HAL_I2CEx_ConfigAnalogFilter>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000604:	f000 f900 	bl	8000808 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000608:	2100      	movs	r1, #0
 800060a:	4805      	ldr	r0, [pc, #20]	@ (8000620 <MX_I2C1_Init+0x74>)
 800060c:	f004 fd70 	bl	80050f0 <HAL_I2CEx_ConfigDigitalFilter>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000616:	f000 f8f7 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	240000f8 	.word	0x240000f8
 8000624:	40005400 	.word	0x40005400
 8000628:	00300f38 	.word	0x00300f38

0800062c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000630:	4b27      	ldr	r3, [pc, #156]	@ (80006d0 <MX_SPI1_Init+0xa4>)
 8000632:	4a28      	ldr	r2, [pc, #160]	@ (80006d4 <MX_SPI1_Init+0xa8>)
 8000634:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000636:	4b26      	ldr	r3, [pc, #152]	@ (80006d0 <MX_SPI1_Init+0xa4>)
 8000638:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800063c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800063e:	4b24      	ldr	r3, [pc, #144]	@ (80006d0 <MX_SPI1_Init+0xa4>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000644:	4b22      	ldr	r3, [pc, #136]	@ (80006d0 <MX_SPI1_Init+0xa4>)
 8000646:	2207      	movs	r2, #7
 8000648:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800064a:	4b21      	ldr	r3, [pc, #132]	@ (80006d0 <MX_SPI1_Init+0xa4>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000650:	4b1f      	ldr	r3, [pc, #124]	@ (80006d0 <MX_SPI1_Init+0xa4>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000656:	4b1e      	ldr	r3, [pc, #120]	@ (80006d0 <MX_SPI1_Init+0xa4>)
 8000658:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800065c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800065e:	4b1c      	ldr	r3, [pc, #112]	@ (80006d0 <MX_SPI1_Init+0xa4>)
 8000660:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000664:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000666:	4b1a      	ldr	r3, [pc, #104]	@ (80006d0 <MX_SPI1_Init+0xa4>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800066c:	4b18      	ldr	r3, [pc, #96]	@ (80006d0 <MX_SPI1_Init+0xa4>)
 800066e:	2200      	movs	r2, #0
 8000670:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000672:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <MX_SPI1_Init+0xa4>)
 8000674:	2200      	movs	r2, #0
 8000676:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000678:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <MX_SPI1_Init+0xa4>)
 800067a:	2200      	movs	r2, #0
 800067c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800067e:	4b14      	ldr	r3, [pc, #80]	@ (80006d0 <MX_SPI1_Init+0xa4>)
 8000680:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000684:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000686:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <MX_SPI1_Init+0xa4>)
 8000688:	2200      	movs	r2, #0
 800068a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800068c:	4b10      	ldr	r3, [pc, #64]	@ (80006d0 <MX_SPI1_Init+0xa4>)
 800068e:	2200      	movs	r2, #0
 8000690:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000692:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <MX_SPI1_Init+0xa4>)
 8000694:	2200      	movs	r2, #0
 8000696:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000698:	4b0d      	ldr	r3, [pc, #52]	@ (80006d0 <MX_SPI1_Init+0xa4>)
 800069a:	2200      	movs	r2, #0
 800069c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800069e:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <MX_SPI1_Init+0xa4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	@ (80006d0 <MX_SPI1_Init+0xa4>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80006aa:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <MX_SPI1_Init+0xa4>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80006b0:	4b07      	ldr	r3, [pc, #28]	@ (80006d0 <MX_SPI1_Init+0xa4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80006b6:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <MX_SPI1_Init+0xa4>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <MX_SPI1_Init+0xa4>)
 80006be:	f006 ffab 	bl	8007618 <HAL_SPI_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80006c8:	f000 f89e 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	240001c4 	.word	0x240001c4
 80006d4:	40013000 	.word	0x40013000

080006d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006de:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <MX_DMA_Init+0x4c>)
 80006e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000724 <MX_DMA_Init+0x4c>)
 80006e6:	f043 0301 	orr.w	r3, r3, #1
 80006ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000724 <MX_DMA_Init+0x4c>)
 80006f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006f4:	f003 0301 	and.w	r3, r3, #1
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2100      	movs	r1, #0
 8000700:	200b      	movs	r0, #11
 8000702:	f000 fc60 	bl	8000fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000706:	200b      	movs	r0, #11
 8000708:	f000 fc77 	bl	8000ffa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	2100      	movs	r1, #0
 8000710:	200c      	movs	r0, #12
 8000712:	f000 fc58 	bl	8000fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000716:	200c      	movs	r0, #12
 8000718:	f000 fc6f 	bl	8000ffa <HAL_NVIC_EnableIRQ>

}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	58024400 	.word	0x58024400

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b1a      	ldr	r3, [pc, #104]	@ (80007a8 <MX_GPIO_Init+0x80>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000744:	4a18      	ldr	r2, [pc, #96]	@ (80007a8 <MX_GPIO_Init+0x80>)
 8000746:	f043 0301 	orr.w	r3, r3, #1
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800074e:	4b16      	ldr	r3, [pc, #88]	@ (80007a8 <MX_GPIO_Init+0x80>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000754:	f003 0301 	and.w	r3, r3, #1
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075c:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <MX_GPIO_Init+0x80>)
 800075e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000762:	4a11      	ldr	r2, [pc, #68]	@ (80007a8 <MX_GPIO_Init+0x80>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800076c:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <MX_GPIO_Init+0x80>)
 800076e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2108      	movs	r1, #8
 800077e:	480b      	ldr	r0, [pc, #44]	@ (80007ac <MX_GPIO_Init+0x84>)
 8000780:	f003 fcc8 	bl	8004114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000784:	2308      	movs	r3, #8
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	4619      	mov	r1, r3
 800079a:	4804      	ldr	r0, [pc, #16]	@ (80007ac <MX_GPIO_Init+0x84>)
 800079c:	f003 fb12 	bl	8003dc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	58024400 	.word	0x58024400
 80007ac:	58020000 	.word	0x58020000

080007b0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007b6:	463b      	mov	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80007c2:	f000 fc35 	bl	8001030 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007c6:	2301      	movs	r3, #1
 80007c8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80007d2:	231f      	movs	r3, #31
 80007d4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80007d6:	2387      	movs	r3, #135	@ 0x87
 80007d8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80007da:	2300      	movs	r3, #0
 80007dc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80007de:	2300      	movs	r3, #0
 80007e0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007e2:	2301      	movs	r3, #1
 80007e4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80007e6:	2301      	movs	r3, #1
 80007e8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f2:	463b      	mov	r3, r7
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 fc53 	bl	80010a0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80007fa:	2004      	movs	r0, #4
 80007fc:	f000 fc30 	bl	8001060 <HAL_MPU_Enable>

}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <Error_Handler+0x8>

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	4b0a      	ldr	r3, [pc, #40]	@ (8000844 <HAL_MspInit+0x30>)
 800081c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000820:	4a08      	ldr	r2, [pc, #32]	@ (8000844 <HAL_MspInit+0x30>)
 8000822:	f043 0302 	orr.w	r3, r3, #2
 8000826:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <HAL_MspInit+0x30>)
 800082c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000830:	f003 0302 	and.w	r3, r3, #2
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	58024400 	.word	0x58024400

08000848 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b0b8      	sub	sp, #224	@ 0xe0
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	22b8      	movs	r2, #184	@ 0xb8
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f007 fdac 	bl	80083c6 <memset>
  if(hi2c->Instance==I2C1)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a46      	ldr	r2, [pc, #280]	@ (800098c <HAL_I2C_MspInit+0x144>)
 8000874:	4293      	cmp	r3, r2
 8000876:	f040 8085 	bne.w	8000984 <HAL_I2C_MspInit+0x13c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800087a:	f04f 0208 	mov.w	r2, #8
 800087e:	f04f 0300 	mov.w	r3, #0
 8000882:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000886:	2300      	movs	r3, #0
 8000888:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	4618      	mov	r0, r3
 8000892:	f005 fbbd 	bl	8006010 <HAL_RCCEx_PeriphCLKConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 800089c:	f7ff ffb4 	bl	8000808 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a0:	4b3b      	ldr	r3, [pc, #236]	@ (8000990 <HAL_I2C_MspInit+0x148>)
 80008a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a6:	4a3a      	ldr	r2, [pc, #232]	@ (8000990 <HAL_I2C_MspInit+0x148>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008b0:	4b37      	ldr	r3, [pc, #220]	@ (8000990 <HAL_I2C_MspInit+0x148>)
 80008b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008be:	23c0      	movs	r3, #192	@ 0xc0
 80008c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c4:	2312      	movs	r3, #18
 80008c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008d6:	2304      	movs	r3, #4
 80008d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008dc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80008e0:	4619      	mov	r1, r3
 80008e2:	482c      	ldr	r0, [pc, #176]	@ (8000994 <HAL_I2C_MspInit+0x14c>)
 80008e4:	f003 fa6e 	bl	8003dc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008e8:	4b29      	ldr	r3, [pc, #164]	@ (8000990 <HAL_I2C_MspInit+0x148>)
 80008ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80008ee:	4a28      	ldr	r2, [pc, #160]	@ (8000990 <HAL_I2C_MspInit+0x148>)
 80008f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80008f8:	4b25      	ldr	r3, [pc, #148]	@ (8000990 <HAL_I2C_MspInit+0x148>)
 80008fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80008fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream0;
 8000906:	4b24      	ldr	r3, [pc, #144]	@ (8000998 <HAL_I2C_MspInit+0x150>)
 8000908:	4a24      	ldr	r2, [pc, #144]	@ (800099c <HAL_I2C_MspInit+0x154>)
 800090a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800090c:	4b22      	ldr	r3, [pc, #136]	@ (8000998 <HAL_I2C_MspInit+0x150>)
 800090e:	2222      	movs	r2, #34	@ 0x22
 8000910:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000912:	4b21      	ldr	r3, [pc, #132]	@ (8000998 <HAL_I2C_MspInit+0x150>)
 8000914:	2240      	movs	r2, #64	@ 0x40
 8000916:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000918:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <HAL_I2C_MspInit+0x150>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800091e:	4b1e      	ldr	r3, [pc, #120]	@ (8000998 <HAL_I2C_MspInit+0x150>)
 8000920:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000924:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000926:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <HAL_I2C_MspInit+0x150>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800092c:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <HAL_I2C_MspInit+0x150>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 8000932:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <HAL_I2C_MspInit+0x150>)
 8000934:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000938:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800093a:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <HAL_I2C_MspInit+0x150>)
 800093c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000940:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <HAL_I2C_MspInit+0x150>)
 8000944:	2200      	movs	r2, #0
 8000946:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000948:	4813      	ldr	r0, [pc, #76]	@ (8000998 <HAL_I2C_MspInit+0x150>)
 800094a:	f000 fbe9 	bl	8001120 <HAL_DMA_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8000954:	f7ff ff58 	bl	8000808 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a0f      	ldr	r2, [pc, #60]	@ (8000998 <HAL_I2C_MspInit+0x150>)
 800095c:	639a      	str	r2, [r3, #56]	@ 0x38
 800095e:	4a0e      	ldr	r2, [pc, #56]	@ (8000998 <HAL_I2C_MspInit+0x150>)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	2100      	movs	r1, #0
 8000968:	201f      	movs	r0, #31
 800096a:	f000 fb2c 	bl	8000fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800096e:	201f      	movs	r0, #31
 8000970:	f000 fb43 	bl	8000ffa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	2020      	movs	r0, #32
 800097a:	f000 fb24 	bl	8000fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800097e:	2020      	movs	r0, #32
 8000980:	f000 fb3b 	bl	8000ffa <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000984:	bf00      	nop
 8000986:	37e0      	adds	r7, #224	@ 0xe0
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40005400 	.word	0x40005400
 8000990:	58024400 	.word	0x58024400
 8000994:	58020400 	.word	0x58020400
 8000998:	2400014c 	.word	0x2400014c
 800099c:	40020010 	.word	0x40020010

080009a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b0b8      	sub	sp, #224	@ 0xe0
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	22b8      	movs	r2, #184	@ 0xb8
 80009be:	2100      	movs	r1, #0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f007 fd00 	bl	80083c6 <memset>
  if(hspi->Instance==SPI1)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a41      	ldr	r2, [pc, #260]	@ (8000ad0 <HAL_SPI_MspInit+0x130>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d17a      	bne.n	8000ac6 <HAL_SPI_MspInit+0x126>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80009d0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009d4:	f04f 0300 	mov.w	r3, #0
 80009d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80009dc:	2300      	movs	r3, #0
 80009de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e0:	f107 0310 	add.w	r3, r7, #16
 80009e4:	4618      	mov	r0, r3
 80009e6:	f005 fb13 	bl	8006010 <HAL_RCCEx_PeriphCLKConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80009f0:	f7ff ff0a 	bl	8000808 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009f4:	4b37      	ldr	r3, [pc, #220]	@ (8000ad4 <HAL_SPI_MspInit+0x134>)
 80009f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80009fa:	4a36      	ldr	r2, [pc, #216]	@ (8000ad4 <HAL_SPI_MspInit+0x134>)
 80009fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000a04:	4b33      	ldr	r3, [pc, #204]	@ (8000ad4 <HAL_SPI_MspInit+0x134>)
 8000a06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000a0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b30      	ldr	r3, [pc, #192]	@ (8000ad4 <HAL_SPI_MspInit+0x134>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a18:	4a2e      	ldr	r2, [pc, #184]	@ (8000ad4 <HAL_SPI_MspInit+0x134>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a22:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad4 <HAL_SPI_MspInit+0x134>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a30:	23e0      	movs	r3, #224	@ 0xe0
 8000a32:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a48:	2305      	movs	r3, #5
 8000a4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000a52:	4619      	mov	r1, r3
 8000a54:	4820      	ldr	r0, [pc, #128]	@ (8000ad8 <HAL_SPI_MspInit+0x138>)
 8000a56:	f003 f9b5 	bl	8003dc4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8000a5a:	4b20      	ldr	r3, [pc, #128]	@ (8000adc <HAL_SPI_MspInit+0x13c>)
 8000a5c:	4a20      	ldr	r2, [pc, #128]	@ (8000ae0 <HAL_SPI_MspInit+0x140>)
 8000a5e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000a60:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <HAL_SPI_MspInit+0x13c>)
 8000a62:	2226      	movs	r2, #38	@ 0x26
 8000a64:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a66:	4b1d      	ldr	r3, [pc, #116]	@ (8000adc <HAL_SPI_MspInit+0x13c>)
 8000a68:	2240      	movs	r2, #64	@ 0x40
 8000a6a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <HAL_SPI_MspInit+0x13c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <HAL_SPI_MspInit+0x13c>)
 8000a74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a78:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a7a:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <HAL_SPI_MspInit+0x13c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a80:	4b16      	ldr	r3, [pc, #88]	@ (8000adc <HAL_SPI_MspInit+0x13c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <HAL_SPI_MspInit+0x13c>)
 8000a88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a8c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	@ (8000adc <HAL_SPI_MspInit+0x13c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a94:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <HAL_SPI_MspInit+0x13c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000a9a:	4810      	ldr	r0, [pc, #64]	@ (8000adc <HAL_SPI_MspInit+0x13c>)
 8000a9c:	f000 fb40 	bl	8001120 <HAL_DMA_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 8000aa6:	f7ff feaf 	bl	8000808 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a0b      	ldr	r2, [pc, #44]	@ (8000adc <HAL_SPI_MspInit+0x13c>)
 8000aae:	679a      	str	r2, [r3, #120]	@ 0x78
 8000ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <HAL_SPI_MspInit+0x13c>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2023      	movs	r0, #35	@ 0x23
 8000abc:	f000 fa83 	bl	8000fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ac0:	2023      	movs	r0, #35	@ 0x23
 8000ac2:	f000 fa9a 	bl	8000ffa <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000ac6:	bf00      	nop
 8000ac8:	37e0      	adds	r7, #224	@ 0xe0
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40013000 	.word	0x40013000
 8000ad4:	58024400 	.word	0x58024400
 8000ad8:	58020000 	.word	0x58020000
 8000adc:	2400024c 	.word	0x2400024c
 8000ae0:	40020028 	.word	0x40020028

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <NMI_Handler+0x4>

08000aec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <MemManage_Handler+0x4>

08000afc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3a:	f000 f949 	bl	8000dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000b48:	4802      	ldr	r0, [pc, #8]	@ (8000b54 <DMA1_Stream0_IRQHandler+0x10>)
 8000b4a:	f001 fe0f 	bl	800276c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2400014c 	.word	0x2400014c

08000b58 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000b5c:	4802      	ldr	r0, [pc, #8]	@ (8000b68 <DMA1_Stream1_IRQHandler+0x10>)
 8000b5e:	f001 fe05 	bl	800276c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2400024c 	.word	0x2400024c

08000b6c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b70:	4802      	ldr	r0, [pc, #8]	@ (8000b7c <I2C1_EV_IRQHandler+0x10>)
 8000b72:	f003 fb85 	bl	8004280 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	240000f8 	.word	0x240000f8

08000b80 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000b84:	4802      	ldr	r0, [pc, #8]	@ (8000b90 <I2C1_ER_IRQHandler+0x10>)
 8000b86:	f003 fb95 	bl	80042b4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	240000f8 	.word	0x240000f8

08000b94 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000b98:	4802      	ldr	r0, [pc, #8]	@ (8000ba4 <SPI1_IRQHandler+0x10>)
 8000b9a:	f007 f891 	bl	8007cc0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	240001c4 	.word	0x240001c4

08000ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bac:	4b32      	ldr	r3, [pc, #200]	@ (8000c78 <SystemInit+0xd0>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bb2:	4a31      	ldr	r2, [pc, #196]	@ (8000c78 <SystemInit+0xd0>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bbc:	4b2f      	ldr	r3, [pc, #188]	@ (8000c7c <SystemInit+0xd4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f003 030f 	and.w	r3, r3, #15
 8000bc4:	2b06      	cmp	r3, #6
 8000bc6:	d807      	bhi.n	8000bd8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c7c <SystemInit+0xd4>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f023 030f 	bic.w	r3, r3, #15
 8000bd0:	4a2a      	ldr	r2, [pc, #168]	@ (8000c7c <SystemInit+0xd4>)
 8000bd2:	f043 0307 	orr.w	r3, r3, #7
 8000bd6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bd8:	4b29      	ldr	r3, [pc, #164]	@ (8000c80 <SystemInit+0xd8>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a28      	ldr	r2, [pc, #160]	@ (8000c80 <SystemInit+0xd8>)
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000be4:	4b26      	ldr	r3, [pc, #152]	@ (8000c80 <SystemInit+0xd8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bea:	4b25      	ldr	r3, [pc, #148]	@ (8000c80 <SystemInit+0xd8>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	4924      	ldr	r1, [pc, #144]	@ (8000c80 <SystemInit+0xd8>)
 8000bf0:	4b24      	ldr	r3, [pc, #144]	@ (8000c84 <SystemInit+0xdc>)
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bf6:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <SystemInit+0xd4>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0308 	and.w	r3, r3, #8
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d007      	beq.n	8000c12 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c02:	4b1e      	ldr	r3, [pc, #120]	@ (8000c7c <SystemInit+0xd4>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f023 030f 	bic.w	r3, r3, #15
 8000c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c7c <SystemInit+0xd4>)
 8000c0c:	f043 0307 	orr.w	r3, r3, #7
 8000c10:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c12:	4b1b      	ldr	r3, [pc, #108]	@ (8000c80 <SystemInit+0xd8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c18:	4b19      	ldr	r3, [pc, #100]	@ (8000c80 <SystemInit+0xd8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c1e:	4b18      	ldr	r3, [pc, #96]	@ (8000c80 <SystemInit+0xd8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c24:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <SystemInit+0xd8>)
 8000c26:	4a18      	ldr	r2, [pc, #96]	@ (8000c88 <SystemInit+0xe0>)
 8000c28:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c2a:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <SystemInit+0xd8>)
 8000c2c:	4a17      	ldr	r2, [pc, #92]	@ (8000c8c <SystemInit+0xe4>)
 8000c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c30:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <SystemInit+0xd8>)
 8000c32:	4a17      	ldr	r2, [pc, #92]	@ (8000c90 <SystemInit+0xe8>)
 8000c34:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c36:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <SystemInit+0xd8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c3c:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <SystemInit+0xd8>)
 8000c3e:	4a14      	ldr	r2, [pc, #80]	@ (8000c90 <SystemInit+0xe8>)
 8000c40:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c42:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <SystemInit+0xd8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c48:	4b0d      	ldr	r3, [pc, #52]	@ (8000c80 <SystemInit+0xd8>)
 8000c4a:	4a11      	ldr	r2, [pc, #68]	@ (8000c90 <SystemInit+0xe8>)
 8000c4c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <SystemInit+0xd8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c54:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <SystemInit+0xd8>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a09      	ldr	r2, [pc, #36]	@ (8000c80 <SystemInit+0xd8>)
 8000c5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <SystemInit+0xd8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <SystemInit+0xec>)
 8000c68:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c6c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00
 8000c7c:	52002000 	.word	0x52002000
 8000c80:	58024400 	.word	0x58024400
 8000c84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c88:	02020200 	.word	0x02020200
 8000c8c:	01ff0000 	.word	0x01ff0000
 8000c90:	01010280 	.word	0x01010280
 8000c94:	52004000 	.word	0x52004000

08000c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c9c:	f7ff ff84 	bl	8000ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca0:	480c      	ldr	r0, [pc, #48]	@ (8000cd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ca2:	490d      	ldr	r1, [pc, #52]	@ (8000cd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f007 fb87 	bl	80083d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cca:	f7ff fbed 	bl	80004a8 <main>
  bx  lr
 8000cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cd0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000cd4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cd8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000cdc:	08008458 	.word	0x08008458
  ldr r2, =_sbss
 8000ce0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ce4:	240002c8 	.word	0x240002c8

08000ce8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC3_IRQHandler>
	...

08000cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf2:	2003      	movs	r0, #3
 8000cf4:	f000 f95c 	bl	8000fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cf8:	f005 f810 	bl	8005d1c <HAL_RCC_GetSysClockFreq>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <HAL_Init+0x68>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	0a1b      	lsrs	r3, r3, #8
 8000d04:	f003 030f 	and.w	r3, r3, #15
 8000d08:	4913      	ldr	r1, [pc, #76]	@ (8000d58 <HAL_Init+0x6c>)
 8000d0a:	5ccb      	ldrb	r3, [r1, r3]
 8000d0c:	f003 031f 	and.w	r3, r3, #31
 8000d10:	fa22 f303 	lsr.w	r3, r2, r3
 8000d14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d16:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <HAL_Init+0x68>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d58 <HAL_Init+0x6c>)
 8000d20:	5cd3      	ldrb	r3, [r2, r3]
 8000d22:	f003 031f 	and.w	r3, r3, #31
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	fa22 f303 	lsr.w	r3, r2, r3
 8000d2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d5c <HAL_Init+0x70>)
 8000d2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d30:	4a0b      	ldr	r2, [pc, #44]	@ (8000d60 <HAL_Init+0x74>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d36:	200f      	movs	r0, #15
 8000d38:	f000 f814 	bl	8000d64 <HAL_InitTick>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e002      	b.n	8000d4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d46:	f7ff fd65 	bl	8000814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400
 8000d58:	08008438 	.word	0x08008438
 8000d5c:	24000004 	.word	0x24000004
 8000d60:	24000000 	.word	0x24000000

08000d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d6c:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <HAL_InitTick+0x60>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d101      	bne.n	8000d78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e021      	b.n	8000dbc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d78:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <HAL_InitTick+0x64>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <HAL_InitTick+0x60>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f941 	bl	8001016 <HAL_SYSTICK_Config>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00e      	b.n	8000dbc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d80a      	bhi.n	8000dba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f000 f90b 	bl	8000fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db0:	4a06      	ldr	r2, [pc, #24]	@ (8000dcc <HAL_InitTick+0x68>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	2400000c 	.word	0x2400000c
 8000dc8:	24000000 	.word	0x24000000
 8000dcc:	24000008 	.word	0x24000008

08000dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <HAL_IncTick+0x20>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <HAL_IncTick+0x24>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a04      	ldr	r2, [pc, #16]	@ (8000df4 <HAL_IncTick+0x24>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	2400000c 	.word	0x2400000c
 8000df4:	240002c4 	.word	0x240002c4

08000df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	@ (8000e0c <HAL_GetTick+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	240002c4 	.word	0x240002c4

08000e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0b      	ldr	r3, [pc, #44]	@ (8000e50 <__NVIC_SetPriorityGrouping+0x40>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3e:	4a04      	ldr	r2, [pc, #16]	@ (8000e50 <__NVIC_SetPriorityGrouping+0x40>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	60d3      	str	r3, [r2, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00
 8000e54:	05fa0000 	.word	0x05fa0000

08000e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	db0b      	blt.n	8000e9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e86:	88fb      	ldrh	r3, [r7, #6]
 8000e88:	f003 021f 	and.w	r2, r3, #31
 8000e8c:	4907      	ldr	r1, [pc, #28]	@ (8000eac <__NVIC_EnableIRQ+0x38>)
 8000e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	2001      	movs	r0, #1
 8000e96:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000e100 	.word	0xe000e100

08000eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	db0a      	blt.n	8000eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	490c      	ldr	r1, [pc, #48]	@ (8000efc <__NVIC_SetPriority+0x4c>)
 8000eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ece:	0112      	lsls	r2, r2, #4
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed8:	e00a      	b.n	8000ef0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4908      	ldr	r1, [pc, #32]	@ (8000f00 <__NVIC_SetPriority+0x50>)
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	0112      	lsls	r2, r2, #4
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	440b      	add	r3, r1
 8000eee:	761a      	strb	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000e100 	.word	0xe000e100
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	@ 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f1c3 0307 	rsb	r3, r3, #7
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	bf28      	it	cs
 8000f22:	2304      	movcs	r3, #4
 8000f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d902      	bls.n	8000f34 <NVIC_EncodePriority+0x30>
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3b03      	subs	r3, #3
 8000f32:	e000      	b.n	8000f36 <NVIC_EncodePriority+0x32>
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43da      	mvns	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	401a      	ands	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43d9      	mvns	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	4313      	orrs	r3, r2
         );
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3724      	adds	r7, #36	@ 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f7c:	d301      	bcc.n	8000f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00f      	b.n	8000fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f82:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <SysTick_Config+0x40>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8a:	210f      	movs	r1, #15
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f7ff ff8e 	bl	8000eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f94:	4b05      	ldr	r3, [pc, #20]	@ (8000fac <SysTick_Config+0x40>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9a:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <SysTick_Config+0x40>)
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	e000e010 	.word	0xe000e010

08000fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ff29 	bl	8000e10 <__NVIC_SetPriorityGrouping>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd4:	f7ff ff40 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000fd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68b9      	ldr	r1, [r7, #8]
 8000fde:	6978      	ldr	r0, [r7, #20]
 8000fe0:	f7ff ff90 	bl	8000f04 <NVIC_EncodePriority>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff5f 	bl	8000eb0 <__NVIC_SetPriority>
}
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001004:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff33 	bl	8000e74 <__NVIC_EnableIRQ>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ffa4 	bl	8000f6c <SysTick_Config>
 8001024:	4603      	mov	r3, r0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001034:	f3bf 8f5f 	dmb	sy
}
 8001038:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800103a:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <HAL_MPU_Disable+0x28>)
 800103c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800103e:	4a06      	ldr	r2, [pc, #24]	@ (8001058 <HAL_MPU_Disable+0x28>)
 8001040:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001044:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001046:	4b05      	ldr	r3, [pc, #20]	@ (800105c <HAL_MPU_Disable+0x2c>)
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000ed00 	.word	0xe000ed00
 800105c:	e000ed90 	.word	0xe000ed90

08001060 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001068:	4a0b      	ldr	r2, [pc, #44]	@ (8001098 <HAL_MPU_Enable+0x38>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001072:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <HAL_MPU_Enable+0x3c>)
 8001074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001076:	4a09      	ldr	r2, [pc, #36]	@ (800109c <HAL_MPU_Enable+0x3c>)
 8001078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800107c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800107e:	f3bf 8f4f 	dsb	sy
}
 8001082:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001084:	f3bf 8f6f 	isb	sy
}
 8001088:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000ed90 	.word	0xe000ed90
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	785a      	ldrb	r2, [r3, #1]
 80010ac:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <HAL_MPU_ConfigRegion+0x7c>)
 80010ae:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80010b0:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <HAL_MPU_ConfigRegion+0x7c>)
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	4a19      	ldr	r2, [pc, #100]	@ (800111c <HAL_MPU_ConfigRegion+0x7c>)
 80010b6:	f023 0301 	bic.w	r3, r3, #1
 80010ba:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80010bc:	4a17      	ldr	r2, [pc, #92]	@ (800111c <HAL_MPU_ConfigRegion+0x7c>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7b1b      	ldrb	r3, [r3, #12]
 80010c8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	7adb      	ldrb	r3, [r3, #11]
 80010ce:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	7a9b      	ldrb	r3, [r3, #10]
 80010d6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80010d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	7b5b      	ldrb	r3, [r3, #13]
 80010de:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80010e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	7b9b      	ldrb	r3, [r3, #14]
 80010e6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80010e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	7bdb      	ldrb	r3, [r3, #15]
 80010ee:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80010f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	7a5b      	ldrb	r3, [r3, #9]
 80010f6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80010f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7a1b      	ldrb	r3, [r3, #8]
 80010fe:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001100:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	7812      	ldrb	r2, [r2, #0]
 8001106:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001108:	4a04      	ldr	r2, [pc, #16]	@ (800111c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800110a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800110c:	6113      	str	r3, [r2, #16]
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed90 	.word	0xe000ed90

08001120 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001128:	f7ff fe66 	bl	8000df8 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e312      	b.n	800175e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a66      	ldr	r2, [pc, #408]	@ (80012d8 <HAL_DMA_Init+0x1b8>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d04a      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a65      	ldr	r2, [pc, #404]	@ (80012dc <HAL_DMA_Init+0x1bc>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d045      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a63      	ldr	r2, [pc, #396]	@ (80012e0 <HAL_DMA_Init+0x1c0>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d040      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a62      	ldr	r2, [pc, #392]	@ (80012e4 <HAL_DMA_Init+0x1c4>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d03b      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a60      	ldr	r2, [pc, #384]	@ (80012e8 <HAL_DMA_Init+0x1c8>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d036      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a5f      	ldr	r2, [pc, #380]	@ (80012ec <HAL_DMA_Init+0x1cc>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d031      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a5d      	ldr	r2, [pc, #372]	@ (80012f0 <HAL_DMA_Init+0x1d0>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d02c      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a5c      	ldr	r2, [pc, #368]	@ (80012f4 <HAL_DMA_Init+0x1d4>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d027      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a5a      	ldr	r2, [pc, #360]	@ (80012f8 <HAL_DMA_Init+0x1d8>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d022      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a59      	ldr	r2, [pc, #356]	@ (80012fc <HAL_DMA_Init+0x1dc>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d01d      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a57      	ldr	r2, [pc, #348]	@ (8001300 <HAL_DMA_Init+0x1e0>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d018      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a56      	ldr	r2, [pc, #344]	@ (8001304 <HAL_DMA_Init+0x1e4>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d013      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a54      	ldr	r2, [pc, #336]	@ (8001308 <HAL_DMA_Init+0x1e8>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d00e      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a53      	ldr	r2, [pc, #332]	@ (800130c <HAL_DMA_Init+0x1ec>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d009      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a51      	ldr	r2, [pc, #324]	@ (8001310 <HAL_DMA_Init+0x1f0>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d004      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a50      	ldr	r2, [pc, #320]	@ (8001314 <HAL_DMA_Init+0x1f4>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d101      	bne.n	80011dc <HAL_DMA_Init+0xbc>
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <HAL_DMA_Init+0xbe>
 80011dc:	2300      	movs	r3, #0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 813c 	beq.w	800145c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2202      	movs	r2, #2
 80011e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a37      	ldr	r2, [pc, #220]	@ (80012d8 <HAL_DMA_Init+0x1b8>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d04a      	beq.n	8001294 <HAL_DMA_Init+0x174>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a36      	ldr	r2, [pc, #216]	@ (80012dc <HAL_DMA_Init+0x1bc>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d045      	beq.n	8001294 <HAL_DMA_Init+0x174>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a34      	ldr	r2, [pc, #208]	@ (80012e0 <HAL_DMA_Init+0x1c0>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d040      	beq.n	8001294 <HAL_DMA_Init+0x174>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a33      	ldr	r2, [pc, #204]	@ (80012e4 <HAL_DMA_Init+0x1c4>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d03b      	beq.n	8001294 <HAL_DMA_Init+0x174>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a31      	ldr	r2, [pc, #196]	@ (80012e8 <HAL_DMA_Init+0x1c8>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d036      	beq.n	8001294 <HAL_DMA_Init+0x174>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a30      	ldr	r2, [pc, #192]	@ (80012ec <HAL_DMA_Init+0x1cc>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d031      	beq.n	8001294 <HAL_DMA_Init+0x174>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a2e      	ldr	r2, [pc, #184]	@ (80012f0 <HAL_DMA_Init+0x1d0>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d02c      	beq.n	8001294 <HAL_DMA_Init+0x174>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a2d      	ldr	r2, [pc, #180]	@ (80012f4 <HAL_DMA_Init+0x1d4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d027      	beq.n	8001294 <HAL_DMA_Init+0x174>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a2b      	ldr	r2, [pc, #172]	@ (80012f8 <HAL_DMA_Init+0x1d8>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d022      	beq.n	8001294 <HAL_DMA_Init+0x174>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a2a      	ldr	r2, [pc, #168]	@ (80012fc <HAL_DMA_Init+0x1dc>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d01d      	beq.n	8001294 <HAL_DMA_Init+0x174>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a28      	ldr	r2, [pc, #160]	@ (8001300 <HAL_DMA_Init+0x1e0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d018      	beq.n	8001294 <HAL_DMA_Init+0x174>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a27      	ldr	r2, [pc, #156]	@ (8001304 <HAL_DMA_Init+0x1e4>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d013      	beq.n	8001294 <HAL_DMA_Init+0x174>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a25      	ldr	r2, [pc, #148]	@ (8001308 <HAL_DMA_Init+0x1e8>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d00e      	beq.n	8001294 <HAL_DMA_Init+0x174>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a24      	ldr	r2, [pc, #144]	@ (800130c <HAL_DMA_Init+0x1ec>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d009      	beq.n	8001294 <HAL_DMA_Init+0x174>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a22      	ldr	r2, [pc, #136]	@ (8001310 <HAL_DMA_Init+0x1f0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d004      	beq.n	8001294 <HAL_DMA_Init+0x174>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a21      	ldr	r2, [pc, #132]	@ (8001314 <HAL_DMA_Init+0x1f4>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d108      	bne.n	80012a6 <HAL_DMA_Init+0x186>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0201 	bic.w	r2, r2, #1
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	e007      	b.n	80012b6 <HAL_DMA_Init+0x196>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0201 	bic.w	r2, r2, #1
 80012b4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80012b6:	e02f      	b.n	8001318 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012b8:	f7ff fd9e 	bl	8000df8 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	d928      	bls.n	8001318 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2220      	movs	r2, #32
 80012ca:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2203      	movs	r2, #3
 80012d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e242      	b.n	800175e <HAL_DMA_Init+0x63e>
 80012d8:	40020010 	.word	0x40020010
 80012dc:	40020028 	.word	0x40020028
 80012e0:	40020040 	.word	0x40020040
 80012e4:	40020058 	.word	0x40020058
 80012e8:	40020070 	.word	0x40020070
 80012ec:	40020088 	.word	0x40020088
 80012f0:	400200a0 	.word	0x400200a0
 80012f4:	400200b8 	.word	0x400200b8
 80012f8:	40020410 	.word	0x40020410
 80012fc:	40020428 	.word	0x40020428
 8001300:	40020440 	.word	0x40020440
 8001304:	40020458 	.word	0x40020458
 8001308:	40020470 	.word	0x40020470
 800130c:	40020488 	.word	0x40020488
 8001310:	400204a0 	.word	0x400204a0
 8001314:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1c8      	bne.n	80012b8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	4b83      	ldr	r3, [pc, #524]	@ (8001540 <HAL_DMA_Init+0x420>)
 8001332:	4013      	ands	r3, r2
 8001334:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800133e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800134a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001356:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	4313      	orrs	r3, r2
 8001362:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001368:	2b04      	cmp	r3, #4
 800136a:	d107      	bne.n	800137c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001374:	4313      	orrs	r3, r2
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	4313      	orrs	r3, r2
 800137a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b28      	cmp	r3, #40	@ 0x28
 8001382:	d903      	bls.n	800138c <HAL_DMA_Init+0x26c>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b2e      	cmp	r3, #46	@ 0x2e
 800138a:	d91f      	bls.n	80013cc <HAL_DMA_Init+0x2ac>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b3e      	cmp	r3, #62	@ 0x3e
 8001392:	d903      	bls.n	800139c <HAL_DMA_Init+0x27c>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b42      	cmp	r3, #66	@ 0x42
 800139a:	d917      	bls.n	80013cc <HAL_DMA_Init+0x2ac>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b46      	cmp	r3, #70	@ 0x46
 80013a2:	d903      	bls.n	80013ac <HAL_DMA_Init+0x28c>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b48      	cmp	r3, #72	@ 0x48
 80013aa:	d90f      	bls.n	80013cc <HAL_DMA_Init+0x2ac>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b4e      	cmp	r3, #78	@ 0x4e
 80013b2:	d903      	bls.n	80013bc <HAL_DMA_Init+0x29c>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b52      	cmp	r3, #82	@ 0x52
 80013ba:	d907      	bls.n	80013cc <HAL_DMA_Init+0x2ac>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b73      	cmp	r3, #115	@ 0x73
 80013c2:	d905      	bls.n	80013d0 <HAL_DMA_Init+0x2b0>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b77      	cmp	r3, #119	@ 0x77
 80013ca:	d801      	bhi.n	80013d0 <HAL_DMA_Init+0x2b0>
 80013cc:	2301      	movs	r3, #1
 80013ce:	e000      	b.n	80013d2 <HAL_DMA_Init+0x2b2>
 80013d0:	2300      	movs	r3, #0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80013dc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f023 0307 	bic.w	r3, r3, #7
 80013f4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001404:	2b04      	cmp	r3, #4
 8001406:	d117      	bne.n	8001438 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	4313      	orrs	r3, r2
 8001410:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00e      	beq.n	8001438 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f002 fb48 	bl	8003ab0 <DMA_CheckFifoParam>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d008      	beq.n	8001438 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2240      	movs	r2, #64	@ 0x40
 800142a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e192      	b.n	800175e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f002 fa83 	bl	800394c <DMA_CalcBaseAndBitshift>
 8001446:	4603      	mov	r3, r0
 8001448:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800144e:	f003 031f 	and.w	r3, r3, #31
 8001452:	223f      	movs	r2, #63	@ 0x3f
 8001454:	409a      	lsls	r2, r3
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	e0c8      	b.n	80015ee <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a38      	ldr	r2, [pc, #224]	@ (8001544 <HAL_DMA_Init+0x424>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d022      	beq.n	80014ac <HAL_DMA_Init+0x38c>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a37      	ldr	r2, [pc, #220]	@ (8001548 <HAL_DMA_Init+0x428>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d01d      	beq.n	80014ac <HAL_DMA_Init+0x38c>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a35      	ldr	r2, [pc, #212]	@ (800154c <HAL_DMA_Init+0x42c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d018      	beq.n	80014ac <HAL_DMA_Init+0x38c>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a34      	ldr	r2, [pc, #208]	@ (8001550 <HAL_DMA_Init+0x430>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d013      	beq.n	80014ac <HAL_DMA_Init+0x38c>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a32      	ldr	r2, [pc, #200]	@ (8001554 <HAL_DMA_Init+0x434>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d00e      	beq.n	80014ac <HAL_DMA_Init+0x38c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a31      	ldr	r2, [pc, #196]	@ (8001558 <HAL_DMA_Init+0x438>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d009      	beq.n	80014ac <HAL_DMA_Init+0x38c>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a2f      	ldr	r2, [pc, #188]	@ (800155c <HAL_DMA_Init+0x43c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d004      	beq.n	80014ac <HAL_DMA_Init+0x38c>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a2e      	ldr	r2, [pc, #184]	@ (8001560 <HAL_DMA_Init+0x440>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d101      	bne.n	80014b0 <HAL_DMA_Init+0x390>
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <HAL_DMA_Init+0x392>
 80014b0:	2300      	movs	r3, #0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 8092 	beq.w	80015dc <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a21      	ldr	r2, [pc, #132]	@ (8001544 <HAL_DMA_Init+0x424>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d021      	beq.n	8001506 <HAL_DMA_Init+0x3e6>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a20      	ldr	r2, [pc, #128]	@ (8001548 <HAL_DMA_Init+0x428>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d01c      	beq.n	8001506 <HAL_DMA_Init+0x3e6>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a1e      	ldr	r2, [pc, #120]	@ (800154c <HAL_DMA_Init+0x42c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d017      	beq.n	8001506 <HAL_DMA_Init+0x3e6>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a1d      	ldr	r2, [pc, #116]	@ (8001550 <HAL_DMA_Init+0x430>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d012      	beq.n	8001506 <HAL_DMA_Init+0x3e6>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001554 <HAL_DMA_Init+0x434>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d00d      	beq.n	8001506 <HAL_DMA_Init+0x3e6>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001558 <HAL_DMA_Init+0x438>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d008      	beq.n	8001506 <HAL_DMA_Init+0x3e6>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a18      	ldr	r2, [pc, #96]	@ (800155c <HAL_DMA_Init+0x43c>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d003      	beq.n	8001506 <HAL_DMA_Init+0x3e6>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a17      	ldr	r2, [pc, #92]	@ (8001560 <HAL_DMA_Init+0x440>)
 8001504:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2202      	movs	r2, #2
 800150a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <HAL_DMA_Init+0x444>)
 8001522:	4013      	ands	r3, r2
 8001524:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b40      	cmp	r3, #64	@ 0x40
 800152c:	d01c      	beq.n	8001568 <HAL_DMA_Init+0x448>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b80      	cmp	r3, #128	@ 0x80
 8001534:	d102      	bne.n	800153c <HAL_DMA_Init+0x41c>
 8001536:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800153a:	e016      	b.n	800156a <HAL_DMA_Init+0x44a>
 800153c:	2300      	movs	r3, #0
 800153e:	e014      	b.n	800156a <HAL_DMA_Init+0x44a>
 8001540:	fe10803f 	.word	0xfe10803f
 8001544:	58025408 	.word	0x58025408
 8001548:	5802541c 	.word	0x5802541c
 800154c:	58025430 	.word	0x58025430
 8001550:	58025444 	.word	0x58025444
 8001554:	58025458 	.word	0x58025458
 8001558:	5802546c 	.word	0x5802546c
 800155c:	58025480 	.word	0x58025480
 8001560:	58025494 	.word	0x58025494
 8001564:	fffe000f 	.word	0xfffe000f
 8001568:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68d2      	ldr	r2, [r2, #12]
 800156e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001570:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001578:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001580:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001588:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001590:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001598:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	4313      	orrs	r3, r2
 800159e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b6e      	ldr	r3, [pc, #440]	@ (8001768 <HAL_DMA_Init+0x648>)
 80015b0:	4413      	add	r3, r2
 80015b2:	4a6e      	ldr	r2, [pc, #440]	@ (800176c <HAL_DMA_Init+0x64c>)
 80015b4:	fba2 2303 	umull	r2, r3, r2, r3
 80015b8:	091b      	lsrs	r3, r3, #4
 80015ba:	009a      	lsls	r2, r3, #2
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f002 f9c3 	bl	800394c <DMA_CalcBaseAndBitshift>
 80015c6:	4603      	mov	r3, r0
 80015c8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ce:	f003 031f 	and.w	r3, r3, #31
 80015d2:	2201      	movs	r2, #1
 80015d4:	409a      	lsls	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	e008      	b.n	80015ee <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2240      	movs	r2, #64	@ 0x40
 80015e0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2203      	movs	r2, #3
 80015e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e0b7      	b.n	800175e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a5f      	ldr	r2, [pc, #380]	@ (8001770 <HAL_DMA_Init+0x650>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d072      	beq.n	80016de <HAL_DMA_Init+0x5be>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a5d      	ldr	r2, [pc, #372]	@ (8001774 <HAL_DMA_Init+0x654>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d06d      	beq.n	80016de <HAL_DMA_Init+0x5be>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a5c      	ldr	r2, [pc, #368]	@ (8001778 <HAL_DMA_Init+0x658>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d068      	beq.n	80016de <HAL_DMA_Init+0x5be>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a5a      	ldr	r2, [pc, #360]	@ (800177c <HAL_DMA_Init+0x65c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d063      	beq.n	80016de <HAL_DMA_Init+0x5be>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a59      	ldr	r2, [pc, #356]	@ (8001780 <HAL_DMA_Init+0x660>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d05e      	beq.n	80016de <HAL_DMA_Init+0x5be>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a57      	ldr	r2, [pc, #348]	@ (8001784 <HAL_DMA_Init+0x664>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d059      	beq.n	80016de <HAL_DMA_Init+0x5be>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a56      	ldr	r2, [pc, #344]	@ (8001788 <HAL_DMA_Init+0x668>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d054      	beq.n	80016de <HAL_DMA_Init+0x5be>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a54      	ldr	r2, [pc, #336]	@ (800178c <HAL_DMA_Init+0x66c>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d04f      	beq.n	80016de <HAL_DMA_Init+0x5be>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a53      	ldr	r2, [pc, #332]	@ (8001790 <HAL_DMA_Init+0x670>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d04a      	beq.n	80016de <HAL_DMA_Init+0x5be>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a51      	ldr	r2, [pc, #324]	@ (8001794 <HAL_DMA_Init+0x674>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d045      	beq.n	80016de <HAL_DMA_Init+0x5be>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a50      	ldr	r2, [pc, #320]	@ (8001798 <HAL_DMA_Init+0x678>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d040      	beq.n	80016de <HAL_DMA_Init+0x5be>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a4e      	ldr	r2, [pc, #312]	@ (800179c <HAL_DMA_Init+0x67c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d03b      	beq.n	80016de <HAL_DMA_Init+0x5be>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a4d      	ldr	r2, [pc, #308]	@ (80017a0 <HAL_DMA_Init+0x680>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d036      	beq.n	80016de <HAL_DMA_Init+0x5be>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a4b      	ldr	r2, [pc, #300]	@ (80017a4 <HAL_DMA_Init+0x684>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d031      	beq.n	80016de <HAL_DMA_Init+0x5be>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a4a      	ldr	r2, [pc, #296]	@ (80017a8 <HAL_DMA_Init+0x688>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d02c      	beq.n	80016de <HAL_DMA_Init+0x5be>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a48      	ldr	r2, [pc, #288]	@ (80017ac <HAL_DMA_Init+0x68c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d027      	beq.n	80016de <HAL_DMA_Init+0x5be>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a47      	ldr	r2, [pc, #284]	@ (80017b0 <HAL_DMA_Init+0x690>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d022      	beq.n	80016de <HAL_DMA_Init+0x5be>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a45      	ldr	r2, [pc, #276]	@ (80017b4 <HAL_DMA_Init+0x694>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d01d      	beq.n	80016de <HAL_DMA_Init+0x5be>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a44      	ldr	r2, [pc, #272]	@ (80017b8 <HAL_DMA_Init+0x698>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d018      	beq.n	80016de <HAL_DMA_Init+0x5be>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a42      	ldr	r2, [pc, #264]	@ (80017bc <HAL_DMA_Init+0x69c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d013      	beq.n	80016de <HAL_DMA_Init+0x5be>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a41      	ldr	r2, [pc, #260]	@ (80017c0 <HAL_DMA_Init+0x6a0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d00e      	beq.n	80016de <HAL_DMA_Init+0x5be>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a3f      	ldr	r2, [pc, #252]	@ (80017c4 <HAL_DMA_Init+0x6a4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d009      	beq.n	80016de <HAL_DMA_Init+0x5be>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a3e      	ldr	r2, [pc, #248]	@ (80017c8 <HAL_DMA_Init+0x6a8>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d004      	beq.n	80016de <HAL_DMA_Init+0x5be>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a3c      	ldr	r2, [pc, #240]	@ (80017cc <HAL_DMA_Init+0x6ac>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d101      	bne.n	80016e2 <HAL_DMA_Init+0x5c2>
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <HAL_DMA_Init+0x5c4>
 80016e2:	2300      	movs	r3, #0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d032      	beq.n	800174e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f002 fa5d 	bl	8003ba8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b80      	cmp	r3, #128	@ 0x80
 80016f4:	d102      	bne.n	80016fc <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001710:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d010      	beq.n	800173c <HAL_DMA_Init+0x61c>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b08      	cmp	r3, #8
 8001720:	d80c      	bhi.n	800173c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f002 fada 	bl	8003cdc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	e008      	b.n	800174e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	a7fdabf8 	.word	0xa7fdabf8
 800176c:	cccccccd 	.word	0xcccccccd
 8001770:	40020010 	.word	0x40020010
 8001774:	40020028 	.word	0x40020028
 8001778:	40020040 	.word	0x40020040
 800177c:	40020058 	.word	0x40020058
 8001780:	40020070 	.word	0x40020070
 8001784:	40020088 	.word	0x40020088
 8001788:	400200a0 	.word	0x400200a0
 800178c:	400200b8 	.word	0x400200b8
 8001790:	40020410 	.word	0x40020410
 8001794:	40020428 	.word	0x40020428
 8001798:	40020440 	.word	0x40020440
 800179c:	40020458 	.word	0x40020458
 80017a0:	40020470 	.word	0x40020470
 80017a4:	40020488 	.word	0x40020488
 80017a8:	400204a0 	.word	0x400204a0
 80017ac:	400204b8 	.word	0x400204b8
 80017b0:	58025408 	.word	0x58025408
 80017b4:	5802541c 	.word	0x5802541c
 80017b8:	58025430 	.word	0x58025430
 80017bc:	58025444 	.word	0x58025444
 80017c0:	58025458 	.word	0x58025458
 80017c4:	5802546c 	.word	0x5802546c
 80017c8:	58025480 	.word	0x58025480
 80017cc:	58025494 	.word	0x58025494

080017d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
 80017dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e226      	b.n	8001c3a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_DMA_Start_IT+0x2a>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e21f      	b.n	8001c3a <HAL_DMA_Start_IT+0x46a>
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b01      	cmp	r3, #1
 800180c:	f040 820a 	bne.w	8001c24 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2202      	movs	r2, #2
 8001814:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a68      	ldr	r2, [pc, #416]	@ (80019c4 <HAL_DMA_Start_IT+0x1f4>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d04a      	beq.n	80018be <HAL_DMA_Start_IT+0xee>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a66      	ldr	r2, [pc, #408]	@ (80019c8 <HAL_DMA_Start_IT+0x1f8>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d045      	beq.n	80018be <HAL_DMA_Start_IT+0xee>
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a65      	ldr	r2, [pc, #404]	@ (80019cc <HAL_DMA_Start_IT+0x1fc>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d040      	beq.n	80018be <HAL_DMA_Start_IT+0xee>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a63      	ldr	r2, [pc, #396]	@ (80019d0 <HAL_DMA_Start_IT+0x200>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d03b      	beq.n	80018be <HAL_DMA_Start_IT+0xee>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a62      	ldr	r2, [pc, #392]	@ (80019d4 <HAL_DMA_Start_IT+0x204>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d036      	beq.n	80018be <HAL_DMA_Start_IT+0xee>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a60      	ldr	r2, [pc, #384]	@ (80019d8 <HAL_DMA_Start_IT+0x208>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d031      	beq.n	80018be <HAL_DMA_Start_IT+0xee>
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a5f      	ldr	r2, [pc, #380]	@ (80019dc <HAL_DMA_Start_IT+0x20c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d02c      	beq.n	80018be <HAL_DMA_Start_IT+0xee>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a5d      	ldr	r2, [pc, #372]	@ (80019e0 <HAL_DMA_Start_IT+0x210>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d027      	beq.n	80018be <HAL_DMA_Start_IT+0xee>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a5c      	ldr	r2, [pc, #368]	@ (80019e4 <HAL_DMA_Start_IT+0x214>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d022      	beq.n	80018be <HAL_DMA_Start_IT+0xee>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a5a      	ldr	r2, [pc, #360]	@ (80019e8 <HAL_DMA_Start_IT+0x218>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d01d      	beq.n	80018be <HAL_DMA_Start_IT+0xee>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a59      	ldr	r2, [pc, #356]	@ (80019ec <HAL_DMA_Start_IT+0x21c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d018      	beq.n	80018be <HAL_DMA_Start_IT+0xee>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a57      	ldr	r2, [pc, #348]	@ (80019f0 <HAL_DMA_Start_IT+0x220>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d013      	beq.n	80018be <HAL_DMA_Start_IT+0xee>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a56      	ldr	r2, [pc, #344]	@ (80019f4 <HAL_DMA_Start_IT+0x224>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d00e      	beq.n	80018be <HAL_DMA_Start_IT+0xee>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a54      	ldr	r2, [pc, #336]	@ (80019f8 <HAL_DMA_Start_IT+0x228>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d009      	beq.n	80018be <HAL_DMA_Start_IT+0xee>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a53      	ldr	r2, [pc, #332]	@ (80019fc <HAL_DMA_Start_IT+0x22c>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d004      	beq.n	80018be <HAL_DMA_Start_IT+0xee>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a51      	ldr	r2, [pc, #324]	@ (8001a00 <HAL_DMA_Start_IT+0x230>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d108      	bne.n	80018d0 <HAL_DMA_Start_IT+0x100>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 0201 	bic.w	r2, r2, #1
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	e007      	b.n	80018e0 <HAL_DMA_Start_IT+0x110>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0201 	bic.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f001 fe84 	bl	80035f4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a34      	ldr	r2, [pc, #208]	@ (80019c4 <HAL_DMA_Start_IT+0x1f4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d04a      	beq.n	800198c <HAL_DMA_Start_IT+0x1bc>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a33      	ldr	r2, [pc, #204]	@ (80019c8 <HAL_DMA_Start_IT+0x1f8>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d045      	beq.n	800198c <HAL_DMA_Start_IT+0x1bc>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a31      	ldr	r2, [pc, #196]	@ (80019cc <HAL_DMA_Start_IT+0x1fc>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d040      	beq.n	800198c <HAL_DMA_Start_IT+0x1bc>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a30      	ldr	r2, [pc, #192]	@ (80019d0 <HAL_DMA_Start_IT+0x200>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d03b      	beq.n	800198c <HAL_DMA_Start_IT+0x1bc>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a2e      	ldr	r2, [pc, #184]	@ (80019d4 <HAL_DMA_Start_IT+0x204>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d036      	beq.n	800198c <HAL_DMA_Start_IT+0x1bc>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a2d      	ldr	r2, [pc, #180]	@ (80019d8 <HAL_DMA_Start_IT+0x208>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d031      	beq.n	800198c <HAL_DMA_Start_IT+0x1bc>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a2b      	ldr	r2, [pc, #172]	@ (80019dc <HAL_DMA_Start_IT+0x20c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d02c      	beq.n	800198c <HAL_DMA_Start_IT+0x1bc>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a2a      	ldr	r2, [pc, #168]	@ (80019e0 <HAL_DMA_Start_IT+0x210>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d027      	beq.n	800198c <HAL_DMA_Start_IT+0x1bc>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a28      	ldr	r2, [pc, #160]	@ (80019e4 <HAL_DMA_Start_IT+0x214>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d022      	beq.n	800198c <HAL_DMA_Start_IT+0x1bc>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a27      	ldr	r2, [pc, #156]	@ (80019e8 <HAL_DMA_Start_IT+0x218>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d01d      	beq.n	800198c <HAL_DMA_Start_IT+0x1bc>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a25      	ldr	r2, [pc, #148]	@ (80019ec <HAL_DMA_Start_IT+0x21c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d018      	beq.n	800198c <HAL_DMA_Start_IT+0x1bc>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a24      	ldr	r2, [pc, #144]	@ (80019f0 <HAL_DMA_Start_IT+0x220>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d013      	beq.n	800198c <HAL_DMA_Start_IT+0x1bc>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a22      	ldr	r2, [pc, #136]	@ (80019f4 <HAL_DMA_Start_IT+0x224>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d00e      	beq.n	800198c <HAL_DMA_Start_IT+0x1bc>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a21      	ldr	r2, [pc, #132]	@ (80019f8 <HAL_DMA_Start_IT+0x228>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d009      	beq.n	800198c <HAL_DMA_Start_IT+0x1bc>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a1f      	ldr	r2, [pc, #124]	@ (80019fc <HAL_DMA_Start_IT+0x22c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d004      	beq.n	800198c <HAL_DMA_Start_IT+0x1bc>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a1e      	ldr	r2, [pc, #120]	@ (8001a00 <HAL_DMA_Start_IT+0x230>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d101      	bne.n	8001990 <HAL_DMA_Start_IT+0x1c0>
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <HAL_DMA_Start_IT+0x1c2>
 8001990:	2300      	movs	r3, #0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d036      	beq.n	8001a04 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f023 021e 	bic.w	r2, r3, #30
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f042 0216 	orr.w	r2, r2, #22
 80019a8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d03e      	beq.n	8001a30 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f042 0208 	orr.w	r2, r2, #8
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	e035      	b.n	8001a30 <HAL_DMA_Start_IT+0x260>
 80019c4:	40020010 	.word	0x40020010
 80019c8:	40020028 	.word	0x40020028
 80019cc:	40020040 	.word	0x40020040
 80019d0:	40020058 	.word	0x40020058
 80019d4:	40020070 	.word	0x40020070
 80019d8:	40020088 	.word	0x40020088
 80019dc:	400200a0 	.word	0x400200a0
 80019e0:	400200b8 	.word	0x400200b8
 80019e4:	40020410 	.word	0x40020410
 80019e8:	40020428 	.word	0x40020428
 80019ec:	40020440 	.word	0x40020440
 80019f0:	40020458 	.word	0x40020458
 80019f4:	40020470 	.word	0x40020470
 80019f8:	40020488 	.word	0x40020488
 80019fc:	400204a0 	.word	0x400204a0
 8001a00:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f023 020e 	bic.w	r2, r3, #14
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 020a 	orr.w	r2, r2, #10
 8001a16:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d007      	beq.n	8001a30 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0204 	orr.w	r2, r2, #4
 8001a2e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a83      	ldr	r2, [pc, #524]	@ (8001c44 <HAL_DMA_Start_IT+0x474>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d072      	beq.n	8001b20 <HAL_DMA_Start_IT+0x350>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a82      	ldr	r2, [pc, #520]	@ (8001c48 <HAL_DMA_Start_IT+0x478>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d06d      	beq.n	8001b20 <HAL_DMA_Start_IT+0x350>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a80      	ldr	r2, [pc, #512]	@ (8001c4c <HAL_DMA_Start_IT+0x47c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d068      	beq.n	8001b20 <HAL_DMA_Start_IT+0x350>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a7f      	ldr	r2, [pc, #508]	@ (8001c50 <HAL_DMA_Start_IT+0x480>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d063      	beq.n	8001b20 <HAL_DMA_Start_IT+0x350>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a7d      	ldr	r2, [pc, #500]	@ (8001c54 <HAL_DMA_Start_IT+0x484>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d05e      	beq.n	8001b20 <HAL_DMA_Start_IT+0x350>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a7c      	ldr	r2, [pc, #496]	@ (8001c58 <HAL_DMA_Start_IT+0x488>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d059      	beq.n	8001b20 <HAL_DMA_Start_IT+0x350>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a7a      	ldr	r2, [pc, #488]	@ (8001c5c <HAL_DMA_Start_IT+0x48c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d054      	beq.n	8001b20 <HAL_DMA_Start_IT+0x350>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a79      	ldr	r2, [pc, #484]	@ (8001c60 <HAL_DMA_Start_IT+0x490>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d04f      	beq.n	8001b20 <HAL_DMA_Start_IT+0x350>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a77      	ldr	r2, [pc, #476]	@ (8001c64 <HAL_DMA_Start_IT+0x494>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d04a      	beq.n	8001b20 <HAL_DMA_Start_IT+0x350>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a76      	ldr	r2, [pc, #472]	@ (8001c68 <HAL_DMA_Start_IT+0x498>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d045      	beq.n	8001b20 <HAL_DMA_Start_IT+0x350>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a74      	ldr	r2, [pc, #464]	@ (8001c6c <HAL_DMA_Start_IT+0x49c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d040      	beq.n	8001b20 <HAL_DMA_Start_IT+0x350>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a73      	ldr	r2, [pc, #460]	@ (8001c70 <HAL_DMA_Start_IT+0x4a0>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d03b      	beq.n	8001b20 <HAL_DMA_Start_IT+0x350>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a71      	ldr	r2, [pc, #452]	@ (8001c74 <HAL_DMA_Start_IT+0x4a4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d036      	beq.n	8001b20 <HAL_DMA_Start_IT+0x350>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a70      	ldr	r2, [pc, #448]	@ (8001c78 <HAL_DMA_Start_IT+0x4a8>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d031      	beq.n	8001b20 <HAL_DMA_Start_IT+0x350>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a6e      	ldr	r2, [pc, #440]	@ (8001c7c <HAL_DMA_Start_IT+0x4ac>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d02c      	beq.n	8001b20 <HAL_DMA_Start_IT+0x350>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a6d      	ldr	r2, [pc, #436]	@ (8001c80 <HAL_DMA_Start_IT+0x4b0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d027      	beq.n	8001b20 <HAL_DMA_Start_IT+0x350>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a6b      	ldr	r2, [pc, #428]	@ (8001c84 <HAL_DMA_Start_IT+0x4b4>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d022      	beq.n	8001b20 <HAL_DMA_Start_IT+0x350>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a6a      	ldr	r2, [pc, #424]	@ (8001c88 <HAL_DMA_Start_IT+0x4b8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d01d      	beq.n	8001b20 <HAL_DMA_Start_IT+0x350>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a68      	ldr	r2, [pc, #416]	@ (8001c8c <HAL_DMA_Start_IT+0x4bc>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d018      	beq.n	8001b20 <HAL_DMA_Start_IT+0x350>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a67      	ldr	r2, [pc, #412]	@ (8001c90 <HAL_DMA_Start_IT+0x4c0>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d013      	beq.n	8001b20 <HAL_DMA_Start_IT+0x350>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a65      	ldr	r2, [pc, #404]	@ (8001c94 <HAL_DMA_Start_IT+0x4c4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00e      	beq.n	8001b20 <HAL_DMA_Start_IT+0x350>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a64      	ldr	r2, [pc, #400]	@ (8001c98 <HAL_DMA_Start_IT+0x4c8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d009      	beq.n	8001b20 <HAL_DMA_Start_IT+0x350>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a62      	ldr	r2, [pc, #392]	@ (8001c9c <HAL_DMA_Start_IT+0x4cc>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d004      	beq.n	8001b20 <HAL_DMA_Start_IT+0x350>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a61      	ldr	r2, [pc, #388]	@ (8001ca0 <HAL_DMA_Start_IT+0x4d0>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d101      	bne.n	8001b24 <HAL_DMA_Start_IT+0x354>
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <HAL_DMA_Start_IT+0x356>
 8001b24:	2300      	movs	r3, #0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d01a      	beq.n	8001b60 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d007      	beq.n	8001b48 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b46:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d007      	beq.n	8001b60 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b5e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a37      	ldr	r2, [pc, #220]	@ (8001c44 <HAL_DMA_Start_IT+0x474>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d04a      	beq.n	8001c00 <HAL_DMA_Start_IT+0x430>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a36      	ldr	r2, [pc, #216]	@ (8001c48 <HAL_DMA_Start_IT+0x478>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d045      	beq.n	8001c00 <HAL_DMA_Start_IT+0x430>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a34      	ldr	r2, [pc, #208]	@ (8001c4c <HAL_DMA_Start_IT+0x47c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d040      	beq.n	8001c00 <HAL_DMA_Start_IT+0x430>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a33      	ldr	r2, [pc, #204]	@ (8001c50 <HAL_DMA_Start_IT+0x480>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d03b      	beq.n	8001c00 <HAL_DMA_Start_IT+0x430>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a31      	ldr	r2, [pc, #196]	@ (8001c54 <HAL_DMA_Start_IT+0x484>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d036      	beq.n	8001c00 <HAL_DMA_Start_IT+0x430>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a30      	ldr	r2, [pc, #192]	@ (8001c58 <HAL_DMA_Start_IT+0x488>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d031      	beq.n	8001c00 <HAL_DMA_Start_IT+0x430>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a2e      	ldr	r2, [pc, #184]	@ (8001c5c <HAL_DMA_Start_IT+0x48c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d02c      	beq.n	8001c00 <HAL_DMA_Start_IT+0x430>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a2d      	ldr	r2, [pc, #180]	@ (8001c60 <HAL_DMA_Start_IT+0x490>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d027      	beq.n	8001c00 <HAL_DMA_Start_IT+0x430>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a2b      	ldr	r2, [pc, #172]	@ (8001c64 <HAL_DMA_Start_IT+0x494>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d022      	beq.n	8001c00 <HAL_DMA_Start_IT+0x430>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a2a      	ldr	r2, [pc, #168]	@ (8001c68 <HAL_DMA_Start_IT+0x498>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d01d      	beq.n	8001c00 <HAL_DMA_Start_IT+0x430>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a28      	ldr	r2, [pc, #160]	@ (8001c6c <HAL_DMA_Start_IT+0x49c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d018      	beq.n	8001c00 <HAL_DMA_Start_IT+0x430>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a27      	ldr	r2, [pc, #156]	@ (8001c70 <HAL_DMA_Start_IT+0x4a0>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d013      	beq.n	8001c00 <HAL_DMA_Start_IT+0x430>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a25      	ldr	r2, [pc, #148]	@ (8001c74 <HAL_DMA_Start_IT+0x4a4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d00e      	beq.n	8001c00 <HAL_DMA_Start_IT+0x430>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a24      	ldr	r2, [pc, #144]	@ (8001c78 <HAL_DMA_Start_IT+0x4a8>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d009      	beq.n	8001c00 <HAL_DMA_Start_IT+0x430>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a22      	ldr	r2, [pc, #136]	@ (8001c7c <HAL_DMA_Start_IT+0x4ac>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d004      	beq.n	8001c00 <HAL_DMA_Start_IT+0x430>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a21      	ldr	r2, [pc, #132]	@ (8001c80 <HAL_DMA_Start_IT+0x4b0>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d108      	bne.n	8001c12 <HAL_DMA_Start_IT+0x442>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	e012      	b.n	8001c38 <HAL_DMA_Start_IT+0x468>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 0201 	orr.w	r2, r2, #1
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	e009      	b.n	8001c38 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c2a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40020010 	.word	0x40020010
 8001c48:	40020028 	.word	0x40020028
 8001c4c:	40020040 	.word	0x40020040
 8001c50:	40020058 	.word	0x40020058
 8001c54:	40020070 	.word	0x40020070
 8001c58:	40020088 	.word	0x40020088
 8001c5c:	400200a0 	.word	0x400200a0
 8001c60:	400200b8 	.word	0x400200b8
 8001c64:	40020410 	.word	0x40020410
 8001c68:	40020428 	.word	0x40020428
 8001c6c:	40020440 	.word	0x40020440
 8001c70:	40020458 	.word	0x40020458
 8001c74:	40020470 	.word	0x40020470
 8001c78:	40020488 	.word	0x40020488
 8001c7c:	400204a0 	.word	0x400204a0
 8001c80:	400204b8 	.word	0x400204b8
 8001c84:	58025408 	.word	0x58025408
 8001c88:	5802541c 	.word	0x5802541c
 8001c8c:	58025430 	.word	0x58025430
 8001c90:	58025444 	.word	0x58025444
 8001c94:	58025458 	.word	0x58025458
 8001c98:	5802546c 	.word	0x5802546c
 8001c9c:	58025480 	.word	0x58025480
 8001ca0:	58025494 	.word	0x58025494

08001ca4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001cac:	f7ff f8a4 	bl	8000df8 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e2dc      	b.n	8002276 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d008      	beq.n	8001cda <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2280      	movs	r2, #128	@ 0x80
 8001ccc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e2cd      	b.n	8002276 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a76      	ldr	r2, [pc, #472]	@ (8001eb8 <HAL_DMA_Abort+0x214>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d04a      	beq.n	8001d7a <HAL_DMA_Abort+0xd6>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a74      	ldr	r2, [pc, #464]	@ (8001ebc <HAL_DMA_Abort+0x218>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d045      	beq.n	8001d7a <HAL_DMA_Abort+0xd6>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a73      	ldr	r2, [pc, #460]	@ (8001ec0 <HAL_DMA_Abort+0x21c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d040      	beq.n	8001d7a <HAL_DMA_Abort+0xd6>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a71      	ldr	r2, [pc, #452]	@ (8001ec4 <HAL_DMA_Abort+0x220>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d03b      	beq.n	8001d7a <HAL_DMA_Abort+0xd6>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a70      	ldr	r2, [pc, #448]	@ (8001ec8 <HAL_DMA_Abort+0x224>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d036      	beq.n	8001d7a <HAL_DMA_Abort+0xd6>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a6e      	ldr	r2, [pc, #440]	@ (8001ecc <HAL_DMA_Abort+0x228>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d031      	beq.n	8001d7a <HAL_DMA_Abort+0xd6>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a6d      	ldr	r2, [pc, #436]	@ (8001ed0 <HAL_DMA_Abort+0x22c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d02c      	beq.n	8001d7a <HAL_DMA_Abort+0xd6>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a6b      	ldr	r2, [pc, #428]	@ (8001ed4 <HAL_DMA_Abort+0x230>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d027      	beq.n	8001d7a <HAL_DMA_Abort+0xd6>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a6a      	ldr	r2, [pc, #424]	@ (8001ed8 <HAL_DMA_Abort+0x234>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d022      	beq.n	8001d7a <HAL_DMA_Abort+0xd6>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a68      	ldr	r2, [pc, #416]	@ (8001edc <HAL_DMA_Abort+0x238>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d01d      	beq.n	8001d7a <HAL_DMA_Abort+0xd6>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a67      	ldr	r2, [pc, #412]	@ (8001ee0 <HAL_DMA_Abort+0x23c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d018      	beq.n	8001d7a <HAL_DMA_Abort+0xd6>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a65      	ldr	r2, [pc, #404]	@ (8001ee4 <HAL_DMA_Abort+0x240>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <HAL_DMA_Abort+0xd6>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a64      	ldr	r2, [pc, #400]	@ (8001ee8 <HAL_DMA_Abort+0x244>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d00e      	beq.n	8001d7a <HAL_DMA_Abort+0xd6>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a62      	ldr	r2, [pc, #392]	@ (8001eec <HAL_DMA_Abort+0x248>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d009      	beq.n	8001d7a <HAL_DMA_Abort+0xd6>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a61      	ldr	r2, [pc, #388]	@ (8001ef0 <HAL_DMA_Abort+0x24c>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d004      	beq.n	8001d7a <HAL_DMA_Abort+0xd6>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a5f      	ldr	r2, [pc, #380]	@ (8001ef4 <HAL_DMA_Abort+0x250>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d101      	bne.n	8001d7e <HAL_DMA_Abort+0xda>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_DMA_Abort+0xdc>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d013      	beq.n	8001dac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 021e 	bic.w	r2, r2, #30
 8001d92:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001da2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e00a      	b.n	8001dc2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 020e 	bic.w	r2, r2, #14
 8001dba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a3c      	ldr	r2, [pc, #240]	@ (8001eb8 <HAL_DMA_Abort+0x214>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d072      	beq.n	8001eb2 <HAL_DMA_Abort+0x20e>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a3a      	ldr	r2, [pc, #232]	@ (8001ebc <HAL_DMA_Abort+0x218>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d06d      	beq.n	8001eb2 <HAL_DMA_Abort+0x20e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a39      	ldr	r2, [pc, #228]	@ (8001ec0 <HAL_DMA_Abort+0x21c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d068      	beq.n	8001eb2 <HAL_DMA_Abort+0x20e>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a37      	ldr	r2, [pc, #220]	@ (8001ec4 <HAL_DMA_Abort+0x220>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d063      	beq.n	8001eb2 <HAL_DMA_Abort+0x20e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a36      	ldr	r2, [pc, #216]	@ (8001ec8 <HAL_DMA_Abort+0x224>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d05e      	beq.n	8001eb2 <HAL_DMA_Abort+0x20e>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a34      	ldr	r2, [pc, #208]	@ (8001ecc <HAL_DMA_Abort+0x228>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d059      	beq.n	8001eb2 <HAL_DMA_Abort+0x20e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a33      	ldr	r2, [pc, #204]	@ (8001ed0 <HAL_DMA_Abort+0x22c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d054      	beq.n	8001eb2 <HAL_DMA_Abort+0x20e>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a31      	ldr	r2, [pc, #196]	@ (8001ed4 <HAL_DMA_Abort+0x230>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d04f      	beq.n	8001eb2 <HAL_DMA_Abort+0x20e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a30      	ldr	r2, [pc, #192]	@ (8001ed8 <HAL_DMA_Abort+0x234>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d04a      	beq.n	8001eb2 <HAL_DMA_Abort+0x20e>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a2e      	ldr	r2, [pc, #184]	@ (8001edc <HAL_DMA_Abort+0x238>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d045      	beq.n	8001eb2 <HAL_DMA_Abort+0x20e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ee0 <HAL_DMA_Abort+0x23c>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d040      	beq.n	8001eb2 <HAL_DMA_Abort+0x20e>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a2b      	ldr	r2, [pc, #172]	@ (8001ee4 <HAL_DMA_Abort+0x240>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d03b      	beq.n	8001eb2 <HAL_DMA_Abort+0x20e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a2a      	ldr	r2, [pc, #168]	@ (8001ee8 <HAL_DMA_Abort+0x244>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d036      	beq.n	8001eb2 <HAL_DMA_Abort+0x20e>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a28      	ldr	r2, [pc, #160]	@ (8001eec <HAL_DMA_Abort+0x248>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d031      	beq.n	8001eb2 <HAL_DMA_Abort+0x20e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a27      	ldr	r2, [pc, #156]	@ (8001ef0 <HAL_DMA_Abort+0x24c>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d02c      	beq.n	8001eb2 <HAL_DMA_Abort+0x20e>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a25      	ldr	r2, [pc, #148]	@ (8001ef4 <HAL_DMA_Abort+0x250>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d027      	beq.n	8001eb2 <HAL_DMA_Abort+0x20e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a24      	ldr	r2, [pc, #144]	@ (8001ef8 <HAL_DMA_Abort+0x254>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d022      	beq.n	8001eb2 <HAL_DMA_Abort+0x20e>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a22      	ldr	r2, [pc, #136]	@ (8001efc <HAL_DMA_Abort+0x258>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d01d      	beq.n	8001eb2 <HAL_DMA_Abort+0x20e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a21      	ldr	r2, [pc, #132]	@ (8001f00 <HAL_DMA_Abort+0x25c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d018      	beq.n	8001eb2 <HAL_DMA_Abort+0x20e>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1f      	ldr	r2, [pc, #124]	@ (8001f04 <HAL_DMA_Abort+0x260>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d013      	beq.n	8001eb2 <HAL_DMA_Abort+0x20e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f08 <HAL_DMA_Abort+0x264>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d00e      	beq.n	8001eb2 <HAL_DMA_Abort+0x20e>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1c      	ldr	r2, [pc, #112]	@ (8001f0c <HAL_DMA_Abort+0x268>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d009      	beq.n	8001eb2 <HAL_DMA_Abort+0x20e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8001f10 <HAL_DMA_Abort+0x26c>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d004      	beq.n	8001eb2 <HAL_DMA_Abort+0x20e>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a19      	ldr	r2, [pc, #100]	@ (8001f14 <HAL_DMA_Abort+0x270>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d132      	bne.n	8001f18 <HAL_DMA_Abort+0x274>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e031      	b.n	8001f1a <HAL_DMA_Abort+0x276>
 8001eb6:	bf00      	nop
 8001eb8:	40020010 	.word	0x40020010
 8001ebc:	40020028 	.word	0x40020028
 8001ec0:	40020040 	.word	0x40020040
 8001ec4:	40020058 	.word	0x40020058
 8001ec8:	40020070 	.word	0x40020070
 8001ecc:	40020088 	.word	0x40020088
 8001ed0:	400200a0 	.word	0x400200a0
 8001ed4:	400200b8 	.word	0x400200b8
 8001ed8:	40020410 	.word	0x40020410
 8001edc:	40020428 	.word	0x40020428
 8001ee0:	40020440 	.word	0x40020440
 8001ee4:	40020458 	.word	0x40020458
 8001ee8:	40020470 	.word	0x40020470
 8001eec:	40020488 	.word	0x40020488
 8001ef0:	400204a0 	.word	0x400204a0
 8001ef4:	400204b8 	.word	0x400204b8
 8001ef8:	58025408 	.word	0x58025408
 8001efc:	5802541c 	.word	0x5802541c
 8001f00:	58025430 	.word	0x58025430
 8001f04:	58025444 	.word	0x58025444
 8001f08:	58025458 	.word	0x58025458
 8001f0c:	5802546c 	.word	0x5802546c
 8001f10:	58025480 	.word	0x58025480
 8001f14:	58025494 	.word	0x58025494
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d007      	beq.n	8001f2e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a6d      	ldr	r2, [pc, #436]	@ (80020e8 <HAL_DMA_Abort+0x444>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d04a      	beq.n	8001fce <HAL_DMA_Abort+0x32a>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a6b      	ldr	r2, [pc, #428]	@ (80020ec <HAL_DMA_Abort+0x448>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d045      	beq.n	8001fce <HAL_DMA_Abort+0x32a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a6a      	ldr	r2, [pc, #424]	@ (80020f0 <HAL_DMA_Abort+0x44c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d040      	beq.n	8001fce <HAL_DMA_Abort+0x32a>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a68      	ldr	r2, [pc, #416]	@ (80020f4 <HAL_DMA_Abort+0x450>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d03b      	beq.n	8001fce <HAL_DMA_Abort+0x32a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a67      	ldr	r2, [pc, #412]	@ (80020f8 <HAL_DMA_Abort+0x454>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d036      	beq.n	8001fce <HAL_DMA_Abort+0x32a>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a65      	ldr	r2, [pc, #404]	@ (80020fc <HAL_DMA_Abort+0x458>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d031      	beq.n	8001fce <HAL_DMA_Abort+0x32a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a64      	ldr	r2, [pc, #400]	@ (8002100 <HAL_DMA_Abort+0x45c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d02c      	beq.n	8001fce <HAL_DMA_Abort+0x32a>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a62      	ldr	r2, [pc, #392]	@ (8002104 <HAL_DMA_Abort+0x460>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d027      	beq.n	8001fce <HAL_DMA_Abort+0x32a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a61      	ldr	r2, [pc, #388]	@ (8002108 <HAL_DMA_Abort+0x464>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d022      	beq.n	8001fce <HAL_DMA_Abort+0x32a>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a5f      	ldr	r2, [pc, #380]	@ (800210c <HAL_DMA_Abort+0x468>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d01d      	beq.n	8001fce <HAL_DMA_Abort+0x32a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a5e      	ldr	r2, [pc, #376]	@ (8002110 <HAL_DMA_Abort+0x46c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d018      	beq.n	8001fce <HAL_DMA_Abort+0x32a>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a5c      	ldr	r2, [pc, #368]	@ (8002114 <HAL_DMA_Abort+0x470>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d013      	beq.n	8001fce <HAL_DMA_Abort+0x32a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a5b      	ldr	r2, [pc, #364]	@ (8002118 <HAL_DMA_Abort+0x474>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d00e      	beq.n	8001fce <HAL_DMA_Abort+0x32a>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a59      	ldr	r2, [pc, #356]	@ (800211c <HAL_DMA_Abort+0x478>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d009      	beq.n	8001fce <HAL_DMA_Abort+0x32a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a58      	ldr	r2, [pc, #352]	@ (8002120 <HAL_DMA_Abort+0x47c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d004      	beq.n	8001fce <HAL_DMA_Abort+0x32a>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a56      	ldr	r2, [pc, #344]	@ (8002124 <HAL_DMA_Abort+0x480>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d108      	bne.n	8001fe0 <HAL_DMA_Abort+0x33c>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0201 	bic.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	e007      	b.n	8001ff0 <HAL_DMA_Abort+0x34c>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0201 	bic.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ff0:	e013      	b.n	800201a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ff2:	f7fe ff01 	bl	8000df8 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b05      	cmp	r3, #5
 8001ffe:	d90c      	bls.n	800201a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2220      	movs	r2, #32
 8002004:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2203      	movs	r2, #3
 800200a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e12d      	b.n	8002276 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1e5      	bne.n	8001ff2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a2f      	ldr	r2, [pc, #188]	@ (80020e8 <HAL_DMA_Abort+0x444>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d04a      	beq.n	80020c6 <HAL_DMA_Abort+0x422>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a2d      	ldr	r2, [pc, #180]	@ (80020ec <HAL_DMA_Abort+0x448>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d045      	beq.n	80020c6 <HAL_DMA_Abort+0x422>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a2c      	ldr	r2, [pc, #176]	@ (80020f0 <HAL_DMA_Abort+0x44c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d040      	beq.n	80020c6 <HAL_DMA_Abort+0x422>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a2a      	ldr	r2, [pc, #168]	@ (80020f4 <HAL_DMA_Abort+0x450>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d03b      	beq.n	80020c6 <HAL_DMA_Abort+0x422>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a29      	ldr	r2, [pc, #164]	@ (80020f8 <HAL_DMA_Abort+0x454>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d036      	beq.n	80020c6 <HAL_DMA_Abort+0x422>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a27      	ldr	r2, [pc, #156]	@ (80020fc <HAL_DMA_Abort+0x458>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d031      	beq.n	80020c6 <HAL_DMA_Abort+0x422>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a26      	ldr	r2, [pc, #152]	@ (8002100 <HAL_DMA_Abort+0x45c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d02c      	beq.n	80020c6 <HAL_DMA_Abort+0x422>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a24      	ldr	r2, [pc, #144]	@ (8002104 <HAL_DMA_Abort+0x460>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d027      	beq.n	80020c6 <HAL_DMA_Abort+0x422>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a23      	ldr	r2, [pc, #140]	@ (8002108 <HAL_DMA_Abort+0x464>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d022      	beq.n	80020c6 <HAL_DMA_Abort+0x422>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a21      	ldr	r2, [pc, #132]	@ (800210c <HAL_DMA_Abort+0x468>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01d      	beq.n	80020c6 <HAL_DMA_Abort+0x422>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a20      	ldr	r2, [pc, #128]	@ (8002110 <HAL_DMA_Abort+0x46c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d018      	beq.n	80020c6 <HAL_DMA_Abort+0x422>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a1e      	ldr	r2, [pc, #120]	@ (8002114 <HAL_DMA_Abort+0x470>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <HAL_DMA_Abort+0x422>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002118 <HAL_DMA_Abort+0x474>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d00e      	beq.n	80020c6 <HAL_DMA_Abort+0x422>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a1b      	ldr	r2, [pc, #108]	@ (800211c <HAL_DMA_Abort+0x478>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d009      	beq.n	80020c6 <HAL_DMA_Abort+0x422>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002120 <HAL_DMA_Abort+0x47c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d004      	beq.n	80020c6 <HAL_DMA_Abort+0x422>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a18      	ldr	r2, [pc, #96]	@ (8002124 <HAL_DMA_Abort+0x480>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d101      	bne.n	80020ca <HAL_DMA_Abort+0x426>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_DMA_Abort+0x428>
 80020ca:	2300      	movs	r3, #0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d02b      	beq.n	8002128 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020da:	f003 031f 	and.w	r3, r3, #31
 80020de:	223f      	movs	r2, #63	@ 0x3f
 80020e0:	409a      	lsls	r2, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	e02a      	b.n	800213e <HAL_DMA_Abort+0x49a>
 80020e8:	40020010 	.word	0x40020010
 80020ec:	40020028 	.word	0x40020028
 80020f0:	40020040 	.word	0x40020040
 80020f4:	40020058 	.word	0x40020058
 80020f8:	40020070 	.word	0x40020070
 80020fc:	40020088 	.word	0x40020088
 8002100:	400200a0 	.word	0x400200a0
 8002104:	400200b8 	.word	0x400200b8
 8002108:	40020410 	.word	0x40020410
 800210c:	40020428 	.word	0x40020428
 8002110:	40020440 	.word	0x40020440
 8002114:	40020458 	.word	0x40020458
 8002118:	40020470 	.word	0x40020470
 800211c:	40020488 	.word	0x40020488
 8002120:	400204a0 	.word	0x400204a0
 8002124:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002132:	f003 031f 	and.w	r3, r3, #31
 8002136:	2201      	movs	r2, #1
 8002138:	409a      	lsls	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a4f      	ldr	r2, [pc, #316]	@ (8002280 <HAL_DMA_Abort+0x5dc>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d072      	beq.n	800222e <HAL_DMA_Abort+0x58a>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a4d      	ldr	r2, [pc, #308]	@ (8002284 <HAL_DMA_Abort+0x5e0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d06d      	beq.n	800222e <HAL_DMA_Abort+0x58a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a4c      	ldr	r2, [pc, #304]	@ (8002288 <HAL_DMA_Abort+0x5e4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d068      	beq.n	800222e <HAL_DMA_Abort+0x58a>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a4a      	ldr	r2, [pc, #296]	@ (800228c <HAL_DMA_Abort+0x5e8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d063      	beq.n	800222e <HAL_DMA_Abort+0x58a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a49      	ldr	r2, [pc, #292]	@ (8002290 <HAL_DMA_Abort+0x5ec>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d05e      	beq.n	800222e <HAL_DMA_Abort+0x58a>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a47      	ldr	r2, [pc, #284]	@ (8002294 <HAL_DMA_Abort+0x5f0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d059      	beq.n	800222e <HAL_DMA_Abort+0x58a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a46      	ldr	r2, [pc, #280]	@ (8002298 <HAL_DMA_Abort+0x5f4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d054      	beq.n	800222e <HAL_DMA_Abort+0x58a>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a44      	ldr	r2, [pc, #272]	@ (800229c <HAL_DMA_Abort+0x5f8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d04f      	beq.n	800222e <HAL_DMA_Abort+0x58a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a43      	ldr	r2, [pc, #268]	@ (80022a0 <HAL_DMA_Abort+0x5fc>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d04a      	beq.n	800222e <HAL_DMA_Abort+0x58a>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a41      	ldr	r2, [pc, #260]	@ (80022a4 <HAL_DMA_Abort+0x600>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d045      	beq.n	800222e <HAL_DMA_Abort+0x58a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a40      	ldr	r2, [pc, #256]	@ (80022a8 <HAL_DMA_Abort+0x604>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d040      	beq.n	800222e <HAL_DMA_Abort+0x58a>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a3e      	ldr	r2, [pc, #248]	@ (80022ac <HAL_DMA_Abort+0x608>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d03b      	beq.n	800222e <HAL_DMA_Abort+0x58a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a3d      	ldr	r2, [pc, #244]	@ (80022b0 <HAL_DMA_Abort+0x60c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d036      	beq.n	800222e <HAL_DMA_Abort+0x58a>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a3b      	ldr	r2, [pc, #236]	@ (80022b4 <HAL_DMA_Abort+0x610>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d031      	beq.n	800222e <HAL_DMA_Abort+0x58a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a3a      	ldr	r2, [pc, #232]	@ (80022b8 <HAL_DMA_Abort+0x614>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d02c      	beq.n	800222e <HAL_DMA_Abort+0x58a>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a38      	ldr	r2, [pc, #224]	@ (80022bc <HAL_DMA_Abort+0x618>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d027      	beq.n	800222e <HAL_DMA_Abort+0x58a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a37      	ldr	r2, [pc, #220]	@ (80022c0 <HAL_DMA_Abort+0x61c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d022      	beq.n	800222e <HAL_DMA_Abort+0x58a>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a35      	ldr	r2, [pc, #212]	@ (80022c4 <HAL_DMA_Abort+0x620>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01d      	beq.n	800222e <HAL_DMA_Abort+0x58a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a34      	ldr	r2, [pc, #208]	@ (80022c8 <HAL_DMA_Abort+0x624>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d018      	beq.n	800222e <HAL_DMA_Abort+0x58a>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a32      	ldr	r2, [pc, #200]	@ (80022cc <HAL_DMA_Abort+0x628>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d013      	beq.n	800222e <HAL_DMA_Abort+0x58a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a31      	ldr	r2, [pc, #196]	@ (80022d0 <HAL_DMA_Abort+0x62c>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d00e      	beq.n	800222e <HAL_DMA_Abort+0x58a>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a2f      	ldr	r2, [pc, #188]	@ (80022d4 <HAL_DMA_Abort+0x630>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d009      	beq.n	800222e <HAL_DMA_Abort+0x58a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a2e      	ldr	r2, [pc, #184]	@ (80022d8 <HAL_DMA_Abort+0x634>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d004      	beq.n	800222e <HAL_DMA_Abort+0x58a>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a2c      	ldr	r2, [pc, #176]	@ (80022dc <HAL_DMA_Abort+0x638>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d101      	bne.n	8002232 <HAL_DMA_Abort+0x58e>
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <HAL_DMA_Abort+0x590>
 8002232:	2300      	movs	r3, #0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d015      	beq.n	8002264 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002240:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00c      	beq.n	8002264 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002254:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002258:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002262:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40020010 	.word	0x40020010
 8002284:	40020028 	.word	0x40020028
 8002288:	40020040 	.word	0x40020040
 800228c:	40020058 	.word	0x40020058
 8002290:	40020070 	.word	0x40020070
 8002294:	40020088 	.word	0x40020088
 8002298:	400200a0 	.word	0x400200a0
 800229c:	400200b8 	.word	0x400200b8
 80022a0:	40020410 	.word	0x40020410
 80022a4:	40020428 	.word	0x40020428
 80022a8:	40020440 	.word	0x40020440
 80022ac:	40020458 	.word	0x40020458
 80022b0:	40020470 	.word	0x40020470
 80022b4:	40020488 	.word	0x40020488
 80022b8:	400204a0 	.word	0x400204a0
 80022bc:	400204b8 	.word	0x400204b8
 80022c0:	58025408 	.word	0x58025408
 80022c4:	5802541c 	.word	0x5802541c
 80022c8:	58025430 	.word	0x58025430
 80022cc:	58025444 	.word	0x58025444
 80022d0:	58025458 	.word	0x58025458
 80022d4:	5802546c 	.word	0x5802546c
 80022d8:	58025480 	.word	0x58025480
 80022dc:	58025494 	.word	0x58025494

080022e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e237      	b.n	8002762 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d004      	beq.n	8002308 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2280      	movs	r2, #128	@ 0x80
 8002302:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e22c      	b.n	8002762 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a5c      	ldr	r2, [pc, #368]	@ (8002480 <HAL_DMA_Abort_IT+0x1a0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d04a      	beq.n	80023a8 <HAL_DMA_Abort_IT+0xc8>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a5b      	ldr	r2, [pc, #364]	@ (8002484 <HAL_DMA_Abort_IT+0x1a4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d045      	beq.n	80023a8 <HAL_DMA_Abort_IT+0xc8>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a59      	ldr	r2, [pc, #356]	@ (8002488 <HAL_DMA_Abort_IT+0x1a8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d040      	beq.n	80023a8 <HAL_DMA_Abort_IT+0xc8>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a58      	ldr	r2, [pc, #352]	@ (800248c <HAL_DMA_Abort_IT+0x1ac>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d03b      	beq.n	80023a8 <HAL_DMA_Abort_IT+0xc8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a56      	ldr	r2, [pc, #344]	@ (8002490 <HAL_DMA_Abort_IT+0x1b0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d036      	beq.n	80023a8 <HAL_DMA_Abort_IT+0xc8>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a55      	ldr	r2, [pc, #340]	@ (8002494 <HAL_DMA_Abort_IT+0x1b4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d031      	beq.n	80023a8 <HAL_DMA_Abort_IT+0xc8>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a53      	ldr	r2, [pc, #332]	@ (8002498 <HAL_DMA_Abort_IT+0x1b8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d02c      	beq.n	80023a8 <HAL_DMA_Abort_IT+0xc8>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a52      	ldr	r2, [pc, #328]	@ (800249c <HAL_DMA_Abort_IT+0x1bc>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d027      	beq.n	80023a8 <HAL_DMA_Abort_IT+0xc8>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a50      	ldr	r2, [pc, #320]	@ (80024a0 <HAL_DMA_Abort_IT+0x1c0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d022      	beq.n	80023a8 <HAL_DMA_Abort_IT+0xc8>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a4f      	ldr	r2, [pc, #316]	@ (80024a4 <HAL_DMA_Abort_IT+0x1c4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d01d      	beq.n	80023a8 <HAL_DMA_Abort_IT+0xc8>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a4d      	ldr	r2, [pc, #308]	@ (80024a8 <HAL_DMA_Abort_IT+0x1c8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d018      	beq.n	80023a8 <HAL_DMA_Abort_IT+0xc8>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a4c      	ldr	r2, [pc, #304]	@ (80024ac <HAL_DMA_Abort_IT+0x1cc>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d013      	beq.n	80023a8 <HAL_DMA_Abort_IT+0xc8>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a4a      	ldr	r2, [pc, #296]	@ (80024b0 <HAL_DMA_Abort_IT+0x1d0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00e      	beq.n	80023a8 <HAL_DMA_Abort_IT+0xc8>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a49      	ldr	r2, [pc, #292]	@ (80024b4 <HAL_DMA_Abort_IT+0x1d4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d009      	beq.n	80023a8 <HAL_DMA_Abort_IT+0xc8>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a47      	ldr	r2, [pc, #284]	@ (80024b8 <HAL_DMA_Abort_IT+0x1d8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d004      	beq.n	80023a8 <HAL_DMA_Abort_IT+0xc8>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a46      	ldr	r2, [pc, #280]	@ (80024bc <HAL_DMA_Abort_IT+0x1dc>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d101      	bne.n	80023ac <HAL_DMA_Abort_IT+0xcc>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <HAL_DMA_Abort_IT+0xce>
 80023ac:	2300      	movs	r3, #0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 8086 	beq.w	80024c0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2204      	movs	r2, #4
 80023b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a2f      	ldr	r2, [pc, #188]	@ (8002480 <HAL_DMA_Abort_IT+0x1a0>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d04a      	beq.n	800245c <HAL_DMA_Abort_IT+0x17c>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a2e      	ldr	r2, [pc, #184]	@ (8002484 <HAL_DMA_Abort_IT+0x1a4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d045      	beq.n	800245c <HAL_DMA_Abort_IT+0x17c>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002488 <HAL_DMA_Abort_IT+0x1a8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d040      	beq.n	800245c <HAL_DMA_Abort_IT+0x17c>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a2b      	ldr	r2, [pc, #172]	@ (800248c <HAL_DMA_Abort_IT+0x1ac>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d03b      	beq.n	800245c <HAL_DMA_Abort_IT+0x17c>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a29      	ldr	r2, [pc, #164]	@ (8002490 <HAL_DMA_Abort_IT+0x1b0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d036      	beq.n	800245c <HAL_DMA_Abort_IT+0x17c>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a28      	ldr	r2, [pc, #160]	@ (8002494 <HAL_DMA_Abort_IT+0x1b4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d031      	beq.n	800245c <HAL_DMA_Abort_IT+0x17c>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a26      	ldr	r2, [pc, #152]	@ (8002498 <HAL_DMA_Abort_IT+0x1b8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d02c      	beq.n	800245c <HAL_DMA_Abort_IT+0x17c>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a25      	ldr	r2, [pc, #148]	@ (800249c <HAL_DMA_Abort_IT+0x1bc>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d027      	beq.n	800245c <HAL_DMA_Abort_IT+0x17c>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a23      	ldr	r2, [pc, #140]	@ (80024a0 <HAL_DMA_Abort_IT+0x1c0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d022      	beq.n	800245c <HAL_DMA_Abort_IT+0x17c>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a22      	ldr	r2, [pc, #136]	@ (80024a4 <HAL_DMA_Abort_IT+0x1c4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d01d      	beq.n	800245c <HAL_DMA_Abort_IT+0x17c>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a20      	ldr	r2, [pc, #128]	@ (80024a8 <HAL_DMA_Abort_IT+0x1c8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d018      	beq.n	800245c <HAL_DMA_Abort_IT+0x17c>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1f      	ldr	r2, [pc, #124]	@ (80024ac <HAL_DMA_Abort_IT+0x1cc>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d013      	beq.n	800245c <HAL_DMA_Abort_IT+0x17c>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a1d      	ldr	r2, [pc, #116]	@ (80024b0 <HAL_DMA_Abort_IT+0x1d0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d00e      	beq.n	800245c <HAL_DMA_Abort_IT+0x17c>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a1c      	ldr	r2, [pc, #112]	@ (80024b4 <HAL_DMA_Abort_IT+0x1d4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d009      	beq.n	800245c <HAL_DMA_Abort_IT+0x17c>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a1a      	ldr	r2, [pc, #104]	@ (80024b8 <HAL_DMA_Abort_IT+0x1d8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d004      	beq.n	800245c <HAL_DMA_Abort_IT+0x17c>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a19      	ldr	r2, [pc, #100]	@ (80024bc <HAL_DMA_Abort_IT+0x1dc>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d108      	bne.n	800246e <HAL_DMA_Abort_IT+0x18e>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0201 	bic.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	e178      	b.n	8002760 <HAL_DMA_Abort_IT+0x480>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0201 	bic.w	r2, r2, #1
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	e16f      	b.n	8002760 <HAL_DMA_Abort_IT+0x480>
 8002480:	40020010 	.word	0x40020010
 8002484:	40020028 	.word	0x40020028
 8002488:	40020040 	.word	0x40020040
 800248c:	40020058 	.word	0x40020058
 8002490:	40020070 	.word	0x40020070
 8002494:	40020088 	.word	0x40020088
 8002498:	400200a0 	.word	0x400200a0
 800249c:	400200b8 	.word	0x400200b8
 80024a0:	40020410 	.word	0x40020410
 80024a4:	40020428 	.word	0x40020428
 80024a8:	40020440 	.word	0x40020440
 80024ac:	40020458 	.word	0x40020458
 80024b0:	40020470 	.word	0x40020470
 80024b4:	40020488 	.word	0x40020488
 80024b8:	400204a0 	.word	0x400204a0
 80024bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 020e 	bic.w	r2, r2, #14
 80024ce:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a6c      	ldr	r2, [pc, #432]	@ (8002688 <HAL_DMA_Abort_IT+0x3a8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d04a      	beq.n	8002570 <HAL_DMA_Abort_IT+0x290>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a6b      	ldr	r2, [pc, #428]	@ (800268c <HAL_DMA_Abort_IT+0x3ac>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d045      	beq.n	8002570 <HAL_DMA_Abort_IT+0x290>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a69      	ldr	r2, [pc, #420]	@ (8002690 <HAL_DMA_Abort_IT+0x3b0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d040      	beq.n	8002570 <HAL_DMA_Abort_IT+0x290>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a68      	ldr	r2, [pc, #416]	@ (8002694 <HAL_DMA_Abort_IT+0x3b4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d03b      	beq.n	8002570 <HAL_DMA_Abort_IT+0x290>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a66      	ldr	r2, [pc, #408]	@ (8002698 <HAL_DMA_Abort_IT+0x3b8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d036      	beq.n	8002570 <HAL_DMA_Abort_IT+0x290>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a65      	ldr	r2, [pc, #404]	@ (800269c <HAL_DMA_Abort_IT+0x3bc>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d031      	beq.n	8002570 <HAL_DMA_Abort_IT+0x290>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a63      	ldr	r2, [pc, #396]	@ (80026a0 <HAL_DMA_Abort_IT+0x3c0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d02c      	beq.n	8002570 <HAL_DMA_Abort_IT+0x290>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a62      	ldr	r2, [pc, #392]	@ (80026a4 <HAL_DMA_Abort_IT+0x3c4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d027      	beq.n	8002570 <HAL_DMA_Abort_IT+0x290>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a60      	ldr	r2, [pc, #384]	@ (80026a8 <HAL_DMA_Abort_IT+0x3c8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d022      	beq.n	8002570 <HAL_DMA_Abort_IT+0x290>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a5f      	ldr	r2, [pc, #380]	@ (80026ac <HAL_DMA_Abort_IT+0x3cc>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d01d      	beq.n	8002570 <HAL_DMA_Abort_IT+0x290>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a5d      	ldr	r2, [pc, #372]	@ (80026b0 <HAL_DMA_Abort_IT+0x3d0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d018      	beq.n	8002570 <HAL_DMA_Abort_IT+0x290>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a5c      	ldr	r2, [pc, #368]	@ (80026b4 <HAL_DMA_Abort_IT+0x3d4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d013      	beq.n	8002570 <HAL_DMA_Abort_IT+0x290>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a5a      	ldr	r2, [pc, #360]	@ (80026b8 <HAL_DMA_Abort_IT+0x3d8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d00e      	beq.n	8002570 <HAL_DMA_Abort_IT+0x290>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a59      	ldr	r2, [pc, #356]	@ (80026bc <HAL_DMA_Abort_IT+0x3dc>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d009      	beq.n	8002570 <HAL_DMA_Abort_IT+0x290>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a57      	ldr	r2, [pc, #348]	@ (80026c0 <HAL_DMA_Abort_IT+0x3e0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d004      	beq.n	8002570 <HAL_DMA_Abort_IT+0x290>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a56      	ldr	r2, [pc, #344]	@ (80026c4 <HAL_DMA_Abort_IT+0x3e4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d108      	bne.n	8002582 <HAL_DMA_Abort_IT+0x2a2>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0201 	bic.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e007      	b.n	8002592 <HAL_DMA_Abort_IT+0x2b2>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0201 	bic.w	r2, r2, #1
 8002590:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a3c      	ldr	r2, [pc, #240]	@ (8002688 <HAL_DMA_Abort_IT+0x3a8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d072      	beq.n	8002682 <HAL_DMA_Abort_IT+0x3a2>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a3a      	ldr	r2, [pc, #232]	@ (800268c <HAL_DMA_Abort_IT+0x3ac>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d06d      	beq.n	8002682 <HAL_DMA_Abort_IT+0x3a2>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a39      	ldr	r2, [pc, #228]	@ (8002690 <HAL_DMA_Abort_IT+0x3b0>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d068      	beq.n	8002682 <HAL_DMA_Abort_IT+0x3a2>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a37      	ldr	r2, [pc, #220]	@ (8002694 <HAL_DMA_Abort_IT+0x3b4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d063      	beq.n	8002682 <HAL_DMA_Abort_IT+0x3a2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a36      	ldr	r2, [pc, #216]	@ (8002698 <HAL_DMA_Abort_IT+0x3b8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d05e      	beq.n	8002682 <HAL_DMA_Abort_IT+0x3a2>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a34      	ldr	r2, [pc, #208]	@ (800269c <HAL_DMA_Abort_IT+0x3bc>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d059      	beq.n	8002682 <HAL_DMA_Abort_IT+0x3a2>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a33      	ldr	r2, [pc, #204]	@ (80026a0 <HAL_DMA_Abort_IT+0x3c0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d054      	beq.n	8002682 <HAL_DMA_Abort_IT+0x3a2>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a31      	ldr	r2, [pc, #196]	@ (80026a4 <HAL_DMA_Abort_IT+0x3c4>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d04f      	beq.n	8002682 <HAL_DMA_Abort_IT+0x3a2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a30      	ldr	r2, [pc, #192]	@ (80026a8 <HAL_DMA_Abort_IT+0x3c8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d04a      	beq.n	8002682 <HAL_DMA_Abort_IT+0x3a2>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a2e      	ldr	r2, [pc, #184]	@ (80026ac <HAL_DMA_Abort_IT+0x3cc>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d045      	beq.n	8002682 <HAL_DMA_Abort_IT+0x3a2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a2d      	ldr	r2, [pc, #180]	@ (80026b0 <HAL_DMA_Abort_IT+0x3d0>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d040      	beq.n	8002682 <HAL_DMA_Abort_IT+0x3a2>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a2b      	ldr	r2, [pc, #172]	@ (80026b4 <HAL_DMA_Abort_IT+0x3d4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d03b      	beq.n	8002682 <HAL_DMA_Abort_IT+0x3a2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a2a      	ldr	r2, [pc, #168]	@ (80026b8 <HAL_DMA_Abort_IT+0x3d8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d036      	beq.n	8002682 <HAL_DMA_Abort_IT+0x3a2>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a28      	ldr	r2, [pc, #160]	@ (80026bc <HAL_DMA_Abort_IT+0x3dc>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d031      	beq.n	8002682 <HAL_DMA_Abort_IT+0x3a2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a27      	ldr	r2, [pc, #156]	@ (80026c0 <HAL_DMA_Abort_IT+0x3e0>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d02c      	beq.n	8002682 <HAL_DMA_Abort_IT+0x3a2>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a25      	ldr	r2, [pc, #148]	@ (80026c4 <HAL_DMA_Abort_IT+0x3e4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d027      	beq.n	8002682 <HAL_DMA_Abort_IT+0x3a2>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a24      	ldr	r2, [pc, #144]	@ (80026c8 <HAL_DMA_Abort_IT+0x3e8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d022      	beq.n	8002682 <HAL_DMA_Abort_IT+0x3a2>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a22      	ldr	r2, [pc, #136]	@ (80026cc <HAL_DMA_Abort_IT+0x3ec>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d01d      	beq.n	8002682 <HAL_DMA_Abort_IT+0x3a2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a21      	ldr	r2, [pc, #132]	@ (80026d0 <HAL_DMA_Abort_IT+0x3f0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d018      	beq.n	8002682 <HAL_DMA_Abort_IT+0x3a2>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a1f      	ldr	r2, [pc, #124]	@ (80026d4 <HAL_DMA_Abort_IT+0x3f4>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d013      	beq.n	8002682 <HAL_DMA_Abort_IT+0x3a2>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a1e      	ldr	r2, [pc, #120]	@ (80026d8 <HAL_DMA_Abort_IT+0x3f8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d00e      	beq.n	8002682 <HAL_DMA_Abort_IT+0x3a2>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a1c      	ldr	r2, [pc, #112]	@ (80026dc <HAL_DMA_Abort_IT+0x3fc>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d009      	beq.n	8002682 <HAL_DMA_Abort_IT+0x3a2>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a1b      	ldr	r2, [pc, #108]	@ (80026e0 <HAL_DMA_Abort_IT+0x400>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d004      	beq.n	8002682 <HAL_DMA_Abort_IT+0x3a2>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a19      	ldr	r2, [pc, #100]	@ (80026e4 <HAL_DMA_Abort_IT+0x404>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d132      	bne.n	80026e8 <HAL_DMA_Abort_IT+0x408>
 8002682:	2301      	movs	r3, #1
 8002684:	e031      	b.n	80026ea <HAL_DMA_Abort_IT+0x40a>
 8002686:	bf00      	nop
 8002688:	40020010 	.word	0x40020010
 800268c:	40020028 	.word	0x40020028
 8002690:	40020040 	.word	0x40020040
 8002694:	40020058 	.word	0x40020058
 8002698:	40020070 	.word	0x40020070
 800269c:	40020088 	.word	0x40020088
 80026a0:	400200a0 	.word	0x400200a0
 80026a4:	400200b8 	.word	0x400200b8
 80026a8:	40020410 	.word	0x40020410
 80026ac:	40020428 	.word	0x40020428
 80026b0:	40020440 	.word	0x40020440
 80026b4:	40020458 	.word	0x40020458
 80026b8:	40020470 	.word	0x40020470
 80026bc:	40020488 	.word	0x40020488
 80026c0:	400204a0 	.word	0x400204a0
 80026c4:	400204b8 	.word	0x400204b8
 80026c8:	58025408 	.word	0x58025408
 80026cc:	5802541c 	.word	0x5802541c
 80026d0:	58025430 	.word	0x58025430
 80026d4:	58025444 	.word	0x58025444
 80026d8:	58025458 	.word	0x58025458
 80026dc:	5802546c 	.word	0x5802546c
 80026e0:	58025480 	.word	0x58025480
 80026e4:	58025494 	.word	0x58025494
 80026e8:	2300      	movs	r3, #0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d028      	beq.n	8002740 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026fc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002702:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	2201      	movs	r2, #1
 800270e:	409a      	lsls	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800271c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00c      	beq.n	8002740 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002730:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002734:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800273e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop

0800276c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	@ 0x28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002778:	4b67      	ldr	r3, [pc, #412]	@ (8002918 <HAL_DMA_IRQHandler+0x1ac>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a67      	ldr	r2, [pc, #412]	@ (800291c <HAL_DMA_IRQHandler+0x1b0>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	0a9b      	lsrs	r3, r3, #10
 8002784:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002790:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a5f      	ldr	r2, [pc, #380]	@ (8002920 <HAL_DMA_IRQHandler+0x1b4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d04a      	beq.n	800283e <HAL_DMA_IRQHandler+0xd2>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002924 <HAL_DMA_IRQHandler+0x1b8>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d045      	beq.n	800283e <HAL_DMA_IRQHandler+0xd2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a5c      	ldr	r2, [pc, #368]	@ (8002928 <HAL_DMA_IRQHandler+0x1bc>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d040      	beq.n	800283e <HAL_DMA_IRQHandler+0xd2>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a5a      	ldr	r2, [pc, #360]	@ (800292c <HAL_DMA_IRQHandler+0x1c0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d03b      	beq.n	800283e <HAL_DMA_IRQHandler+0xd2>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a59      	ldr	r2, [pc, #356]	@ (8002930 <HAL_DMA_IRQHandler+0x1c4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d036      	beq.n	800283e <HAL_DMA_IRQHandler+0xd2>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a57      	ldr	r2, [pc, #348]	@ (8002934 <HAL_DMA_IRQHandler+0x1c8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d031      	beq.n	800283e <HAL_DMA_IRQHandler+0xd2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a56      	ldr	r2, [pc, #344]	@ (8002938 <HAL_DMA_IRQHandler+0x1cc>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d02c      	beq.n	800283e <HAL_DMA_IRQHandler+0xd2>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a54      	ldr	r2, [pc, #336]	@ (800293c <HAL_DMA_IRQHandler+0x1d0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d027      	beq.n	800283e <HAL_DMA_IRQHandler+0xd2>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a53      	ldr	r2, [pc, #332]	@ (8002940 <HAL_DMA_IRQHandler+0x1d4>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d022      	beq.n	800283e <HAL_DMA_IRQHandler+0xd2>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a51      	ldr	r2, [pc, #324]	@ (8002944 <HAL_DMA_IRQHandler+0x1d8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d01d      	beq.n	800283e <HAL_DMA_IRQHandler+0xd2>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a50      	ldr	r2, [pc, #320]	@ (8002948 <HAL_DMA_IRQHandler+0x1dc>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d018      	beq.n	800283e <HAL_DMA_IRQHandler+0xd2>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a4e      	ldr	r2, [pc, #312]	@ (800294c <HAL_DMA_IRQHandler+0x1e0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d013      	beq.n	800283e <HAL_DMA_IRQHandler+0xd2>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a4d      	ldr	r2, [pc, #308]	@ (8002950 <HAL_DMA_IRQHandler+0x1e4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d00e      	beq.n	800283e <HAL_DMA_IRQHandler+0xd2>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a4b      	ldr	r2, [pc, #300]	@ (8002954 <HAL_DMA_IRQHandler+0x1e8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d009      	beq.n	800283e <HAL_DMA_IRQHandler+0xd2>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a4a      	ldr	r2, [pc, #296]	@ (8002958 <HAL_DMA_IRQHandler+0x1ec>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d004      	beq.n	800283e <HAL_DMA_IRQHandler+0xd2>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a48      	ldr	r2, [pc, #288]	@ (800295c <HAL_DMA_IRQHandler+0x1f0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d101      	bne.n	8002842 <HAL_DMA_IRQHandler+0xd6>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <HAL_DMA_IRQHandler+0xd8>
 8002842:	2300      	movs	r3, #0
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 842b 	beq.w	80030a0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	2208      	movs	r2, #8
 8002854:	409a      	lsls	r2, r3
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 80a2 	beq.w	80029a4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a2e      	ldr	r2, [pc, #184]	@ (8002920 <HAL_DMA_IRQHandler+0x1b4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d04a      	beq.n	8002900 <HAL_DMA_IRQHandler+0x194>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a2d      	ldr	r2, [pc, #180]	@ (8002924 <HAL_DMA_IRQHandler+0x1b8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d045      	beq.n	8002900 <HAL_DMA_IRQHandler+0x194>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a2b      	ldr	r2, [pc, #172]	@ (8002928 <HAL_DMA_IRQHandler+0x1bc>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d040      	beq.n	8002900 <HAL_DMA_IRQHandler+0x194>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a2a      	ldr	r2, [pc, #168]	@ (800292c <HAL_DMA_IRQHandler+0x1c0>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d03b      	beq.n	8002900 <HAL_DMA_IRQHandler+0x194>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a28      	ldr	r2, [pc, #160]	@ (8002930 <HAL_DMA_IRQHandler+0x1c4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d036      	beq.n	8002900 <HAL_DMA_IRQHandler+0x194>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a27      	ldr	r2, [pc, #156]	@ (8002934 <HAL_DMA_IRQHandler+0x1c8>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d031      	beq.n	8002900 <HAL_DMA_IRQHandler+0x194>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a25      	ldr	r2, [pc, #148]	@ (8002938 <HAL_DMA_IRQHandler+0x1cc>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d02c      	beq.n	8002900 <HAL_DMA_IRQHandler+0x194>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a24      	ldr	r2, [pc, #144]	@ (800293c <HAL_DMA_IRQHandler+0x1d0>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d027      	beq.n	8002900 <HAL_DMA_IRQHandler+0x194>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a22      	ldr	r2, [pc, #136]	@ (8002940 <HAL_DMA_IRQHandler+0x1d4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d022      	beq.n	8002900 <HAL_DMA_IRQHandler+0x194>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a21      	ldr	r2, [pc, #132]	@ (8002944 <HAL_DMA_IRQHandler+0x1d8>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d01d      	beq.n	8002900 <HAL_DMA_IRQHandler+0x194>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002948 <HAL_DMA_IRQHandler+0x1dc>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d018      	beq.n	8002900 <HAL_DMA_IRQHandler+0x194>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a1e      	ldr	r2, [pc, #120]	@ (800294c <HAL_DMA_IRQHandler+0x1e0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d013      	beq.n	8002900 <HAL_DMA_IRQHandler+0x194>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002950 <HAL_DMA_IRQHandler+0x1e4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d00e      	beq.n	8002900 <HAL_DMA_IRQHandler+0x194>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002954 <HAL_DMA_IRQHandler+0x1e8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d009      	beq.n	8002900 <HAL_DMA_IRQHandler+0x194>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a19      	ldr	r2, [pc, #100]	@ (8002958 <HAL_DMA_IRQHandler+0x1ec>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d004      	beq.n	8002900 <HAL_DMA_IRQHandler+0x194>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a18      	ldr	r2, [pc, #96]	@ (800295c <HAL_DMA_IRQHandler+0x1f0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d12f      	bne.n	8002960 <HAL_DMA_IRQHandler+0x1f4>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b00      	cmp	r3, #0
 800290c:	bf14      	ite	ne
 800290e:	2301      	movne	r3, #1
 8002910:	2300      	moveq	r3, #0
 8002912:	b2db      	uxtb	r3, r3
 8002914:	e02e      	b.n	8002974 <HAL_DMA_IRQHandler+0x208>
 8002916:	bf00      	nop
 8002918:	24000000 	.word	0x24000000
 800291c:	1b4e81b5 	.word	0x1b4e81b5
 8002920:	40020010 	.word	0x40020010
 8002924:	40020028 	.word	0x40020028
 8002928:	40020040 	.word	0x40020040
 800292c:	40020058 	.word	0x40020058
 8002930:	40020070 	.word	0x40020070
 8002934:	40020088 	.word	0x40020088
 8002938:	400200a0 	.word	0x400200a0
 800293c:	400200b8 	.word	0x400200b8
 8002940:	40020410 	.word	0x40020410
 8002944:	40020428 	.word	0x40020428
 8002948:	40020440 	.word	0x40020440
 800294c:	40020458 	.word	0x40020458
 8002950:	40020470 	.word	0x40020470
 8002954:	40020488 	.word	0x40020488
 8002958:	400204a0 	.word	0x400204a0
 800295c:	400204b8 	.word	0x400204b8
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	bf14      	ite	ne
 800296e:	2301      	movne	r3, #1
 8002970:	2300      	moveq	r3, #0
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d015      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0204 	bic.w	r2, r2, #4
 8002986:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298c:	f003 031f 	and.w	r3, r3, #31
 8002990:	2208      	movs	r2, #8
 8002992:	409a      	lsls	r2, r3
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299c:	f043 0201 	orr.w	r2, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	fa22 f303 	lsr.w	r3, r2, r3
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d06e      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a69      	ldr	r2, [pc, #420]	@ (8002b64 <HAL_DMA_IRQHandler+0x3f8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d04a      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x2ee>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a67      	ldr	r2, [pc, #412]	@ (8002b68 <HAL_DMA_IRQHandler+0x3fc>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d045      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x2ee>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a66      	ldr	r2, [pc, #408]	@ (8002b6c <HAL_DMA_IRQHandler+0x400>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d040      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x2ee>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a64      	ldr	r2, [pc, #400]	@ (8002b70 <HAL_DMA_IRQHandler+0x404>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d03b      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x2ee>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a63      	ldr	r2, [pc, #396]	@ (8002b74 <HAL_DMA_IRQHandler+0x408>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d036      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x2ee>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a61      	ldr	r2, [pc, #388]	@ (8002b78 <HAL_DMA_IRQHandler+0x40c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d031      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x2ee>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a60      	ldr	r2, [pc, #384]	@ (8002b7c <HAL_DMA_IRQHandler+0x410>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d02c      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x2ee>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a5e      	ldr	r2, [pc, #376]	@ (8002b80 <HAL_DMA_IRQHandler+0x414>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d027      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x2ee>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a5d      	ldr	r2, [pc, #372]	@ (8002b84 <HAL_DMA_IRQHandler+0x418>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d022      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x2ee>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a5b      	ldr	r2, [pc, #364]	@ (8002b88 <HAL_DMA_IRQHandler+0x41c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d01d      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x2ee>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a5a      	ldr	r2, [pc, #360]	@ (8002b8c <HAL_DMA_IRQHandler+0x420>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d018      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x2ee>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a58      	ldr	r2, [pc, #352]	@ (8002b90 <HAL_DMA_IRQHandler+0x424>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d013      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x2ee>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a57      	ldr	r2, [pc, #348]	@ (8002b94 <HAL_DMA_IRQHandler+0x428>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d00e      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x2ee>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a55      	ldr	r2, [pc, #340]	@ (8002b98 <HAL_DMA_IRQHandler+0x42c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d009      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x2ee>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a54      	ldr	r2, [pc, #336]	@ (8002b9c <HAL_DMA_IRQHandler+0x430>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d004      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x2ee>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a52      	ldr	r2, [pc, #328]	@ (8002ba0 <HAL_DMA_IRQHandler+0x434>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d10a      	bne.n	8002a70 <HAL_DMA_IRQHandler+0x304>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	bf14      	ite	ne
 8002a68:	2301      	movne	r3, #1
 8002a6a:	2300      	moveq	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	e003      	b.n	8002a78 <HAL_DMA_IRQHandler+0x30c>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2300      	movs	r3, #0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00d      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	2201      	movs	r2, #1
 8002a86:	409a      	lsls	r2, r3
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a90:	f043 0202 	orr.w	r2, r3, #2
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	2204      	movs	r2, #4
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 808f 	beq.w	8002bcc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a2c      	ldr	r2, [pc, #176]	@ (8002b64 <HAL_DMA_IRQHandler+0x3f8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d04a      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x3e2>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a2a      	ldr	r2, [pc, #168]	@ (8002b68 <HAL_DMA_IRQHandler+0x3fc>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d045      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x3e2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a29      	ldr	r2, [pc, #164]	@ (8002b6c <HAL_DMA_IRQHandler+0x400>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d040      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x3e2>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a27      	ldr	r2, [pc, #156]	@ (8002b70 <HAL_DMA_IRQHandler+0x404>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d03b      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x3e2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a26      	ldr	r2, [pc, #152]	@ (8002b74 <HAL_DMA_IRQHandler+0x408>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d036      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x3e2>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a24      	ldr	r2, [pc, #144]	@ (8002b78 <HAL_DMA_IRQHandler+0x40c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d031      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x3e2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a23      	ldr	r2, [pc, #140]	@ (8002b7c <HAL_DMA_IRQHandler+0x410>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d02c      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x3e2>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a21      	ldr	r2, [pc, #132]	@ (8002b80 <HAL_DMA_IRQHandler+0x414>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d027      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x3e2>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a20      	ldr	r2, [pc, #128]	@ (8002b84 <HAL_DMA_IRQHandler+0x418>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d022      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x3e2>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a1e      	ldr	r2, [pc, #120]	@ (8002b88 <HAL_DMA_IRQHandler+0x41c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d01d      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x3e2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a1d      	ldr	r2, [pc, #116]	@ (8002b8c <HAL_DMA_IRQHandler+0x420>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d018      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x3e2>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a1b      	ldr	r2, [pc, #108]	@ (8002b90 <HAL_DMA_IRQHandler+0x424>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d013      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x3e2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1a      	ldr	r2, [pc, #104]	@ (8002b94 <HAL_DMA_IRQHandler+0x428>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d00e      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x3e2>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a18      	ldr	r2, [pc, #96]	@ (8002b98 <HAL_DMA_IRQHandler+0x42c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d009      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x3e2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a17      	ldr	r2, [pc, #92]	@ (8002b9c <HAL_DMA_IRQHandler+0x430>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d004      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x3e2>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a15      	ldr	r2, [pc, #84]	@ (8002ba0 <HAL_DMA_IRQHandler+0x434>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d12a      	bne.n	8002ba4 <HAL_DMA_IRQHandler+0x438>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	e023      	b.n	8002bac <HAL_DMA_IRQHandler+0x440>
 8002b64:	40020010 	.word	0x40020010
 8002b68:	40020028 	.word	0x40020028
 8002b6c:	40020040 	.word	0x40020040
 8002b70:	40020058 	.word	0x40020058
 8002b74:	40020070 	.word	0x40020070
 8002b78:	40020088 	.word	0x40020088
 8002b7c:	400200a0 	.word	0x400200a0
 8002b80:	400200b8 	.word	0x400200b8
 8002b84:	40020410 	.word	0x40020410
 8002b88:	40020428 	.word	0x40020428
 8002b8c:	40020440 	.word	0x40020440
 8002b90:	40020458 	.word	0x40020458
 8002b94:	40020470 	.word	0x40020470
 8002b98:	40020488 	.word	0x40020488
 8002b9c:	400204a0 	.word	0x400204a0
 8002ba0:	400204b8 	.word	0x400204b8
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2300      	movs	r3, #0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00d      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb4:	f003 031f 	and.w	r3, r3, #31
 8002bb8:	2204      	movs	r2, #4
 8002bba:	409a      	lsls	r2, r3
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc4:	f043 0204 	orr.w	r2, r3, #4
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	2210      	movs	r2, #16
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80a6 	beq.w	8002d2e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a85      	ldr	r2, [pc, #532]	@ (8002dfc <HAL_DMA_IRQHandler+0x690>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d04a      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x516>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a83      	ldr	r2, [pc, #524]	@ (8002e00 <HAL_DMA_IRQHandler+0x694>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d045      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x516>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a82      	ldr	r2, [pc, #520]	@ (8002e04 <HAL_DMA_IRQHandler+0x698>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d040      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x516>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a80      	ldr	r2, [pc, #512]	@ (8002e08 <HAL_DMA_IRQHandler+0x69c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d03b      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x516>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a7f      	ldr	r2, [pc, #508]	@ (8002e0c <HAL_DMA_IRQHandler+0x6a0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d036      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x516>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a7d      	ldr	r2, [pc, #500]	@ (8002e10 <HAL_DMA_IRQHandler+0x6a4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d031      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x516>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a7c      	ldr	r2, [pc, #496]	@ (8002e14 <HAL_DMA_IRQHandler+0x6a8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d02c      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x516>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a7a      	ldr	r2, [pc, #488]	@ (8002e18 <HAL_DMA_IRQHandler+0x6ac>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d027      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x516>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a79      	ldr	r2, [pc, #484]	@ (8002e1c <HAL_DMA_IRQHandler+0x6b0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d022      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x516>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a77      	ldr	r2, [pc, #476]	@ (8002e20 <HAL_DMA_IRQHandler+0x6b4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d01d      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x516>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a76      	ldr	r2, [pc, #472]	@ (8002e24 <HAL_DMA_IRQHandler+0x6b8>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d018      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x516>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a74      	ldr	r2, [pc, #464]	@ (8002e28 <HAL_DMA_IRQHandler+0x6bc>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x516>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a73      	ldr	r2, [pc, #460]	@ (8002e2c <HAL_DMA_IRQHandler+0x6c0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d00e      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x516>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a71      	ldr	r2, [pc, #452]	@ (8002e30 <HAL_DMA_IRQHandler+0x6c4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d009      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x516>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a70      	ldr	r2, [pc, #448]	@ (8002e34 <HAL_DMA_IRQHandler+0x6c8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d004      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x516>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a6e      	ldr	r2, [pc, #440]	@ (8002e38 <HAL_DMA_IRQHandler+0x6cc>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d10a      	bne.n	8002c98 <HAL_DMA_IRQHandler+0x52c>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	bf14      	ite	ne
 8002c90:	2301      	movne	r3, #1
 8002c92:	2300      	moveq	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	e009      	b.n	8002cac <HAL_DMA_IRQHandler+0x540>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	bf14      	ite	ne
 8002ca6:	2301      	movne	r3, #1
 8002ca8:	2300      	moveq	r3, #0
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d03e      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	2210      	movs	r2, #16
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d018      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d108      	bne.n	8002cee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d024      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	4798      	blx	r3
 8002cec:	e01f      	b.n	8002d2e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d01b      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	4798      	blx	r3
 8002cfe:	e016      	b.n	8002d2e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d107      	bne.n	8002d1e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0208 	bic.w	r2, r2, #8
 8002d1c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	2220      	movs	r2, #32
 8002d38:	409a      	lsls	r2, r3
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 8110 	beq.w	8002f64 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a2c      	ldr	r2, [pc, #176]	@ (8002dfc <HAL_DMA_IRQHandler+0x690>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d04a      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x678>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a2b      	ldr	r2, [pc, #172]	@ (8002e00 <HAL_DMA_IRQHandler+0x694>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d045      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x678>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a29      	ldr	r2, [pc, #164]	@ (8002e04 <HAL_DMA_IRQHandler+0x698>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d040      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x678>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a28      	ldr	r2, [pc, #160]	@ (8002e08 <HAL_DMA_IRQHandler+0x69c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d03b      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x678>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a26      	ldr	r2, [pc, #152]	@ (8002e0c <HAL_DMA_IRQHandler+0x6a0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d036      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x678>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a25      	ldr	r2, [pc, #148]	@ (8002e10 <HAL_DMA_IRQHandler+0x6a4>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d031      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x678>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a23      	ldr	r2, [pc, #140]	@ (8002e14 <HAL_DMA_IRQHandler+0x6a8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d02c      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x678>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a22      	ldr	r2, [pc, #136]	@ (8002e18 <HAL_DMA_IRQHandler+0x6ac>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d027      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x678>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a20      	ldr	r2, [pc, #128]	@ (8002e1c <HAL_DMA_IRQHandler+0x6b0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d022      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x678>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1f      	ldr	r2, [pc, #124]	@ (8002e20 <HAL_DMA_IRQHandler+0x6b4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d01d      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x678>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1d      	ldr	r2, [pc, #116]	@ (8002e24 <HAL_DMA_IRQHandler+0x6b8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d018      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x678>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1c      	ldr	r2, [pc, #112]	@ (8002e28 <HAL_DMA_IRQHandler+0x6bc>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d013      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x678>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8002e2c <HAL_DMA_IRQHandler+0x6c0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00e      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x678>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a19      	ldr	r2, [pc, #100]	@ (8002e30 <HAL_DMA_IRQHandler+0x6c4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d009      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x678>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a17      	ldr	r2, [pc, #92]	@ (8002e34 <HAL_DMA_IRQHandler+0x6c8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d004      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x678>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a16      	ldr	r2, [pc, #88]	@ (8002e38 <HAL_DMA_IRQHandler+0x6cc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d12b      	bne.n	8002e3c <HAL_DMA_IRQHandler+0x6d0>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	bf14      	ite	ne
 8002df2:	2301      	movne	r3, #1
 8002df4:	2300      	moveq	r3, #0
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	e02a      	b.n	8002e50 <HAL_DMA_IRQHandler+0x6e4>
 8002dfa:	bf00      	nop
 8002dfc:	40020010 	.word	0x40020010
 8002e00:	40020028 	.word	0x40020028
 8002e04:	40020040 	.word	0x40020040
 8002e08:	40020058 	.word	0x40020058
 8002e0c:	40020070 	.word	0x40020070
 8002e10:	40020088 	.word	0x40020088
 8002e14:	400200a0 	.word	0x400200a0
 8002e18:	400200b8 	.word	0x400200b8
 8002e1c:	40020410 	.word	0x40020410
 8002e20:	40020428 	.word	0x40020428
 8002e24:	40020440 	.word	0x40020440
 8002e28:	40020458 	.word	0x40020458
 8002e2c:	40020470 	.word	0x40020470
 8002e30:	40020488 	.word	0x40020488
 8002e34:	400204a0 	.word	0x400204a0
 8002e38:	400204b8 	.word	0x400204b8
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	bf14      	ite	ne
 8002e4a:	2301      	movne	r3, #1
 8002e4c:	2300      	moveq	r3, #0
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 8087 	beq.w	8002f64 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5a:	f003 031f 	and.w	r3, r3, #31
 8002e5e:	2220      	movs	r2, #32
 8002e60:	409a      	lsls	r2, r3
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d139      	bne.n	8002ee6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0216 	bic.w	r2, r2, #22
 8002e80:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695a      	ldr	r2, [r3, #20]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e90:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d103      	bne.n	8002ea2 <HAL_DMA_IRQHandler+0x736>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d007      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0208 	bic.w	r2, r2, #8
 8002eb0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	223f      	movs	r2, #63	@ 0x3f
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 834a 	beq.w	8003570 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	4798      	blx	r3
          }
          return;
 8002ee4:	e344      	b.n	8003570 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d018      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d108      	bne.n	8002f14 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d02c      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	4798      	blx	r3
 8002f12:	e027      	b.n	8002f64 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d023      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	4798      	blx	r3
 8002f24:	e01e      	b.n	8002f64 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10f      	bne.n	8002f54 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0210 	bic.w	r2, r2, #16
 8002f42:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 8306 	beq.w	800357a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 8088 	beq.w	800308c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2204      	movs	r2, #4
 8002f80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a7a      	ldr	r2, [pc, #488]	@ (8003174 <HAL_DMA_IRQHandler+0xa08>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d04a      	beq.n	8003024 <HAL_DMA_IRQHandler+0x8b8>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a79      	ldr	r2, [pc, #484]	@ (8003178 <HAL_DMA_IRQHandler+0xa0c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d045      	beq.n	8003024 <HAL_DMA_IRQHandler+0x8b8>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a77      	ldr	r2, [pc, #476]	@ (800317c <HAL_DMA_IRQHandler+0xa10>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d040      	beq.n	8003024 <HAL_DMA_IRQHandler+0x8b8>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a76      	ldr	r2, [pc, #472]	@ (8003180 <HAL_DMA_IRQHandler+0xa14>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d03b      	beq.n	8003024 <HAL_DMA_IRQHandler+0x8b8>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a74      	ldr	r2, [pc, #464]	@ (8003184 <HAL_DMA_IRQHandler+0xa18>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d036      	beq.n	8003024 <HAL_DMA_IRQHandler+0x8b8>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a73      	ldr	r2, [pc, #460]	@ (8003188 <HAL_DMA_IRQHandler+0xa1c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d031      	beq.n	8003024 <HAL_DMA_IRQHandler+0x8b8>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a71      	ldr	r2, [pc, #452]	@ (800318c <HAL_DMA_IRQHandler+0xa20>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d02c      	beq.n	8003024 <HAL_DMA_IRQHandler+0x8b8>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a70      	ldr	r2, [pc, #448]	@ (8003190 <HAL_DMA_IRQHandler+0xa24>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d027      	beq.n	8003024 <HAL_DMA_IRQHandler+0x8b8>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a6e      	ldr	r2, [pc, #440]	@ (8003194 <HAL_DMA_IRQHandler+0xa28>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d022      	beq.n	8003024 <HAL_DMA_IRQHandler+0x8b8>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a6d      	ldr	r2, [pc, #436]	@ (8003198 <HAL_DMA_IRQHandler+0xa2c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d01d      	beq.n	8003024 <HAL_DMA_IRQHandler+0x8b8>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a6b      	ldr	r2, [pc, #428]	@ (800319c <HAL_DMA_IRQHandler+0xa30>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d018      	beq.n	8003024 <HAL_DMA_IRQHandler+0x8b8>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a6a      	ldr	r2, [pc, #424]	@ (80031a0 <HAL_DMA_IRQHandler+0xa34>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d013      	beq.n	8003024 <HAL_DMA_IRQHandler+0x8b8>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a68      	ldr	r2, [pc, #416]	@ (80031a4 <HAL_DMA_IRQHandler+0xa38>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00e      	beq.n	8003024 <HAL_DMA_IRQHandler+0x8b8>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a67      	ldr	r2, [pc, #412]	@ (80031a8 <HAL_DMA_IRQHandler+0xa3c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d009      	beq.n	8003024 <HAL_DMA_IRQHandler+0x8b8>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a65      	ldr	r2, [pc, #404]	@ (80031ac <HAL_DMA_IRQHandler+0xa40>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d004      	beq.n	8003024 <HAL_DMA_IRQHandler+0x8b8>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a64      	ldr	r2, [pc, #400]	@ (80031b0 <HAL_DMA_IRQHandler+0xa44>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d108      	bne.n	8003036 <HAL_DMA_IRQHandler+0x8ca>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0201 	bic.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	e007      	b.n	8003046 <HAL_DMA_IRQHandler+0x8da>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0201 	bic.w	r2, r2, #1
 8003044:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	3301      	adds	r3, #1
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800304e:	429a      	cmp	r2, r3
 8003050:	d307      	bcc.n	8003062 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1f2      	bne.n	8003046 <HAL_DMA_IRQHandler+0x8da>
 8003060:	e000      	b.n	8003064 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003062:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d004      	beq.n	800307c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2203      	movs	r2, #3
 8003076:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800307a:	e003      	b.n	8003084 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 8272 	beq.w	800357a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	4798      	blx	r3
 800309e:	e26c      	b.n	800357a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a43      	ldr	r2, [pc, #268]	@ (80031b4 <HAL_DMA_IRQHandler+0xa48>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d022      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x984>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a42      	ldr	r2, [pc, #264]	@ (80031b8 <HAL_DMA_IRQHandler+0xa4c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d01d      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x984>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a40      	ldr	r2, [pc, #256]	@ (80031bc <HAL_DMA_IRQHandler+0xa50>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d018      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x984>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a3f      	ldr	r2, [pc, #252]	@ (80031c0 <HAL_DMA_IRQHandler+0xa54>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d013      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x984>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a3d      	ldr	r2, [pc, #244]	@ (80031c4 <HAL_DMA_IRQHandler+0xa58>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d00e      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x984>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a3c      	ldr	r2, [pc, #240]	@ (80031c8 <HAL_DMA_IRQHandler+0xa5c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d009      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x984>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a3a      	ldr	r2, [pc, #232]	@ (80031cc <HAL_DMA_IRQHandler+0xa60>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d004      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x984>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a39      	ldr	r2, [pc, #228]	@ (80031d0 <HAL_DMA_IRQHandler+0xa64>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d101      	bne.n	80030f4 <HAL_DMA_IRQHandler+0x988>
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <HAL_DMA_IRQHandler+0x98a>
 80030f4:	2300      	movs	r3, #0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 823f 	beq.w	800357a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003108:	f003 031f 	and.w	r3, r3, #31
 800310c:	2204      	movs	r2, #4
 800310e:	409a      	lsls	r2, r3
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80cd 	beq.w	80032b4 <HAL_DMA_IRQHandler+0xb48>
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80c7 	beq.w	80032b4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312a:	f003 031f 	and.w	r3, r3, #31
 800312e:	2204      	movs	r2, #4
 8003130:	409a      	lsls	r2, r3
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d049      	beq.n	80031d4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d109      	bne.n	800315e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 8210 	beq.w	8003574 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800315c:	e20a      	b.n	8003574 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 8206 	beq.w	8003574 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003170:	e200      	b.n	8003574 <HAL_DMA_IRQHandler+0xe08>
 8003172:	bf00      	nop
 8003174:	40020010 	.word	0x40020010
 8003178:	40020028 	.word	0x40020028
 800317c:	40020040 	.word	0x40020040
 8003180:	40020058 	.word	0x40020058
 8003184:	40020070 	.word	0x40020070
 8003188:	40020088 	.word	0x40020088
 800318c:	400200a0 	.word	0x400200a0
 8003190:	400200b8 	.word	0x400200b8
 8003194:	40020410 	.word	0x40020410
 8003198:	40020428 	.word	0x40020428
 800319c:	40020440 	.word	0x40020440
 80031a0:	40020458 	.word	0x40020458
 80031a4:	40020470 	.word	0x40020470
 80031a8:	40020488 	.word	0x40020488
 80031ac:	400204a0 	.word	0x400204a0
 80031b0:	400204b8 	.word	0x400204b8
 80031b4:	58025408 	.word	0x58025408
 80031b8:	5802541c 	.word	0x5802541c
 80031bc:	58025430 	.word	0x58025430
 80031c0:	58025444 	.word	0x58025444
 80031c4:	58025458 	.word	0x58025458
 80031c8:	5802546c 	.word	0x5802546c
 80031cc:	58025480 	.word	0x58025480
 80031d0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d160      	bne.n	80032a0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a7f      	ldr	r2, [pc, #508]	@ (80033e0 <HAL_DMA_IRQHandler+0xc74>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d04a      	beq.n	800327e <HAL_DMA_IRQHandler+0xb12>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a7d      	ldr	r2, [pc, #500]	@ (80033e4 <HAL_DMA_IRQHandler+0xc78>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d045      	beq.n	800327e <HAL_DMA_IRQHandler+0xb12>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a7c      	ldr	r2, [pc, #496]	@ (80033e8 <HAL_DMA_IRQHandler+0xc7c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d040      	beq.n	800327e <HAL_DMA_IRQHandler+0xb12>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a7a      	ldr	r2, [pc, #488]	@ (80033ec <HAL_DMA_IRQHandler+0xc80>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d03b      	beq.n	800327e <HAL_DMA_IRQHandler+0xb12>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a79      	ldr	r2, [pc, #484]	@ (80033f0 <HAL_DMA_IRQHandler+0xc84>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d036      	beq.n	800327e <HAL_DMA_IRQHandler+0xb12>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a77      	ldr	r2, [pc, #476]	@ (80033f4 <HAL_DMA_IRQHandler+0xc88>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d031      	beq.n	800327e <HAL_DMA_IRQHandler+0xb12>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a76      	ldr	r2, [pc, #472]	@ (80033f8 <HAL_DMA_IRQHandler+0xc8c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d02c      	beq.n	800327e <HAL_DMA_IRQHandler+0xb12>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a74      	ldr	r2, [pc, #464]	@ (80033fc <HAL_DMA_IRQHandler+0xc90>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d027      	beq.n	800327e <HAL_DMA_IRQHandler+0xb12>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a73      	ldr	r2, [pc, #460]	@ (8003400 <HAL_DMA_IRQHandler+0xc94>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d022      	beq.n	800327e <HAL_DMA_IRQHandler+0xb12>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a71      	ldr	r2, [pc, #452]	@ (8003404 <HAL_DMA_IRQHandler+0xc98>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d01d      	beq.n	800327e <HAL_DMA_IRQHandler+0xb12>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a70      	ldr	r2, [pc, #448]	@ (8003408 <HAL_DMA_IRQHandler+0xc9c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d018      	beq.n	800327e <HAL_DMA_IRQHandler+0xb12>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a6e      	ldr	r2, [pc, #440]	@ (800340c <HAL_DMA_IRQHandler+0xca0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d013      	beq.n	800327e <HAL_DMA_IRQHandler+0xb12>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a6d      	ldr	r2, [pc, #436]	@ (8003410 <HAL_DMA_IRQHandler+0xca4>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00e      	beq.n	800327e <HAL_DMA_IRQHandler+0xb12>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a6b      	ldr	r2, [pc, #428]	@ (8003414 <HAL_DMA_IRQHandler+0xca8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d009      	beq.n	800327e <HAL_DMA_IRQHandler+0xb12>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a6a      	ldr	r2, [pc, #424]	@ (8003418 <HAL_DMA_IRQHandler+0xcac>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d004      	beq.n	800327e <HAL_DMA_IRQHandler+0xb12>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a68      	ldr	r2, [pc, #416]	@ (800341c <HAL_DMA_IRQHandler+0xcb0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d108      	bne.n	8003290 <HAL_DMA_IRQHandler+0xb24>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0208 	bic.w	r2, r2, #8
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	e007      	b.n	80032a0 <HAL_DMA_IRQHandler+0xb34>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0204 	bic.w	r2, r2, #4
 800329e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 8165 	beq.w	8003574 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032b2:	e15f      	b.n	8003574 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	2202      	movs	r2, #2
 80032be:	409a      	lsls	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	4013      	ands	r3, r2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80c5 	beq.w	8003454 <HAL_DMA_IRQHandler+0xce8>
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 80bf 	beq.w	8003454 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032da:	f003 031f 	and.w	r3, r3, #31
 80032de:	2202      	movs	r2, #2
 80032e0:	409a      	lsls	r2, r3
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d018      	beq.n	8003322 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d109      	bne.n	800330e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 813a 	beq.w	8003578 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800330c:	e134      	b.n	8003578 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 8130 	beq.w	8003578 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003320:	e12a      	b.n	8003578 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	f040 8089 	bne.w	8003440 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a2b      	ldr	r2, [pc, #172]	@ (80033e0 <HAL_DMA_IRQHandler+0xc74>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d04a      	beq.n	80033ce <HAL_DMA_IRQHandler+0xc62>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a29      	ldr	r2, [pc, #164]	@ (80033e4 <HAL_DMA_IRQHandler+0xc78>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d045      	beq.n	80033ce <HAL_DMA_IRQHandler+0xc62>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a28      	ldr	r2, [pc, #160]	@ (80033e8 <HAL_DMA_IRQHandler+0xc7c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d040      	beq.n	80033ce <HAL_DMA_IRQHandler+0xc62>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a26      	ldr	r2, [pc, #152]	@ (80033ec <HAL_DMA_IRQHandler+0xc80>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d03b      	beq.n	80033ce <HAL_DMA_IRQHandler+0xc62>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a25      	ldr	r2, [pc, #148]	@ (80033f0 <HAL_DMA_IRQHandler+0xc84>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d036      	beq.n	80033ce <HAL_DMA_IRQHandler+0xc62>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a23      	ldr	r2, [pc, #140]	@ (80033f4 <HAL_DMA_IRQHandler+0xc88>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d031      	beq.n	80033ce <HAL_DMA_IRQHandler+0xc62>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a22      	ldr	r2, [pc, #136]	@ (80033f8 <HAL_DMA_IRQHandler+0xc8c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d02c      	beq.n	80033ce <HAL_DMA_IRQHandler+0xc62>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a20      	ldr	r2, [pc, #128]	@ (80033fc <HAL_DMA_IRQHandler+0xc90>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d027      	beq.n	80033ce <HAL_DMA_IRQHandler+0xc62>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1f      	ldr	r2, [pc, #124]	@ (8003400 <HAL_DMA_IRQHandler+0xc94>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d022      	beq.n	80033ce <HAL_DMA_IRQHandler+0xc62>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a1d      	ldr	r2, [pc, #116]	@ (8003404 <HAL_DMA_IRQHandler+0xc98>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d01d      	beq.n	80033ce <HAL_DMA_IRQHandler+0xc62>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a1c      	ldr	r2, [pc, #112]	@ (8003408 <HAL_DMA_IRQHandler+0xc9c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d018      	beq.n	80033ce <HAL_DMA_IRQHandler+0xc62>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1a      	ldr	r2, [pc, #104]	@ (800340c <HAL_DMA_IRQHandler+0xca0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d013      	beq.n	80033ce <HAL_DMA_IRQHandler+0xc62>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a19      	ldr	r2, [pc, #100]	@ (8003410 <HAL_DMA_IRQHandler+0xca4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00e      	beq.n	80033ce <HAL_DMA_IRQHandler+0xc62>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a17      	ldr	r2, [pc, #92]	@ (8003414 <HAL_DMA_IRQHandler+0xca8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d009      	beq.n	80033ce <HAL_DMA_IRQHandler+0xc62>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a16      	ldr	r2, [pc, #88]	@ (8003418 <HAL_DMA_IRQHandler+0xcac>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d004      	beq.n	80033ce <HAL_DMA_IRQHandler+0xc62>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a14      	ldr	r2, [pc, #80]	@ (800341c <HAL_DMA_IRQHandler+0xcb0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d128      	bne.n	8003420 <HAL_DMA_IRQHandler+0xcb4>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0214 	bic.w	r2, r2, #20
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	e027      	b.n	8003430 <HAL_DMA_IRQHandler+0xcc4>
 80033e0:	40020010 	.word	0x40020010
 80033e4:	40020028 	.word	0x40020028
 80033e8:	40020040 	.word	0x40020040
 80033ec:	40020058 	.word	0x40020058
 80033f0:	40020070 	.word	0x40020070
 80033f4:	40020088 	.word	0x40020088
 80033f8:	400200a0 	.word	0x400200a0
 80033fc:	400200b8 	.word	0x400200b8
 8003400:	40020410 	.word	0x40020410
 8003404:	40020428 	.word	0x40020428
 8003408:	40020440 	.word	0x40020440
 800340c:	40020458 	.word	0x40020458
 8003410:	40020470 	.word	0x40020470
 8003414:	40020488 	.word	0x40020488
 8003418:	400204a0 	.word	0x400204a0
 800341c:	400204b8 	.word	0x400204b8
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 020a 	bic.w	r2, r2, #10
 800342e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8097 	beq.w	8003578 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003452:	e091      	b.n	8003578 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	2208      	movs	r2, #8
 800345e:	409a      	lsls	r2, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	4013      	ands	r3, r2
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8088 	beq.w	800357a <HAL_DMA_IRQHandler+0xe0e>
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 8082 	beq.w	800357a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a41      	ldr	r2, [pc, #260]	@ (8003580 <HAL_DMA_IRQHandler+0xe14>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d04a      	beq.n	8003516 <HAL_DMA_IRQHandler+0xdaa>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a3f      	ldr	r2, [pc, #252]	@ (8003584 <HAL_DMA_IRQHandler+0xe18>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d045      	beq.n	8003516 <HAL_DMA_IRQHandler+0xdaa>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a3e      	ldr	r2, [pc, #248]	@ (8003588 <HAL_DMA_IRQHandler+0xe1c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d040      	beq.n	8003516 <HAL_DMA_IRQHandler+0xdaa>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a3c      	ldr	r2, [pc, #240]	@ (800358c <HAL_DMA_IRQHandler+0xe20>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d03b      	beq.n	8003516 <HAL_DMA_IRQHandler+0xdaa>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a3b      	ldr	r2, [pc, #236]	@ (8003590 <HAL_DMA_IRQHandler+0xe24>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d036      	beq.n	8003516 <HAL_DMA_IRQHandler+0xdaa>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a39      	ldr	r2, [pc, #228]	@ (8003594 <HAL_DMA_IRQHandler+0xe28>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d031      	beq.n	8003516 <HAL_DMA_IRQHandler+0xdaa>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a38      	ldr	r2, [pc, #224]	@ (8003598 <HAL_DMA_IRQHandler+0xe2c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d02c      	beq.n	8003516 <HAL_DMA_IRQHandler+0xdaa>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a36      	ldr	r2, [pc, #216]	@ (800359c <HAL_DMA_IRQHandler+0xe30>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d027      	beq.n	8003516 <HAL_DMA_IRQHandler+0xdaa>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a35      	ldr	r2, [pc, #212]	@ (80035a0 <HAL_DMA_IRQHandler+0xe34>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d022      	beq.n	8003516 <HAL_DMA_IRQHandler+0xdaa>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a33      	ldr	r2, [pc, #204]	@ (80035a4 <HAL_DMA_IRQHandler+0xe38>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d01d      	beq.n	8003516 <HAL_DMA_IRQHandler+0xdaa>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a32      	ldr	r2, [pc, #200]	@ (80035a8 <HAL_DMA_IRQHandler+0xe3c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d018      	beq.n	8003516 <HAL_DMA_IRQHandler+0xdaa>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a30      	ldr	r2, [pc, #192]	@ (80035ac <HAL_DMA_IRQHandler+0xe40>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d013      	beq.n	8003516 <HAL_DMA_IRQHandler+0xdaa>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a2f      	ldr	r2, [pc, #188]	@ (80035b0 <HAL_DMA_IRQHandler+0xe44>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00e      	beq.n	8003516 <HAL_DMA_IRQHandler+0xdaa>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a2d      	ldr	r2, [pc, #180]	@ (80035b4 <HAL_DMA_IRQHandler+0xe48>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d009      	beq.n	8003516 <HAL_DMA_IRQHandler+0xdaa>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a2c      	ldr	r2, [pc, #176]	@ (80035b8 <HAL_DMA_IRQHandler+0xe4c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d004      	beq.n	8003516 <HAL_DMA_IRQHandler+0xdaa>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a2a      	ldr	r2, [pc, #168]	@ (80035bc <HAL_DMA_IRQHandler+0xe50>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d108      	bne.n	8003528 <HAL_DMA_IRQHandler+0xdbc>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 021c 	bic.w	r2, r2, #28
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	e007      	b.n	8003538 <HAL_DMA_IRQHandler+0xdcc>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 020e 	bic.w	r2, r2, #14
 8003536:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800353c:	f003 031f 	and.w	r3, r3, #31
 8003540:	2201      	movs	r2, #1
 8003542:	409a      	lsls	r2, r3
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003562:	2b00      	cmp	r3, #0
 8003564:	d009      	beq.n	800357a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	4798      	blx	r3
 800356e:	e004      	b.n	800357a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003570:	bf00      	nop
 8003572:	e002      	b.n	800357a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003574:	bf00      	nop
 8003576:	e000      	b.n	800357a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003578:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800357a:	3728      	adds	r7, #40	@ 0x28
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40020010 	.word	0x40020010
 8003584:	40020028 	.word	0x40020028
 8003588:	40020040 	.word	0x40020040
 800358c:	40020058 	.word	0x40020058
 8003590:	40020070 	.word	0x40020070
 8003594:	40020088 	.word	0x40020088
 8003598:	400200a0 	.word	0x400200a0
 800359c:	400200b8 	.word	0x400200b8
 80035a0:	40020410 	.word	0x40020410
 80035a4:	40020428 	.word	0x40020428
 80035a8:	40020440 	.word	0x40020440
 80035ac:	40020458 	.word	0x40020458
 80035b0:	40020470 	.word	0x40020470
 80035b4:	40020488 	.word	0x40020488
 80035b8:	400204a0 	.word	0x400204a0
 80035bc:	400204b8 	.word	0x400204b8

080035c0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035ce:	b2db      	uxtb	r3, r3
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003606:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a7f      	ldr	r2, [pc, #508]	@ (8003810 <DMA_SetConfig+0x21c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d072      	beq.n	80036fe <DMA_SetConfig+0x10a>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a7d      	ldr	r2, [pc, #500]	@ (8003814 <DMA_SetConfig+0x220>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d06d      	beq.n	80036fe <DMA_SetConfig+0x10a>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a7c      	ldr	r2, [pc, #496]	@ (8003818 <DMA_SetConfig+0x224>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d068      	beq.n	80036fe <DMA_SetConfig+0x10a>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a7a      	ldr	r2, [pc, #488]	@ (800381c <DMA_SetConfig+0x228>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d063      	beq.n	80036fe <DMA_SetConfig+0x10a>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a79      	ldr	r2, [pc, #484]	@ (8003820 <DMA_SetConfig+0x22c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d05e      	beq.n	80036fe <DMA_SetConfig+0x10a>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a77      	ldr	r2, [pc, #476]	@ (8003824 <DMA_SetConfig+0x230>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d059      	beq.n	80036fe <DMA_SetConfig+0x10a>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a76      	ldr	r2, [pc, #472]	@ (8003828 <DMA_SetConfig+0x234>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d054      	beq.n	80036fe <DMA_SetConfig+0x10a>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a74      	ldr	r2, [pc, #464]	@ (800382c <DMA_SetConfig+0x238>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d04f      	beq.n	80036fe <DMA_SetConfig+0x10a>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a73      	ldr	r2, [pc, #460]	@ (8003830 <DMA_SetConfig+0x23c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d04a      	beq.n	80036fe <DMA_SetConfig+0x10a>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a71      	ldr	r2, [pc, #452]	@ (8003834 <DMA_SetConfig+0x240>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d045      	beq.n	80036fe <DMA_SetConfig+0x10a>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a70      	ldr	r2, [pc, #448]	@ (8003838 <DMA_SetConfig+0x244>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d040      	beq.n	80036fe <DMA_SetConfig+0x10a>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a6e      	ldr	r2, [pc, #440]	@ (800383c <DMA_SetConfig+0x248>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d03b      	beq.n	80036fe <DMA_SetConfig+0x10a>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a6d      	ldr	r2, [pc, #436]	@ (8003840 <DMA_SetConfig+0x24c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d036      	beq.n	80036fe <DMA_SetConfig+0x10a>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a6b      	ldr	r2, [pc, #428]	@ (8003844 <DMA_SetConfig+0x250>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d031      	beq.n	80036fe <DMA_SetConfig+0x10a>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a6a      	ldr	r2, [pc, #424]	@ (8003848 <DMA_SetConfig+0x254>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d02c      	beq.n	80036fe <DMA_SetConfig+0x10a>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a68      	ldr	r2, [pc, #416]	@ (800384c <DMA_SetConfig+0x258>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d027      	beq.n	80036fe <DMA_SetConfig+0x10a>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a67      	ldr	r2, [pc, #412]	@ (8003850 <DMA_SetConfig+0x25c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d022      	beq.n	80036fe <DMA_SetConfig+0x10a>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a65      	ldr	r2, [pc, #404]	@ (8003854 <DMA_SetConfig+0x260>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d01d      	beq.n	80036fe <DMA_SetConfig+0x10a>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a64      	ldr	r2, [pc, #400]	@ (8003858 <DMA_SetConfig+0x264>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d018      	beq.n	80036fe <DMA_SetConfig+0x10a>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a62      	ldr	r2, [pc, #392]	@ (800385c <DMA_SetConfig+0x268>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d013      	beq.n	80036fe <DMA_SetConfig+0x10a>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a61      	ldr	r2, [pc, #388]	@ (8003860 <DMA_SetConfig+0x26c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d00e      	beq.n	80036fe <DMA_SetConfig+0x10a>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a5f      	ldr	r2, [pc, #380]	@ (8003864 <DMA_SetConfig+0x270>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d009      	beq.n	80036fe <DMA_SetConfig+0x10a>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a5e      	ldr	r2, [pc, #376]	@ (8003868 <DMA_SetConfig+0x274>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d004      	beq.n	80036fe <DMA_SetConfig+0x10a>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a5c      	ldr	r2, [pc, #368]	@ (800386c <DMA_SetConfig+0x278>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d101      	bne.n	8003702 <DMA_SetConfig+0x10e>
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <DMA_SetConfig+0x110>
 8003702:	2300      	movs	r3, #0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00d      	beq.n	8003724 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003710:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003716:	2b00      	cmp	r3, #0
 8003718:	d004      	beq.n	8003724 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003722:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a39      	ldr	r2, [pc, #228]	@ (8003810 <DMA_SetConfig+0x21c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d04a      	beq.n	80037c4 <DMA_SetConfig+0x1d0>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a38      	ldr	r2, [pc, #224]	@ (8003814 <DMA_SetConfig+0x220>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d045      	beq.n	80037c4 <DMA_SetConfig+0x1d0>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a36      	ldr	r2, [pc, #216]	@ (8003818 <DMA_SetConfig+0x224>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d040      	beq.n	80037c4 <DMA_SetConfig+0x1d0>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a35      	ldr	r2, [pc, #212]	@ (800381c <DMA_SetConfig+0x228>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d03b      	beq.n	80037c4 <DMA_SetConfig+0x1d0>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a33      	ldr	r2, [pc, #204]	@ (8003820 <DMA_SetConfig+0x22c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d036      	beq.n	80037c4 <DMA_SetConfig+0x1d0>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a32      	ldr	r2, [pc, #200]	@ (8003824 <DMA_SetConfig+0x230>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d031      	beq.n	80037c4 <DMA_SetConfig+0x1d0>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a30      	ldr	r2, [pc, #192]	@ (8003828 <DMA_SetConfig+0x234>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d02c      	beq.n	80037c4 <DMA_SetConfig+0x1d0>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a2f      	ldr	r2, [pc, #188]	@ (800382c <DMA_SetConfig+0x238>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d027      	beq.n	80037c4 <DMA_SetConfig+0x1d0>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a2d      	ldr	r2, [pc, #180]	@ (8003830 <DMA_SetConfig+0x23c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d022      	beq.n	80037c4 <DMA_SetConfig+0x1d0>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a2c      	ldr	r2, [pc, #176]	@ (8003834 <DMA_SetConfig+0x240>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d01d      	beq.n	80037c4 <DMA_SetConfig+0x1d0>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a2a      	ldr	r2, [pc, #168]	@ (8003838 <DMA_SetConfig+0x244>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d018      	beq.n	80037c4 <DMA_SetConfig+0x1d0>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a29      	ldr	r2, [pc, #164]	@ (800383c <DMA_SetConfig+0x248>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d013      	beq.n	80037c4 <DMA_SetConfig+0x1d0>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a27      	ldr	r2, [pc, #156]	@ (8003840 <DMA_SetConfig+0x24c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00e      	beq.n	80037c4 <DMA_SetConfig+0x1d0>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a26      	ldr	r2, [pc, #152]	@ (8003844 <DMA_SetConfig+0x250>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d009      	beq.n	80037c4 <DMA_SetConfig+0x1d0>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a24      	ldr	r2, [pc, #144]	@ (8003848 <DMA_SetConfig+0x254>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d004      	beq.n	80037c4 <DMA_SetConfig+0x1d0>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a23      	ldr	r2, [pc, #140]	@ (800384c <DMA_SetConfig+0x258>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d101      	bne.n	80037c8 <DMA_SetConfig+0x1d4>
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <DMA_SetConfig+0x1d6>
 80037c8:	2300      	movs	r3, #0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d059      	beq.n	8003882 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d2:	f003 031f 	and.w	r3, r3, #31
 80037d6:	223f      	movs	r2, #63	@ 0x3f
 80037d8:	409a      	lsls	r2, r3
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80037ec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b40      	cmp	r3, #64	@ 0x40
 80037fc:	d138      	bne.n	8003870 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800380e:	e086      	b.n	800391e <DMA_SetConfig+0x32a>
 8003810:	40020010 	.word	0x40020010
 8003814:	40020028 	.word	0x40020028
 8003818:	40020040 	.word	0x40020040
 800381c:	40020058 	.word	0x40020058
 8003820:	40020070 	.word	0x40020070
 8003824:	40020088 	.word	0x40020088
 8003828:	400200a0 	.word	0x400200a0
 800382c:	400200b8 	.word	0x400200b8
 8003830:	40020410 	.word	0x40020410
 8003834:	40020428 	.word	0x40020428
 8003838:	40020440 	.word	0x40020440
 800383c:	40020458 	.word	0x40020458
 8003840:	40020470 	.word	0x40020470
 8003844:	40020488 	.word	0x40020488
 8003848:	400204a0 	.word	0x400204a0
 800384c:	400204b8 	.word	0x400204b8
 8003850:	58025408 	.word	0x58025408
 8003854:	5802541c 	.word	0x5802541c
 8003858:	58025430 	.word	0x58025430
 800385c:	58025444 	.word	0x58025444
 8003860:	58025458 	.word	0x58025458
 8003864:	5802546c 	.word	0x5802546c
 8003868:	58025480 	.word	0x58025480
 800386c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	60da      	str	r2, [r3, #12]
}
 8003880:	e04d      	b.n	800391e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a29      	ldr	r2, [pc, #164]	@ (800392c <DMA_SetConfig+0x338>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d022      	beq.n	80038d2 <DMA_SetConfig+0x2de>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a27      	ldr	r2, [pc, #156]	@ (8003930 <DMA_SetConfig+0x33c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d01d      	beq.n	80038d2 <DMA_SetConfig+0x2de>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a26      	ldr	r2, [pc, #152]	@ (8003934 <DMA_SetConfig+0x340>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d018      	beq.n	80038d2 <DMA_SetConfig+0x2de>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a24      	ldr	r2, [pc, #144]	@ (8003938 <DMA_SetConfig+0x344>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d013      	beq.n	80038d2 <DMA_SetConfig+0x2de>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a23      	ldr	r2, [pc, #140]	@ (800393c <DMA_SetConfig+0x348>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d00e      	beq.n	80038d2 <DMA_SetConfig+0x2de>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a21      	ldr	r2, [pc, #132]	@ (8003940 <DMA_SetConfig+0x34c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d009      	beq.n	80038d2 <DMA_SetConfig+0x2de>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a20      	ldr	r2, [pc, #128]	@ (8003944 <DMA_SetConfig+0x350>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d004      	beq.n	80038d2 <DMA_SetConfig+0x2de>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003948 <DMA_SetConfig+0x354>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d101      	bne.n	80038d6 <DMA_SetConfig+0x2e2>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <DMA_SetConfig+0x2e4>
 80038d6:	2300      	movs	r3, #0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d020      	beq.n	800391e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e0:	f003 031f 	and.w	r3, r3, #31
 80038e4:	2201      	movs	r2, #1
 80038e6:	409a      	lsls	r2, r3
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b40      	cmp	r3, #64	@ 0x40
 80038fa:	d108      	bne.n	800390e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	60da      	str	r2, [r3, #12]
}
 800390c:	e007      	b.n	800391e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	60da      	str	r2, [r3, #12]
}
 800391e:	bf00      	nop
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	58025408 	.word	0x58025408
 8003930:	5802541c 	.word	0x5802541c
 8003934:	58025430 	.word	0x58025430
 8003938:	58025444 	.word	0x58025444
 800393c:	58025458 	.word	0x58025458
 8003940:	5802546c 	.word	0x5802546c
 8003944:	58025480 	.word	0x58025480
 8003948:	58025494 	.word	0x58025494

0800394c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a42      	ldr	r2, [pc, #264]	@ (8003a64 <DMA_CalcBaseAndBitshift+0x118>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d04a      	beq.n	80039f4 <DMA_CalcBaseAndBitshift+0xa8>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a41      	ldr	r2, [pc, #260]	@ (8003a68 <DMA_CalcBaseAndBitshift+0x11c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d045      	beq.n	80039f4 <DMA_CalcBaseAndBitshift+0xa8>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a3f      	ldr	r2, [pc, #252]	@ (8003a6c <DMA_CalcBaseAndBitshift+0x120>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d040      	beq.n	80039f4 <DMA_CalcBaseAndBitshift+0xa8>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a3e      	ldr	r2, [pc, #248]	@ (8003a70 <DMA_CalcBaseAndBitshift+0x124>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d03b      	beq.n	80039f4 <DMA_CalcBaseAndBitshift+0xa8>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a3c      	ldr	r2, [pc, #240]	@ (8003a74 <DMA_CalcBaseAndBitshift+0x128>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d036      	beq.n	80039f4 <DMA_CalcBaseAndBitshift+0xa8>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a3b      	ldr	r2, [pc, #236]	@ (8003a78 <DMA_CalcBaseAndBitshift+0x12c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d031      	beq.n	80039f4 <DMA_CalcBaseAndBitshift+0xa8>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a39      	ldr	r2, [pc, #228]	@ (8003a7c <DMA_CalcBaseAndBitshift+0x130>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d02c      	beq.n	80039f4 <DMA_CalcBaseAndBitshift+0xa8>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a38      	ldr	r2, [pc, #224]	@ (8003a80 <DMA_CalcBaseAndBitshift+0x134>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d027      	beq.n	80039f4 <DMA_CalcBaseAndBitshift+0xa8>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a36      	ldr	r2, [pc, #216]	@ (8003a84 <DMA_CalcBaseAndBitshift+0x138>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d022      	beq.n	80039f4 <DMA_CalcBaseAndBitshift+0xa8>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a35      	ldr	r2, [pc, #212]	@ (8003a88 <DMA_CalcBaseAndBitshift+0x13c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d01d      	beq.n	80039f4 <DMA_CalcBaseAndBitshift+0xa8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a33      	ldr	r2, [pc, #204]	@ (8003a8c <DMA_CalcBaseAndBitshift+0x140>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d018      	beq.n	80039f4 <DMA_CalcBaseAndBitshift+0xa8>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a32      	ldr	r2, [pc, #200]	@ (8003a90 <DMA_CalcBaseAndBitshift+0x144>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d013      	beq.n	80039f4 <DMA_CalcBaseAndBitshift+0xa8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a30      	ldr	r2, [pc, #192]	@ (8003a94 <DMA_CalcBaseAndBitshift+0x148>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00e      	beq.n	80039f4 <DMA_CalcBaseAndBitshift+0xa8>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a2f      	ldr	r2, [pc, #188]	@ (8003a98 <DMA_CalcBaseAndBitshift+0x14c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d009      	beq.n	80039f4 <DMA_CalcBaseAndBitshift+0xa8>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a2d      	ldr	r2, [pc, #180]	@ (8003a9c <DMA_CalcBaseAndBitshift+0x150>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d004      	beq.n	80039f4 <DMA_CalcBaseAndBitshift+0xa8>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a2c      	ldr	r2, [pc, #176]	@ (8003aa0 <DMA_CalcBaseAndBitshift+0x154>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d101      	bne.n	80039f8 <DMA_CalcBaseAndBitshift+0xac>
 80039f4:	2301      	movs	r3, #1
 80039f6:	e000      	b.n	80039fa <DMA_CalcBaseAndBitshift+0xae>
 80039f8:	2300      	movs	r3, #0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d024      	beq.n	8003a48 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	3b10      	subs	r3, #16
 8003a06:	4a27      	ldr	r2, [pc, #156]	@ (8003aa4 <DMA_CalcBaseAndBitshift+0x158>)
 8003a08:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0c:	091b      	lsrs	r3, r3, #4
 8003a0e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	4a24      	ldr	r2, [pc, #144]	@ (8003aa8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003a18:	5cd3      	ldrb	r3, [r2, r3]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d908      	bls.n	8003a38 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8003aac <DMA_CalcBaseAndBitshift+0x160>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	1d1a      	adds	r2, r3, #4
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a36:	e00d      	b.n	8003a54 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8003aac <DMA_CalcBaseAndBitshift+0x160>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a46:	e005      	b.n	8003a54 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	40020010 	.word	0x40020010
 8003a68:	40020028 	.word	0x40020028
 8003a6c:	40020040 	.word	0x40020040
 8003a70:	40020058 	.word	0x40020058
 8003a74:	40020070 	.word	0x40020070
 8003a78:	40020088 	.word	0x40020088
 8003a7c:	400200a0 	.word	0x400200a0
 8003a80:	400200b8 	.word	0x400200b8
 8003a84:	40020410 	.word	0x40020410
 8003a88:	40020428 	.word	0x40020428
 8003a8c:	40020440 	.word	0x40020440
 8003a90:	40020458 	.word	0x40020458
 8003a94:	40020470 	.word	0x40020470
 8003a98:	40020488 	.word	0x40020488
 8003a9c:	400204a0 	.word	0x400204a0
 8003aa0:	400204b8 	.word	0x400204b8
 8003aa4:	aaaaaaab 	.word	0xaaaaaaab
 8003aa8:	08008448 	.word	0x08008448
 8003aac:	fffffc00 	.word	0xfffffc00

08003ab0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d120      	bne.n	8003b06 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d858      	bhi.n	8003b7e <DMA_CheckFifoParam+0xce>
 8003acc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad4 <DMA_CheckFifoParam+0x24>)
 8003ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad2:	bf00      	nop
 8003ad4:	08003ae5 	.word	0x08003ae5
 8003ad8:	08003af7 	.word	0x08003af7
 8003adc:	08003ae5 	.word	0x08003ae5
 8003ae0:	08003b7f 	.word	0x08003b7f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d048      	beq.n	8003b82 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003af4:	e045      	b.n	8003b82 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003afe:	d142      	bne.n	8003b86 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b04:	e03f      	b.n	8003b86 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b0e:	d123      	bne.n	8003b58 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d838      	bhi.n	8003b8a <DMA_CheckFifoParam+0xda>
 8003b18:	a201      	add	r2, pc, #4	@ (adr r2, 8003b20 <DMA_CheckFifoParam+0x70>)
 8003b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1e:	bf00      	nop
 8003b20:	08003b31 	.word	0x08003b31
 8003b24:	08003b37 	.word	0x08003b37
 8003b28:	08003b31 	.word	0x08003b31
 8003b2c:	08003b49 	.word	0x08003b49
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
        break;
 8003b34:	e030      	b.n	8003b98 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d025      	beq.n	8003b8e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b46:	e022      	b.n	8003b8e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b50:	d11f      	bne.n	8003b92 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b56:	e01c      	b.n	8003b92 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d902      	bls.n	8003b66 <DMA_CheckFifoParam+0xb6>
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d003      	beq.n	8003b6c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003b64:	e018      	b.n	8003b98 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	73fb      	strb	r3, [r7, #15]
        break;
 8003b6a:	e015      	b.n	8003b98 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00e      	beq.n	8003b96 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8003b7c:	e00b      	b.n	8003b96 <DMA_CheckFifoParam+0xe6>
        break;
 8003b7e:	bf00      	nop
 8003b80:	e00a      	b.n	8003b98 <DMA_CheckFifoParam+0xe8>
        break;
 8003b82:	bf00      	nop
 8003b84:	e008      	b.n	8003b98 <DMA_CheckFifoParam+0xe8>
        break;
 8003b86:	bf00      	nop
 8003b88:	e006      	b.n	8003b98 <DMA_CheckFifoParam+0xe8>
        break;
 8003b8a:	bf00      	nop
 8003b8c:	e004      	b.n	8003b98 <DMA_CheckFifoParam+0xe8>
        break;
 8003b8e:	bf00      	nop
 8003b90:	e002      	b.n	8003b98 <DMA_CheckFifoParam+0xe8>
        break;
 8003b92:	bf00      	nop
 8003b94:	e000      	b.n	8003b98 <DMA_CheckFifoParam+0xe8>
    break;
 8003b96:	bf00      	nop
    }
  }

  return status;
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop

08003ba8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a38      	ldr	r2, [pc, #224]	@ (8003c9c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d022      	beq.n	8003c06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a36      	ldr	r2, [pc, #216]	@ (8003ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d01d      	beq.n	8003c06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a35      	ldr	r2, [pc, #212]	@ (8003ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d018      	beq.n	8003c06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a33      	ldr	r2, [pc, #204]	@ (8003ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d013      	beq.n	8003c06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a32      	ldr	r2, [pc, #200]	@ (8003cac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00e      	beq.n	8003c06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a30      	ldr	r2, [pc, #192]	@ (8003cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d009      	beq.n	8003c06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a2f      	ldr	r2, [pc, #188]	@ (8003cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d004      	beq.n	8003c06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a2d      	ldr	r2, [pc, #180]	@ (8003cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d101      	bne.n	8003c0a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01a      	beq.n	8003c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	3b08      	subs	r3, #8
 8003c18:	4a28      	ldr	r2, [pc, #160]	@ (8003cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	091b      	lsrs	r3, r3, #4
 8003c20:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4b26      	ldr	r3, [pc, #152]	@ (8003cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003c26:	4413      	add	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a24      	ldr	r2, [pc, #144]	@ (8003cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003c34:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003c44:	e024      	b.n	8003c90 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	3b10      	subs	r3, #16
 8003c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8003cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003c50:	fba2 2303 	umull	r2, r3, r2, r3
 8003c54:	091b      	lsrs	r3, r3, #4
 8003c56:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4a1c      	ldr	r2, [pc, #112]	@ (8003ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d806      	bhi.n	8003c6e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4a1b      	ldr	r2, [pc, #108]	@ (8003cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d902      	bls.n	8003c6e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	3308      	adds	r3, #8
 8003c6c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4b18      	ldr	r3, [pc, #96]	@ (8003cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	461a      	mov	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a16      	ldr	r2, [pc, #88]	@ (8003cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003c80:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f003 031f 	and.w	r3, r3, #31
 8003c88:	2201      	movs	r2, #1
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003c90:	bf00      	nop
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	58025408 	.word	0x58025408
 8003ca0:	5802541c 	.word	0x5802541c
 8003ca4:	58025430 	.word	0x58025430
 8003ca8:	58025444 	.word	0x58025444
 8003cac:	58025458 	.word	0x58025458
 8003cb0:	5802546c 	.word	0x5802546c
 8003cb4:	58025480 	.word	0x58025480
 8003cb8:	58025494 	.word	0x58025494
 8003cbc:	cccccccd 	.word	0xcccccccd
 8003cc0:	16009600 	.word	0x16009600
 8003cc4:	58025880 	.word	0x58025880
 8003cc8:	aaaaaaab 	.word	0xaaaaaaab
 8003ccc:	400204b8 	.word	0x400204b8
 8003cd0:	4002040f 	.word	0x4002040f
 8003cd4:	10008200 	.word	0x10008200
 8003cd8:	40020880 	.word	0x40020880

08003cdc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d04a      	beq.n	8003d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d847      	bhi.n	8003d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a25      	ldr	r2, [pc, #148]	@ (8003d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d022      	beq.n	8003d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a24      	ldr	r2, [pc, #144]	@ (8003d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d01d      	beq.n	8003d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a22      	ldr	r2, [pc, #136]	@ (8003d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d018      	beq.n	8003d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a21      	ldr	r2, [pc, #132]	@ (8003da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d013      	beq.n	8003d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a1f      	ldr	r2, [pc, #124]	@ (8003da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d00e      	beq.n	8003d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a1e      	ldr	r2, [pc, #120]	@ (8003da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d009      	beq.n	8003d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a1c      	ldr	r2, [pc, #112]	@ (8003dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d004      	beq.n	8003d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a1b      	ldr	r2, [pc, #108]	@ (8003db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d101      	bne.n	8003d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e000      	b.n	8003d4e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4b17      	ldr	r3, [pc, #92]	@ (8003db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003d56:	4413      	add	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a15      	ldr	r2, [pc, #84]	@ (8003db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003d64:	671a      	str	r2, [r3, #112]	@ 0x70
 8003d66:	e009      	b.n	8003d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4b14      	ldr	r3, [pc, #80]	@ (8003dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	461a      	mov	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a11      	ldr	r2, [pc, #68]	@ (8003dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003d7a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	2201      	movs	r2, #1
 8003d82:	409a      	lsls	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003d88:	bf00      	nop
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	58025408 	.word	0x58025408
 8003d98:	5802541c 	.word	0x5802541c
 8003d9c:	58025430 	.word	0x58025430
 8003da0:	58025444 	.word	0x58025444
 8003da4:	58025458 	.word	0x58025458
 8003da8:	5802546c 	.word	0x5802546c
 8003dac:	58025480 	.word	0x58025480
 8003db0:	58025494 	.word	0x58025494
 8003db4:	1600963f 	.word	0x1600963f
 8003db8:	58025940 	.word	0x58025940
 8003dbc:	1000823f 	.word	0x1000823f
 8003dc0:	40020940 	.word	0x40020940

08003dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b089      	sub	sp, #36	@ 0x24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003dd2:	4b86      	ldr	r3, [pc, #536]	@ (8003fec <HAL_GPIO_Init+0x228>)
 8003dd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003dd6:	e18c      	b.n	80040f2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	2101      	movs	r1, #1
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	fa01 f303 	lsl.w	r3, r1, r3
 8003de4:	4013      	ands	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 817e 	beq.w	80040ec <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d005      	beq.n	8003e08 <HAL_GPIO_Init+0x44>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d130      	bne.n	8003e6a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	2203      	movs	r2, #3
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e3e:	2201      	movs	r2, #1
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	43db      	mvns	r3, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	091b      	lsrs	r3, r3, #4
 8003e54:	f003 0201 	and.w	r2, r3, #1
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	d017      	beq.n	8003ea6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	2203      	movs	r2, #3
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	43db      	mvns	r3, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d123      	bne.n	8003efa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	08da      	lsrs	r2, r3, #3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3208      	adds	r2, #8
 8003eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	220f      	movs	r2, #15
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	691a      	ldr	r2, [r3, #16]
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	08da      	lsrs	r2, r3, #3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3208      	adds	r2, #8
 8003ef4:	69b9      	ldr	r1, [r7, #24]
 8003ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	2203      	movs	r2, #3
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f003 0203 	and.w	r2, r3, #3
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 80d8 	beq.w	80040ec <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f3c:	4b2c      	ldr	r3, [pc, #176]	@ (8003ff0 <HAL_GPIO_Init+0x22c>)
 8003f3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f42:	4a2b      	ldr	r2, [pc, #172]	@ (8003ff0 <HAL_GPIO_Init+0x22c>)
 8003f44:	f043 0302 	orr.w	r3, r3, #2
 8003f48:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003f4c:	4b28      	ldr	r3, [pc, #160]	@ (8003ff0 <HAL_GPIO_Init+0x22c>)
 8003f4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f5a:	4a26      	ldr	r2, [pc, #152]	@ (8003ff4 <HAL_GPIO_Init+0x230>)
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	089b      	lsrs	r3, r3, #2
 8003f60:	3302      	adds	r3, #2
 8003f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	220f      	movs	r2, #15
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	43db      	mvns	r3, r3
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a1d      	ldr	r2, [pc, #116]	@ (8003ff8 <HAL_GPIO_Init+0x234>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d04a      	beq.n	800401c <HAL_GPIO_Init+0x258>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a1c      	ldr	r2, [pc, #112]	@ (8003ffc <HAL_GPIO_Init+0x238>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d02b      	beq.n	8003fe6 <HAL_GPIO_Init+0x222>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a1b      	ldr	r2, [pc, #108]	@ (8004000 <HAL_GPIO_Init+0x23c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d025      	beq.n	8003fe2 <HAL_GPIO_Init+0x21e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a1a      	ldr	r2, [pc, #104]	@ (8004004 <HAL_GPIO_Init+0x240>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d01f      	beq.n	8003fde <HAL_GPIO_Init+0x21a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a19      	ldr	r2, [pc, #100]	@ (8004008 <HAL_GPIO_Init+0x244>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d019      	beq.n	8003fda <HAL_GPIO_Init+0x216>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a18      	ldr	r2, [pc, #96]	@ (800400c <HAL_GPIO_Init+0x248>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d013      	beq.n	8003fd6 <HAL_GPIO_Init+0x212>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a17      	ldr	r2, [pc, #92]	@ (8004010 <HAL_GPIO_Init+0x24c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00d      	beq.n	8003fd2 <HAL_GPIO_Init+0x20e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a16      	ldr	r2, [pc, #88]	@ (8004014 <HAL_GPIO_Init+0x250>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d007      	beq.n	8003fce <HAL_GPIO_Init+0x20a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a15      	ldr	r2, [pc, #84]	@ (8004018 <HAL_GPIO_Init+0x254>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d101      	bne.n	8003fca <HAL_GPIO_Init+0x206>
 8003fc6:	2309      	movs	r3, #9
 8003fc8:	e029      	b.n	800401e <HAL_GPIO_Init+0x25a>
 8003fca:	230a      	movs	r3, #10
 8003fcc:	e027      	b.n	800401e <HAL_GPIO_Init+0x25a>
 8003fce:	2307      	movs	r3, #7
 8003fd0:	e025      	b.n	800401e <HAL_GPIO_Init+0x25a>
 8003fd2:	2306      	movs	r3, #6
 8003fd4:	e023      	b.n	800401e <HAL_GPIO_Init+0x25a>
 8003fd6:	2305      	movs	r3, #5
 8003fd8:	e021      	b.n	800401e <HAL_GPIO_Init+0x25a>
 8003fda:	2304      	movs	r3, #4
 8003fdc:	e01f      	b.n	800401e <HAL_GPIO_Init+0x25a>
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e01d      	b.n	800401e <HAL_GPIO_Init+0x25a>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e01b      	b.n	800401e <HAL_GPIO_Init+0x25a>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e019      	b.n	800401e <HAL_GPIO_Init+0x25a>
 8003fea:	bf00      	nop
 8003fec:	58000080 	.word	0x58000080
 8003ff0:	58024400 	.word	0x58024400
 8003ff4:	58000400 	.word	0x58000400
 8003ff8:	58020000 	.word	0x58020000
 8003ffc:	58020400 	.word	0x58020400
 8004000:	58020800 	.word	0x58020800
 8004004:	58020c00 	.word	0x58020c00
 8004008:	58021000 	.word	0x58021000
 800400c:	58021400 	.word	0x58021400
 8004010:	58021800 	.word	0x58021800
 8004014:	58021c00 	.word	0x58021c00
 8004018:	58022400 	.word	0x58022400
 800401c:	2300      	movs	r3, #0
 800401e:	69fa      	ldr	r2, [r7, #28]
 8004020:	f002 0203 	and.w	r2, r2, #3
 8004024:	0092      	lsls	r2, r2, #2
 8004026:	4093      	lsls	r3, r2
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4313      	orrs	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800402e:	4938      	ldr	r1, [pc, #224]	@ (8004110 <HAL_GPIO_Init+0x34c>)
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	089b      	lsrs	r3, r3, #2
 8004034:	3302      	adds	r3, #2
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800403c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	43db      	mvns	r3, r3
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	4013      	ands	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004062:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800406a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	43db      	mvns	r3, r3
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4013      	ands	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004090:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	43db      	mvns	r3, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4013      	ands	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	3301      	adds	r3, #1
 80040f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f47f ae6b 	bne.w	8003dd8 <HAL_GPIO_Init+0x14>
  }
}
 8004102:	bf00      	nop
 8004104:	bf00      	nop
 8004106:	3724      	adds	r7, #36	@ 0x24
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	58000400 	.word	0x58000400

08004114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	807b      	strh	r3, [r7, #2]
 8004120:	4613      	mov	r3, r2
 8004122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004124:	787b      	ldrb	r3, [r7, #1]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800412a:	887a      	ldrh	r2, [r7, #2]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004130:	e003      	b.n	800413a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004132:	887b      	ldrh	r3, [r7, #2]
 8004134:	041a      	lsls	r2, r3, #16
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	619a      	str	r2, [r3, #24]
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
	...

08004148 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e08b      	b.n	8004272 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fc fb6a 	bl	8000848 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2224      	movs	r2, #36	@ 0x24
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0201 	bic.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004198:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d107      	bne.n	80041c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041be:	609a      	str	r2, [r3, #8]
 80041c0:	e006      	b.n	80041d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80041ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d108      	bne.n	80041ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041e6:	605a      	str	r2, [r3, #4]
 80041e8:	e007      	b.n	80041fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6859      	ldr	r1, [r3, #4]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	4b1d      	ldr	r3, [pc, #116]	@ (800427c <HAL_I2C_Init+0x134>)
 8004206:	430b      	orrs	r3, r1
 8004208:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004218:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	69d9      	ldr	r1, [r3, #28]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1a      	ldr	r2, [r3, #32]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	02008000 	.word	0x02008000

08004280 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	68f9      	ldr	r1, [r7, #12]
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	4798      	blx	r3
  }
}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00f      	beq.n	80042f6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e4:	f043 0201 	orr.w	r2, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042f4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00f      	beq.n	8004320 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430e:	f043 0208 	orr.w	r2, r3, #8
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800431e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00f      	beq.n	800434a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00a      	beq.n	800434a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004338:	f043 0202 	orr.w	r2, r3, #2
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004348:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f003 030b 	and.w	r3, r3, #11
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800435a:	68f9      	ldr	r1, [r7, #12]
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 fcc5 	bl	8004cec <I2C_ITError>
  }
}
 8004362:	bf00      	nop
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	460b      	mov	r3, r1
 800439c:	70fb      	strb	r3, [r7, #3]
 800439e:	4613      	mov	r3, r2
 80043a0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b086      	sub	sp, #24
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <I2C_Slave_ISR_IT+0x24>
 800440a:	2302      	movs	r3, #2
 800440c:	e0e2      	b.n	80045d4 <I2C_Slave_ISR_IT+0x1ea>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b00      	cmp	r3, #0
 800441e:	d009      	beq.n	8004434 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004426:	2b00      	cmp	r3, #0
 8004428:	d004      	beq.n	8004434 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800442a:	6939      	ldr	r1, [r7, #16]
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f9b5 	bl	800479c <I2C_ITSlaveCplt>
 8004432:	e0ca      	b.n	80045ca <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f003 0310 	and.w	r3, r3, #16
 800443a:	2b00      	cmp	r3, #0
 800443c:	d04b      	beq.n	80044d6 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004444:	2b00      	cmp	r3, #0
 8004446:	d046      	beq.n	80044d6 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d128      	bne.n	80044a4 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b28      	cmp	r3, #40	@ 0x28
 800445c:	d108      	bne.n	8004470 <I2C_Slave_ISR_IT+0x86>
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004464:	d104      	bne.n	8004470 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004466:	6939      	ldr	r1, [r7, #16]
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 fbeb 	bl	8004c44 <I2C_ITListenCplt>
 800446e:	e031      	b.n	80044d4 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b29      	cmp	r3, #41	@ 0x29
 800447a:	d10e      	bne.n	800449a <I2C_Slave_ISR_IT+0xb0>
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004482:	d00a      	beq.n	800449a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2210      	movs	r2, #16
 800448a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 fd44 	bl	8004f1a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 f926 	bl	80046e4 <I2C_ITSlaveSeqCplt>
 8004498:	e01c      	b.n	80044d4 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2210      	movs	r2, #16
 80044a0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80044a2:	e08f      	b.n	80045c4 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2210      	movs	r2, #16
 80044aa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b0:	f043 0204 	orr.w	r2, r3, #4
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <I2C_Slave_ISR_IT+0xdc>
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044c4:	d17e      	bne.n	80045c4 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ca:	4619      	mov	r1, r3
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 fc0d 	bl	8004cec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80044d2:	e077      	b.n	80045c4 <I2C_Slave_ISR_IT+0x1da>
 80044d4:	e076      	b.n	80045c4 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d02f      	beq.n	8004540 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d02a      	beq.n	8004540 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d018      	beq.n	8004526 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800451c:	b29b      	uxth	r3, r3
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d14b      	bne.n	80045c8 <I2C_Slave_ISR_IT+0x1de>
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004536:	d047      	beq.n	80045c8 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f8d3 	bl	80046e4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800453e:	e043      	b.n	80045c8 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b00      	cmp	r3, #0
 8004548:	d009      	beq.n	800455e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004550:	2b00      	cmp	r3, #0
 8004552:	d004      	beq.n	800455e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004554:	6939      	ldr	r1, [r7, #16]
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 f840 	bl	80045dc <I2C_ITAddrCplt>
 800455c:	e035      	b.n	80045ca <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d030      	beq.n	80045ca <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800456e:	2b00      	cmp	r3, #0
 8004570:	d02b      	beq.n	80045ca <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d018      	beq.n	80045ae <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004580:	781a      	ldrb	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	851a      	strh	r2, [r3, #40]	@ 0x28
 80045ac:	e00d      	b.n	80045ca <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045b4:	d002      	beq.n	80045bc <I2C_Slave_ISR_IT+0x1d2>
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d106      	bne.n	80045ca <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f891 	bl	80046e4 <I2C_ITSlaveSeqCplt>
 80045c2:	e002      	b.n	80045ca <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80045c4:	bf00      	nop
 80045c6:	e000      	b.n	80045ca <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80045c8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80045f2:	2b28      	cmp	r3, #40	@ 0x28
 80045f4:	d16a      	bne.n	80046cc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	0c1b      	lsrs	r3, r3, #16
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	0c1b      	lsrs	r3, r3, #16
 800460e:	b29b      	uxth	r3, r3
 8004610:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004614:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	b29b      	uxth	r3, r3
 800461e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004622:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	b29b      	uxth	r3, r3
 800462c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004630:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d138      	bne.n	80046ac <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800463a:	897b      	ldrh	r3, [r7, #10]
 800463c:	09db      	lsrs	r3, r3, #7
 800463e:	b29a      	uxth	r2, r3
 8004640:	89bb      	ldrh	r3, [r7, #12]
 8004642:	4053      	eors	r3, r2
 8004644:	b29b      	uxth	r3, r3
 8004646:	f003 0306 	and.w	r3, r3, #6
 800464a:	2b00      	cmp	r3, #0
 800464c:	d11c      	bne.n	8004688 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800464e:	897b      	ldrh	r3, [r7, #10]
 8004650:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004660:	2b02      	cmp	r3, #2
 8004662:	d13b      	bne.n	80046dc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2208      	movs	r2, #8
 8004670:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800467a:	89ba      	ldrh	r2, [r7, #12]
 800467c:	7bfb      	ldrb	r3, [r7, #15]
 800467e:	4619      	mov	r1, r3
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff fe86 	bl	8004392 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004686:	e029      	b.n	80046dc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004688:	893b      	ldrh	r3, [r7, #8]
 800468a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800468c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fc84 	bl	8004f9e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800469e:	89ba      	ldrh	r2, [r7, #12]
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	4619      	mov	r1, r3
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff fe74 	bl	8004392 <HAL_I2C_AddrCallback>
}
 80046aa:	e017      	b.n	80046dc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80046ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 fc74 	bl	8004f9e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80046be:	89ba      	ldrh	r2, [r7, #12]
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	4619      	mov	r1, r3
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff fe64 	bl	8004392 <HAL_I2C_AddrCallback>
}
 80046ca:	e007      	b.n	80046dc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2208      	movs	r2, #8
 80046d2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d008      	beq.n	8004718 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	e00c      	b.n	8004732 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d007      	beq.n	8004732 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004730:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b29      	cmp	r3, #41	@ 0x29
 800473c:	d112      	bne.n	8004764 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2228      	movs	r2, #40	@ 0x28
 8004742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2221      	movs	r2, #33	@ 0x21
 800474a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800474c:	2101      	movs	r1, #1
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fc25 	bl	8004f9e <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7ff fe04 	bl	800436a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004762:	e017      	b.n	8004794 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b2a      	cmp	r3, #42	@ 0x2a
 800476e:	d111      	bne.n	8004794 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2228      	movs	r2, #40	@ 0x28
 8004774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2222      	movs	r2, #34	@ 0x22
 800477c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800477e:	2102      	movs	r1, #2
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 fc0c 	bl	8004f9e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7ff fdf5 	bl	800437e <HAL_I2C_SlaveRxCpltCallback>
}
 8004794:	bf00      	nop
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047be:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2220      	movs	r2, #32
 80047c6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80047c8:	7afb      	ldrb	r3, [r7, #11]
 80047ca:	2b21      	cmp	r3, #33	@ 0x21
 80047cc:	d002      	beq.n	80047d4 <I2C_ITSlaveCplt+0x38>
 80047ce:	7afb      	ldrb	r3, [r7, #11]
 80047d0:	2b29      	cmp	r3, #41	@ 0x29
 80047d2:	d108      	bne.n	80047e6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80047d4:	f248 0101 	movw	r1, #32769	@ 0x8001
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fbe0 	bl	8004f9e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2221      	movs	r2, #33	@ 0x21
 80047e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80047e4:	e019      	b.n	800481a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80047e6:	7afb      	ldrb	r3, [r7, #11]
 80047e8:	2b22      	cmp	r3, #34	@ 0x22
 80047ea:	d002      	beq.n	80047f2 <I2C_ITSlaveCplt+0x56>
 80047ec:	7afb      	ldrb	r3, [r7, #11]
 80047ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80047f0:	d108      	bne.n	8004804 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80047f2:	f248 0102 	movw	r1, #32770	@ 0x8002
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fbd1 	bl	8004f9e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2222      	movs	r2, #34	@ 0x22
 8004800:	631a      	str	r2, [r3, #48]	@ 0x30
 8004802:	e00a      	b.n	800481a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004804:	7afb      	ldrb	r3, [r7, #11]
 8004806:	2b28      	cmp	r3, #40	@ 0x28
 8004808:	d107      	bne.n	800481a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800480a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fbc5 	bl	8004f9e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004828:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6859      	ldr	r1, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	4b7f      	ldr	r3, [pc, #508]	@ (8004a34 <I2C_ITSlaveCplt+0x298>)
 8004836:	400b      	ands	r3, r1
 8004838:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fb6d 	bl	8004f1a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d07a      	beq.n	8004940 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004858:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 8111 	beq.w	8004a86 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a73      	ldr	r2, [pc, #460]	@ (8004a38 <I2C_ITSlaveCplt+0x29c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d059      	beq.n	8004924 <I2C_ITSlaveCplt+0x188>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a71      	ldr	r2, [pc, #452]	@ (8004a3c <I2C_ITSlaveCplt+0x2a0>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d053      	beq.n	8004924 <I2C_ITSlaveCplt+0x188>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a6f      	ldr	r2, [pc, #444]	@ (8004a40 <I2C_ITSlaveCplt+0x2a4>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d04d      	beq.n	8004924 <I2C_ITSlaveCplt+0x188>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a6d      	ldr	r2, [pc, #436]	@ (8004a44 <I2C_ITSlaveCplt+0x2a8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d047      	beq.n	8004924 <I2C_ITSlaveCplt+0x188>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a6b      	ldr	r2, [pc, #428]	@ (8004a48 <I2C_ITSlaveCplt+0x2ac>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d041      	beq.n	8004924 <I2C_ITSlaveCplt+0x188>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a69      	ldr	r2, [pc, #420]	@ (8004a4c <I2C_ITSlaveCplt+0x2b0>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d03b      	beq.n	8004924 <I2C_ITSlaveCplt+0x188>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a67      	ldr	r2, [pc, #412]	@ (8004a50 <I2C_ITSlaveCplt+0x2b4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d035      	beq.n	8004924 <I2C_ITSlaveCplt+0x188>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a65      	ldr	r2, [pc, #404]	@ (8004a54 <I2C_ITSlaveCplt+0x2b8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d02f      	beq.n	8004924 <I2C_ITSlaveCplt+0x188>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a63      	ldr	r2, [pc, #396]	@ (8004a58 <I2C_ITSlaveCplt+0x2bc>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d029      	beq.n	8004924 <I2C_ITSlaveCplt+0x188>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a61      	ldr	r2, [pc, #388]	@ (8004a5c <I2C_ITSlaveCplt+0x2c0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d023      	beq.n	8004924 <I2C_ITSlaveCplt+0x188>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a5f      	ldr	r2, [pc, #380]	@ (8004a60 <I2C_ITSlaveCplt+0x2c4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d01d      	beq.n	8004924 <I2C_ITSlaveCplt+0x188>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a5d      	ldr	r2, [pc, #372]	@ (8004a64 <I2C_ITSlaveCplt+0x2c8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d017      	beq.n	8004924 <I2C_ITSlaveCplt+0x188>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a5b      	ldr	r2, [pc, #364]	@ (8004a68 <I2C_ITSlaveCplt+0x2cc>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d011      	beq.n	8004924 <I2C_ITSlaveCplt+0x188>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a59      	ldr	r2, [pc, #356]	@ (8004a6c <I2C_ITSlaveCplt+0x2d0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d00b      	beq.n	8004924 <I2C_ITSlaveCplt+0x188>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a57      	ldr	r2, [pc, #348]	@ (8004a70 <I2C_ITSlaveCplt+0x2d4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d005      	beq.n	8004924 <I2C_ITSlaveCplt+0x188>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a55      	ldr	r2, [pc, #340]	@ (8004a74 <I2C_ITSlaveCplt+0x2d8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d105      	bne.n	8004930 <I2C_ITSlaveCplt+0x194>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	b29b      	uxth	r3, r3
 800492e:	e004      	b.n	800493a <I2C_ITSlaveCplt+0x19e>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	b29b      	uxth	r3, r3
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800493e:	e0a2      	b.n	8004a86 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 809d 	beq.w	8004a86 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800495a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 8090 	beq.w	8004a86 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a32      	ldr	r2, [pc, #200]	@ (8004a38 <I2C_ITSlaveCplt+0x29c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d059      	beq.n	8004a26 <I2C_ITSlaveCplt+0x28a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a30      	ldr	r2, [pc, #192]	@ (8004a3c <I2C_ITSlaveCplt+0x2a0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d053      	beq.n	8004a26 <I2C_ITSlaveCplt+0x28a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a2e      	ldr	r2, [pc, #184]	@ (8004a40 <I2C_ITSlaveCplt+0x2a4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d04d      	beq.n	8004a26 <I2C_ITSlaveCplt+0x28a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a2c      	ldr	r2, [pc, #176]	@ (8004a44 <I2C_ITSlaveCplt+0x2a8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d047      	beq.n	8004a26 <I2C_ITSlaveCplt+0x28a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a2a      	ldr	r2, [pc, #168]	@ (8004a48 <I2C_ITSlaveCplt+0x2ac>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d041      	beq.n	8004a26 <I2C_ITSlaveCplt+0x28a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a28      	ldr	r2, [pc, #160]	@ (8004a4c <I2C_ITSlaveCplt+0x2b0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d03b      	beq.n	8004a26 <I2C_ITSlaveCplt+0x28a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a26      	ldr	r2, [pc, #152]	@ (8004a50 <I2C_ITSlaveCplt+0x2b4>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d035      	beq.n	8004a26 <I2C_ITSlaveCplt+0x28a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a24      	ldr	r2, [pc, #144]	@ (8004a54 <I2C_ITSlaveCplt+0x2b8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d02f      	beq.n	8004a26 <I2C_ITSlaveCplt+0x28a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a22      	ldr	r2, [pc, #136]	@ (8004a58 <I2C_ITSlaveCplt+0x2bc>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d029      	beq.n	8004a26 <I2C_ITSlaveCplt+0x28a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a20      	ldr	r2, [pc, #128]	@ (8004a5c <I2C_ITSlaveCplt+0x2c0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d023      	beq.n	8004a26 <I2C_ITSlaveCplt+0x28a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004a60 <I2C_ITSlaveCplt+0x2c4>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d01d      	beq.n	8004a26 <I2C_ITSlaveCplt+0x28a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004a64 <I2C_ITSlaveCplt+0x2c8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d017      	beq.n	8004a26 <I2C_ITSlaveCplt+0x28a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004a68 <I2C_ITSlaveCplt+0x2cc>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d011      	beq.n	8004a26 <I2C_ITSlaveCplt+0x28a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a18      	ldr	r2, [pc, #96]	@ (8004a6c <I2C_ITSlaveCplt+0x2d0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d00b      	beq.n	8004a26 <I2C_ITSlaveCplt+0x28a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a16      	ldr	r2, [pc, #88]	@ (8004a70 <I2C_ITSlaveCplt+0x2d4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d005      	beq.n	8004a26 <I2C_ITSlaveCplt+0x28a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a14      	ldr	r2, [pc, #80]	@ (8004a74 <I2C_ITSlaveCplt+0x2d8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d128      	bne.n	8004a78 <I2C_ITSlaveCplt+0x2dc>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	e027      	b.n	8004a82 <I2C_ITSlaveCplt+0x2e6>
 8004a32:	bf00      	nop
 8004a34:	fe00e800 	.word	0xfe00e800
 8004a38:	40020010 	.word	0x40020010
 8004a3c:	40020028 	.word	0x40020028
 8004a40:	40020040 	.word	0x40020040
 8004a44:	40020058 	.word	0x40020058
 8004a48:	40020070 	.word	0x40020070
 8004a4c:	40020088 	.word	0x40020088
 8004a50:	400200a0 	.word	0x400200a0
 8004a54:	400200b8 	.word	0x400200b8
 8004a58:	40020410 	.word	0x40020410
 8004a5c:	40020428 	.word	0x40020428
 8004a60:	40020440 	.word	0x40020440
 8004a64:	40020458 	.word	0x40020458
 8004a68:	40020470 	.word	0x40020470
 8004a6c:	40020488 	.word	0x40020488
 8004a70:	400204a0 	.word	0x400204a0
 8004a74:	400204b8 	.word	0x400204b8
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d020      	beq.n	8004ad2 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f023 0304 	bic.w	r3, r3, #4
 8004a96:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00c      	beq.n	8004ad2 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d005      	beq.n	8004ae8 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae0:	f043 0204 	orr.w	r2, r3, #4
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f003 0310 	and.w	r3, r3, #16
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d049      	beq.n	8004b86 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d044      	beq.n	8004b86 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d128      	bne.n	8004b58 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b28      	cmp	r3, #40	@ 0x28
 8004b10:	d108      	bne.n	8004b24 <I2C_ITSlaveCplt+0x388>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b18:	d104      	bne.n	8004b24 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004b1a:	6979      	ldr	r1, [r7, #20]
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f891 	bl	8004c44 <I2C_ITListenCplt>
 8004b22:	e030      	b.n	8004b86 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b29      	cmp	r3, #41	@ 0x29
 8004b2e:	d10e      	bne.n	8004b4e <I2C_ITSlaveCplt+0x3b2>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b36:	d00a      	beq.n	8004b4e <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2210      	movs	r2, #16
 8004b3e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f9ea 	bl	8004f1a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff fdcc 	bl	80046e4 <I2C_ITSlaveSeqCplt>
 8004b4c:	e01b      	b.n	8004b86 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2210      	movs	r2, #16
 8004b54:	61da      	str	r2, [r3, #28]
 8004b56:	e016      	b.n	8004b86 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2210      	movs	r2, #16
 8004b5e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b64:	f043 0204 	orr.w	r2, r3, #4
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <I2C_ITSlaveCplt+0x3de>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b78:	d105      	bne.n	8004b86 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b7e:	4619      	mov	r1, r3
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f8b3 	bl	8004cec <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d010      	beq.n	8004bbe <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f8a2 	bl	8004cec <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b28      	cmp	r3, #40	@ 0x28
 8004bb2:	d141      	bne.n	8004c38 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004bb4:	6979      	ldr	r1, [r7, #20]
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f844 	bl	8004c44 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004bbc:	e03c      	b.n	8004c38 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004bc6:	d014      	beq.n	8004bf2 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7ff fd8b 	bl	80046e4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8004c40 <I2C_ITSlaveCplt+0x4a4>)
 8004bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff fbdf 	bl	80043ae <HAL_I2C_ListenCpltCallback>
}
 8004bf0:	e022      	b.n	8004c38 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b22      	cmp	r3, #34	@ 0x22
 8004bfc:	d10e      	bne.n	8004c1c <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff fbb2 	bl	800437e <HAL_I2C_SlaveRxCpltCallback>
}
 8004c1a:	e00d      	b.n	8004c38 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7ff fb99 	bl	800436a <HAL_I2C_SlaveTxCpltCallback>
}
 8004c38:	bf00      	nop
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	ffff0000 	.word	0xffff0000

08004c44 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a25      	ldr	r2, [pc, #148]	@ (8004ce8 <I2C_ITListenCplt+0xa4>)
 8004c52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d022      	beq.n	8004cc0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c84:	b2d2      	uxtb	r2, r2
 8004c86:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d012      	beq.n	8004cc0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb8:	f043 0204 	orr.w	r2, r3, #4
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004cc0:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f96a 	bl	8004f9e <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2210      	movs	r2, #16
 8004cd0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff fb67 	bl	80043ae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004ce0:	bf00      	nop
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	ffff0000 	.word	0xffff0000

08004cec <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cfc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a6d      	ldr	r2, [pc, #436]	@ (8004ec0 <I2C_ITError+0x1d4>)
 8004d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	2b28      	cmp	r3, #40	@ 0x28
 8004d22:	d005      	beq.n	8004d30 <I2C_ITError+0x44>
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
 8004d26:	2b29      	cmp	r3, #41	@ 0x29
 8004d28:	d002      	beq.n	8004d30 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d2e:	d10b      	bne.n	8004d48 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004d30:	2103      	movs	r1, #3
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f933 	bl	8004f9e <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2228      	movs	r2, #40	@ 0x28
 8004d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a60      	ldr	r2, [pc, #384]	@ (8004ec4 <I2C_ITError+0x1d8>)
 8004d44:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d46:	e030      	b.n	8004daa <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004d48:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f926 	bl	8004f9e <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f8e1 	bl	8004f1a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b60      	cmp	r3, #96	@ 0x60
 8004d62:	d01f      	beq.n	8004da4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	d114      	bne.n	8004da4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2b10      	cmp	r3, #16
 8004d86:	d109      	bne.n	8004d9c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2210      	movs	r2, #16
 8004d8e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d94:	f043 0204 	orr.w	r2, r3, #4
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2220      	movs	r2, #32
 8004da2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dae:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d039      	beq.n	8004e2c <I2C_ITError+0x140>
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2b11      	cmp	r3, #17
 8004dbc:	d002      	beq.n	8004dc4 <I2C_ITError+0xd8>
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2b21      	cmp	r3, #33	@ 0x21
 8004dc2:	d133      	bne.n	8004e2c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dd2:	d107      	bne.n	8004de4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004de2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fe fbe9 	bl	80035c0 <HAL_DMA_GetState>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d017      	beq.n	8004e24 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df8:	4a33      	ldr	r2, [pc, #204]	@ (8004ec8 <I2C_ITError+0x1dc>)
 8004dfa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7fd fa69 	bl	80022e0 <HAL_DMA_Abort_IT>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d04d      	beq.n	8004eb0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e1e:	4610      	mov	r0, r2
 8004e20:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e22:	e045      	b.n	8004eb0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f851 	bl	8004ecc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e2a:	e041      	b.n	8004eb0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d039      	beq.n	8004ea8 <I2C_ITError+0x1bc>
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2b12      	cmp	r3, #18
 8004e38:	d002      	beq.n	8004e40 <I2C_ITError+0x154>
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b22      	cmp	r3, #34	@ 0x22
 8004e3e:	d133      	bne.n	8004ea8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e4e:	d107      	bne.n	8004e60 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e5e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7fe fbab 	bl	80035c0 <HAL_DMA_GetState>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d017      	beq.n	8004ea0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e74:	4a14      	ldr	r2, [pc, #80]	@ (8004ec8 <I2C_ITError+0x1dc>)
 8004e76:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fd fa2b 	bl	80022e0 <HAL_DMA_Abort_IT>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d011      	beq.n	8004eb4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e9a:	4610      	mov	r0, r2
 8004e9c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e9e:	e009      	b.n	8004eb4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f813 	bl	8004ecc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ea6:	e005      	b.n	8004eb4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f80f 	bl	8004ecc <I2C_TreatErrorCallback>
  }
}
 8004eae:	e002      	b.n	8004eb6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004eb0:	bf00      	nop
 8004eb2:	e000      	b.n	8004eb6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004eb4:	bf00      	nop
}
 8004eb6:	bf00      	nop
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	ffff0000 	.word	0xffff0000
 8004ec4:	080043eb 	.word	0x080043eb
 8004ec8:	08004f63 	.word	0x08004f63

08004ecc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b60      	cmp	r3, #96	@ 0x60
 8004ede:	d10e      	bne.n	8004efe <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7ff fa6d 	bl	80043d6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004efc:	e009      	b.n	8004f12 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff fa58 	bl	80043c2 <HAL_I2C_ErrorCallback>
}
 8004f12:	bf00      	nop
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d103      	bne.n	8004f38 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2200      	movs	r2, #0
 8004f36:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d007      	beq.n	8004f56 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	699a      	ldr	r2, [r3, #24]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0201 	orr.w	r2, r2, #1
 8004f54:	619a      	str	r2, [r3, #24]
  }
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b084      	sub	sp, #16
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d003      	beq.n	8004f90 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f7ff ff9b 	bl	8004ecc <I2C_TreatErrorCallback>
}
 8004f96:	bf00      	nop
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b085      	sub	sp, #20
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004fae:	887b      	ldrh	r3, [r7, #2]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00f      	beq.n	8004fd8 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004fbe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004fcc:	2b28      	cmp	r3, #40	@ 0x28
 8004fce:	d003      	beq.n	8004fd8 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004fd6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004fd8:	887b      	ldrh	r3, [r7, #2]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00f      	beq.n	8005002 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004fe8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ff6:	2b28      	cmp	r3, #40	@ 0x28
 8004ff8:	d003      	beq.n	8005002 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005000:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005002:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005006:	2b00      	cmp	r3, #0
 8005008:	da03      	bge.n	8005012 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005010:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005012:	887b      	ldrh	r3, [r7, #2]
 8005014:	2b10      	cmp	r3, #16
 8005016:	d103      	bne.n	8005020 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800501e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005020:	887b      	ldrh	r3, [r7, #2]
 8005022:	2b20      	cmp	r3, #32
 8005024:	d103      	bne.n	800502e <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f043 0320 	orr.w	r3, r3, #32
 800502c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800502e:	887b      	ldrh	r3, [r7, #2]
 8005030:	2b40      	cmp	r3, #64	@ 0x40
 8005032:	d103      	bne.n	800503c <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800503a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6819      	ldr	r1, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	43da      	mvns	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	400a      	ands	r2, r1
 800504c:	601a      	str	r2, [r3, #0]
}
 800504e:	bf00      	nop
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b20      	cmp	r3, #32
 800506e:	d138      	bne.n	80050e2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005076:	2b01      	cmp	r3, #1
 8005078:	d101      	bne.n	800507e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800507a:	2302      	movs	r3, #2
 800507c:	e032      	b.n	80050e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2224      	movs	r2, #36	@ 0x24
 800508a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0201 	bic.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80050ac:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6819      	ldr	r1, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f042 0201 	orr.w	r2, r2, #1
 80050cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	e000      	b.n	80050e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050e2:	2302      	movs	r3, #2
  }
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b20      	cmp	r3, #32
 8005104:	d139      	bne.n	800517a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005110:	2302      	movs	r3, #2
 8005112:	e033      	b.n	800517c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2224      	movs	r2, #36	@ 0x24
 8005120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0201 	bic.w	r2, r2, #1
 8005132:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005142:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	021b      	lsls	r3, r3, #8
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f042 0201 	orr.w	r2, r2, #1
 8005164:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2220      	movs	r2, #32
 800516a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	e000      	b.n	800517c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800517a:	2302      	movs	r3, #2
  }
}
 800517c:	4618      	mov	r0, r3
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005190:	4b19      	ldr	r3, [pc, #100]	@ (80051f8 <HAL_PWREx_ConfigSupply+0x70>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b04      	cmp	r3, #4
 800519a:	d00a      	beq.n	80051b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800519c:	4b16      	ldr	r3, [pc, #88]	@ (80051f8 <HAL_PWREx_ConfigSupply+0x70>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d001      	beq.n	80051ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e01f      	b.n	80051ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	e01d      	b.n	80051ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80051b2:	4b11      	ldr	r3, [pc, #68]	@ (80051f8 <HAL_PWREx_ConfigSupply+0x70>)
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f023 0207 	bic.w	r2, r3, #7
 80051ba:	490f      	ldr	r1, [pc, #60]	@ (80051f8 <HAL_PWREx_ConfigSupply+0x70>)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80051c2:	f7fb fe19 	bl	8000df8 <HAL_GetTick>
 80051c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80051c8:	e009      	b.n	80051de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80051ca:	f7fb fe15 	bl	8000df8 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80051d8:	d901      	bls.n	80051de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e007      	b.n	80051ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80051de:	4b06      	ldr	r3, [pc, #24]	@ (80051f8 <HAL_PWREx_ConfigSupply+0x70>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051ea:	d1ee      	bne.n	80051ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	58024800 	.word	0x58024800

080051fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08c      	sub	sp, #48	@ 0x30
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e3c8      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 8087 	beq.w	800532a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800521c:	4b88      	ldr	r3, [pc, #544]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005224:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005226:	4b86      	ldr	r3, [pc, #536]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 8005228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800522a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800522c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800522e:	2b10      	cmp	r3, #16
 8005230:	d007      	beq.n	8005242 <HAL_RCC_OscConfig+0x46>
 8005232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005234:	2b18      	cmp	r3, #24
 8005236:	d110      	bne.n	800525a <HAL_RCC_OscConfig+0x5e>
 8005238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d10b      	bne.n	800525a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005242:	4b7f      	ldr	r3, [pc, #508]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d06c      	beq.n	8005328 <HAL_RCC_OscConfig+0x12c>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d168      	bne.n	8005328 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e3a2      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005262:	d106      	bne.n	8005272 <HAL_RCC_OscConfig+0x76>
 8005264:	4b76      	ldr	r3, [pc, #472]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a75      	ldr	r2, [pc, #468]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 800526a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	e02e      	b.n	80052d0 <HAL_RCC_OscConfig+0xd4>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10c      	bne.n	8005294 <HAL_RCC_OscConfig+0x98>
 800527a:	4b71      	ldr	r3, [pc, #452]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a70      	ldr	r2, [pc, #448]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 8005280:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	4b6e      	ldr	r3, [pc, #440]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a6d      	ldr	r2, [pc, #436]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 800528c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	e01d      	b.n	80052d0 <HAL_RCC_OscConfig+0xd4>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800529c:	d10c      	bne.n	80052b8 <HAL_RCC_OscConfig+0xbc>
 800529e:	4b68      	ldr	r3, [pc, #416]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a67      	ldr	r2, [pc, #412]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 80052a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	4b65      	ldr	r3, [pc, #404]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a64      	ldr	r2, [pc, #400]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 80052b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052b4:	6013      	str	r3, [r2, #0]
 80052b6:	e00b      	b.n	80052d0 <HAL_RCC_OscConfig+0xd4>
 80052b8:	4b61      	ldr	r3, [pc, #388]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a60      	ldr	r2, [pc, #384]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 80052be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052c2:	6013      	str	r3, [r2, #0]
 80052c4:	4b5e      	ldr	r3, [pc, #376]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a5d      	ldr	r2, [pc, #372]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 80052ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d013      	beq.n	8005300 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d8:	f7fb fd8e 	bl	8000df8 <HAL_GetTick>
 80052dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052e0:	f7fb fd8a 	bl	8000df8 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b64      	cmp	r3, #100	@ 0x64
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e356      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052f2:	4b53      	ldr	r3, [pc, #332]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0f0      	beq.n	80052e0 <HAL_RCC_OscConfig+0xe4>
 80052fe:	e014      	b.n	800532a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005300:	f7fb fd7a 	bl	8000df8 <HAL_GetTick>
 8005304:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005308:	f7fb fd76 	bl	8000df8 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b64      	cmp	r3, #100	@ 0x64
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e342      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800531a:	4b49      	ldr	r3, [pc, #292]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1f0      	bne.n	8005308 <HAL_RCC_OscConfig+0x10c>
 8005326:	e000      	b.n	800532a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	f000 808c 	beq.w	8005450 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005338:	4b41      	ldr	r3, [pc, #260]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005340:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005342:	4b3f      	ldr	r3, [pc, #252]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 8005344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005346:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d007      	beq.n	800535e <HAL_RCC_OscConfig+0x162>
 800534e:	6a3b      	ldr	r3, [r7, #32]
 8005350:	2b18      	cmp	r3, #24
 8005352:	d137      	bne.n	80053c4 <HAL_RCC_OscConfig+0x1c8>
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d132      	bne.n	80053c4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800535e:	4b38      	ldr	r3, [pc, #224]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0304 	and.w	r3, r3, #4
 8005366:	2b00      	cmp	r3, #0
 8005368:	d005      	beq.n	8005376 <HAL_RCC_OscConfig+0x17a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e314      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005376:	4b32      	ldr	r3, [pc, #200]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f023 0219 	bic.w	r2, r3, #25
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	492f      	ldr	r1, [pc, #188]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 8005384:	4313      	orrs	r3, r2
 8005386:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005388:	f7fb fd36 	bl	8000df8 <HAL_GetTick>
 800538c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800538e:	e008      	b.n	80053a2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005390:	f7fb fd32 	bl	8000df8 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e2fe      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053a2:	4b27      	ldr	r3, [pc, #156]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0304 	and.w	r3, r3, #4
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0f0      	beq.n	8005390 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ae:	4b24      	ldr	r3, [pc, #144]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	061b      	lsls	r3, r3, #24
 80053bc:	4920      	ldr	r1, [pc, #128]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053c2:	e045      	b.n	8005450 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d026      	beq.n	800541a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80053cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f023 0219 	bic.w	r2, r3, #25
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	4919      	ldr	r1, [pc, #100]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053de:	f7fb fd0b 	bl	8000df8 <HAL_GetTick>
 80053e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053e4:	e008      	b.n	80053f8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053e6:	f7fb fd07 	bl	8000df8 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e2d3      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053f8:	4b11      	ldr	r3, [pc, #68]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0f0      	beq.n	80053e6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005404:	4b0e      	ldr	r3, [pc, #56]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	061b      	lsls	r3, r3, #24
 8005412:	490b      	ldr	r1, [pc, #44]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 8005414:	4313      	orrs	r3, r2
 8005416:	604b      	str	r3, [r1, #4]
 8005418:	e01a      	b.n	8005450 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800541a:	4b09      	ldr	r3, [pc, #36]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a08      	ldr	r2, [pc, #32]	@ (8005440 <HAL_RCC_OscConfig+0x244>)
 8005420:	f023 0301 	bic.w	r3, r3, #1
 8005424:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005426:	f7fb fce7 	bl	8000df8 <HAL_GetTick>
 800542a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800542c:	e00a      	b.n	8005444 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800542e:	f7fb fce3 	bl	8000df8 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d903      	bls.n	8005444 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e2af      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a4>
 8005440:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005444:	4b96      	ldr	r3, [pc, #600]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1ee      	bne.n	800542e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0310 	and.w	r3, r3, #16
 8005458:	2b00      	cmp	r3, #0
 800545a:	d06a      	beq.n	8005532 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800545c:	4b90      	ldr	r3, [pc, #576]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005464:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005466:	4b8e      	ldr	r3, [pc, #568]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 8005468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	2b08      	cmp	r3, #8
 8005470:	d007      	beq.n	8005482 <HAL_RCC_OscConfig+0x286>
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	2b18      	cmp	r3, #24
 8005476:	d11b      	bne.n	80054b0 <HAL_RCC_OscConfig+0x2b4>
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b01      	cmp	r3, #1
 8005480:	d116      	bne.n	80054b0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005482:	4b87      	ldr	r3, [pc, #540]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800548a:	2b00      	cmp	r3, #0
 800548c:	d005      	beq.n	800549a <HAL_RCC_OscConfig+0x29e>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	2b80      	cmp	r3, #128	@ 0x80
 8005494:	d001      	beq.n	800549a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e282      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800549a:	4b81      	ldr	r3, [pc, #516]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	061b      	lsls	r3, r3, #24
 80054a8:	497d      	ldr	r1, [pc, #500]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054ae:	e040      	b.n	8005532 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d023      	beq.n	8005500 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80054b8:	4b79      	ldr	r3, [pc, #484]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a78      	ldr	r2, [pc, #480]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 80054be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c4:	f7fb fc98 	bl	8000df8 <HAL_GetTick>
 80054c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80054cc:	f7fb fc94 	bl	8000df8 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e260      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054de:	4b70      	ldr	r3, [pc, #448]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0f0      	beq.n	80054cc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054ea:	4b6d      	ldr	r3, [pc, #436]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	061b      	lsls	r3, r3, #24
 80054f8:	4969      	ldr	r1, [pc, #420]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60cb      	str	r3, [r1, #12]
 80054fe:	e018      	b.n	8005532 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005500:	4b67      	ldr	r3, [pc, #412]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a66      	ldr	r2, [pc, #408]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 8005506:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800550a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550c:	f7fb fc74 	bl	8000df8 <HAL_GetTick>
 8005510:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005514:	f7fb fc70 	bl	8000df8 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e23c      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005526:	4b5e      	ldr	r3, [pc, #376]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d036      	beq.n	80055ac <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d019      	beq.n	800557a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005546:	4b56      	ldr	r3, [pc, #344]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 8005548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800554a:	4a55      	ldr	r2, [pc, #340]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 800554c:	f043 0301 	orr.w	r3, r3, #1
 8005550:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005552:	f7fb fc51 	bl	8000df8 <HAL_GetTick>
 8005556:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800555a:	f7fb fc4d 	bl	8000df8 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e219      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800556c:	4b4c      	ldr	r3, [pc, #304]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 800556e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0f0      	beq.n	800555a <HAL_RCC_OscConfig+0x35e>
 8005578:	e018      	b.n	80055ac <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800557a:	4b49      	ldr	r3, [pc, #292]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 800557c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800557e:	4a48      	ldr	r2, [pc, #288]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 8005580:	f023 0301 	bic.w	r3, r3, #1
 8005584:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005586:	f7fb fc37 	bl	8000df8 <HAL_GetTick>
 800558a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800558e:	f7fb fc33 	bl	8000df8 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e1ff      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055a0:	4b3f      	ldr	r3, [pc, #252]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 80055a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1f0      	bne.n	800558e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0320 	and.w	r3, r3, #32
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d036      	beq.n	8005626 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d019      	beq.n	80055f4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055c0:	4b37      	ldr	r3, [pc, #220]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a36      	ldr	r2, [pc, #216]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 80055c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80055ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055cc:	f7fb fc14 	bl	8000df8 <HAL_GetTick>
 80055d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055d4:	f7fb fc10 	bl	8000df8 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e1dc      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055e6:	4b2e      	ldr	r3, [pc, #184]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0f0      	beq.n	80055d4 <HAL_RCC_OscConfig+0x3d8>
 80055f2:	e018      	b.n	8005626 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055f4:	4b2a      	ldr	r3, [pc, #168]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a29      	ldr	r2, [pc, #164]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 80055fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005600:	f7fb fbfa 	bl	8000df8 <HAL_GetTick>
 8005604:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005608:	f7fb fbf6 	bl	8000df8 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e1c2      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800561a:	4b21      	ldr	r3, [pc, #132]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1f0      	bne.n	8005608 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0304 	and.w	r3, r3, #4
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 8086 	beq.w	8005740 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005634:	4b1b      	ldr	r3, [pc, #108]	@ (80056a4 <HAL_RCC_OscConfig+0x4a8>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a1a      	ldr	r2, [pc, #104]	@ (80056a4 <HAL_RCC_OscConfig+0x4a8>)
 800563a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800563e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005640:	f7fb fbda 	bl	8000df8 <HAL_GetTick>
 8005644:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005648:	f7fb fbd6 	bl	8000df8 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b64      	cmp	r3, #100	@ 0x64
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e1a2      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800565a:	4b12      	ldr	r3, [pc, #72]	@ (80056a4 <HAL_RCC_OscConfig+0x4a8>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005662:	2b00      	cmp	r3, #0
 8005664:	d0f0      	beq.n	8005648 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d106      	bne.n	800567c <HAL_RCC_OscConfig+0x480>
 800566e:	4b0c      	ldr	r3, [pc, #48]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 8005670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005672:	4a0b      	ldr	r2, [pc, #44]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 8005674:	f043 0301 	orr.w	r3, r3, #1
 8005678:	6713      	str	r3, [r2, #112]	@ 0x70
 800567a:	e032      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e6>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d111      	bne.n	80056a8 <HAL_RCC_OscConfig+0x4ac>
 8005684:	4b06      	ldr	r3, [pc, #24]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 8005686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005688:	4a05      	ldr	r2, [pc, #20]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 800568a:	f023 0301 	bic.w	r3, r3, #1
 800568e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005690:	4b03      	ldr	r3, [pc, #12]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 8005692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005694:	4a02      	ldr	r2, [pc, #8]	@ (80056a0 <HAL_RCC_OscConfig+0x4a4>)
 8005696:	f023 0304 	bic.w	r3, r3, #4
 800569a:	6713      	str	r3, [r2, #112]	@ 0x70
 800569c:	e021      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e6>
 800569e:	bf00      	nop
 80056a0:	58024400 	.word	0x58024400
 80056a4:	58024800 	.word	0x58024800
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	2b05      	cmp	r3, #5
 80056ae:	d10c      	bne.n	80056ca <HAL_RCC_OscConfig+0x4ce>
 80056b0:	4b83      	ldr	r3, [pc, #524]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 80056b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b4:	4a82      	ldr	r2, [pc, #520]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 80056b6:	f043 0304 	orr.w	r3, r3, #4
 80056ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80056bc:	4b80      	ldr	r3, [pc, #512]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 80056be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c0:	4a7f      	ldr	r2, [pc, #508]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 80056c2:	f043 0301 	orr.w	r3, r3, #1
 80056c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80056c8:	e00b      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e6>
 80056ca:	4b7d      	ldr	r3, [pc, #500]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 80056cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ce:	4a7c      	ldr	r2, [pc, #496]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 80056d0:	f023 0301 	bic.w	r3, r3, #1
 80056d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80056d6:	4b7a      	ldr	r3, [pc, #488]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 80056d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056da:	4a79      	ldr	r2, [pc, #484]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 80056dc:	f023 0304 	bic.w	r3, r3, #4
 80056e0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d015      	beq.n	8005716 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ea:	f7fb fb85 	bl	8000df8 <HAL_GetTick>
 80056ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056f0:	e00a      	b.n	8005708 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056f2:	f7fb fb81 	bl	8000df8 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005700:	4293      	cmp	r3, r2
 8005702:	d901      	bls.n	8005708 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e14b      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005708:	4b6d      	ldr	r3, [pc, #436]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 800570a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0ee      	beq.n	80056f2 <HAL_RCC_OscConfig+0x4f6>
 8005714:	e014      	b.n	8005740 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005716:	f7fb fb6f 	bl	8000df8 <HAL_GetTick>
 800571a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800571c:	e00a      	b.n	8005734 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800571e:	f7fb fb6b 	bl	8000df8 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	f241 3288 	movw	r2, #5000	@ 0x1388
 800572c:	4293      	cmp	r3, r2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e135      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005734:	4b62      	ldr	r3, [pc, #392]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 8005736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1ee      	bne.n	800571e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 812a 	beq.w	800599e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800574a:	4b5d      	ldr	r3, [pc, #372]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005752:	2b18      	cmp	r3, #24
 8005754:	f000 80ba 	beq.w	80058cc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575c:	2b02      	cmp	r3, #2
 800575e:	f040 8095 	bne.w	800588c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005762:	4b57      	ldr	r3, [pc, #348]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a56      	ldr	r2, [pc, #344]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 8005768:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800576c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576e:	f7fb fb43 	bl	8000df8 <HAL_GetTick>
 8005772:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005774:	e008      	b.n	8005788 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005776:	f7fb fb3f 	bl	8000df8 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	d901      	bls.n	8005788 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e10b      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005788:	4b4d      	ldr	r3, [pc, #308]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1f0      	bne.n	8005776 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005794:	4b4a      	ldr	r3, [pc, #296]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 8005796:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005798:	4b4a      	ldr	r3, [pc, #296]	@ (80058c4 <HAL_RCC_OscConfig+0x6c8>)
 800579a:	4013      	ands	r3, r2
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80057a4:	0112      	lsls	r2, r2, #4
 80057a6:	430a      	orrs	r2, r1
 80057a8:	4945      	ldr	r1, [pc, #276]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	628b      	str	r3, [r1, #40]	@ 0x28
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b2:	3b01      	subs	r3, #1
 80057b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057bc:	3b01      	subs	r3, #1
 80057be:	025b      	lsls	r3, r3, #9
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c8:	3b01      	subs	r3, #1
 80057ca:	041b      	lsls	r3, r3, #16
 80057cc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80057d0:	431a      	orrs	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d6:	3b01      	subs	r3, #1
 80057d8:	061b      	lsls	r3, r3, #24
 80057da:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80057de:	4938      	ldr	r1, [pc, #224]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80057e4:	4b36      	ldr	r3, [pc, #216]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 80057e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e8:	4a35      	ldr	r2, [pc, #212]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 80057ea:	f023 0301 	bic.w	r3, r3, #1
 80057ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057f0:	4b33      	ldr	r3, [pc, #204]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 80057f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057f4:	4b34      	ldr	r3, [pc, #208]	@ (80058c8 <HAL_RCC_OscConfig+0x6cc>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80057fc:	00d2      	lsls	r2, r2, #3
 80057fe:	4930      	ldr	r1, [pc, #192]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 8005800:	4313      	orrs	r3, r2
 8005802:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005804:	4b2e      	ldr	r3, [pc, #184]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 8005806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005808:	f023 020c 	bic.w	r2, r3, #12
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005810:	492b      	ldr	r1, [pc, #172]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 8005812:	4313      	orrs	r3, r2
 8005814:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005816:	4b2a      	ldr	r3, [pc, #168]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 8005818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581a:	f023 0202 	bic.w	r2, r3, #2
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005822:	4927      	ldr	r1, [pc, #156]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 8005824:	4313      	orrs	r3, r2
 8005826:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005828:	4b25      	ldr	r3, [pc, #148]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 800582a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582c:	4a24      	ldr	r2, [pc, #144]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 800582e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005832:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005834:	4b22      	ldr	r3, [pc, #136]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 8005836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005838:	4a21      	ldr	r2, [pc, #132]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 800583a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800583e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005840:	4b1f      	ldr	r3, [pc, #124]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 8005842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005844:	4a1e      	ldr	r2, [pc, #120]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 8005846:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800584a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800584c:	4b1c      	ldr	r3, [pc, #112]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 800584e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005850:	4a1b      	ldr	r2, [pc, #108]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 8005852:	f043 0301 	orr.w	r3, r3, #1
 8005856:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005858:	4b19      	ldr	r3, [pc, #100]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a18      	ldr	r2, [pc, #96]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 800585e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005864:	f7fb fac8 	bl	8000df8 <HAL_GetTick>
 8005868:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800586a:	e008      	b.n	800587e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800586c:	f7fb fac4 	bl	8000df8 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b02      	cmp	r3, #2
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e090      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800587e:	4b10      	ldr	r3, [pc, #64]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0f0      	beq.n	800586c <HAL_RCC_OscConfig+0x670>
 800588a:	e088      	b.n	800599e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800588c:	4b0c      	ldr	r3, [pc, #48]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a0b      	ldr	r2, [pc, #44]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 8005892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005898:	f7fb faae 	bl	8000df8 <HAL_GetTick>
 800589c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058a0:	f7fb faaa 	bl	8000df8 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e076      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058b2:	4b03      	ldr	r3, [pc, #12]	@ (80058c0 <HAL_RCC_OscConfig+0x6c4>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1f0      	bne.n	80058a0 <HAL_RCC_OscConfig+0x6a4>
 80058be:	e06e      	b.n	800599e <HAL_RCC_OscConfig+0x7a2>
 80058c0:	58024400 	.word	0x58024400
 80058c4:	fffffc0c 	.word	0xfffffc0c
 80058c8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80058cc:	4b36      	ldr	r3, [pc, #216]	@ (80059a8 <HAL_RCC_OscConfig+0x7ac>)
 80058ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80058d2:	4b35      	ldr	r3, [pc, #212]	@ (80059a8 <HAL_RCC_OscConfig+0x7ac>)
 80058d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d031      	beq.n	8005944 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f003 0203 	and.w	r2, r3, #3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d12a      	bne.n	8005944 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	091b      	lsrs	r3, r3, #4
 80058f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d122      	bne.n	8005944 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005908:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800590a:	429a      	cmp	r2, r3
 800590c:	d11a      	bne.n	8005944 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	0a5b      	lsrs	r3, r3, #9
 8005912:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800591a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800591c:	429a      	cmp	r2, r3
 800591e:	d111      	bne.n	8005944 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	0c1b      	lsrs	r3, r3, #16
 8005924:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800592c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800592e:	429a      	cmp	r2, r3
 8005930:	d108      	bne.n	8005944 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	0e1b      	lsrs	r3, r3, #24
 8005936:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800593e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005940:	429a      	cmp	r2, r3
 8005942:	d001      	beq.n	8005948 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e02b      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005948:	4b17      	ldr	r3, [pc, #92]	@ (80059a8 <HAL_RCC_OscConfig+0x7ac>)
 800594a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800594c:	08db      	lsrs	r3, r3, #3
 800594e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005952:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	429a      	cmp	r2, r3
 800595c:	d01f      	beq.n	800599e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800595e:	4b12      	ldr	r3, [pc, #72]	@ (80059a8 <HAL_RCC_OscConfig+0x7ac>)
 8005960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005962:	4a11      	ldr	r2, [pc, #68]	@ (80059a8 <HAL_RCC_OscConfig+0x7ac>)
 8005964:	f023 0301 	bic.w	r3, r3, #1
 8005968:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800596a:	f7fb fa45 	bl	8000df8 <HAL_GetTick>
 800596e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005970:	bf00      	nop
 8005972:	f7fb fa41 	bl	8000df8 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597a:	4293      	cmp	r3, r2
 800597c:	d0f9      	beq.n	8005972 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800597e:	4b0a      	ldr	r3, [pc, #40]	@ (80059a8 <HAL_RCC_OscConfig+0x7ac>)
 8005980:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005982:	4b0a      	ldr	r3, [pc, #40]	@ (80059ac <HAL_RCC_OscConfig+0x7b0>)
 8005984:	4013      	ands	r3, r2
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800598a:	00d2      	lsls	r2, r2, #3
 800598c:	4906      	ldr	r1, [pc, #24]	@ (80059a8 <HAL_RCC_OscConfig+0x7ac>)
 800598e:	4313      	orrs	r3, r2
 8005990:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005992:	4b05      	ldr	r3, [pc, #20]	@ (80059a8 <HAL_RCC_OscConfig+0x7ac>)
 8005994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005996:	4a04      	ldr	r2, [pc, #16]	@ (80059a8 <HAL_RCC_OscConfig+0x7ac>)
 8005998:	f043 0301 	orr.w	r3, r3, #1
 800599c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3730      	adds	r7, #48	@ 0x30
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	58024400 	.word	0x58024400
 80059ac:	ffff0007 	.word	0xffff0007

080059b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e19c      	b.n	8005cfe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059c4:	4b8a      	ldr	r3, [pc, #552]	@ (8005bf0 <HAL_RCC_ClockConfig+0x240>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 030f 	and.w	r3, r3, #15
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d910      	bls.n	80059f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059d2:	4b87      	ldr	r3, [pc, #540]	@ (8005bf0 <HAL_RCC_ClockConfig+0x240>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f023 020f 	bic.w	r2, r3, #15
 80059da:	4985      	ldr	r1, [pc, #532]	@ (8005bf0 <HAL_RCC_ClockConfig+0x240>)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	4313      	orrs	r3, r2
 80059e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059e2:	4b83      	ldr	r3, [pc, #524]	@ (8005bf0 <HAL_RCC_ClockConfig+0x240>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 030f 	and.w	r3, r3, #15
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d001      	beq.n	80059f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e184      	b.n	8005cfe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d010      	beq.n	8005a22 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	691a      	ldr	r2, [r3, #16]
 8005a04:	4b7b      	ldr	r3, [pc, #492]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d908      	bls.n	8005a22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a10:	4b78      	ldr	r3, [pc, #480]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	4975      	ldr	r1, [pc, #468]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0308 	and.w	r3, r3, #8
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d010      	beq.n	8005a50 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	695a      	ldr	r2, [r3, #20]
 8005a32:	4b70      	ldr	r3, [pc, #448]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d908      	bls.n	8005a50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a3e:	4b6d      	ldr	r3, [pc, #436]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	496a      	ldr	r1, [pc, #424]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0310 	and.w	r3, r3, #16
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d010      	beq.n	8005a7e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	699a      	ldr	r2, [r3, #24]
 8005a60:	4b64      	ldr	r3, [pc, #400]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d908      	bls.n	8005a7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a6c:	4b61      	ldr	r3, [pc, #388]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	495e      	ldr	r1, [pc, #376]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d010      	beq.n	8005aac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	69da      	ldr	r2, [r3, #28]
 8005a8e:	4b59      	ldr	r3, [pc, #356]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d908      	bls.n	8005aac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a9a:	4b56      	ldr	r3, [pc, #344]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	4953      	ldr	r1, [pc, #332]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d010      	beq.n	8005ada <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	4b4d      	ldr	r3, [pc, #308]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d908      	bls.n	8005ada <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ac8:	4b4a      	ldr	r3, [pc, #296]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	f023 020f 	bic.w	r2, r3, #15
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	4947      	ldr	r1, [pc, #284]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d055      	beq.n	8005b92 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005ae6:	4b43      	ldr	r3, [pc, #268]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	4940      	ldr	r1, [pc, #256]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d107      	bne.n	8005b10 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b00:	4b3c      	ldr	r3, [pc, #240]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d121      	bne.n	8005b50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e0f6      	b.n	8005cfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	2b03      	cmp	r3, #3
 8005b16:	d107      	bne.n	8005b28 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b18:	4b36      	ldr	r3, [pc, #216]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d115      	bne.n	8005b50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e0ea      	b.n	8005cfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d107      	bne.n	8005b40 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b30:	4b30      	ldr	r3, [pc, #192]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d109      	bne.n	8005b50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e0de      	b.n	8005cfe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b40:	4b2c      	ldr	r3, [pc, #176]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e0d6      	b.n	8005cfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b50:	4b28      	ldr	r3, [pc, #160]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	f023 0207 	bic.w	r2, r3, #7
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	4925      	ldr	r1, [pc, #148]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b62:	f7fb f949 	bl	8000df8 <HAL_GetTick>
 8005b66:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b68:	e00a      	b.n	8005b80 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b6a:	f7fb f945 	bl	8000df8 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d901      	bls.n	8005b80 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e0be      	b.n	8005cfe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b80:	4b1c      	ldr	r3, [pc, #112]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	00db      	lsls	r3, r3, #3
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d1eb      	bne.n	8005b6a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d010      	beq.n	8005bc0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	4b14      	ldr	r3, [pc, #80]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d208      	bcs.n	8005bc0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bae:	4b11      	ldr	r3, [pc, #68]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	f023 020f 	bic.w	r2, r3, #15
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	490e      	ldr	r1, [pc, #56]	@ (8005bf4 <HAL_RCC_ClockConfig+0x244>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf0 <HAL_RCC_ClockConfig+0x240>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 030f 	and.w	r3, r3, #15
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d214      	bcs.n	8005bf8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bce:	4b08      	ldr	r3, [pc, #32]	@ (8005bf0 <HAL_RCC_ClockConfig+0x240>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f023 020f 	bic.w	r2, r3, #15
 8005bd6:	4906      	ldr	r1, [pc, #24]	@ (8005bf0 <HAL_RCC_ClockConfig+0x240>)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bde:	4b04      	ldr	r3, [pc, #16]	@ (8005bf0 <HAL_RCC_ClockConfig+0x240>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 030f 	and.w	r3, r3, #15
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d005      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e086      	b.n	8005cfe <HAL_RCC_ClockConfig+0x34e>
 8005bf0:	52002000 	.word	0x52002000
 8005bf4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0304 	and.w	r3, r3, #4
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d010      	beq.n	8005c26 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691a      	ldr	r2, [r3, #16]
 8005c08:	4b3f      	ldr	r3, [pc, #252]	@ (8005d08 <HAL_RCC_ClockConfig+0x358>)
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d208      	bcs.n	8005c26 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c14:	4b3c      	ldr	r3, [pc, #240]	@ (8005d08 <HAL_RCC_ClockConfig+0x358>)
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	4939      	ldr	r1, [pc, #228]	@ (8005d08 <HAL_RCC_ClockConfig+0x358>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d010      	beq.n	8005c54 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	695a      	ldr	r2, [r3, #20]
 8005c36:	4b34      	ldr	r3, [pc, #208]	@ (8005d08 <HAL_RCC_ClockConfig+0x358>)
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d208      	bcs.n	8005c54 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c42:	4b31      	ldr	r3, [pc, #196]	@ (8005d08 <HAL_RCC_ClockConfig+0x358>)
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	492e      	ldr	r1, [pc, #184]	@ (8005d08 <HAL_RCC_ClockConfig+0x358>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0310 	and.w	r3, r3, #16
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d010      	beq.n	8005c82 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	699a      	ldr	r2, [r3, #24]
 8005c64:	4b28      	ldr	r3, [pc, #160]	@ (8005d08 <HAL_RCC_ClockConfig+0x358>)
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d208      	bcs.n	8005c82 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c70:	4b25      	ldr	r3, [pc, #148]	@ (8005d08 <HAL_RCC_ClockConfig+0x358>)
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	4922      	ldr	r1, [pc, #136]	@ (8005d08 <HAL_RCC_ClockConfig+0x358>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0320 	and.w	r3, r3, #32
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d010      	beq.n	8005cb0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	69da      	ldr	r2, [r3, #28]
 8005c92:	4b1d      	ldr	r3, [pc, #116]	@ (8005d08 <HAL_RCC_ClockConfig+0x358>)
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d208      	bcs.n	8005cb0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8005d08 <HAL_RCC_ClockConfig+0x358>)
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	4917      	ldr	r1, [pc, #92]	@ (8005d08 <HAL_RCC_ClockConfig+0x358>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005cb0:	f000 f834 	bl	8005d1c <HAL_RCC_GetSysClockFreq>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	4b14      	ldr	r3, [pc, #80]	@ (8005d08 <HAL_RCC_ClockConfig+0x358>)
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	0a1b      	lsrs	r3, r3, #8
 8005cbc:	f003 030f 	and.w	r3, r3, #15
 8005cc0:	4912      	ldr	r1, [pc, #72]	@ (8005d0c <HAL_RCC_ClockConfig+0x35c>)
 8005cc2:	5ccb      	ldrb	r3, [r1, r3]
 8005cc4:	f003 031f 	and.w	r3, r3, #31
 8005cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ccc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005cce:	4b0e      	ldr	r3, [pc, #56]	@ (8005d08 <HAL_RCC_ClockConfig+0x358>)
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	4a0d      	ldr	r2, [pc, #52]	@ (8005d0c <HAL_RCC_ClockConfig+0x35c>)
 8005cd8:	5cd3      	ldrb	r3, [r2, r3]
 8005cda:	f003 031f 	and.w	r3, r3, #31
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8005d10 <HAL_RCC_ClockConfig+0x360>)
 8005ce6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8005d14 <HAL_RCC_ClockConfig+0x364>)
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005cee:	4b0a      	ldr	r3, [pc, #40]	@ (8005d18 <HAL_RCC_ClockConfig+0x368>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fb f836 	bl	8000d64 <HAL_InitTick>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3718      	adds	r7, #24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	58024400 	.word	0x58024400
 8005d0c:	08008438 	.word	0x08008438
 8005d10:	24000004 	.word	0x24000004
 8005d14:	24000000 	.word	0x24000000
 8005d18:	24000008 	.word	0x24000008

08005d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b089      	sub	sp, #36	@ 0x24
 8005d20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d22:	4bb3      	ldr	r3, [pc, #716]	@ (8005ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d2a:	2b18      	cmp	r3, #24
 8005d2c:	f200 8155 	bhi.w	8005fda <HAL_RCC_GetSysClockFreq+0x2be>
 8005d30:	a201      	add	r2, pc, #4	@ (adr r2, 8005d38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d36:	bf00      	nop
 8005d38:	08005d9d 	.word	0x08005d9d
 8005d3c:	08005fdb 	.word	0x08005fdb
 8005d40:	08005fdb 	.word	0x08005fdb
 8005d44:	08005fdb 	.word	0x08005fdb
 8005d48:	08005fdb 	.word	0x08005fdb
 8005d4c:	08005fdb 	.word	0x08005fdb
 8005d50:	08005fdb 	.word	0x08005fdb
 8005d54:	08005fdb 	.word	0x08005fdb
 8005d58:	08005dc3 	.word	0x08005dc3
 8005d5c:	08005fdb 	.word	0x08005fdb
 8005d60:	08005fdb 	.word	0x08005fdb
 8005d64:	08005fdb 	.word	0x08005fdb
 8005d68:	08005fdb 	.word	0x08005fdb
 8005d6c:	08005fdb 	.word	0x08005fdb
 8005d70:	08005fdb 	.word	0x08005fdb
 8005d74:	08005fdb 	.word	0x08005fdb
 8005d78:	08005dc9 	.word	0x08005dc9
 8005d7c:	08005fdb 	.word	0x08005fdb
 8005d80:	08005fdb 	.word	0x08005fdb
 8005d84:	08005fdb 	.word	0x08005fdb
 8005d88:	08005fdb 	.word	0x08005fdb
 8005d8c:	08005fdb 	.word	0x08005fdb
 8005d90:	08005fdb 	.word	0x08005fdb
 8005d94:	08005fdb 	.word	0x08005fdb
 8005d98:	08005dcf 	.word	0x08005dcf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d9c:	4b94      	ldr	r3, [pc, #592]	@ (8005ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0320 	and.w	r3, r3, #32
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d009      	beq.n	8005dbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005da8:	4b91      	ldr	r3, [pc, #580]	@ (8005ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	08db      	lsrs	r3, r3, #3
 8005dae:	f003 0303 	and.w	r3, r3, #3
 8005db2:	4a90      	ldr	r2, [pc, #576]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005db4:	fa22 f303 	lsr.w	r3, r2, r3
 8005db8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005dba:	e111      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005dbc:	4b8d      	ldr	r3, [pc, #564]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005dbe:	61bb      	str	r3, [r7, #24]
      break;
 8005dc0:	e10e      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005dc2:	4b8d      	ldr	r3, [pc, #564]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005dc4:	61bb      	str	r3, [r7, #24]
      break;
 8005dc6:	e10b      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005dc8:	4b8c      	ldr	r3, [pc, #560]	@ (8005ffc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005dca:	61bb      	str	r3, [r7, #24]
      break;
 8005dcc:	e108      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005dce:	4b88      	ldr	r3, [pc, #544]	@ (8005ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd2:	f003 0303 	and.w	r3, r3, #3
 8005dd6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005dd8:	4b85      	ldr	r3, [pc, #532]	@ (8005ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ddc:	091b      	lsrs	r3, r3, #4
 8005dde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005de2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005de4:	4b82      	ldr	r3, [pc, #520]	@ (8005ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005dee:	4b80      	ldr	r3, [pc, #512]	@ (8005ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005df2:	08db      	lsrs	r3, r3, #3
 8005df4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	fb02 f303 	mul.w	r3, r2, r3
 8005dfe:	ee07 3a90 	vmov	s15, r3
 8005e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e06:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 80e1 	beq.w	8005fd4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	f000 8083 	beq.w	8005f20 <HAL_RCC_GetSysClockFreq+0x204>
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	f200 80a1 	bhi.w	8005f64 <HAL_RCC_GetSysClockFreq+0x248>
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d003      	beq.n	8005e30 <HAL_RCC_GetSysClockFreq+0x114>
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d056      	beq.n	8005edc <HAL_RCC_GetSysClockFreq+0x1c0>
 8005e2e:	e099      	b.n	8005f64 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e30:	4b6f      	ldr	r3, [pc, #444]	@ (8005ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0320 	and.w	r3, r3, #32
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d02d      	beq.n	8005e98 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e3c:	4b6c      	ldr	r3, [pc, #432]	@ (8005ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	08db      	lsrs	r3, r3, #3
 8005e42:	f003 0303 	and.w	r3, r3, #3
 8005e46:	4a6b      	ldr	r2, [pc, #428]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e48:	fa22 f303 	lsr.w	r3, r2, r3
 8005e4c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	ee07 3a90 	vmov	s15, r3
 8005e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e66:	4b62      	ldr	r3, [pc, #392]	@ (8005ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6e:	ee07 3a90 	vmov	s15, r3
 8005e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e76:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e7a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e92:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005e96:	e087      	b.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006004 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eaa:	4b51      	ldr	r3, [pc, #324]	@ (8005ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb2:	ee07 3a90 	vmov	s15, r3
 8005eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ebe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005eda:	e065      	b.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006008 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eee:	4b40      	ldr	r3, [pc, #256]	@ (8005ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f02:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f1e:	e043      	b.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	ee07 3a90 	vmov	s15, r3
 8005f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800600c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f32:	4b2f      	ldr	r3, [pc, #188]	@ (8005ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3a:	ee07 3a90 	vmov	s15, r3
 8005f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f46:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f62:	e021      	b.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	ee07 3a90 	vmov	s15, r3
 8005f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f6e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006008 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f76:	4b1e      	ldr	r3, [pc, #120]	@ (8005ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f7e:	ee07 3a90 	vmov	s15, r3
 8005f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f86:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f8a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005fa6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005fa8:	4b11      	ldr	r3, [pc, #68]	@ (8005ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fac:	0a5b      	lsrs	r3, r3, #9
 8005fae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	ee07 3a90 	vmov	s15, r3
 8005fbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005fc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fcc:	ee17 3a90 	vmov	r3, s15
 8005fd0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005fd2:	e005      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	61bb      	str	r3, [r7, #24]
      break;
 8005fd8:	e002      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005fda:	4b07      	ldr	r3, [pc, #28]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005fdc:	61bb      	str	r3, [r7, #24]
      break;
 8005fde:	bf00      	nop
  }

  return sysclockfreq;
 8005fe0:	69bb      	ldr	r3, [r7, #24]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3724      	adds	r7, #36	@ 0x24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	58024400 	.word	0x58024400
 8005ff4:	03d09000 	.word	0x03d09000
 8005ff8:	003d0900 	.word	0x003d0900
 8005ffc:	017d7840 	.word	0x017d7840
 8006000:	46000000 	.word	0x46000000
 8006004:	4c742400 	.word	0x4c742400
 8006008:	4a742400 	.word	0x4a742400
 800600c:	4bbebc20 	.word	0x4bbebc20

08006010 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006014:	b0c6      	sub	sp, #280	@ 0x118
 8006016:	af00      	add	r7, sp, #0
 8006018:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800601c:	2300      	movs	r3, #0
 800601e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006022:	2300      	movs	r3, #0
 8006024:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006030:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006034:	2500      	movs	r5, #0
 8006036:	ea54 0305 	orrs.w	r3, r4, r5
 800603a:	d049      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800603c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006040:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006042:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006046:	d02f      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006048:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800604c:	d828      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800604e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006052:	d01a      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006054:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006058:	d822      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800605e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006062:	d007      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006064:	e01c      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006066:	4bab      	ldr	r3, [pc, #684]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606a:	4aaa      	ldr	r2, [pc, #680]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800606c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006070:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006072:	e01a      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006078:	3308      	adds	r3, #8
 800607a:	2102      	movs	r1, #2
 800607c:	4618      	mov	r0, r3
 800607e:	f001 f967 	bl	8007350 <RCCEx_PLL2_Config>
 8006082:	4603      	mov	r3, r0
 8006084:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006088:	e00f      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800608a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800608e:	3328      	adds	r3, #40	@ 0x28
 8006090:	2102      	movs	r1, #2
 8006092:	4618      	mov	r0, r3
 8006094:	f001 fa0e 	bl	80074b4 <RCCEx_PLL3_Config>
 8006098:	4603      	mov	r3, r0
 800609a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800609e:	e004      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060a6:	e000      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80060a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10a      	bne.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80060b2:	4b98      	ldr	r3, [pc, #608]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060b6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80060ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060c0:	4a94      	ldr	r2, [pc, #592]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060c2:	430b      	orrs	r3, r1
 80060c4:	6513      	str	r3, [r2, #80]	@ 0x50
 80060c6:	e003      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80060d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80060dc:	f04f 0900 	mov.w	r9, #0
 80060e0:	ea58 0309 	orrs.w	r3, r8, r9
 80060e4:	d047      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80060e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ec:	2b04      	cmp	r3, #4
 80060ee:	d82a      	bhi.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80060f0:	a201      	add	r2, pc, #4	@ (adr r2, 80060f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80060f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f6:	bf00      	nop
 80060f8:	0800610d 	.word	0x0800610d
 80060fc:	0800611b 	.word	0x0800611b
 8006100:	08006131 	.word	0x08006131
 8006104:	0800614f 	.word	0x0800614f
 8006108:	0800614f 	.word	0x0800614f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800610c:	4b81      	ldr	r3, [pc, #516]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800610e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006110:	4a80      	ldr	r2, [pc, #512]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006116:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006118:	e01a      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800611a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800611e:	3308      	adds	r3, #8
 8006120:	2100      	movs	r1, #0
 8006122:	4618      	mov	r0, r3
 8006124:	f001 f914 	bl	8007350 <RCCEx_PLL2_Config>
 8006128:	4603      	mov	r3, r0
 800612a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800612e:	e00f      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006134:	3328      	adds	r3, #40	@ 0x28
 8006136:	2100      	movs	r1, #0
 8006138:	4618      	mov	r0, r3
 800613a:	f001 f9bb 	bl	80074b4 <RCCEx_PLL3_Config>
 800613e:	4603      	mov	r3, r0
 8006140:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006144:	e004      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800614c:	e000      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800614e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006150:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10a      	bne.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006158:	4b6e      	ldr	r3, [pc, #440]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800615a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800615c:	f023 0107 	bic.w	r1, r3, #7
 8006160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006166:	4a6b      	ldr	r2, [pc, #428]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006168:	430b      	orrs	r3, r1
 800616a:	6513      	str	r3, [r2, #80]	@ 0x50
 800616c:	e003      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800616e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006172:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006182:	f04f 0b00 	mov.w	fp, #0
 8006186:	ea5a 030b 	orrs.w	r3, sl, fp
 800618a:	d05b      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800618c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006190:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006194:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006198:	d03b      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800619a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800619e:	d834      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80061a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061a4:	d037      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80061a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061aa:	d82e      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80061ac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80061b0:	d033      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80061b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80061b6:	d828      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80061b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061bc:	d01a      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80061be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061c2:	d822      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80061c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061cc:	d007      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80061ce:	e01c      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061d0:	4b50      	ldr	r3, [pc, #320]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d4:	4a4f      	ldr	r2, [pc, #316]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061dc:	e01e      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e2:	3308      	adds	r3, #8
 80061e4:	2100      	movs	r1, #0
 80061e6:	4618      	mov	r0, r3
 80061e8:	f001 f8b2 	bl	8007350 <RCCEx_PLL2_Config>
 80061ec:	4603      	mov	r3, r0
 80061ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80061f2:	e013      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f8:	3328      	adds	r3, #40	@ 0x28
 80061fa:	2100      	movs	r1, #0
 80061fc:	4618      	mov	r0, r3
 80061fe:	f001 f959 	bl	80074b4 <RCCEx_PLL3_Config>
 8006202:	4603      	mov	r3, r0
 8006204:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006208:	e008      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006210:	e004      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006212:	bf00      	nop
 8006214:	e002      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006216:	bf00      	nop
 8006218:	e000      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800621a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800621c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10b      	bne.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006224:	4b3b      	ldr	r3, [pc, #236]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006228:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800622c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006230:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006234:	4a37      	ldr	r2, [pc, #220]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006236:	430b      	orrs	r3, r1
 8006238:	6593      	str	r3, [r2, #88]	@ 0x58
 800623a:	e003      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800623c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006240:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006250:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006254:	2300      	movs	r3, #0
 8006256:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800625a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800625e:	460b      	mov	r3, r1
 8006260:	4313      	orrs	r3, r2
 8006262:	d05d      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006268:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800626c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006270:	d03b      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006272:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006276:	d834      	bhi.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006278:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800627c:	d037      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800627e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006282:	d82e      	bhi.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006284:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006288:	d033      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800628a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800628e:	d828      	bhi.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006290:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006294:	d01a      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006296:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800629a:	d822      	bhi.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800629c:	2b00      	cmp	r3, #0
 800629e:	d003      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80062a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062a4:	d007      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80062a6:	e01c      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062a8:	4b1a      	ldr	r3, [pc, #104]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ac:	4a19      	ldr	r2, [pc, #100]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062b4:	e01e      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ba:	3308      	adds	r3, #8
 80062bc:	2100      	movs	r1, #0
 80062be:	4618      	mov	r0, r3
 80062c0:	f001 f846 	bl	8007350 <RCCEx_PLL2_Config>
 80062c4:	4603      	mov	r3, r0
 80062c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80062ca:	e013      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d0:	3328      	adds	r3, #40	@ 0x28
 80062d2:	2100      	movs	r1, #0
 80062d4:	4618      	mov	r0, r3
 80062d6:	f001 f8ed 	bl	80074b4 <RCCEx_PLL3_Config>
 80062da:	4603      	mov	r3, r0
 80062dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062e0:	e008      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062e8:	e004      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80062ea:	bf00      	nop
 80062ec:	e002      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80062ee:	bf00      	nop
 80062f0:	e000      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80062f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10d      	bne.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80062fc:	4b05      	ldr	r3, [pc, #20]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006300:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006308:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800630c:	4a01      	ldr	r2, [pc, #4]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800630e:	430b      	orrs	r3, r1
 8006310:	6593      	str	r3, [r2, #88]	@ 0x58
 8006312:	e005      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006314:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006318:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800631c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006328:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800632c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006330:	2300      	movs	r3, #0
 8006332:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006336:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800633a:	460b      	mov	r3, r1
 800633c:	4313      	orrs	r3, r2
 800633e:	d03a      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006346:	2b30      	cmp	r3, #48	@ 0x30
 8006348:	d01f      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800634a:	2b30      	cmp	r3, #48	@ 0x30
 800634c:	d819      	bhi.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800634e:	2b20      	cmp	r3, #32
 8006350:	d00c      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006352:	2b20      	cmp	r3, #32
 8006354:	d815      	bhi.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006356:	2b00      	cmp	r3, #0
 8006358:	d019      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800635a:	2b10      	cmp	r3, #16
 800635c:	d111      	bne.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800635e:	4baa      	ldr	r3, [pc, #680]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006362:	4aa9      	ldr	r2, [pc, #676]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006368:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800636a:	e011      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800636c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006370:	3308      	adds	r3, #8
 8006372:	2102      	movs	r1, #2
 8006374:	4618      	mov	r0, r3
 8006376:	f000 ffeb 	bl	8007350 <RCCEx_PLL2_Config>
 800637a:	4603      	mov	r3, r0
 800637c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006380:	e006      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006388:	e002      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800638a:	bf00      	nop
 800638c:	e000      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800638e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006390:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10a      	bne.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006398:	4b9b      	ldr	r3, [pc, #620]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800639a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800639c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80063a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063a6:	4a98      	ldr	r2, [pc, #608]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063a8:	430b      	orrs	r3, r1
 80063aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80063ac:	e003      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80063b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80063c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80063c6:	2300      	movs	r3, #0
 80063c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80063cc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80063d0:	460b      	mov	r3, r1
 80063d2:	4313      	orrs	r3, r2
 80063d4:	d051      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80063d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063e0:	d035      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80063e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063e6:	d82e      	bhi.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80063e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063ec:	d031      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80063ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063f2:	d828      	bhi.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80063f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063f8:	d01a      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80063fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063fe:	d822      	bhi.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006400:	2b00      	cmp	r3, #0
 8006402:	d003      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006404:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006408:	d007      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800640a:	e01c      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800640c:	4b7e      	ldr	r3, [pc, #504]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800640e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006410:	4a7d      	ldr	r2, [pc, #500]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006416:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006418:	e01c      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800641a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800641e:	3308      	adds	r3, #8
 8006420:	2100      	movs	r1, #0
 8006422:	4618      	mov	r0, r3
 8006424:	f000 ff94 	bl	8007350 <RCCEx_PLL2_Config>
 8006428:	4603      	mov	r3, r0
 800642a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800642e:	e011      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006434:	3328      	adds	r3, #40	@ 0x28
 8006436:	2100      	movs	r1, #0
 8006438:	4618      	mov	r0, r3
 800643a:	f001 f83b 	bl	80074b4 <RCCEx_PLL3_Config>
 800643e:	4603      	mov	r3, r0
 8006440:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006444:	e006      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800644c:	e002      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800644e:	bf00      	nop
 8006450:	e000      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006452:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006454:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10a      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800645c:	4b6a      	ldr	r3, [pc, #424]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800645e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006460:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800646a:	4a67      	ldr	r2, [pc, #412]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800646c:	430b      	orrs	r3, r1
 800646e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006470:	e003      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006472:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006476:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800647a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006482:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006486:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800648a:	2300      	movs	r3, #0
 800648c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006490:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006494:	460b      	mov	r3, r1
 8006496:	4313      	orrs	r3, r2
 8006498:	d053      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800649a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800649e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064a4:	d033      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80064a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064aa:	d82c      	bhi.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80064ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064b0:	d02f      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80064b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064b6:	d826      	bhi.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80064b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064bc:	d02b      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80064be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064c2:	d820      	bhi.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80064c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064c8:	d012      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80064ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064ce:	d81a      	bhi.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d022      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80064d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064d8:	d115      	bne.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064de:	3308      	adds	r3, #8
 80064e0:	2101      	movs	r1, #1
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 ff34 	bl	8007350 <RCCEx_PLL2_Config>
 80064e8:	4603      	mov	r3, r0
 80064ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80064ee:	e015      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f4:	3328      	adds	r3, #40	@ 0x28
 80064f6:	2101      	movs	r1, #1
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 ffdb 	bl	80074b4 <RCCEx_PLL3_Config>
 80064fe:	4603      	mov	r3, r0
 8006500:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006504:	e00a      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800650c:	e006      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800650e:	bf00      	nop
 8006510:	e004      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006512:	bf00      	nop
 8006514:	e002      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006516:	bf00      	nop
 8006518:	e000      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800651a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800651c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10a      	bne.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006524:	4b38      	ldr	r3, [pc, #224]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006528:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800652c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006532:	4a35      	ldr	r2, [pc, #212]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006534:	430b      	orrs	r3, r1
 8006536:	6513      	str	r3, [r2, #80]	@ 0x50
 8006538:	e003      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800653a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800653e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006542:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800654e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006552:	2300      	movs	r3, #0
 8006554:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006558:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800655c:	460b      	mov	r3, r1
 800655e:	4313      	orrs	r3, r2
 8006560:	d058      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006566:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800656a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800656e:	d033      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006570:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006574:	d82c      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800657a:	d02f      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800657c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006580:	d826      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006582:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006586:	d02b      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006588:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800658c:	d820      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800658e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006592:	d012      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006594:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006598:	d81a      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800659a:	2b00      	cmp	r3, #0
 800659c:	d022      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800659e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065a2:	d115      	bne.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a8:	3308      	adds	r3, #8
 80065aa:	2101      	movs	r1, #1
 80065ac:	4618      	mov	r0, r3
 80065ae:	f000 fecf 	bl	8007350 <RCCEx_PLL2_Config>
 80065b2:	4603      	mov	r3, r0
 80065b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80065b8:	e015      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065be:	3328      	adds	r3, #40	@ 0x28
 80065c0:	2101      	movs	r1, #1
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 ff76 	bl	80074b4 <RCCEx_PLL3_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80065ce:	e00a      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065d6:	e006      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80065d8:	bf00      	nop
 80065da:	e004      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80065dc:	bf00      	nop
 80065de:	e002      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80065e0:	bf00      	nop
 80065e2:	e000      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80065e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10e      	bne.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80065ee:	4b06      	ldr	r3, [pc, #24]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065f2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80065f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80065fe:	4a02      	ldr	r2, [pc, #8]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006600:	430b      	orrs	r3, r1
 8006602:	6593      	str	r3, [r2, #88]	@ 0x58
 8006604:	e006      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006606:	bf00      	nop
 8006608:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006610:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006620:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006624:	2300      	movs	r3, #0
 8006626:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800662a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800662e:	460b      	mov	r3, r1
 8006630:	4313      	orrs	r3, r2
 8006632:	d037      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006638:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800663a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800663e:	d00e      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006640:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006644:	d816      	bhi.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006646:	2b00      	cmp	r3, #0
 8006648:	d018      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800664a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800664e:	d111      	bne.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006650:	4bc4      	ldr	r3, [pc, #784]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006654:	4ac3      	ldr	r2, [pc, #780]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006656:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800665a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800665c:	e00f      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800665e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006662:	3308      	adds	r3, #8
 8006664:	2101      	movs	r1, #1
 8006666:	4618      	mov	r0, r3
 8006668:	f000 fe72 	bl	8007350 <RCCEx_PLL2_Config>
 800666c:	4603      	mov	r3, r0
 800666e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006672:	e004      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800667a:	e000      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800667c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800667e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10a      	bne.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006686:	4bb7      	ldr	r3, [pc, #732]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800668a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800668e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006694:	4ab3      	ldr	r2, [pc, #716]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006696:	430b      	orrs	r3, r1
 8006698:	6513      	str	r3, [r2, #80]	@ 0x50
 800669a:	e003      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800669c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80066a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80066b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066b4:	2300      	movs	r3, #0
 80066b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80066be:	460b      	mov	r3, r1
 80066c0:	4313      	orrs	r3, r2
 80066c2:	d039      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80066c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	d81c      	bhi.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80066ce:	a201      	add	r2, pc, #4	@ (adr r2, 80066d4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80066d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d4:	08006711 	.word	0x08006711
 80066d8:	080066e5 	.word	0x080066e5
 80066dc:	080066f3 	.word	0x080066f3
 80066e0:	08006711 	.word	0x08006711
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066e4:	4b9f      	ldr	r3, [pc, #636]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e8:	4a9e      	ldr	r2, [pc, #632]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80066f0:	e00f      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80066f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f6:	3308      	adds	r3, #8
 80066f8:	2102      	movs	r1, #2
 80066fa:	4618      	mov	r0, r3
 80066fc:	f000 fe28 	bl	8007350 <RCCEx_PLL2_Config>
 8006700:	4603      	mov	r3, r0
 8006702:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006706:	e004      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800670e:	e000      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006710:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006712:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10a      	bne.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800671a:	4b92      	ldr	r3, [pc, #584]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800671c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800671e:	f023 0103 	bic.w	r1, r3, #3
 8006722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006726:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006728:	4a8e      	ldr	r2, [pc, #568]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800672a:	430b      	orrs	r3, r1
 800672c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800672e:	e003      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006730:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006734:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006740:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006744:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006748:	2300      	movs	r3, #0
 800674a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800674e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006752:	460b      	mov	r3, r1
 8006754:	4313      	orrs	r3, r2
 8006756:	f000 8099 	beq.w	800688c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800675a:	4b83      	ldr	r3, [pc, #524]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a82      	ldr	r2, [pc, #520]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006764:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006766:	f7fa fb47 	bl	8000df8 <HAL_GetTick>
 800676a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800676e:	e00b      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006770:	f7fa fb42 	bl	8000df8 <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	2b64      	cmp	r3, #100	@ 0x64
 800677e:	d903      	bls.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006786:	e005      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006788:	4b77      	ldr	r3, [pc, #476]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006790:	2b00      	cmp	r3, #0
 8006792:	d0ed      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006794:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006798:	2b00      	cmp	r3, #0
 800679a:	d173      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800679c:	4b71      	ldr	r3, [pc, #452]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800679e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80067a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80067a8:	4053      	eors	r3, r2
 80067aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d015      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067b2:	4b6c      	ldr	r3, [pc, #432]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067ba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80067be:	4b69      	ldr	r3, [pc, #420]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067c2:	4a68      	ldr	r2, [pc, #416]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067c8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80067ca:	4b66      	ldr	r3, [pc, #408]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ce:	4a65      	ldr	r2, [pc, #404]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067d4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80067d6:	4a63      	ldr	r2, [pc, #396]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067dc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80067de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80067e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067ea:	d118      	bne.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ec:	f7fa fb04 	bl	8000df8 <HAL_GetTick>
 80067f0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067f4:	e00d      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067f6:	f7fa faff 	bl	8000df8 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006800:	1ad2      	subs	r2, r2, r3
 8006802:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006806:	429a      	cmp	r2, r3
 8006808:	d903      	bls.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006810:	e005      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006812:	4b54      	ldr	r3, [pc, #336]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0eb      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800681e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006822:	2b00      	cmp	r3, #0
 8006824:	d129      	bne.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800682a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800682e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006832:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006836:	d10e      	bne.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006838:	4b4a      	ldr	r3, [pc, #296]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006844:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006848:	091a      	lsrs	r2, r3, #4
 800684a:	4b48      	ldr	r3, [pc, #288]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800684c:	4013      	ands	r3, r2
 800684e:	4a45      	ldr	r2, [pc, #276]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006850:	430b      	orrs	r3, r1
 8006852:	6113      	str	r3, [r2, #16]
 8006854:	e005      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006856:	4b43      	ldr	r3, [pc, #268]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	4a42      	ldr	r2, [pc, #264]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800685c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006860:	6113      	str	r3, [r2, #16]
 8006862:	4b40      	ldr	r3, [pc, #256]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006864:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800686e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006872:	4a3c      	ldr	r2, [pc, #240]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006874:	430b      	orrs	r3, r1
 8006876:	6713      	str	r3, [r2, #112]	@ 0x70
 8006878:	e008      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800687a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800687e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006882:	e003      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006884:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006888:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800688c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006894:	f002 0301 	and.w	r3, r2, #1
 8006898:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800689c:	2300      	movs	r3, #0
 800689e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80068a2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80068a6:	460b      	mov	r3, r1
 80068a8:	4313      	orrs	r3, r2
 80068aa:	f000 808f 	beq.w	80069cc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80068ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068b4:	2b28      	cmp	r3, #40	@ 0x28
 80068b6:	d871      	bhi.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80068b8:	a201      	add	r2, pc, #4	@ (adr r2, 80068c0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80068ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068be:	bf00      	nop
 80068c0:	080069a5 	.word	0x080069a5
 80068c4:	0800699d 	.word	0x0800699d
 80068c8:	0800699d 	.word	0x0800699d
 80068cc:	0800699d 	.word	0x0800699d
 80068d0:	0800699d 	.word	0x0800699d
 80068d4:	0800699d 	.word	0x0800699d
 80068d8:	0800699d 	.word	0x0800699d
 80068dc:	0800699d 	.word	0x0800699d
 80068e0:	08006971 	.word	0x08006971
 80068e4:	0800699d 	.word	0x0800699d
 80068e8:	0800699d 	.word	0x0800699d
 80068ec:	0800699d 	.word	0x0800699d
 80068f0:	0800699d 	.word	0x0800699d
 80068f4:	0800699d 	.word	0x0800699d
 80068f8:	0800699d 	.word	0x0800699d
 80068fc:	0800699d 	.word	0x0800699d
 8006900:	08006987 	.word	0x08006987
 8006904:	0800699d 	.word	0x0800699d
 8006908:	0800699d 	.word	0x0800699d
 800690c:	0800699d 	.word	0x0800699d
 8006910:	0800699d 	.word	0x0800699d
 8006914:	0800699d 	.word	0x0800699d
 8006918:	0800699d 	.word	0x0800699d
 800691c:	0800699d 	.word	0x0800699d
 8006920:	080069a5 	.word	0x080069a5
 8006924:	0800699d 	.word	0x0800699d
 8006928:	0800699d 	.word	0x0800699d
 800692c:	0800699d 	.word	0x0800699d
 8006930:	0800699d 	.word	0x0800699d
 8006934:	0800699d 	.word	0x0800699d
 8006938:	0800699d 	.word	0x0800699d
 800693c:	0800699d 	.word	0x0800699d
 8006940:	080069a5 	.word	0x080069a5
 8006944:	0800699d 	.word	0x0800699d
 8006948:	0800699d 	.word	0x0800699d
 800694c:	0800699d 	.word	0x0800699d
 8006950:	0800699d 	.word	0x0800699d
 8006954:	0800699d 	.word	0x0800699d
 8006958:	0800699d 	.word	0x0800699d
 800695c:	0800699d 	.word	0x0800699d
 8006960:	080069a5 	.word	0x080069a5
 8006964:	58024400 	.word	0x58024400
 8006968:	58024800 	.word	0x58024800
 800696c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006974:	3308      	adds	r3, #8
 8006976:	2101      	movs	r1, #1
 8006978:	4618      	mov	r0, r3
 800697a:	f000 fce9 	bl	8007350 <RCCEx_PLL2_Config>
 800697e:	4603      	mov	r3, r0
 8006980:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006984:	e00f      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698a:	3328      	adds	r3, #40	@ 0x28
 800698c:	2101      	movs	r1, #1
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fd90 	bl	80074b4 <RCCEx_PLL3_Config>
 8006994:	4603      	mov	r3, r0
 8006996:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800699a:	e004      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069a2:	e000      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80069a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10a      	bne.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80069ae:	4bbf      	ldr	r3, [pc, #764]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80069b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069b2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80069b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80069bc:	4abb      	ldr	r2, [pc, #748]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80069be:	430b      	orrs	r3, r1
 80069c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80069c2:	e003      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80069cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d4:	f002 0302 	and.w	r3, r2, #2
 80069d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069dc:	2300      	movs	r3, #0
 80069de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069e2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80069e6:	460b      	mov	r3, r1
 80069e8:	4313      	orrs	r3, r2
 80069ea:	d041      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80069ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069f2:	2b05      	cmp	r3, #5
 80069f4:	d824      	bhi.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80069f6:	a201      	add	r2, pc, #4	@ (adr r2, 80069fc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80069f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fc:	08006a49 	.word	0x08006a49
 8006a00:	08006a15 	.word	0x08006a15
 8006a04:	08006a2b 	.word	0x08006a2b
 8006a08:	08006a49 	.word	0x08006a49
 8006a0c:	08006a49 	.word	0x08006a49
 8006a10:	08006a49 	.word	0x08006a49
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a18:	3308      	adds	r3, #8
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 fc97 	bl	8007350 <RCCEx_PLL2_Config>
 8006a22:	4603      	mov	r3, r0
 8006a24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a28:	e00f      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2e:	3328      	adds	r3, #40	@ 0x28
 8006a30:	2101      	movs	r1, #1
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fd3e 	bl	80074b4 <RCCEx_PLL3_Config>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a3e:	e004      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a46:	e000      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10a      	bne.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006a52:	4b96      	ldr	r3, [pc, #600]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a56:	f023 0107 	bic.w	r1, r3, #7
 8006a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a60:	4a92      	ldr	r2, [pc, #584]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a62:	430b      	orrs	r3, r1
 8006a64:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a66:	e003      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a78:	f002 0304 	and.w	r3, r2, #4
 8006a7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a80:	2300      	movs	r3, #0
 8006a82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a86:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	d044      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a98:	2b05      	cmp	r3, #5
 8006a9a:	d825      	bhi.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa2:	bf00      	nop
 8006aa4:	08006af1 	.word	0x08006af1
 8006aa8:	08006abd 	.word	0x08006abd
 8006aac:	08006ad3 	.word	0x08006ad3
 8006ab0:	08006af1 	.word	0x08006af1
 8006ab4:	08006af1 	.word	0x08006af1
 8006ab8:	08006af1 	.word	0x08006af1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 fc43 	bl	8007350 <RCCEx_PLL2_Config>
 8006aca:	4603      	mov	r3, r0
 8006acc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006ad0:	e00f      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad6:	3328      	adds	r3, #40	@ 0x28
 8006ad8:	2101      	movs	r1, #1
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 fcea 	bl	80074b4 <RCCEx_PLL3_Config>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006ae6:	e004      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006aee:	e000      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006af2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10b      	bne.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006afa:	4b6c      	ldr	r3, [pc, #432]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006afe:	f023 0107 	bic.w	r1, r3, #7
 8006b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b0a:	4a68      	ldr	r2, [pc, #416]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b0c:	430b      	orrs	r3, r1
 8006b0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b10:	e003      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b16:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b22:	f002 0320 	and.w	r3, r2, #32
 8006b26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006b30:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006b34:	460b      	mov	r3, r1
 8006b36:	4313      	orrs	r3, r2
 8006b38:	d055      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b46:	d033      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b4c:	d82c      	bhi.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b52:	d02f      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006b54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b58:	d826      	bhi.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006b5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b5e:	d02b      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006b60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b64:	d820      	bhi.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006b66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b6a:	d012      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006b6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b70:	d81a      	bhi.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d022      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006b76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b7a:	d115      	bne.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b80:	3308      	adds	r3, #8
 8006b82:	2100      	movs	r1, #0
 8006b84:	4618      	mov	r0, r3
 8006b86:	f000 fbe3 	bl	8007350 <RCCEx_PLL2_Config>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006b90:	e015      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b96:	3328      	adds	r3, #40	@ 0x28
 8006b98:	2102      	movs	r1, #2
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 fc8a 	bl	80074b4 <RCCEx_PLL3_Config>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006ba6:	e00a      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006bae:	e006      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006bb0:	bf00      	nop
 8006bb2:	e004      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006bb4:	bf00      	nop
 8006bb6:	e002      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006bb8:	bf00      	nop
 8006bba:	e000      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10b      	bne.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006bc6:	4b39      	ldr	r3, [pc, #228]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bd6:	4a35      	ldr	r2, [pc, #212]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006bd8:	430b      	orrs	r3, r1
 8006bda:	6553      	str	r3, [r2, #84]	@ 0x54
 8006bdc:	e003      	b.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006be2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006bf2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006bfc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006c00:	460b      	mov	r3, r1
 8006c02:	4313      	orrs	r3, r2
 8006c04:	d058      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c0e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006c12:	d033      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006c14:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006c18:	d82c      	bhi.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c1e:	d02f      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c24:	d826      	bhi.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006c26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c2a:	d02b      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006c2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c30:	d820      	bhi.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006c32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c36:	d012      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006c38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c3c:	d81a      	bhi.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d022      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c46:	d115      	bne.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c4c:	3308      	adds	r3, #8
 8006c4e:	2100      	movs	r1, #0
 8006c50:	4618      	mov	r0, r3
 8006c52:	f000 fb7d 	bl	8007350 <RCCEx_PLL2_Config>
 8006c56:	4603      	mov	r3, r0
 8006c58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006c5c:	e015      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c62:	3328      	adds	r3, #40	@ 0x28
 8006c64:	2102      	movs	r1, #2
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 fc24 	bl	80074b4 <RCCEx_PLL3_Config>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006c72:	e00a      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c7a:	e006      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006c7c:	bf00      	nop
 8006c7e:	e004      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006c80:	bf00      	nop
 8006c82:	e002      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006c84:	bf00      	nop
 8006c86:	e000      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10e      	bne.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c92:	4b06      	ldr	r3, [pc, #24]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c96:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ca2:	4a02      	ldr	r2, [pc, #8]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ca4:	430b      	orrs	r3, r1
 8006ca6:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ca8:	e006      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006caa:	bf00      	nop
 8006cac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006cc4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006cce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	d055      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ce0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006ce4:	d033      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006ce6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006cea:	d82c      	bhi.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006cec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cf0:	d02f      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006cf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cf6:	d826      	bhi.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006cf8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006cfc:	d02b      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006cfe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006d02:	d820      	bhi.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006d04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d08:	d012      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006d0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d0e:	d81a      	bhi.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d022      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006d14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d18:	d115      	bne.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d1e:	3308      	adds	r3, #8
 8006d20:	2100      	movs	r1, #0
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 fb14 	bl	8007350 <RCCEx_PLL2_Config>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006d2e:	e015      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d34:	3328      	adds	r3, #40	@ 0x28
 8006d36:	2102      	movs	r1, #2
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 fbbb 	bl	80074b4 <RCCEx_PLL3_Config>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006d44:	e00a      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d4c:	e006      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006d4e:	bf00      	nop
 8006d50:	e004      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006d52:	bf00      	nop
 8006d54:	e002      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006d56:	bf00      	nop
 8006d58:	e000      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006d5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10b      	bne.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006d64:	4ba0      	ldr	r3, [pc, #640]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d68:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d74:	4a9c      	ldr	r2, [pc, #624]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d76:	430b      	orrs	r3, r1
 8006d78:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d7a:	e003      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8c:	f002 0308 	and.w	r3, r2, #8
 8006d90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d94:	2300      	movs	r3, #0
 8006d96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006d9a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4313      	orrs	r3, r2
 8006da2:	d01e      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006db0:	d10c      	bne.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db6:	3328      	adds	r3, #40	@ 0x28
 8006db8:	2102      	movs	r1, #2
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 fb7a 	bl	80074b4 <RCCEx_PLL3_Config>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d002      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006dcc:	4b86      	ldr	r3, [pc, #536]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dd0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ddc:	4a82      	ldr	r2, [pc, #520]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006dde:	430b      	orrs	r3, r1
 8006de0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dea:	f002 0310 	and.w	r3, r2, #16
 8006dee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006df2:	2300      	movs	r3, #0
 8006df4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006df8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	d01e      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e0e:	d10c      	bne.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e14:	3328      	adds	r3, #40	@ 0x28
 8006e16:	2102      	movs	r1, #2
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 fb4b 	bl	80074b4 <RCCEx_PLL3_Config>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e2a:	4b6f      	ldr	r3, [pc, #444]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e3a:	4a6b      	ldr	r2, [pc, #428]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e3c:	430b      	orrs	r3, r1
 8006e3e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e48:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006e4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e4e:	2300      	movs	r3, #0
 8006e50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e52:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006e56:	460b      	mov	r3, r1
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	d03e      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006e64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e68:	d022      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006e6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e6e:	d81b      	bhi.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006e74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e78:	d00b      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006e7a:	e015      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e80:	3308      	adds	r3, #8
 8006e82:	2100      	movs	r1, #0
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 fa63 	bl	8007350 <RCCEx_PLL2_Config>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006e90:	e00f      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e96:	3328      	adds	r3, #40	@ 0x28
 8006e98:	2102      	movs	r1, #2
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 fb0a 	bl	80074b4 <RCCEx_PLL3_Config>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006ea6:	e004      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006eae:	e000      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10b      	bne.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006eba:	4b4b      	ldr	r3, [pc, #300]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ebe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006eca:	4a47      	ldr	r2, [pc, #284]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ecc:	430b      	orrs	r3, r1
 8006ece:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ed0:	e003      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ed6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006ee6:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ee8:	2300      	movs	r3, #0
 8006eea:	677b      	str	r3, [r7, #116]	@ 0x74
 8006eec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	d03b      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006efe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f02:	d01f      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006f04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f08:	d818      	bhi.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006f0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f0e:	d003      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006f10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f14:	d007      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006f16:	e011      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f18:	4b33      	ldr	r3, [pc, #204]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1c:	4a32      	ldr	r2, [pc, #200]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f24:	e00f      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f2a:	3328      	adds	r3, #40	@ 0x28
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 fac0 	bl	80074b4 <RCCEx_PLL3_Config>
 8006f34:	4603      	mov	r3, r0
 8006f36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f3a:	e004      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f42:	e000      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10b      	bne.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f4e:	4b26      	ldr	r3, [pc, #152]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f52:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f5e:	4a22      	ldr	r2, [pc, #136]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f60:	430b      	orrs	r3, r1
 8006f62:	6553      	str	r3, [r2, #84]	@ 0x54
 8006f64:	e003      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f6a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f76:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006f7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f80:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006f84:	460b      	mov	r3, r1
 8006f86:	4313      	orrs	r3, r2
 8006f88:	d034      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d003      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f98:	d007      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006f9a:	e011      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f9c:	4b12      	ldr	r3, [pc, #72]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa0:	4a11      	ldr	r2, [pc, #68]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006fa8:	e00e      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fae:	3308      	adds	r3, #8
 8006fb0:	2102      	movs	r1, #2
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f000 f9cc 	bl	8007350 <RCCEx_PLL2_Config>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006fbe:	e003      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006fc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10d      	bne.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006fd0:	4b05      	ldr	r3, [pc, #20]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fd4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fde:	4a02      	ldr	r2, [pc, #8]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fe0:	430b      	orrs	r3, r1
 8006fe2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006fe4:	e006      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006fe6:	bf00      	nop
 8006fe8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ff0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007000:	663b      	str	r3, [r7, #96]	@ 0x60
 8007002:	2300      	movs	r3, #0
 8007004:	667b      	str	r3, [r7, #100]	@ 0x64
 8007006:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800700a:	460b      	mov	r3, r1
 800700c:	4313      	orrs	r3, r2
 800700e:	d00c      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007014:	3328      	adds	r3, #40	@ 0x28
 8007016:	2102      	movs	r1, #2
 8007018:	4618      	mov	r0, r3
 800701a:	f000 fa4b 	bl	80074b4 <RCCEx_PLL3_Config>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800702a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007032:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007036:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007038:	2300      	movs	r3, #0
 800703a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800703c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007040:	460b      	mov	r3, r1
 8007042:	4313      	orrs	r3, r2
 8007044:	d036      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800704a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800704c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007050:	d018      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007052:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007056:	d811      	bhi.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800705c:	d014      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800705e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007062:	d80b      	bhi.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007064:	2b00      	cmp	r3, #0
 8007066:	d011      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007068:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800706c:	d106      	bne.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800706e:	4bb7      	ldr	r3, [pc, #732]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007072:	4ab6      	ldr	r2, [pc, #728]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007078:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800707a:	e008      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007082:	e004      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007084:	bf00      	nop
 8007086:	e002      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007088:	bf00      	nop
 800708a:	e000      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800708c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800708e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10a      	bne.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007096:	4bad      	ldr	r3, [pc, #692]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800709a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800709e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070a4:	4aa9      	ldr	r2, [pc, #676]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80070a6:	430b      	orrs	r3, r1
 80070a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80070aa:	e003      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80070b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070bc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80070c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80070c2:	2300      	movs	r3, #0
 80070c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80070c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80070ca:	460b      	mov	r3, r1
 80070cc:	4313      	orrs	r3, r2
 80070ce:	d009      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80070d0:	4b9e      	ldr	r3, [pc, #632]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80070d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80070d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070de:	4a9b      	ldr	r2, [pc, #620]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80070e0:	430b      	orrs	r3, r1
 80070e2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80070e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ec:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80070f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070f2:	2300      	movs	r3, #0
 80070f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070f6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80070fa:	460b      	mov	r3, r1
 80070fc:	4313      	orrs	r3, r2
 80070fe:	d009      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007100:	4b92      	ldr	r3, [pc, #584]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007104:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800710c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800710e:	4a8f      	ldr	r2, [pc, #572]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007110:	430b      	orrs	r3, r1
 8007112:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007120:	643b      	str	r3, [r7, #64]	@ 0x40
 8007122:	2300      	movs	r3, #0
 8007124:	647b      	str	r3, [r7, #68]	@ 0x44
 8007126:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800712a:	460b      	mov	r3, r1
 800712c:	4313      	orrs	r3, r2
 800712e:	d00e      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007130:	4b86      	ldr	r3, [pc, #536]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	4a85      	ldr	r2, [pc, #532]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007136:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800713a:	6113      	str	r3, [r2, #16]
 800713c:	4b83      	ldr	r3, [pc, #524]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800713e:	6919      	ldr	r1, [r3, #16]
 8007140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007144:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007148:	4a80      	ldr	r2, [pc, #512]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800714a:	430b      	orrs	r3, r1
 800714c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800714e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007156:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800715a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800715c:	2300      	movs	r3, #0
 800715e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007160:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007164:	460b      	mov	r3, r1
 8007166:	4313      	orrs	r3, r2
 8007168:	d009      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800716a:	4b78      	ldr	r3, [pc, #480]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800716c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800716e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007178:	4a74      	ldr	r2, [pc, #464]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800717a:	430b      	orrs	r3, r1
 800717c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800717e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800718a:	633b      	str	r3, [r7, #48]	@ 0x30
 800718c:	2300      	movs	r3, #0
 800718e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007190:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007194:	460b      	mov	r3, r1
 8007196:	4313      	orrs	r3, r2
 8007198:	d00a      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800719a:	4b6c      	ldr	r3, [pc, #432]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800719c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800719e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80071a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071aa:	4a68      	ldr	r2, [pc, #416]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071ac:	430b      	orrs	r3, r1
 80071ae:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80071b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b8:	2100      	movs	r1, #0
 80071ba:	62b9      	str	r1, [r7, #40]	@ 0x28
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071c2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80071c6:	460b      	mov	r3, r1
 80071c8:	4313      	orrs	r3, r2
 80071ca:	d011      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d0:	3308      	adds	r3, #8
 80071d2:	2100      	movs	r1, #0
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 f8bb 	bl	8007350 <RCCEx_PLL2_Config>
 80071da:	4603      	mov	r3, r0
 80071dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80071e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d003      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80071f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f8:	2100      	movs	r1, #0
 80071fa:	6239      	str	r1, [r7, #32]
 80071fc:	f003 0302 	and.w	r3, r3, #2
 8007200:	627b      	str	r3, [r7, #36]	@ 0x24
 8007202:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007206:	460b      	mov	r3, r1
 8007208:	4313      	orrs	r3, r2
 800720a:	d011      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800720c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007210:	3308      	adds	r3, #8
 8007212:	2101      	movs	r1, #1
 8007214:	4618      	mov	r0, r3
 8007216:	f000 f89b 	bl	8007350 <RCCEx_PLL2_Config>
 800721a:	4603      	mov	r3, r0
 800721c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007220:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007224:	2b00      	cmp	r3, #0
 8007226:	d003      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007228:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800722c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007238:	2100      	movs	r1, #0
 800723a:	61b9      	str	r1, [r7, #24]
 800723c:	f003 0304 	and.w	r3, r3, #4
 8007240:	61fb      	str	r3, [r7, #28]
 8007242:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007246:	460b      	mov	r3, r1
 8007248:	4313      	orrs	r3, r2
 800724a:	d011      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800724c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007250:	3308      	adds	r3, #8
 8007252:	2102      	movs	r1, #2
 8007254:	4618      	mov	r0, r3
 8007256:	f000 f87b 	bl	8007350 <RCCEx_PLL2_Config>
 800725a:	4603      	mov	r3, r0
 800725c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007260:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007264:	2b00      	cmp	r3, #0
 8007266:	d003      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007268:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800726c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007278:	2100      	movs	r1, #0
 800727a:	6139      	str	r1, [r7, #16]
 800727c:	f003 0308 	and.w	r3, r3, #8
 8007280:	617b      	str	r3, [r7, #20]
 8007282:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007286:	460b      	mov	r3, r1
 8007288:	4313      	orrs	r3, r2
 800728a:	d011      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800728c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007290:	3328      	adds	r3, #40	@ 0x28
 8007292:	2100      	movs	r1, #0
 8007294:	4618      	mov	r0, r3
 8007296:	f000 f90d 	bl	80074b4 <RCCEx_PLL3_Config>
 800729a:	4603      	mov	r3, r0
 800729c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80072a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d003      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80072b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b8:	2100      	movs	r1, #0
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	f003 0310 	and.w	r3, r3, #16
 80072c0:	60fb      	str	r3, [r7, #12]
 80072c2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80072c6:	460b      	mov	r3, r1
 80072c8:	4313      	orrs	r3, r2
 80072ca:	d011      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d0:	3328      	adds	r3, #40	@ 0x28
 80072d2:	2101      	movs	r1, #1
 80072d4:	4618      	mov	r0, r3
 80072d6:	f000 f8ed 	bl	80074b4 <RCCEx_PLL3_Config>
 80072da:	4603      	mov	r3, r0
 80072dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80072e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d003      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80072f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f8:	2100      	movs	r1, #0
 80072fa:	6039      	str	r1, [r7, #0]
 80072fc:	f003 0320 	and.w	r3, r3, #32
 8007300:	607b      	str	r3, [r7, #4]
 8007302:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007306:	460b      	mov	r3, r1
 8007308:	4313      	orrs	r3, r2
 800730a:	d011      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800730c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007310:	3328      	adds	r3, #40	@ 0x28
 8007312:	2102      	movs	r1, #2
 8007314:	4618      	mov	r0, r3
 8007316:	f000 f8cd 	bl	80074b4 <RCCEx_PLL3_Config>
 800731a:	4603      	mov	r3, r0
 800731c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007320:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007324:	2b00      	cmp	r3, #0
 8007326:	d003      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007328:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800732c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007330:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007334:	2b00      	cmp	r3, #0
 8007336:	d101      	bne.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	e000      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
}
 800733e:	4618      	mov	r0, r3
 8007340:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007344:	46bd      	mov	sp, r7
 8007346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800734a:	bf00      	nop
 800734c:	58024400 	.word	0x58024400

08007350 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800735e:	4b53      	ldr	r3, [pc, #332]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007362:	f003 0303 	and.w	r3, r3, #3
 8007366:	2b03      	cmp	r3, #3
 8007368:	d101      	bne.n	800736e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e099      	b.n	80074a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800736e:	4b4f      	ldr	r3, [pc, #316]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a4e      	ldr	r2, [pc, #312]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007374:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800737a:	f7f9 fd3d 	bl	8000df8 <HAL_GetTick>
 800737e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007380:	e008      	b.n	8007394 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007382:	f7f9 fd39 	bl	8000df8 <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	2b02      	cmp	r3, #2
 800738e:	d901      	bls.n	8007394 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e086      	b.n	80074a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007394:	4b45      	ldr	r3, [pc, #276]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1f0      	bne.n	8007382 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80073a0:	4b42      	ldr	r3, [pc, #264]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 80073a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	031b      	lsls	r3, r3, #12
 80073ae:	493f      	ldr	r1, [pc, #252]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 80073b0:	4313      	orrs	r3, r2
 80073b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	3b01      	subs	r3, #1
 80073ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	025b      	lsls	r3, r3, #9
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	431a      	orrs	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	041b      	lsls	r3, r3, #16
 80073d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80073d6:	431a      	orrs	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	3b01      	subs	r3, #1
 80073de:	061b      	lsls	r3, r3, #24
 80073e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80073e4:	4931      	ldr	r1, [pc, #196]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80073ea:	4b30      	ldr	r3, [pc, #192]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 80073ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	492d      	ldr	r1, [pc, #180]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 80073f8:	4313      	orrs	r3, r2
 80073fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80073fc:	4b2b      	ldr	r3, [pc, #172]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 80073fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007400:	f023 0220 	bic.w	r2, r3, #32
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	4928      	ldr	r1, [pc, #160]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 800740a:	4313      	orrs	r3, r2
 800740c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800740e:	4b27      	ldr	r3, [pc, #156]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007412:	4a26      	ldr	r2, [pc, #152]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007414:	f023 0310 	bic.w	r3, r3, #16
 8007418:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800741a:	4b24      	ldr	r3, [pc, #144]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 800741c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800741e:	4b24      	ldr	r3, [pc, #144]	@ (80074b0 <RCCEx_PLL2_Config+0x160>)
 8007420:	4013      	ands	r3, r2
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	69d2      	ldr	r2, [r2, #28]
 8007426:	00d2      	lsls	r2, r2, #3
 8007428:	4920      	ldr	r1, [pc, #128]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 800742a:	4313      	orrs	r3, r2
 800742c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800742e:	4b1f      	ldr	r3, [pc, #124]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007432:	4a1e      	ldr	r2, [pc, #120]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007434:	f043 0310 	orr.w	r3, r3, #16
 8007438:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d106      	bne.n	800744e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007440:	4b1a      	ldr	r3, [pc, #104]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007444:	4a19      	ldr	r2, [pc, #100]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007446:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800744a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800744c:	e00f      	b.n	800746e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d106      	bne.n	8007462 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007454:	4b15      	ldr	r3, [pc, #84]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007458:	4a14      	ldr	r2, [pc, #80]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 800745a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800745e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007460:	e005      	b.n	800746e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007462:	4b12      	ldr	r3, [pc, #72]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007466:	4a11      	ldr	r2, [pc, #68]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007468:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800746c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800746e:	4b0f      	ldr	r3, [pc, #60]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a0e      	ldr	r2, [pc, #56]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007474:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800747a:	f7f9 fcbd 	bl	8000df8 <HAL_GetTick>
 800747e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007480:	e008      	b.n	8007494 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007482:	f7f9 fcb9 	bl	8000df8 <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	2b02      	cmp	r3, #2
 800748e:	d901      	bls.n	8007494 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007490:	2303      	movs	r3, #3
 8007492:	e006      	b.n	80074a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007494:	4b05      	ldr	r3, [pc, #20]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d0f0      	beq.n	8007482 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80074a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	58024400 	.word	0x58024400
 80074b0:	ffff0007 	.word	0xffff0007

080074b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074c2:	4b53      	ldr	r3, [pc, #332]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80074c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c6:	f003 0303 	and.w	r3, r3, #3
 80074ca:	2b03      	cmp	r3, #3
 80074cc:	d101      	bne.n	80074d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e099      	b.n	8007606 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80074d2:	4b4f      	ldr	r3, [pc, #316]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a4e      	ldr	r2, [pc, #312]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80074d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074de:	f7f9 fc8b 	bl	8000df8 <HAL_GetTick>
 80074e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074e4:	e008      	b.n	80074f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074e6:	f7f9 fc87 	bl	8000df8 <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d901      	bls.n	80074f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e086      	b.n	8007606 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074f8:	4b45      	ldr	r3, [pc, #276]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1f0      	bne.n	80074e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007504:	4b42      	ldr	r3, [pc, #264]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 8007506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007508:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	051b      	lsls	r3, r3, #20
 8007512:	493f      	ldr	r1, [pc, #252]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 8007514:	4313      	orrs	r3, r2
 8007516:	628b      	str	r3, [r1, #40]	@ 0x28
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	3b01      	subs	r3, #1
 800751e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	3b01      	subs	r3, #1
 8007528:	025b      	lsls	r3, r3, #9
 800752a:	b29b      	uxth	r3, r3
 800752c:	431a      	orrs	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	3b01      	subs	r3, #1
 8007534:	041b      	lsls	r3, r3, #16
 8007536:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800753a:	431a      	orrs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	3b01      	subs	r3, #1
 8007542:	061b      	lsls	r3, r3, #24
 8007544:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007548:	4931      	ldr	r1, [pc, #196]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 800754a:	4313      	orrs	r3, r2
 800754c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800754e:	4b30      	ldr	r3, [pc, #192]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 8007550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007552:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	492d      	ldr	r1, [pc, #180]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 800755c:	4313      	orrs	r3, r2
 800755e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007560:	4b2b      	ldr	r3, [pc, #172]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 8007562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007564:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	4928      	ldr	r1, [pc, #160]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 800756e:	4313      	orrs	r3, r2
 8007570:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007572:	4b27      	ldr	r3, [pc, #156]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 8007574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007576:	4a26      	ldr	r2, [pc, #152]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 8007578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800757c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800757e:	4b24      	ldr	r3, [pc, #144]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 8007580:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007582:	4b24      	ldr	r3, [pc, #144]	@ (8007614 <RCCEx_PLL3_Config+0x160>)
 8007584:	4013      	ands	r3, r2
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	69d2      	ldr	r2, [r2, #28]
 800758a:	00d2      	lsls	r2, r2, #3
 800758c:	4920      	ldr	r1, [pc, #128]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 800758e:	4313      	orrs	r3, r2
 8007590:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007592:	4b1f      	ldr	r3, [pc, #124]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 8007594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007596:	4a1e      	ldr	r2, [pc, #120]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 8007598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800759c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d106      	bne.n	80075b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80075a4:	4b1a      	ldr	r3, [pc, #104]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80075a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a8:	4a19      	ldr	r2, [pc, #100]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80075aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80075ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075b0:	e00f      	b.n	80075d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d106      	bne.n	80075c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80075b8:	4b15      	ldr	r3, [pc, #84]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80075ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075bc:	4a14      	ldr	r2, [pc, #80]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80075be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80075c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075c4:	e005      	b.n	80075d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80075c6:	4b12      	ldr	r3, [pc, #72]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80075c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ca:	4a11      	ldr	r2, [pc, #68]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80075cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80075d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a0e      	ldr	r2, [pc, #56]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80075d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075de:	f7f9 fc0b 	bl	8000df8 <HAL_GetTick>
 80075e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075e4:	e008      	b.n	80075f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075e6:	f7f9 fc07 	bl	8000df8 <HAL_GetTick>
 80075ea:	4602      	mov	r2, r0
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d901      	bls.n	80075f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e006      	b.n	8007606 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075f8:	4b05      	ldr	r3, [pc, #20]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d0f0      	beq.n	80075e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007604:	7bfb      	ldrb	r3, [r7, #15]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	58024400 	.word	0x58024400
 8007614:	ffff0007 	.word	0xffff0007

08007618 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e10f      	b.n	800784a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a87      	ldr	r2, [pc, #540]	@ (8007854 <HAL_SPI_Init+0x23c>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d00f      	beq.n	800765a <HAL_SPI_Init+0x42>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a86      	ldr	r2, [pc, #536]	@ (8007858 <HAL_SPI_Init+0x240>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d00a      	beq.n	800765a <HAL_SPI_Init+0x42>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a84      	ldr	r2, [pc, #528]	@ (800785c <HAL_SPI_Init+0x244>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d005      	beq.n	800765a <HAL_SPI_Init+0x42>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	2b0f      	cmp	r3, #15
 8007654:	d901      	bls.n	800765a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e0f7      	b.n	800784a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fe98 	bl	8008390 <SPI_GetPacketSize>
 8007660:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a7b      	ldr	r2, [pc, #492]	@ (8007854 <HAL_SPI_Init+0x23c>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d00c      	beq.n	8007686 <HAL_SPI_Init+0x6e>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a79      	ldr	r2, [pc, #484]	@ (8007858 <HAL_SPI_Init+0x240>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d007      	beq.n	8007686 <HAL_SPI_Init+0x6e>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a78      	ldr	r2, [pc, #480]	@ (800785c <HAL_SPI_Init+0x244>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d002      	beq.n	8007686 <HAL_SPI_Init+0x6e>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2b08      	cmp	r3, #8
 8007684:	d811      	bhi.n	80076aa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800768a:	4a72      	ldr	r2, [pc, #456]	@ (8007854 <HAL_SPI_Init+0x23c>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d009      	beq.n	80076a4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a70      	ldr	r2, [pc, #448]	@ (8007858 <HAL_SPI_Init+0x240>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d004      	beq.n	80076a4 <HAL_SPI_Init+0x8c>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a6f      	ldr	r2, [pc, #444]	@ (800785c <HAL_SPI_Init+0x244>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d104      	bne.n	80076ae <HAL_SPI_Init+0x96>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2b10      	cmp	r3, #16
 80076a8:	d901      	bls.n	80076ae <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e0cd      	b.n	800784a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d106      	bne.n	80076c8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7f9 f96c 	bl	80009a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2202      	movs	r2, #2
 80076cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 0201 	bic.w	r2, r2, #1
 80076de:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80076ea:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80076f4:	d119      	bne.n	800772a <HAL_SPI_Init+0x112>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076fe:	d103      	bne.n	8007708 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007704:	2b00      	cmp	r3, #0
 8007706:	d008      	beq.n	800771a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10c      	bne.n	800772a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007714:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007718:	d107      	bne.n	800772a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007728:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00f      	beq.n	8007756 <HAL_SPI_Init+0x13e>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	2b06      	cmp	r3, #6
 800773c:	d90b      	bls.n	8007756 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	430a      	orrs	r2, r1
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	e007      	b.n	8007766 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007764:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	69da      	ldr	r2, [r3, #28]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800776e:	431a      	orrs	r2, r3
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	431a      	orrs	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007778:	ea42 0103 	orr.w	r1, r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	68da      	ldr	r2, [r3, #12]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	430a      	orrs	r2, r1
 8007786:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007790:	431a      	orrs	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007796:	431a      	orrs	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	431a      	orrs	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	431a      	orrs	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	695b      	ldr	r3, [r3, #20]
 80077a8:	431a      	orrs	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	431a      	orrs	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	431a      	orrs	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077ba:	431a      	orrs	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	431a      	orrs	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077c6:	ea42 0103 	orr.w	r1, r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d113      	bne.n	8007806 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077f0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007804:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f022 0201 	bic.w	r2, r2, #1
 8007814:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00a      	beq.n	8007838 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	40013000 	.word	0x40013000
 8007858:	40003800 	.word	0x40003800
 800785c:	40003c00 	.word	0x40003c00

08007860 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	4613      	mov	r3, r2
 800786c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b01      	cmp	r3, #1
 8007878:	d001      	beq.n	800787e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800787a:	2302      	movs	r3, #2
 800787c:	e126      	b.n	8007acc <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d002      	beq.n	800788a <HAL_SPI_Transmit_DMA+0x2a>
 8007884:	88fb      	ldrh	r3, [r7, #6]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d101      	bne.n	800788e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e11e      	b.n	8007acc <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007894:	2b01      	cmp	r3, #1
 8007896:	d101      	bne.n	800789c <HAL_SPI_Transmit_DMA+0x3c>
 8007898:	2302      	movs	r3, #2
 800789a:	e117      	b.n	8007acc <HAL_SPI_Transmit_DMA+0x26c>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2203      	movs	r2, #3
 80078a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	88fa      	ldrh	r2, [r7, #6]
 80078be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	88fa      	ldrh	r2, [r7, #6]
 80078c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80078f4:	d108      	bne.n	8007908 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007904:	601a      	str	r2, [r3, #0]
 8007906:	e009      	b.n	800791c <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800791a:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	2b0f      	cmp	r3, #15
 8007922:	d905      	bls.n	8007930 <HAL_SPI_Transmit_DMA+0xd0>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007928:	699b      	ldr	r3, [r3, #24]
 800792a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800792e:	d10f      	bne.n	8007950 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007934:	2b07      	cmp	r3, #7
 8007936:	d911      	bls.n	800795c <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007942:	d00b      	beq.n	800795c <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007948:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800794a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800794e:	d005      	beq.n	800795c <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e0b7      	b.n	8007acc <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	2b07      	cmp	r3, #7
 8007962:	d820      	bhi.n	80079a6 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800796e:	d109      	bne.n	8007984 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007976:	b29b      	uxth	r3, r3
 8007978:	3301      	adds	r3, #1
 800797a:	105b      	asrs	r3, r3, #1
 800797c:	b29a      	uxth	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800798e:	d11e      	bne.n	80079ce <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007996:	b29b      	uxth	r3, r3
 8007998:	3303      	adds	r3, #3
 800799a:	109b      	asrs	r3, r3, #2
 800799c:	b29a      	uxth	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80079a4:	e013      	b.n	80079ce <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	2b0f      	cmp	r3, #15
 80079ac:	d80f      	bhi.n	80079ce <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079b8:	d109      	bne.n	80079ce <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	3301      	adds	r3, #1
 80079c4:	105b      	asrs	r3, r3, #1
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079d2:	4a40      	ldr	r2, [pc, #256]	@ (8007ad4 <HAL_SPI_Transmit_DMA+0x274>)
 80079d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079da:	4a3f      	ldr	r2, [pc, #252]	@ (8007ad8 <HAL_SPI_Transmit_DMA+0x278>)
 80079dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079e2:	4a3e      	ldr	r2, [pc, #248]	@ (8007adc <HAL_SPI_Transmit_DMA+0x27c>)
 80079e4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079ea:	2200      	movs	r2, #0
 80079ec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	689a      	ldr	r2, [r3, #8]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80079fc:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a06:	4619      	mov	r1, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3320      	adds	r3, #32
 8007a0e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007a16:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8007a18:	f7f9 feda 	bl	80017d0 <HAL_DMA_Start_IT>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d011      	beq.n	8007a46 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a28:	f043 0210 	orr.w	r2, r3, #16
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e042      	b.n	8007acc <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a4a:	69db      	ldr	r3, [r3, #28]
 8007a4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a50:	d108      	bne.n	8007a64 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6859      	ldr	r1, [r3, #4]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	4b20      	ldr	r3, [pc, #128]	@ (8007ae0 <HAL_SPI_Transmit_DMA+0x280>)
 8007a5e:	400b      	ands	r3, r1
 8007a60:	6053      	str	r3, [r2, #4]
 8007a62:	e009      	b.n	8007a78 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	685a      	ldr	r2, [r3, #4]
 8007a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8007ae0 <HAL_SPI_Transmit_DMA+0x280>)
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	88f9      	ldrh	r1, [r7, #6]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	6812      	ldr	r2, [r2, #0]
 8007a74:	430b      	orrs	r3, r1
 8007a76:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	689a      	ldr	r2, [r3, #8]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a86:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	691a      	ldr	r2, [r3, #16]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8007a96:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f042 0201 	orr.w	r2, r2, #1
 8007aa6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ab0:	d107      	bne.n	8007ac2 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ac0:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	080080f3 	.word	0x080080f3
 8007ad8:	080080ad 	.word	0x080080ad
 8007adc:	0800810f 	.word	0x0800810f
 8007ae0:	ffff0000 	.word	0xffff0000

08007ae4 <HAL_SPI_Abort>:
  *          + Set handle State to READY.
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;

  __IO uint32_t count;

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d101      	bne.n	8007afa <HAL_SPI_Abort+0x16>
 8007af6:	2302      	movs	r3, #2
 8007af8:	e0d9      	b.n	8007cae <HAL_SPI_Abort+0x1ca>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set hspi->state to aborting to avoid any interaction */
  hspi->State = HAL_SPI_STATE_ABORT;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2207      	movs	r2, #7
 8007b06:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	73fb      	strb	r3, [r7, #15]
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 8007b0e:	4b6a      	ldr	r3, [pc, #424]	@ (8007cb8 <HAL_SPI_Abort+0x1d4>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a6a      	ldr	r2, [pc, #424]	@ (8007cbc <HAL_SPI_Abort+0x1d8>)
 8007b14:	fba2 2303 	umull	r2, r3, r2, r3
 8007b18:	0a5b      	lsrs	r3, r3, #9
 8007b1a:	2264      	movs	r2, #100	@ 0x64
 8007b1c:	fb02 f303 	mul.w	r3, r2, r3
 8007b20:	60bb      	str	r3, [r7, #8]

  /* If master communication on going, make sure current frame is done before closing the connection */
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b30:	d15b      	bne.n	8007bea <HAL_SPI_Abort+0x106>
  {
    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	691a      	ldr	r2, [r3, #16]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f022 0208 	bic.w	r2, r2, #8
 8007b40:	611a      	str	r2, [r3, #16]
    do
    {
      count--;
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	3b01      	subs	r3, #1
 8007b46:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d108      	bne.n	8007b60 <HAL_SPI_Abort+0x7c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b54:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8007b5e:	e006      	b.n	8007b6e <HAL_SPI_Abort+0x8a>
      }
    } while (HAL_IS_BIT_SET(hspi->Instance->IER, SPI_IT_EOT));
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	f003 0308 	and.w	r3, r3, #8
 8007b6a:	2b08      	cmp	r3, #8
 8007b6c:	d0e9      	beq.n	8007b42 <HAL_SPI_Abort+0x5e>

    /* Request a Suspend transfer */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007b7c:	601a      	str	r2, [r3, #0]
    do
    {
      count--;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d108      	bne.n	8007b9c <HAL_SPI_Abort+0xb8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b90:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8007b9a:	e007      	b.n	8007bac <HAL_SPI_Abort+0xc8>
      }
    } while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ba6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007baa:	d0e8      	beq.n	8007b7e <HAL_SPI_Abort+0x9a>

    /* Clear SUSP flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	699a      	ldr	r2, [r3, #24]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007bba:	619a      	str	r2, [r3, #24]
    do
    {
      count--;
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d108      	bne.n	8007bda <HAL_SPI_Abort+0xf6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8007bd8:	e007      	b.n	8007bea <HAL_SPI_Abort+0x106>
      }
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_SUSP));
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007be4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007be8:	d0e8      	beq.n	8007bbc <HAL_SPI_Abort+0xd8>
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007bf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bf8:	d11b      	bne.n	8007c32 <HAL_SPI_Abort+0x14e>
  {
    if (hspi->hdmatx != NULL)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d017      	beq.n	8007c32 <HAL_SPI_Abort+0x14e>
    {
      /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
      hspi->hdmatx->XferAbortCallback = NULL;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c06:	2200      	movs	r2, #0
 8007c08:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fa f848 	bl	8001ca4 <HAL_DMA_Abort>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00b      	beq.n	8007c32 <HAL_SPI_Abort+0x14e>
      {
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fb fcdc 	bl	80035dc <HAL_DMA_GetError>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b20      	cmp	r3, #32
 8007c28:	d103      	bne.n	8007c32 <HAL_SPI_Abort+0x14e>
        {
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2240      	movs	r2, #64	@ 0x40
 8007c2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c40:	d11b      	bne.n	8007c7a <HAL_SPI_Abort+0x196>
  {
    if (hspi->hdmarx != NULL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d017      	beq.n	8007c7a <HAL_SPI_Abort+0x196>
    {
      /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
      hspi->hdmarx->XferAbortCallback = NULL;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c4e:	2200      	movs	r2, #0
 8007c50:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fa f824 	bl	8001ca4 <HAL_DMA_Abort>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00b      	beq.n	8007c7a <HAL_SPI_Abort+0x196>
      {
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fb fcb8 	bl	80035dc <HAL_DMA_GetError>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b20      	cmp	r3, #32
 8007c70:	d103      	bne.n	8007c7a <HAL_SPI_Abort+0x196>
        {
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2240      	movs	r2, #64	@ 0x40
 8007c76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Proceed with abort procedure */
  SPI_AbortTransfer(hspi);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fa84 	bl	8008188 <SPI_AbortTransfer>

  /* Check error during Abort procedure */
  if (HAL_IS_BIT_SET(hspi->ErrorCode, HAL_SPI_ERROR_ABORT))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c8a:	2b40      	cmp	r3, #64	@ 0x40
 8007c8c:	d102      	bne.n	8007c94 <HAL_SPI_Abort+0x1b0>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	73fb      	strb	r3, [r7, #15]
 8007c92:	e003      	b.n	8007c9c <HAL_SPI_Abort+0x1b8>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return errorcode;
 8007cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	24000000 	.word	0x24000000
 8007cbc:	057619f1 	.word	0x057619f1

08007cc0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b08a      	sub	sp, #40	@ 0x28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007cd8:	6a3a      	ldr	r2, [r7, #32]
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	4013      	ands	r3, r2
 8007cde:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007cf2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3330      	adds	r3, #48	@ 0x30
 8007cfa:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d010      	beq.n	8007d28 <HAL_SPI_IRQHandler+0x68>
 8007d06:	6a3b      	ldr	r3, [r7, #32]
 8007d08:	f003 0308 	and.w	r3, r3, #8
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00b      	beq.n	8007d28 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	699a      	ldr	r2, [r3, #24]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d1e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f9b9 	bl	8008098 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8007d26:	e192      	b.n	800804e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d113      	bne.n	8007d5a <HAL_SPI_IRQHandler+0x9a>
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	f003 0320 	and.w	r3, r3, #32
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10e      	bne.n	8007d5a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d009      	beq.n	8007d5a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	4798      	blx	r3
    handled = 1UL;
 8007d56:	2301      	movs	r3, #1
 8007d58:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10f      	bne.n	8007d84 <HAL_SPI_IRQHandler+0xc4>
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00a      	beq.n	8007d84 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d105      	bne.n	8007d84 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	4798      	blx	r3
    handled = 1UL;
 8007d80:	2301      	movs	r3, #1
 8007d82:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	f003 0320 	and.w	r3, r3, #32
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10f      	bne.n	8007dae <HAL_SPI_IRQHandler+0xee>
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	f003 0302 	and.w	r3, r3, #2
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00a      	beq.n	8007dae <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d105      	bne.n	8007dae <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	4798      	blx	r3
    handled = 1UL;
 8007daa:	2301      	movs	r3, #1
 8007dac:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f040 8147 	bne.w	8008044 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	f003 0308 	and.w	r3, r3, #8
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 808b 	beq.w	8007ed8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	699a      	ldr	r2, [r3, #24]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f042 0208 	orr.w	r2, r2, #8
 8007dd0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	699a      	ldr	r2, [r3, #24]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f042 0210 	orr.w	r2, r2, #16
 8007de0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	699a      	ldr	r2, [r3, #24]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007df0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	691a      	ldr	r2, [r3, #16]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f022 0208 	bic.w	r2, r2, #8
 8007e00:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d13d      	bne.n	8007e8c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007e10:	e036      	b.n	8007e80 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	2b0f      	cmp	r3, #15
 8007e18:	d90b      	bls.n	8007e32 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e22:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007e24:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e2a:	1d1a      	adds	r2, r3, #4
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	665a      	str	r2, [r3, #100]	@ 0x64
 8007e30:	e01d      	b.n	8007e6e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	2b07      	cmp	r3, #7
 8007e38:	d90b      	bls.n	8007e52 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e3e:	68fa      	ldr	r2, [r7, #12]
 8007e40:	8812      	ldrh	r2, [r2, #0]
 8007e42:	b292      	uxth	r2, r2
 8007e44:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e4a:	1c9a      	adds	r2, r3, #2
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	665a      	str	r2, [r3, #100]	@ 0x64
 8007e50:	e00d      	b.n	8007e6e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e5e:	7812      	ldrb	r2, [r2, #0]
 8007e60:	b2d2      	uxtb	r2, r2
 8007e62:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e68:	1c5a      	adds	r2, r3, #1
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	3b01      	subs	r3, #1
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1c2      	bne.n	8007e12 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f9df 	bl	8008250 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d003      	beq.n	8007eac <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7f8 fae7 	bl	8000478 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007eaa:	e0d0      	b.n	800804e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007eac:	7cfb      	ldrb	r3, [r7, #19]
 8007eae:	2b05      	cmp	r3, #5
 8007eb0:	d103      	bne.n	8007eba <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f8dc 	bl	8008070 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007eb8:	e0c6      	b.n	8008048 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007eba:	7cfb      	ldrb	r3, [r7, #19]
 8007ebc:	2b04      	cmp	r3, #4
 8007ebe:	d103      	bne.n	8007ec8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f8cb 	bl	800805c <HAL_SPI_RxCpltCallback>
    return;
 8007ec6:	e0bf      	b.n	8008048 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007ec8:	7cfb      	ldrb	r3, [r7, #19]
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	f040 80bc 	bne.w	8008048 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f7f8 fabf 	bl	8000454 <HAL_SPI_TxCpltCallback>
    return;
 8007ed6:	e0b7      	b.n	8008048 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f000 80b5 	beq.w	800804e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00f      	beq.n	8007f0e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ef4:	f043 0204 	orr.w	r2, r3, #4
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	699a      	ldr	r2, [r3, #24]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f0c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00f      	beq.n	8007f38 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f1e:	f043 0201 	orr.w	r2, r3, #1
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	699a      	ldr	r2, [r3, #24]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f36:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00f      	beq.n	8007f62 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f48:	f043 0208 	orr.w	r2, r3, #8
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	699a      	ldr	r2, [r3, #24]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f60:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	f003 0320 	and.w	r3, r3, #32
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00f      	beq.n	8007f8c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f72:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	699a      	ldr	r2, [r3, #24]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f042 0220 	orr.w	r2, r2, #32
 8007f8a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d05a      	beq.n	800804c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f022 0201 	bic.w	r2, r2, #1
 8007fa4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	6919      	ldr	r1, [r3, #16]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	4b28      	ldr	r3, [pc, #160]	@ (8008054 <HAL_SPI_IRQHandler+0x394>)
 8007fb2:	400b      	ands	r3, r1
 8007fb4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007fbc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007fc0:	d138      	bne.n	8008034 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	689a      	ldr	r2, [r3, #8]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007fd0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d013      	beq.n	8008002 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fde:	4a1e      	ldr	r2, [pc, #120]	@ (8008058 <HAL_SPI_IRQHandler+0x398>)
 8007fe0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fa f97a 	bl	80022e0 <HAL_DMA_Abort_IT>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d007      	beq.n	8008002 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ff8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008006:	2b00      	cmp	r3, #0
 8008008:	d020      	beq.n	800804c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800800e:	4a12      	ldr	r2, [pc, #72]	@ (8008058 <HAL_SPI_IRQHandler+0x398>)
 8008010:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008016:	4618      	mov	r0, r3
 8008018:	f7fa f962 	bl	80022e0 <HAL_DMA_Abort_IT>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d014      	beq.n	800804c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008028:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008032:	e00b      	b.n	800804c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f7f8 fa1b 	bl	8000478 <HAL_SPI_ErrorCallback>
    return;
 8008042:	e003      	b.n	800804c <HAL_SPI_IRQHandler+0x38c>
    return;
 8008044:	bf00      	nop
 8008046:	e002      	b.n	800804e <HAL_SPI_IRQHandler+0x38e>
    return;
 8008048:	bf00      	nop
 800804a:	e000      	b.n	800804e <HAL_SPI_IRQHandler+0x38e>
    return;
 800804c:	bf00      	nop
  }
}
 800804e:	3728      	adds	r7, #40	@ 0x28
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	fffffc94 	.word	0xfffffc94
 8008058:	08008155 	.word	0x08008155

0800805c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b8:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b07      	cmp	r3, #7
 80080c4:	d011      	beq.n	80080ea <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080ca:	69db      	ldr	r3, [r3, #28]
 80080cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080d0:	d103      	bne.n	80080da <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f7f8 f9be 	bl	8000454 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80080d8:	e007      	b.n	80080ea <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	691a      	ldr	r2, [r3, #16]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f042 0208 	orr.w	r2, r2, #8
 80080e8:	611a      	str	r2, [r3, #16]
}
 80080ea:	bf00      	nop
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080fe:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f7ff ffbf 	bl	8008084 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008106:	bf00      	nop
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b084      	sub	sp, #16
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800811a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7fb fa5d 	bl	80035dc <HAL_DMA_GetError>
 8008122:	4603      	mov	r3, r0
 8008124:	2b02      	cmp	r3, #2
 8008126:	d011      	beq.n	800814c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 f891 	bl	8008250 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008134:	f043 0210 	orr.w	r2, r3, #16
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f7f8 f996 	bl	8000478 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800814c:	bf00      	nop
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008160:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f7f8 f97c 	bl	8000478 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008180:	bf00      	nop
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <SPI_AbortTransfer>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f022 0201 	bic.w	r2, r2, #1
 800819e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	6919      	ldr	r1, [r3, #16]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	4b28      	ldr	r3, [pc, #160]	@ (800824c <SPI_AbortTransfer+0xc4>)
 80081ac:	400b      	ands	r3, r1
 80081ae:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Clear the Status flags in the SR register */
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	699a      	ldr	r2, [r3, #24]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f042 0208 	orr.w	r2, r2, #8
 80081be:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	699a      	ldr	r2, [r3, #24]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f042 0210 	orr.w	r2, r2, #16
 80081ce:	619a      	str	r2, [r3, #24]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	689a      	ldr	r2, [r3, #8]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80081de:	609a      	str	r2, [r3, #8]

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	699a      	ldr	r2, [r3, #24]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081ee:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	699a      	ldr	r2, [r3, #24]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f042 0220 	orr.w	r2, r2, #32
 80081fe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	699a      	ldr	r2, [r3, #24]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800820e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	699a      	ldr	r2, [r3, #24]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800821e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	699a      	ldr	r2, [r3, #24]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800822e:	619a      	str	r2, [r3, #24]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr
 800824c:	fffffc90 	.word	0xfffffc90

08008250 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	699a      	ldr	r2, [r3, #24]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f042 0208 	orr.w	r2, r2, #8
 800826e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	699a      	ldr	r2, [r3, #24]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f042 0210 	orr.w	r2, r2, #16
 800827e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f022 0201 	bic.w	r2, r2, #1
 800828e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6919      	ldr	r1, [r3, #16]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	4b3c      	ldr	r3, [pc, #240]	@ (800838c <SPI_CloseTransfer+0x13c>)
 800829c:	400b      	ands	r3, r1
 800829e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689a      	ldr	r2, [r3, #8]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80082ae:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	2b04      	cmp	r3, #4
 80082ba:	d014      	beq.n	80082e6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f003 0320 	and.w	r3, r3, #32
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00f      	beq.n	80082e6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	699a      	ldr	r2, [r3, #24]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f042 0220 	orr.w	r2, r2, #32
 80082e4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	d014      	beq.n	800831c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00f      	beq.n	800831c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008302:	f043 0204 	orr.w	r2, r3, #4
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	699a      	ldr	r2, [r3, #24]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800831a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00f      	beq.n	8008346 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800832c:	f043 0201 	orr.w	r2, r3, #1
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	699a      	ldr	r2, [r3, #24]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008344:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00f      	beq.n	8008370 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008356:	f043 0208 	orr.w	r2, r3, #8
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	699a      	ldr	r2, [r3, #24]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800836e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008380:	bf00      	nop
 8008382:	3714      	adds	r7, #20
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	fffffc90 	.word	0xfffffc90

08008390 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800839c:	095b      	lsrs	r3, r3, #5
 800839e:	3301      	adds	r3, #1
 80083a0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	3301      	adds	r3, #1
 80083a8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	3307      	adds	r3, #7
 80083ae:	08db      	lsrs	r3, r3, #3
 80083b0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	fb02 f303 	mul.w	r3, r2, r3
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <memset>:
 80083c6:	4402      	add	r2, r0
 80083c8:	4603      	mov	r3, r0
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d100      	bne.n	80083d0 <memset+0xa>
 80083ce:	4770      	bx	lr
 80083d0:	f803 1b01 	strb.w	r1, [r3], #1
 80083d4:	e7f9      	b.n	80083ca <memset+0x4>
	...

080083d8 <__libc_init_array>:
 80083d8:	b570      	push	{r4, r5, r6, lr}
 80083da:	4d0d      	ldr	r5, [pc, #52]	@ (8008410 <__libc_init_array+0x38>)
 80083dc:	4c0d      	ldr	r4, [pc, #52]	@ (8008414 <__libc_init_array+0x3c>)
 80083de:	1b64      	subs	r4, r4, r5
 80083e0:	10a4      	asrs	r4, r4, #2
 80083e2:	2600      	movs	r6, #0
 80083e4:	42a6      	cmp	r6, r4
 80083e6:	d109      	bne.n	80083fc <__libc_init_array+0x24>
 80083e8:	4d0b      	ldr	r5, [pc, #44]	@ (8008418 <__libc_init_array+0x40>)
 80083ea:	4c0c      	ldr	r4, [pc, #48]	@ (800841c <__libc_init_array+0x44>)
 80083ec:	f000 f818 	bl	8008420 <_init>
 80083f0:	1b64      	subs	r4, r4, r5
 80083f2:	10a4      	asrs	r4, r4, #2
 80083f4:	2600      	movs	r6, #0
 80083f6:	42a6      	cmp	r6, r4
 80083f8:	d105      	bne.n	8008406 <__libc_init_array+0x2e>
 80083fa:	bd70      	pop	{r4, r5, r6, pc}
 80083fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008400:	4798      	blx	r3
 8008402:	3601      	adds	r6, #1
 8008404:	e7ee      	b.n	80083e4 <__libc_init_array+0xc>
 8008406:	f855 3b04 	ldr.w	r3, [r5], #4
 800840a:	4798      	blx	r3
 800840c:	3601      	adds	r6, #1
 800840e:	e7f2      	b.n	80083f6 <__libc_init_array+0x1e>
 8008410:	08008450 	.word	0x08008450
 8008414:	08008450 	.word	0x08008450
 8008418:	08008450 	.word	0x08008450
 800841c:	08008454 	.word	0x08008454

08008420 <_init>:
 8008420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008422:	bf00      	nop
 8008424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008426:	bc08      	pop	{r3}
 8008428:	469e      	mov	lr, r3
 800842a:	4770      	bx	lr

0800842c <_fini>:
 800842c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800842e:	bf00      	nop
 8008430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008432:	bc08      	pop	{r3}
 8008434:	469e      	mov	lr, r3
 8008436:	4770      	bx	lr
