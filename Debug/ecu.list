
ecu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a350  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800a61c  0800a61c  0000b61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a634  0800a634  0000b634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800a638  0800a638  0000b638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  0800a63c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000310  24000020  0800a64c  0000c020  2**5
                  ALLOC
  7 ._user_heap_stack 00000600  24000330  0800a64c  0000c330  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000c010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000135fd  00000000  00000000  0000c03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002801  00000000  00000000  0001f63b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000e98  00000000  00000000  00021e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000b08  00000000  00000000  00022cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00003097  00000000  00000000  000237e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001486c  00000000  00000000  00026877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00152956  00000000  00000000  0003b0e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0018da39  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003d14  00000000  00000000  0018da7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000051  00000000  00000000  00191790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000020 	.word	0x24000020
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800a604 	.word	0x0800a604

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000024 	.word	0x24000024
 8000308:	0800a604 	.word	0x0800a604

0800030c <Convert_ADC_Values>:
	memset(&ADC_raw, 0, sizeof(ADC_raw));
	memset(&ADC_V, 0, sizeof(ADC_V));
	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)&ADC_raw, ADC_BUFFER_SIZE);
}

void Convert_ADC_Values(void) {
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
	const float VREF = 3.3f;
 8000312:	4b17      	ldr	r3, [pc, #92]	@ (8000370 <Convert_ADC_Values+0x64>)
 8000314:	60bb      	str	r3, [r7, #8]
	const float VRES = 65535.0f;
 8000316:	4b17      	ldr	r3, [pc, #92]	@ (8000374 <Convert_ADC_Values+0x68>)
 8000318:	607b      	str	r3, [r7, #4]
	const float VCNF = VREF/VRES;
 800031a:	edd7 6a02 	vldr	s13, [r7, #8]
 800031e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000326:	edc7 7a00 	vstr	s15, [r7]
    for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 800032a:	2300      	movs	r3, #0
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	e014      	b.n	800035a <Convert_ADC_Values+0x4e>
        ADC_V[i] = (float)ADC_raw.samples[i] * VCNF ;
 8000330:	4a11      	ldr	r2, [pc, #68]	@ (8000378 <Convert_ADC_Values+0x6c>)
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000338:	ee07 3a90 	vmov	s15, r3
 800033c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000340:	edd7 7a00 	vldr	s15, [r7]
 8000344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000348:	4a0c      	ldr	r2, [pc, #48]	@ (800037c <Convert_ADC_Values+0x70>)
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	4413      	add	r3, r2
 8000350:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	3301      	adds	r3, #1
 8000358:	60fb      	str	r3, [r7, #12]
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	2b05      	cmp	r3, #5
 800035e:	dde7      	ble.n	8000330 <Convert_ADC_Values+0x24>
    }
}
 8000360:	bf00      	nop
 8000362:	bf00      	nop
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	40533333 	.word	0x40533333
 8000374:	477fff00 	.word	0x477fff00
 8000378:	24000040 	.word	0x24000040
 800037c:	24000060 	.word	0x24000060

08000380 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	4b15      	ldr	r3, [pc, #84]	@ (80003e0 <HAL_ADC_ConvCpltCallback+0x60>)
 800038a:	617b      	str	r3, [r7, #20]
 800038c:	2320      	movs	r3, #32
 800038e:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000390:	693b      	ldr	r3, [r7, #16]
 8000392:	2b00      	cmp	r3, #0
 8000394:	dd1d      	ble.n	80003d2 <HAL_ADC_ConvCpltCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	f003 021f 	and.w	r2, r3, #31
 800039c:	693b      	ldr	r3, [r7, #16]
 800039e:	4413      	add	r3, r2
 80003a0:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	60bb      	str	r3, [r7, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003a6:	f3bf 8f4f 	dsb	sy
}
 80003aa:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80003ac:	4a0d      	ldr	r2, [pc, #52]	@ (80003e4 <HAL_ADC_ConvCpltCallback+0x64>)
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	3320      	adds	r3, #32
 80003b8:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	3b20      	subs	r3, #32
 80003be:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	dcf2      	bgt.n	80003ac <HAL_ADC_ConvCpltCallback+0x2c>
  __ASM volatile ("dsb 0xF":::"memory");
 80003c6:	f3bf 8f4f 	dsb	sy
}
 80003ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003cc:	f3bf 8f6f 	isb	sy
}
 80003d0:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80003d2:	bf00      	nop
	SCB_InvalidateDCache_by_Addr((uint16_t*)&ADC_raw, sizeof(ADC_raw));
	//Conversion
	Convert_ADC_Values();
 80003d4:	f7ff ff9a 	bl	800030c <Convert_ADC_Values>
	//Call the function that converts and returns Voltage to sensor values
}
 80003d8:	bf00      	nop
 80003da:	3718      	adds	r7, #24
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	24000040 	.word	0x24000040
 80003e4:	e000ed00 	.word	0xe000ed00

080003e8 <SPI_CS_Enable>:
volatile SPI_Message SPI_queue[SPI_QUEUE_SIZE];
volatile uint8_t queue_head = 0;
volatile uint8_t queue_tail = 0;
volatile uint8_t is_transmitting = 0;

void SPI_CS_Enable(void) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI_CS_GPIO_PORT, SPI_CS_PIN, GPIO_PIN_RESET); // Active LOW
 80003ec:	2200      	movs	r2, #0
 80003ee:	2108      	movs	r1, #8
 80003f0:	4802      	ldr	r0, [pc, #8]	@ (80003fc <SPI_CS_Enable+0x14>)
 80003f2:	f005 fe79 	bl	80060e8 <HAL_GPIO_WritePin>
}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	58020000 	.word	0x58020000

08000400 <SPI_CS_Disable>:

void SPI_CS_Disable(void) {
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI_CS_GPIO_PORT, SPI_CS_PIN, GPIO_PIN_SET); // Inactive HIGH
 8000404:	2201      	movs	r2, #1
 8000406:	2108      	movs	r1, #8
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <SPI_CS_Disable+0x14>)
 800040a:	f005 fe6d 	bl	80060e8 <HAL_GPIO_WritePin>
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	58020000 	.word	0x58020000

08000418 <Process_SPI_Queue>:
    return HAL_OK;
}

//Add to Queue if busy

HAL_StatusTypeDef Process_SPI_Queue(void) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
    if (queue_head == queue_tail) {
 800041e:	4b3e      	ldr	r3, [pc, #248]	@ (8000518 <Process_SPI_Queue+0x100>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	b2da      	uxtb	r2, r3
 8000424:	4b3d      	ldr	r3, [pc, #244]	@ (800051c <Process_SPI_Queue+0x104>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	b2db      	uxtb	r3, r3
 800042a:	429a      	cmp	r2, r3
 800042c:	d104      	bne.n	8000438 <Process_SPI_Queue+0x20>
        is_transmitting = 0;
 800042e:	4b3c      	ldr	r3, [pc, #240]	@ (8000520 <Process_SPI_Queue+0x108>)
 8000430:	2200      	movs	r2, #0
 8000432:	701a      	strb	r2, [r3, #0]
        return HAL_OK;
 8000434:	2300      	movs	r3, #0
 8000436:	e06b      	b.n	8000510 <Process_SPI_Queue+0xf8>
    }

    is_transmitting = 1;
 8000438:	4b39      	ldr	r3, [pc, #228]	@ (8000520 <Process_SPI_Queue+0x108>)
 800043a:	2201      	movs	r2, #1
 800043c:	701a      	strb	r2, [r3, #0]
    __attribute__((aligned(4))) static uint8_t tx_buffer[5];
    uint8_t data_size;

    switch(SPI_queue[queue_head].msg_type) {
 800043e:	4b36      	ldr	r3, [pc, #216]	@ (8000518 <Process_SPI_Queue+0x100>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	b2db      	uxtb	r3, r3
 8000444:	4619      	mov	r1, r3
 8000446:	4a37      	ldr	r2, [pc, #220]	@ (8000524 <Process_SPI_Queue+0x10c>)
 8000448:	460b      	mov	r3, r1
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	440b      	add	r3, r1
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	4413      	add	r3, r2
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	b2db      	uxtb	r3, r3
 8000456:	2b00      	cmp	r3, #0
 8000458:	d002      	beq.n	8000460 <Process_SPI_Queue+0x48>
 800045a:	2b01      	cmp	r3, #1
 800045c:	d022      	beq.n	80004a4 <Process_SPI_Queue+0x8c>
 800045e:	e033      	b.n	80004c8 <Process_SPI_Queue+0xb0>
        case MSG_FLOAT_WITH_TYPE:
            tx_buffer[0] = SPI_queue[queue_head].payload.float_msg.val_type;
 8000460:	4b2d      	ldr	r3, [pc, #180]	@ (8000518 <Process_SPI_Queue+0x100>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	b2db      	uxtb	r3, r3
 8000466:	4619      	mov	r1, r3
 8000468:	4a2e      	ldr	r2, [pc, #184]	@ (8000524 <Process_SPI_Queue+0x10c>)
 800046a:	460b      	mov	r3, r1
 800046c:	005b      	lsls	r3, r3, #1
 800046e:	440b      	add	r3, r1
 8000470:	009b      	lsls	r3, r3, #2
 8000472:	4413      	add	r3, r2
 8000474:	3304      	adds	r3, #4
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	b2da      	uxtb	r2, r3
 800047a:	4b2b      	ldr	r3, [pc, #172]	@ (8000528 <Process_SPI_Queue+0x110>)
 800047c:	701a      	strb	r2, [r3, #0]
            memcpy(&tx_buffer[1], (const void*)&SPI_queue[queue_head].payload.float_msg.value, 4);
 800047e:	4b26      	ldr	r3, [pc, #152]	@ (8000518 <Process_SPI_Queue+0x100>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	b2db      	uxtb	r3, r3
 8000484:	461a      	mov	r2, r3
 8000486:	4613      	mov	r3, r2
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	4413      	add	r3, r2
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	4a25      	ldr	r2, [pc, #148]	@ (8000524 <Process_SPI_Queue+0x10c>)
 8000490:	4413      	add	r3, r2
 8000492:	3308      	adds	r3, #8
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	461a      	mov	r2, r3
 8000498:	4b23      	ldr	r3, [pc, #140]	@ (8000528 <Process_SPI_Queue+0x110>)
 800049a:	f8c3 2001 	str.w	r2, [r3, #1]
            data_size = 5;
 800049e:	2305      	movs	r3, #5
 80004a0:	71fb      	strb	r3, [r7, #7]
            break;
 80004a2:	e013      	b.n	80004cc <Process_SPI_Queue+0xb4>

        case MSG_RAW_16BIT:
            memcpy(tx_buffer, (const void*)&SPI_queue[queue_head].payload.raw_16bit, 2);
 80004a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000518 <Process_SPI_Queue+0x100>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	461a      	mov	r2, r3
 80004ac:	4613      	mov	r3, r2
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	4413      	add	r3, r2
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000524 <Process_SPI_Queue+0x10c>)
 80004b6:	4413      	add	r3, r2
 80004b8:	3304      	adds	r3, #4
 80004ba:	881b      	ldrh	r3, [r3, #0]
 80004bc:	b29a      	uxth	r2, r3
 80004be:	4b1a      	ldr	r3, [pc, #104]	@ (8000528 <Process_SPI_Queue+0x110>)
 80004c0:	801a      	strh	r2, [r3, #0]
            data_size = 2;
 80004c2:	2302      	movs	r3, #2
 80004c4:	71fb      	strb	r3, [r7, #7]
            break;
 80004c6:	e001      	b.n	80004cc <Process_SPI_Queue+0xb4>

        default:
            return HAL_ERROR;
 80004c8:	2301      	movs	r3, #1
 80004ca:	e021      	b.n	8000510 <Process_SPI_Queue+0xf8>
    }

    queue_head = (queue_head + 1) % SPI_QUEUE_SIZE;
 80004cc:	4b12      	ldr	r3, [pc, #72]	@ (8000518 <Process_SPI_Queue+0x100>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	3301      	adds	r3, #1
 80004d4:	425a      	negs	r2, r3
 80004d6:	f003 030f 	and.w	r3, r3, #15
 80004da:	f002 020f 	and.w	r2, r2, #15
 80004de:	bf58      	it	pl
 80004e0:	4253      	negpl	r3, r2
 80004e2:	b2da      	uxtb	r2, r3
 80004e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000518 <Process_SPI_Queue+0x100>)
 80004e6:	701a      	strb	r2, [r3, #0]

    SPI_CS_Enable();
 80004e8:	f7ff ff7e 	bl	80003e8 <SPI_CS_Enable>
    HAL_StatusTypeDef status = HAL_SPI_Transmit_DMA(SPI, tx_buffer, data_size);
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	b29b      	uxth	r3, r3
 80004f0:	461a      	mov	r2, r3
 80004f2:	490d      	ldr	r1, [pc, #52]	@ (8000528 <Process_SPI_Queue+0x110>)
 80004f4:	480d      	ldr	r0, [pc, #52]	@ (800052c <Process_SPI_Queue+0x114>)
 80004f6:	f009 faa5 	bl	8009a44 <HAL_SPI_Transmit_DMA>
 80004fa:	4603      	mov	r3, r0
 80004fc:	71bb      	strb	r3, [r7, #6]
    if (status != HAL_OK) {
 80004fe:	79bb      	ldrb	r3, [r7, #6]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d004      	beq.n	800050e <Process_SPI_Queue+0xf6>
        SPI_CS_Disable();
 8000504:	f7ff ff7c 	bl	8000400 <SPI_CS_Disable>
        is_transmitting = 0;
 8000508:	4b05      	ldr	r3, [pc, #20]	@ (8000520 <Process_SPI_Queue+0x108>)
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]
    }
    return status;
 800050e:	79bb      	ldrb	r3, [r7, #6]
}
 8000510:	4618      	mov	r0, r3
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	24000138 	.word	0x24000138
 800051c:	24000139 	.word	0x24000139
 8000520:	2400013a 	.word	0x2400013a
 8000524:	24000078 	.word	0x24000078
 8000528:	2400013c 	.word	0x2400013c
 800052c:	2400022c 	.word	0x2400022c

08000530 <HAL_SPI_TxCpltCallback>:

// --- SPI Transmission Complete Callback ---
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
    if (hspi == SPI) {
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a05      	ldr	r2, [pc, #20]	@ (8000550 <HAL_SPI_TxCpltCallback+0x20>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d103      	bne.n	8000548 <HAL_SPI_TxCpltCallback+0x18>
        // Process next message
    	SPI_CS_Disable();
 8000540:	f7ff ff5e 	bl	8000400 <SPI_CS_Disable>
        Process_SPI_Queue();
 8000544:	f7ff ff68 	bl	8000418 <Process_SPI_Queue>
    }
}
 8000548:	bf00      	nop
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	2400022c 	.word	0x2400022c

08000554 <HAL_SPI_ErrorCallback>:

// --- SPI Error Handling ---
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	if (hspi == SPI) {
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a07      	ldr	r2, [pc, #28]	@ (800057c <HAL_SPI_ErrorCallback+0x28>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d107      	bne.n	8000574 <HAL_SPI_ErrorCallback+0x20>
		HAL_SPI_Abort(SPI);  // Force-release SPI bus
 8000564:	4805      	ldr	r0, [pc, #20]	@ (800057c <HAL_SPI_ErrorCallback+0x28>)
 8000566:	f009 fbaf 	bl	8009cc8 <HAL_SPI_Abort>
	    is_transmitting = 0;
 800056a:	4b05      	ldr	r3, [pc, #20]	@ (8000580 <HAL_SPI_ErrorCallback+0x2c>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
	    Process_SPI_Queue();  // Retry
 8000570:	f7ff ff52 	bl	8000418 <Process_SPI_Queue>
	}
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	2400022c 	.word	0x2400022c
 8000580:	2400013a 	.word	0x2400013a

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000588:	f000 fa4e 	bl	8000a28 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800058c:	4b18      	ldr	r3, [pc, #96]	@ (80005f0 <main+0x6c>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000594:	2b00      	cmp	r3, #0
 8000596:	d11b      	bne.n	80005d0 <main+0x4c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000598:	f3bf 8f4f 	dsb	sy
}
 800059c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800059e:	f3bf 8f6f 	isb	sy
}
 80005a2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005a4:	4b12      	ldr	r3, [pc, #72]	@ (80005f0 <main+0x6c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005ac:	f3bf 8f4f 	dsb	sy
}
 80005b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005b2:	f3bf 8f6f 	isb	sy
}
 80005b6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005b8:	4b0d      	ldr	r3, [pc, #52]	@ (80005f0 <main+0x6c>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	4a0c      	ldr	r2, [pc, #48]	@ (80005f0 <main+0x6c>)
 80005be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005c2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005c4:	f3bf 8f4f 	dsb	sy
}
 80005c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ca:	f3bf 8f6f 	isb	sy
}
 80005ce:	e000      	b.n	80005d2 <main+0x4e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80005d0:	bf00      	nop
  SCB_EnableICache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fd4d 	bl	8001070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f80d 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 f9b3 	bl	8000944 <MX_GPIO_Init>
  MX_DMA_Init();
 80005de:	f000 f989 	bl	80008f4 <MX_DMA_Init>
  MX_SPI1_Init();
 80005e2:	f000 f931 	bl	8000848 <MX_SPI1_Init>
  MX_ADC1_Init();
 80005e6:	f000 f875 	bl	80006d4 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ea:	bf00      	nop
 80005ec:	e7fd      	b.n	80005ea <main+0x66>
 80005ee:	bf00      	nop
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b09c      	sub	sp, #112	@ 0x70
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005fe:	224c      	movs	r2, #76	@ 0x4c
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f009 ffd1 	bl	800a5aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2220      	movs	r2, #32
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f009 ffcb 	bl	800a5aa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000614:	2002      	movs	r0, #2
 8000616:	f005 fd81 	bl	800611c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800061a:	2300      	movs	r3, #0
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemClock_Config+0xdc>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000626:	4a2a      	ldr	r2, [pc, #168]	@ (80006d0 <SystemClock_Config+0xdc>)
 8000628:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800062c:	6193      	str	r3, [r2, #24]
 800062e:	4b28      	ldr	r3, [pc, #160]	@ (80006d0 <SystemClock_Config+0xdc>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800063a:	bf00      	nop
 800063c:	4b24      	ldr	r3, [pc, #144]	@ (80006d0 <SystemClock_Config+0xdc>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000644:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000648:	d1f8      	bne.n	800063c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064a:	2302      	movs	r3, #2
 800064c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800064e:	2301      	movs	r3, #1
 8000650:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000652:	2340      	movs	r3, #64	@ 0x40
 8000654:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065a:	2300      	movs	r3, #0
 800065c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800065e:	2304      	movs	r3, #4
 8000660:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000662:	230c      	movs	r3, #12
 8000664:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000666:	2302      	movs	r3, #2
 8000668:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800066a:	2303      	movs	r3, #3
 800066c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800066e:	2302      	movs	r3, #2
 8000670:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000672:	230c      	movs	r3, #12
 8000674:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000676:	2300      	movs	r3, #0
 8000678:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000682:	4618      	mov	r0, r3
 8000684:	f005 fd84 	bl	8006190 <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800068e:	f000 f9f7 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	233f      	movs	r3, #63	@ 0x3f
 8000694:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006a6:	2340      	movs	r3, #64	@ 0x40
 80006a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2101      	movs	r1, #1
 80006b6:	4618      	mov	r0, r3
 80006b8:	f006 f944 	bl	8006944 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006c2:	f000 f9dd 	bl	8000a80 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3770      	adds	r7, #112	@ 0x70
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	58024800 	.word	0x58024800

080006d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08c      	sub	sp, #48	@ 0x30
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006e6:	463b      	mov	r3, r7
 80006e8:	2224      	movs	r2, #36	@ 0x24
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f009 ff5c 	bl	800a5aa <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006f2:	4b52      	ldr	r3, [pc, #328]	@ (800083c <MX_ADC1_Init+0x168>)
 80006f4:	4a52      	ldr	r2, [pc, #328]	@ (8000840 <MX_ADC1_Init+0x16c>)
 80006f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 80006f8:	4b50      	ldr	r3, [pc, #320]	@ (800083c <MX_ADC1_Init+0x168>)
 80006fa:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 80006fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000700:	4b4e      	ldr	r3, [pc, #312]	@ (800083c <MX_ADC1_Init+0x168>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000706:	4b4d      	ldr	r3, [pc, #308]	@ (800083c <MX_ADC1_Init+0x168>)
 8000708:	2201      	movs	r2, #1
 800070a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800070c:	4b4b      	ldr	r3, [pc, #300]	@ (800083c <MX_ADC1_Init+0x168>)
 800070e:	2208      	movs	r2, #8
 8000710:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000712:	4b4a      	ldr	r3, [pc, #296]	@ (800083c <MX_ADC1_Init+0x168>)
 8000714:	2200      	movs	r2, #0
 8000716:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000718:	4b48      	ldr	r3, [pc, #288]	@ (800083c <MX_ADC1_Init+0x168>)
 800071a:	2201      	movs	r2, #1
 800071c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 800071e:	4b47      	ldr	r3, [pc, #284]	@ (800083c <MX_ADC1_Init+0x168>)
 8000720:	2206      	movs	r2, #6
 8000722:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000724:	4b45      	ldr	r3, [pc, #276]	@ (800083c <MX_ADC1_Init+0x168>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072c:	4b43      	ldr	r3, [pc, #268]	@ (800083c <MX_ADC1_Init+0x168>)
 800072e:	2200      	movs	r2, #0
 8000730:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000732:	4b42      	ldr	r3, [pc, #264]	@ (800083c <MX_ADC1_Init+0x168>)
 8000734:	2200      	movs	r2, #0
 8000736:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000738:	4b40      	ldr	r3, [pc, #256]	@ (800083c <MX_ADC1_Init+0x168>)
 800073a:	2203      	movs	r2, #3
 800073c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800073e:	4b3f      	ldr	r3, [pc, #252]	@ (800083c <MX_ADC1_Init+0x168>)
 8000740:	2200      	movs	r2, #0
 8000742:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000744:	4b3d      	ldr	r3, [pc, #244]	@ (800083c <MX_ADC1_Init+0x168>)
 8000746:	2200      	movs	r2, #0
 8000748:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800074a:	4b3c      	ldr	r3, [pc, #240]	@ (800083c <MX_ADC1_Init+0x168>)
 800074c:	2200      	movs	r2, #0
 800074e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000752:	4b3a      	ldr	r3, [pc, #232]	@ (800083c <MX_ADC1_Init+0x168>)
 8000754:	2201      	movs	r2, #1
 8000756:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000758:	4838      	ldr	r0, [pc, #224]	@ (800083c <MX_ADC1_Init+0x168>)
 800075a:	f000 ffa3 	bl	80016a4 <HAL_ADC_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000764:	f000 f98c 	bl	8000a80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800076c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000770:	4619      	mov	r1, r3
 8000772:	4832      	ldr	r0, [pc, #200]	@ (800083c <MX_ADC1_Init+0x168>)
 8000774:	f002 fa62 	bl	8002c3c <HAL_ADCEx_MultiModeConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800077e:	f000 f97f 	bl	8000a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000782:	4b30      	ldr	r3, [pc, #192]	@ (8000844 <MX_ADC1_Init+0x170>)
 8000784:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000786:	2306      	movs	r3, #6
 8000788:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800078e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000792:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000794:	2304      	movs	r3, #4
 8000796:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a2:	463b      	mov	r3, r7
 80007a4:	4619      	mov	r1, r3
 80007a6:	4825      	ldr	r0, [pc, #148]	@ (800083c <MX_ADC1_Init+0x168>)
 80007a8:	f001 fbd2 	bl	8001f50 <HAL_ADC_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80007b2:	f000 f965 	bl	8000a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007b6:	230c      	movs	r3, #12
 80007b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	4619      	mov	r1, r3
 80007be:	481f      	ldr	r0, [pc, #124]	@ (800083c <MX_ADC1_Init+0x168>)
 80007c0:	f001 fbc6 	bl	8001f50 <HAL_ADC_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80007ca:	f000 f959 	bl	8000a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007ce:	2312      	movs	r3, #18
 80007d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d2:	463b      	mov	r3, r7
 80007d4:	4619      	mov	r1, r3
 80007d6:	4819      	ldr	r0, [pc, #100]	@ (800083c <MX_ADC1_Init+0x168>)
 80007d8:	f001 fbba 	bl	8001f50 <HAL_ADC_ConfigChannel>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 80007e2:	f000 f94d 	bl	8000a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80007e6:	2318      	movs	r3, #24
 80007e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ea:	463b      	mov	r3, r7
 80007ec:	4619      	mov	r1, r3
 80007ee:	4813      	ldr	r0, [pc, #76]	@ (800083c <MX_ADC1_Init+0x168>)
 80007f0:	f001 fbae 	bl	8001f50 <HAL_ADC_ConfigChannel>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC1_Init+0x12a>
  {
    Error_Handler();
 80007fa:	f000 f941 	bl	8000a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80007fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000802:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	4619      	mov	r1, r3
 8000808:	480c      	ldr	r0, [pc, #48]	@ (800083c <MX_ADC1_Init+0x168>)
 800080a:	f001 fba1 	bl	8001f50 <HAL_ADC_ConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8000814:	f000 f934 	bl	8000a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000818:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800081c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081e:	463b      	mov	r3, r7
 8000820:	4619      	mov	r1, r3
 8000822:	4806      	ldr	r0, [pc, #24]	@ (800083c <MX_ADC1_Init+0x168>)
 8000824:	f001 fb94 	bl	8001f50 <HAL_ADC_ConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 800082e:	f000 f927 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	3730      	adds	r7, #48	@ 0x30
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	24000144 	.word	0x24000144
 8000840:	40022000 	.word	0x40022000
 8000844:	0c900008 	.word	0x0c900008

08000848 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800084c:	4b27      	ldr	r3, [pc, #156]	@ (80008ec <MX_SPI1_Init+0xa4>)
 800084e:	4a28      	ldr	r2, [pc, #160]	@ (80008f0 <MX_SPI1_Init+0xa8>)
 8000850:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000852:	4b26      	ldr	r3, [pc, #152]	@ (80008ec <MX_SPI1_Init+0xa4>)
 8000854:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000858:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800085a:	4b24      	ldr	r3, [pc, #144]	@ (80008ec <MX_SPI1_Init+0xa4>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000860:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <MX_SPI1_Init+0xa4>)
 8000862:	2207      	movs	r2, #7
 8000864:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000866:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <MX_SPI1_Init+0xa4>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800086c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <MX_SPI1_Init+0xa4>)
 800086e:	2200      	movs	r2, #0
 8000870:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000872:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <MX_SPI1_Init+0xa4>)
 8000874:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000878:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800087a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <MX_SPI1_Init+0xa4>)
 800087c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000880:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000882:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <MX_SPI1_Init+0xa4>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000888:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <MX_SPI1_Init+0xa4>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800088e:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <MX_SPI1_Init+0xa4>)
 8000890:	2200      	movs	r2, #0
 8000892:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000894:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <MX_SPI1_Init+0xa4>)
 8000896:	2200      	movs	r2, #0
 8000898:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800089a:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <MX_SPI1_Init+0xa4>)
 800089c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80008a2:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <MX_SPI1_Init+0xa4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80008a8:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <MX_SPI1_Init+0xa4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_SPI1_Init+0xa4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008b4:	4b0d      	ldr	r3, [pc, #52]	@ (80008ec <MX_SPI1_Init+0xa4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80008ba:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <MX_SPI1_Init+0xa4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <MX_SPI1_Init+0xa4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80008c6:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_SPI1_Init+0xa4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80008cc:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <MX_SPI1_Init+0xa4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <MX_SPI1_Init+0xa4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d8:	4804      	ldr	r0, [pc, #16]	@ (80008ec <MX_SPI1_Init+0xa4>)
 80008da:	f008 ff8f 	bl	80097fc <HAL_SPI_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80008e4:	f000 f8cc 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	2400022c 	.word	0x2400022c
 80008f0:	40013000 	.word	0x40013000

080008f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008fa:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <MX_DMA_Init+0x4c>)
 80008fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000900:	4a0f      	ldr	r2, [pc, #60]	@ (8000940 <MX_DMA_Init+0x4c>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800090a:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <MX_DMA_Init+0x4c>)
 800090c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	200c      	movs	r0, #12
 800091e:	f002 fb4a 	bl	8002fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000922:	200c      	movs	r0, #12
 8000924:	f002 fb61 	bl	8002fea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000928:	2200      	movs	r2, #0
 800092a:	2100      	movs	r1, #0
 800092c:	200d      	movs	r0, #13
 800092e:	f002 fb42 	bl	8002fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000932:	200d      	movs	r0, #13
 8000934:	f002 fb59 	bl	8002fea <HAL_NVIC_EnableIRQ>

}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	58024400 	.word	0x58024400

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	@ 0x28
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	4b31      	ldr	r3, [pc, #196]	@ (8000a20 <MX_GPIO_Init+0xdc>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000960:	4a2f      	ldr	r2, [pc, #188]	@ (8000a20 <MX_GPIO_Init+0xdc>)
 8000962:	f043 0304 	orr.w	r3, r3, #4
 8000966:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800096a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a20 <MX_GPIO_Init+0xdc>)
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000970:	f003 0304 	and.w	r3, r3, #4
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000978:	4b29      	ldr	r3, [pc, #164]	@ (8000a20 <MX_GPIO_Init+0xdc>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097e:	4a28      	ldr	r2, [pc, #160]	@ (8000a20 <MX_GPIO_Init+0xdc>)
 8000980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000984:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000988:	4b25      	ldr	r3, [pc, #148]	@ (8000a20 <MX_GPIO_Init+0xdc>)
 800098a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	4b22      	ldr	r3, [pc, #136]	@ (8000a20 <MX_GPIO_Init+0xdc>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099c:	4a20      	ldr	r2, [pc, #128]	@ (8000a20 <MX_GPIO_Init+0xdc>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a20 <MX_GPIO_Init+0xdc>)
 80009a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a20 <MX_GPIO_Init+0xdc>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ba:	4a19      	ldr	r2, [pc, #100]	@ (8000a20 <MX_GPIO_Init+0xdc>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009c4:	4b16      	ldr	r3, [pc, #88]	@ (8000a20 <MX_GPIO_Init+0xdc>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d2:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <MX_GPIO_Init+0xdc>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d8:	4a11      	ldr	r2, [pc, #68]	@ (8000a20 <MX_GPIO_Init+0xdc>)
 80009da:	f043 0308 	orr.w	r3, r3, #8
 80009de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <MX_GPIO_Init+0xdc>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e8:	f003 0308 	and.w	r3, r3, #8
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2108      	movs	r1, #8
 80009f4:	480b      	ldr	r0, [pc, #44]	@ (8000a24 <MX_GPIO_Init+0xe0>)
 80009f6:	f005 fb77 	bl	80060e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009fa:	2308      	movs	r3, #8
 80009fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4804      	ldr	r0, [pc, #16]	@ (8000a24 <MX_GPIO_Init+0xe0>)
 8000a12:	f005 f9c1 	bl	8005d98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a16:	bf00      	nop
 8000a18:	3728      	adds	r7, #40	@ 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	58024400 	.word	0x58024400
 8000a24:	58020000 	.word	0x58020000

08000a28 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a2e:	463b      	mov	r3, r7
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a3a:	f002 faf1 	bl	8003020 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a4a:	231f      	movs	r3, #31
 8000a4c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a4e:	2387      	movs	r3, #135	@ 0x87
 8000a50:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a56:	2300      	movs	r3, #0
 8000a58:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f002 fb0f 	bl	8003090 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a72:	2004      	movs	r0, #4
 8000a74:	f002 faec 	bl	8003050 <HAL_MPU_Enable>

}
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <Error_Handler+0x8>

08000a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	4b0a      	ldr	r3, [pc, #40]	@ (8000abc <HAL_MspInit+0x30>)
 8000a94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a98:	4a08      	ldr	r2, [pc, #32]	@ (8000abc <HAL_MspInit+0x30>)
 8000a9a:	f043 0302 	orr.w	r3, r3, #2
 8000a9e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <HAL_MspInit+0x30>)
 8000aa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000aa8:	f003 0302 	and.w	r3, r3, #2
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	58024400 	.word	0x58024400

08000ac0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b0ba      	sub	sp, #232	@ 0xe8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad8:	f107 0318 	add.w	r3, r7, #24
 8000adc:	22b8      	movs	r2, #184	@ 0xb8
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f009 fd62 	bl	800a5aa <memset>
  if(hadc->Instance==ADC1)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a66      	ldr	r2, [pc, #408]	@ (8000c84 <HAL_ADC_MspInit+0x1c4>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	f040 80c4 	bne.w	8000c7a <HAL_ADC_MspInit+0x1ba>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000af2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000af6:	f04f 0300 	mov.w	r3, #0
 8000afa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000afe:	2304      	movs	r3, #4
 8000b00:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000b02:	230c      	movs	r3, #12
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000b06:	2305      	movs	r3, #5
 8000b08:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b12:	23c0      	movs	r3, #192	@ 0xc0
 8000b14:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b24:	f107 0318 	add.w	r3, r7, #24
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f006 fa81 	bl	8007030 <HAL_RCCEx_PeriphCLKConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000b34:	f7ff ffa4 	bl	8000a80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b38:	4b53      	ldr	r3, [pc, #332]	@ (8000c88 <HAL_ADC_MspInit+0x1c8>)
 8000b3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b3e:	4a52      	ldr	r2, [pc, #328]	@ (8000c88 <HAL_ADC_MspInit+0x1c8>)
 8000b40:	f043 0320 	orr.w	r3, r3, #32
 8000b44:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b48:	4b4f      	ldr	r3, [pc, #316]	@ (8000c88 <HAL_ADC_MspInit+0x1c8>)
 8000b4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b4e:	f003 0320 	and.w	r3, r3, #32
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b4c      	ldr	r3, [pc, #304]	@ (8000c88 <HAL_ADC_MspInit+0x1c8>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5c:	4a4a      	ldr	r2, [pc, #296]	@ (8000c88 <HAL_ADC_MspInit+0x1c8>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b66:	4b48      	ldr	r3, [pc, #288]	@ (8000c88 <HAL_ADC_MspInit+0x1c8>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b74:	4b44      	ldr	r3, [pc, #272]	@ (8000c88 <HAL_ADC_MspInit+0x1c8>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7a:	4a43      	ldr	r2, [pc, #268]	@ (8000c88 <HAL_ADC_MspInit+0x1c8>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b84:	4b40      	ldr	r3, [pc, #256]	@ (8000c88 <HAL_ADC_MspInit+0x1c8>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b3d      	ldr	r3, [pc, #244]	@ (8000c88 <HAL_ADC_MspInit+0x1c8>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b98:	4a3b      	ldr	r2, [pc, #236]	@ (8000c88 <HAL_ADC_MspInit+0x1c8>)
 8000b9a:	f043 0302 	orr.w	r3, r3, #2
 8000b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba2:	4b39      	ldr	r3, [pc, #228]	@ (8000c88 <HAL_ADC_MspInit+0x1c8>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bb0:	23c0      	movs	r3, #192	@ 0xc0
 8000bb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4830      	ldr	r0, [pc, #192]	@ (8000c8c <HAL_ADC_MspInit+0x1cc>)
 8000bca:	f005 f8e5 	bl	8005d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000bce:	2330      	movs	r3, #48	@ 0x30
 8000bd0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000be4:	4619      	mov	r1, r3
 8000be6:	482a      	ldr	r0, [pc, #168]	@ (8000c90 <HAL_ADC_MspInit+0x1d0>)
 8000be8:	f005 f8d6 	bl	8005d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bec:	2303      	movs	r3, #3
 8000bee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c02:	4619      	mov	r1, r3
 8000c04:	4823      	ldr	r0, [pc, #140]	@ (8000c94 <HAL_ADC_MspInit+0x1d4>)
 8000c06:	f005 f8c7 	bl	8005d98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream2;
 8000c0a:	4b23      	ldr	r3, [pc, #140]	@ (8000c98 <HAL_ADC_MspInit+0x1d8>)
 8000c0c:	4a23      	ldr	r2, [pc, #140]	@ (8000c9c <HAL_ADC_MspInit+0x1dc>)
 8000c0e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000c10:	4b21      	ldr	r3, [pc, #132]	@ (8000c98 <HAL_ADC_MspInit+0x1d8>)
 8000c12:	2209      	movs	r2, #9
 8000c14:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c16:	4b20      	ldr	r3, [pc, #128]	@ (8000c98 <HAL_ADC_MspInit+0x1d8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c98 <HAL_ADC_MspInit+0x1d8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c22:	4b1d      	ldr	r3, [pc, #116]	@ (8000c98 <HAL_ADC_MspInit+0x1d8>)
 8000c24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c28:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c98 <HAL_ADC_MspInit+0x1d8>)
 8000c2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c32:	4b19      	ldr	r3, [pc, #100]	@ (8000c98 <HAL_ADC_MspInit+0x1d8>)
 8000c34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <HAL_ADC_MspInit+0x1d8>)
 8000c3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c40:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <HAL_ADC_MspInit+0x1d8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c48:	4b13      	ldr	r3, [pc, #76]	@ (8000c98 <HAL_ADC_MspInit+0x1d8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c4e:	4812      	ldr	r0, [pc, #72]	@ (8000c98 <HAL_ADC_MspInit+0x1d8>)
 8000c50:	f002 fa5e 	bl	8003110 <HAL_DMA_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_ADC_MspInit+0x19e>
    {
      Error_Handler();
 8000c5a:	f7ff ff11 	bl	8000a80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a0d      	ldr	r2, [pc, #52]	@ (8000c98 <HAL_ADC_MspInit+0x1d8>)
 8000c62:	659a      	str	r2, [r3, #88]	@ 0x58
 8000c64:	4a0c      	ldr	r2, [pc, #48]	@ (8000c98 <HAL_ADC_MspInit+0x1d8>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2012      	movs	r0, #18
 8000c70:	f002 f9a1 	bl	8002fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000c74:	2012      	movs	r0, #18
 8000c76:	f002 f9b8 	bl	8002fea <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c7a:	bf00      	nop
 8000c7c:	37e8      	adds	r7, #232	@ 0xe8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40022000 	.word	0x40022000
 8000c88:	58024400 	.word	0x58024400
 8000c8c:	58020000 	.word	0x58020000
 8000c90:	58020800 	.word	0x58020800
 8000c94:	58020400 	.word	0x58020400
 8000c98:	240001b4 	.word	0x240001b4
 8000c9c:	40020040 	.word	0x40020040

08000ca0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b0ba      	sub	sp, #232	@ 0xe8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb8:	f107 0318 	add.w	r3, r7, #24
 8000cbc:	22b8      	movs	r2, #184	@ 0xb8
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f009 fc72 	bl	800a5aa <memset>
  if(hspi->Instance==SPI1)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a65      	ldr	r2, [pc, #404]	@ (8000e60 <HAL_SPI_MspInit+0x1c0>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	f040 80c2 	bne.w	8000e56 <HAL_SPI_MspInit+0x1b6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000cd2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cd6:	f04f 0300 	mov.w	r3, #0
 8000cda:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce2:	f107 0318 	add.w	r3, r7, #24
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f006 f9a2 	bl	8007030 <HAL_RCCEx_PeriphCLKConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000cf2:	f7ff fec5 	bl	8000a80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cf6:	4b5b      	ldr	r3, [pc, #364]	@ (8000e64 <HAL_SPI_MspInit+0x1c4>)
 8000cf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000cfc:	4a59      	ldr	r2, [pc, #356]	@ (8000e64 <HAL_SPI_MspInit+0x1c4>)
 8000cfe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000d06:	4b57      	ldr	r3, [pc, #348]	@ (8000e64 <HAL_SPI_MspInit+0x1c4>)
 8000d08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	4b53      	ldr	r3, [pc, #332]	@ (8000e64 <HAL_SPI_MspInit+0x1c4>)
 8000d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1a:	4a52      	ldr	r2, [pc, #328]	@ (8000e64 <HAL_SPI_MspInit+0x1c4>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d24:	4b4f      	ldr	r3, [pc, #316]	@ (8000e64 <HAL_SPI_MspInit+0x1c4>)
 8000d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d32:	4b4c      	ldr	r3, [pc, #304]	@ (8000e64 <HAL_SPI_MspInit+0x1c4>)
 8000d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d38:	4a4a      	ldr	r2, [pc, #296]	@ (8000e64 <HAL_SPI_MspInit+0x1c4>)
 8000d3a:	f043 0308 	orr.w	r3, r3, #8
 8000d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d42:	4b48      	ldr	r3, [pc, #288]	@ (8000e64 <HAL_SPI_MspInit+0x1c4>)
 8000d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d48:	f003 0308 	and.w	r3, r3, #8
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d50:	4b44      	ldr	r3, [pc, #272]	@ (8000e64 <HAL_SPI_MspInit+0x1c4>)
 8000d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d56:	4a43      	ldr	r2, [pc, #268]	@ (8000e64 <HAL_SPI_MspInit+0x1c4>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d60:	4b40      	ldr	r3, [pc, #256]	@ (8000e64 <HAL_SPI_MspInit+0x1c4>)
 8000d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PB4(NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d6e:	2320      	movs	r3, #32
 8000d70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d86:	2305      	movs	r3, #5
 8000d88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d90:	4619      	mov	r1, r3
 8000d92:	4835      	ldr	r0, [pc, #212]	@ (8000e68 <HAL_SPI_MspInit+0x1c8>)
 8000d94:	f005 f800 	bl	8005d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d98:	2380      	movs	r3, #128	@ 0x80
 8000d9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000db0:	2305      	movs	r3, #5
 8000db2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	482b      	ldr	r0, [pc, #172]	@ (8000e6c <HAL_SPI_MspInit+0x1cc>)
 8000dbe:	f004 ffeb 	bl	8005d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dc2:	2310      	movs	r3, #16
 8000dc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dda:	2305      	movs	r3, #5
 8000ddc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000de4:	4619      	mov	r1, r3
 8000de6:	4822      	ldr	r0, [pc, #136]	@ (8000e70 <HAL_SPI_MspInit+0x1d0>)
 8000de8:	f004 ffd6 	bl	8005d98 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8000dec:	4b21      	ldr	r3, [pc, #132]	@ (8000e74 <HAL_SPI_MspInit+0x1d4>)
 8000dee:	4a22      	ldr	r2, [pc, #136]	@ (8000e78 <HAL_SPI_MspInit+0x1d8>)
 8000df0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000df2:	4b20      	ldr	r3, [pc, #128]	@ (8000e74 <HAL_SPI_MspInit+0x1d4>)
 8000df4:	2226      	movs	r2, #38	@ 0x26
 8000df6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000df8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e74 <HAL_SPI_MspInit+0x1d4>)
 8000dfa:	2240      	movs	r2, #64	@ 0x40
 8000dfc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000e74 <HAL_SPI_MspInit+0x1d4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e04:	4b1b      	ldr	r3, [pc, #108]	@ (8000e74 <HAL_SPI_MspInit+0x1d4>)
 8000e06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e0a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e0c:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <HAL_SPI_MspInit+0x1d4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e12:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <HAL_SPI_MspInit+0x1d4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000e18:	4b16      	ldr	r3, [pc, #88]	@ (8000e74 <HAL_SPI_MspInit+0x1d4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e1e:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <HAL_SPI_MspInit+0x1d4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e24:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <HAL_SPI_MspInit+0x1d4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000e2a:	4812      	ldr	r0, [pc, #72]	@ (8000e74 <HAL_SPI_MspInit+0x1d4>)
 8000e2c:	f002 f970 	bl	8003110 <HAL_DMA_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_SPI_MspInit+0x19a>
    {
      Error_Handler();
 8000e36:	f7ff fe23 	bl	8000a80 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <HAL_SPI_MspInit+0x1d4>)
 8000e3e:	679a      	str	r2, [r3, #120]	@ 0x78
 8000e40:	4a0c      	ldr	r2, [pc, #48]	@ (8000e74 <HAL_SPI_MspInit+0x1d4>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2023      	movs	r0, #35	@ 0x23
 8000e4c:	f002 f8b3 	bl	8002fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000e50:	2023      	movs	r0, #35	@ 0x23
 8000e52:	f002 f8ca 	bl	8002fea <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e56:	bf00      	nop
 8000e58:	37e8      	adds	r7, #232	@ 0xe8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40013000 	.word	0x40013000
 8000e64:	58024400 	.word	0x58024400
 8000e68:	58020000 	.word	0x58020000
 8000e6c:	58020c00 	.word	0x58020c00
 8000e70:	58020400 	.word	0x58020400
 8000e74:	240002b4 	.word	0x240002b4
 8000e78:	40020028 	.word	0x40020028

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <NMI_Handler+0x4>

08000e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <MemManage_Handler+0x4>

08000e94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed2:	f000 f93f 	bl	8001154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000ee0:	4802      	ldr	r0, [pc, #8]	@ (8000eec <DMA1_Stream1_IRQHandler+0x10>)
 8000ee2:	f003 fc3b 	bl	800475c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	240002b4 	.word	0x240002b4

08000ef0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ef4:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <DMA1_Stream2_IRQHandler+0x10>)
 8000ef6:	f003 fc31 	bl	800475c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	240001b4 	.word	0x240001b4

08000f04 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f08:	4802      	ldr	r0, [pc, #8]	@ (8000f14 <ADC_IRQHandler+0x10>)
 8000f0a:	f000 fdd3 	bl	8001ab4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	24000144 	.word	0x24000144

08000f18 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f1c:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <SPI1_IRQHandler+0x10>)
 8000f1e:	f008 ffc1 	bl	8009ea4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2400022c 	.word	0x2400022c

08000f2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f30:	4b32      	ldr	r3, [pc, #200]	@ (8000ffc <SystemInit+0xd0>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f36:	4a31      	ldr	r2, [pc, #196]	@ (8000ffc <SystemInit+0xd0>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f40:	4b2f      	ldr	r3, [pc, #188]	@ (8001000 <SystemInit+0xd4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 030f 	and.w	r3, r3, #15
 8000f48:	2b06      	cmp	r3, #6
 8000f4a:	d807      	bhi.n	8000f5c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f4c:	4b2c      	ldr	r3, [pc, #176]	@ (8001000 <SystemInit+0xd4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f023 030f 	bic.w	r3, r3, #15
 8000f54:	4a2a      	ldr	r2, [pc, #168]	@ (8001000 <SystemInit+0xd4>)
 8000f56:	f043 0307 	orr.w	r3, r3, #7
 8000f5a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f5c:	4b29      	ldr	r3, [pc, #164]	@ (8001004 <SystemInit+0xd8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a28      	ldr	r2, [pc, #160]	@ (8001004 <SystemInit+0xd8>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f68:	4b26      	ldr	r3, [pc, #152]	@ (8001004 <SystemInit+0xd8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f6e:	4b25      	ldr	r3, [pc, #148]	@ (8001004 <SystemInit+0xd8>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	4924      	ldr	r1, [pc, #144]	@ (8001004 <SystemInit+0xd8>)
 8000f74:	4b24      	ldr	r3, [pc, #144]	@ (8001008 <SystemInit+0xdc>)
 8000f76:	4013      	ands	r3, r2
 8000f78:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f7a:	4b21      	ldr	r3, [pc, #132]	@ (8001000 <SystemInit+0xd4>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0308 	and.w	r3, r3, #8
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d007      	beq.n	8000f96 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f86:	4b1e      	ldr	r3, [pc, #120]	@ (8001000 <SystemInit+0xd4>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f023 030f 	bic.w	r3, r3, #15
 8000f8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001000 <SystemInit+0xd4>)
 8000f90:	f043 0307 	orr.w	r3, r3, #7
 8000f94:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f96:	4b1b      	ldr	r3, [pc, #108]	@ (8001004 <SystemInit+0xd8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <SystemInit+0xd8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <SystemInit+0xd8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <SystemInit+0xd8>)
 8000faa:	4a18      	ldr	r2, [pc, #96]	@ (800100c <SystemInit+0xe0>)
 8000fac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fae:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <SystemInit+0xd8>)
 8000fb0:	4a17      	ldr	r2, [pc, #92]	@ (8001010 <SystemInit+0xe4>)
 8000fb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fb4:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <SystemInit+0xd8>)
 8000fb6:	4a17      	ldr	r2, [pc, #92]	@ (8001014 <SystemInit+0xe8>)
 8000fb8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fba:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <SystemInit+0xd8>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fc0:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <SystemInit+0xd8>)
 8000fc2:	4a14      	ldr	r2, [pc, #80]	@ (8001014 <SystemInit+0xe8>)
 8000fc4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <SystemInit+0xd8>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001004 <SystemInit+0xd8>)
 8000fce:	4a11      	ldr	r2, [pc, #68]	@ (8001014 <SystemInit+0xe8>)
 8000fd0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <SystemInit+0xd8>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <SystemInit+0xd8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a09      	ldr	r2, [pc, #36]	@ (8001004 <SystemInit+0xd8>)
 8000fde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fe2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fe4:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <SystemInit+0xd8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <SystemInit+0xec>)
 8000fec:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000ff0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00
 8001000:	52002000 	.word	0x52002000
 8001004:	58024400 	.word	0x58024400
 8001008:	eaf6ed7f 	.word	0xeaf6ed7f
 800100c:	02020200 	.word	0x02020200
 8001010:	01ff0000 	.word	0x01ff0000
 8001014:	01010280 	.word	0x01010280
 8001018:	52004000 	.word	0x52004000

0800101c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800101c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001054 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001020:	f7ff ff84 	bl	8000f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001024:	480c      	ldr	r0, [pc, #48]	@ (8001058 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001026:	490d      	ldr	r1, [pc, #52]	@ (800105c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001028:	4a0d      	ldr	r2, [pc, #52]	@ (8001060 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800102c:	e002      	b.n	8001034 <LoopCopyDataInit>

0800102e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001032:	3304      	adds	r3, #4

08001034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001038:	d3f9      	bcc.n	800102e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103a:	4a0a      	ldr	r2, [pc, #40]	@ (8001064 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800103c:	4c0a      	ldr	r4, [pc, #40]	@ (8001068 <LoopFillZerobss+0x22>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001040:	e001      	b.n	8001046 <LoopFillZerobss>

08001042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001044:	3204      	adds	r2, #4

08001046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001048:	d3fb      	bcc.n	8001042 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800104a:	f009 fab7 	bl	800a5bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104e:	f7ff fa99 	bl	8000584 <main>
  bx  lr
 8001052:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001054:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001058:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800105c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001060:	0800a63c 	.word	0x0800a63c
  ldr r2, =_sbss
 8001064:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 8001068:	24000330 	.word	0x24000330

0800106c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC3_IRQHandler>
	...

08001070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001076:	2003      	movs	r0, #3
 8001078:	f001 ff92 	bl	8002fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800107c:	f005 fe18 	bl	8006cb0 <HAL_RCC_GetSysClockFreq>
 8001080:	4602      	mov	r2, r0
 8001082:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <HAL_Init+0x68>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	0a1b      	lsrs	r3, r3, #8
 8001088:	f003 030f 	and.w	r3, r3, #15
 800108c:	4913      	ldr	r1, [pc, #76]	@ (80010dc <HAL_Init+0x6c>)
 800108e:	5ccb      	ldrb	r3, [r1, r3]
 8001090:	f003 031f 	and.w	r3, r3, #31
 8001094:	fa22 f303 	lsr.w	r3, r2, r3
 8001098:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800109a:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <HAL_Init+0x68>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	4a0e      	ldr	r2, [pc, #56]	@ (80010dc <HAL_Init+0x6c>)
 80010a4:	5cd3      	ldrb	r3, [r2, r3]
 80010a6:	f003 031f 	and.w	r3, r3, #31
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	fa22 f303 	lsr.w	r3, r2, r3
 80010b0:	4a0b      	ldr	r2, [pc, #44]	@ (80010e0 <HAL_Init+0x70>)
 80010b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010b4:	4a0b      	ldr	r2, [pc, #44]	@ (80010e4 <HAL_Init+0x74>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ba:	200f      	movs	r0, #15
 80010bc:	f000 f814 	bl	80010e8 <HAL_InitTick>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e002      	b.n	80010d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010ca:	f7ff fcdf 	bl	8000a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	58024400 	.word	0x58024400
 80010dc:	0800a61c 	.word	0x0800a61c
 80010e0:	24000004 	.word	0x24000004
 80010e4:	24000000 	.word	0x24000000

080010e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010f0:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <HAL_InitTick+0x60>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e021      	b.n	8001140 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010fc:	4b13      	ldr	r3, [pc, #76]	@ (800114c <HAL_InitTick+0x64>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <HAL_InitTick+0x60>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800110a:	fbb3 f3f1 	udiv	r3, r3, r1
 800110e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f001 ff77 	bl	8003006 <HAL_SYSTICK_Config>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e00e      	b.n	8001140 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b0f      	cmp	r3, #15
 8001126:	d80a      	bhi.n	800113e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001128:	2200      	movs	r2, #0
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	f04f 30ff 	mov.w	r0, #4294967295
 8001130:	f001 ff41 	bl	8002fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001134:	4a06      	ldr	r2, [pc, #24]	@ (8001150 <HAL_InitTick+0x68>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	e000      	b.n	8001140 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2400000c 	.word	0x2400000c
 800114c:	24000000 	.word	0x24000000
 8001150:	24000008 	.word	0x24000008

08001154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001158:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <HAL_IncTick+0x20>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <HAL_IncTick+0x24>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4413      	add	r3, r2
 8001164:	4a04      	ldr	r2, [pc, #16]	@ (8001178 <HAL_IncTick+0x24>)
 8001166:	6013      	str	r3, [r2, #0]
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	2400000c 	.word	0x2400000c
 8001178:	2400032c 	.word	0x2400032c

0800117c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return uwTick;
 8001180:	4b03      	ldr	r3, [pc, #12]	@ (8001190 <HAL_GetTick+0x14>)
 8001182:	681b      	ldr	r3, [r3, #0]
}
 8001184:	4618      	mov	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	2400032c 	.word	0x2400032c

08001194 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	431a      	orrs	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	609a      	str	r2, [r3, #8]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	431a      	orrs	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	609a      	str	r2, [r3, #8]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	3360      	adds	r3, #96	@ 0x60
 800120e:	461a      	mov	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4a10      	ldr	r2, [pc, #64]	@ (800125c <LL_ADC_SetOffset+0x60>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d10b      	bne.n	8001238 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	4313      	orrs	r3, r2
 800122e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001236:	e00b      	b.n	8001250 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	430b      	orrs	r3, r1
 800124a:	431a      	orrs	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	601a      	str	r2, [r3, #0]
}
 8001250:	bf00      	nop
 8001252:	371c      	adds	r7, #28
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	58026000 	.word	0x58026000

08001260 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3360      	adds	r3, #96	@ 0x60
 800126e:	461a      	mov	r2, r3
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001280:	4618      	mov	r0, r3
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	f003 031f 	and.w	r3, r3, #31
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	431a      	orrs	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	611a      	str	r2, [r3, #16]
}
 80012b2:	bf00      	nop
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001300 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d00e      	beq.n	80012f2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	3360      	adds	r3, #96	@ 0x60
 80012d8:	461a      	mov	r2, r3
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	431a      	orrs	r2, r3
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	601a      	str	r2, [r3, #0]
  }
}
 80012f2:	bf00      	nop
 80012f4:	371c      	adds	r7, #28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	58026000 	.word	0x58026000

08001304 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4a0c      	ldr	r2, [pc, #48]	@ (8001344 <LL_ADC_SetOffsetSaturation+0x40>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d10e      	bne.n	8001336 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3360      	adds	r3, #96	@ 0x60
 800131c:	461a      	mov	r2, r3
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	431a      	orrs	r2, r3
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001336:	bf00      	nop
 8001338:	371c      	adds	r7, #28
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	58026000 	.word	0x58026000

08001348 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001348:	b480      	push	{r7}
 800134a:	b087      	sub	sp, #28
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4a0c      	ldr	r2, [pc, #48]	@ (8001388 <LL_ADC_SetOffsetSign+0x40>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d10e      	bne.n	800137a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	3360      	adds	r3, #96	@ 0x60
 8001360:	461a      	mov	r2, r3
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	431a      	orrs	r2, r3
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800137a:	bf00      	nop
 800137c:	371c      	adds	r7, #28
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	58026000 	.word	0x58026000

0800138c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3360      	adds	r3, #96	@ 0x60
 800139c:	461a      	mov	r2, r3
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4a0c      	ldr	r2, [pc, #48]	@ (80013dc <LL_ADC_SetOffsetState+0x50>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d108      	bne.n	80013c0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	431a      	orrs	r2, r3
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80013be:	e007      	b.n	80013d0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	431a      	orrs	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	601a      	str	r2, [r3, #0]
}
 80013d0:	bf00      	nop
 80013d2:	371c      	adds	r7, #28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	58026000 	.word	0x58026000

080013e0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001406:	b480      	push	{r7}
 8001408:	b087      	sub	sp, #28
 800140a:	af00      	add	r7, sp, #0
 800140c:	60f8      	str	r0, [r7, #12]
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	3330      	adds	r3, #48	@ 0x30
 8001416:	461a      	mov	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	0a1b      	lsrs	r3, r3, #8
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	4413      	add	r3, r2
 8001424:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	f003 031f 	and.w	r3, r3, #31
 8001430:	211f      	movs	r1, #31
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	401a      	ands	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	0e9b      	lsrs	r3, r3, #26
 800143e:	f003 011f 	and.w	r1, r3, #31
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	f003 031f 	and.w	r3, r3, #31
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	431a      	orrs	r2, r3
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001452:	bf00      	nop
 8001454:	371c      	adds	r7, #28
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001484:	b480      	push	{r7}
 8001486:	b087      	sub	sp, #28
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3314      	adds	r3, #20
 8001494:	461a      	mov	r2, r3
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	0e5b      	lsrs	r3, r3, #25
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	4413      	add	r3, r2
 80014a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	0d1b      	lsrs	r3, r3, #20
 80014ac:	f003 031f 	and.w	r3, r3, #31
 80014b0:	2107      	movs	r1, #7
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	401a      	ands	r2, r3
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	0d1b      	lsrs	r3, r3, #20
 80014be:	f003 031f 	and.w	r3, r3, #31
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	fa01 f303 	lsl.w	r3, r1, r3
 80014c8:	431a      	orrs	r2, r3
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014ce:	bf00      	nop
 80014d0:	371c      	adds	r7, #28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001554 <LL_ADC_SetChannelSingleDiff+0x78>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d115      	bne.n	800151c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014fc:	43db      	mvns	r3, r3
 80014fe:	401a      	ands	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f003 0318 	and.w	r3, r3, #24
 8001506:	4914      	ldr	r1, [pc, #80]	@ (8001558 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001508:	40d9      	lsrs	r1, r3
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	400b      	ands	r3, r1
 800150e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001512:	431a      	orrs	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800151a:	e014      	b.n	8001546 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001528:	43db      	mvns	r3, r3
 800152a:	401a      	ands	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f003 0318 	and.w	r3, r3, #24
 8001532:	4909      	ldr	r1, [pc, #36]	@ (8001558 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001534:	40d9      	lsrs	r1, r3
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	400b      	ands	r3, r1
 800153a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800153e:	431a      	orrs	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	58026000 	.word	0x58026000
 8001558:	000fffff 	.word	0x000fffff

0800155c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 031f 	and.w	r3, r3, #31
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	4b04      	ldr	r3, [pc, #16]	@ (80015b4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6093      	str	r3, [r2, #8]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	5fffffc0 	.word	0x5fffffc0

080015b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015cc:	d101      	bne.n	80015d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <LL_ADC_EnableInternalRegulator+0x24>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	6fffffc0 	.word	0x6fffffc0

08001608 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001618:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800161c:	d101      	bne.n	8001622 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	2b01      	cmp	r3, #1
 8001642:	d101      	bne.n	8001648 <LL_ADC_IsEnabled+0x18>
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <LL_ADC_IsEnabled+0x1a>
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	2b04      	cmp	r3, #4
 8001668:	d101      	bne.n	800166e <LL_ADC_REG_IsConversionOngoing+0x18>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	2b08      	cmp	r3, #8
 800168e:	d101      	bne.n	8001694 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b089      	sub	sp, #36	@ 0x24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e1ee      	b.n	8001a9c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d109      	bne.n	80016e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff f9f7 	bl	8000ac0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff67 	bl	80015b8 <LL_ADC_IsDeepPowerDownEnabled>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d004      	beq.n	80016fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff4d 	bl	8001594 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ff82 	bl	8001608 <LL_ADC_IsInternalRegulatorEnabled>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d114      	bne.n	8001734 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ff66 	bl	80015e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001714:	4b8e      	ldr	r3, [pc, #568]	@ (8001950 <HAL_ADC_Init+0x2ac>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	099b      	lsrs	r3, r3, #6
 800171a:	4a8e      	ldr	r2, [pc, #568]	@ (8001954 <HAL_ADC_Init+0x2b0>)
 800171c:	fba2 2303 	umull	r2, r3, r2, r3
 8001720:	099b      	lsrs	r3, r3, #6
 8001722:	3301      	adds	r3, #1
 8001724:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001726:	e002      	b.n	800172e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	3b01      	subs	r3, #1
 800172c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1f9      	bne.n	8001728 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff65 	bl	8001608 <LL_ADC_IsInternalRegulatorEnabled>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10d      	bne.n	8001760 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001748:	f043 0210 	orr.w	r2, r3, #16
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001754:	f043 0201 	orr.w	r2, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff76 	bl	8001656 <LL_ADC_REG_IsConversionOngoing>
 800176a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001770:	f003 0310 	and.w	r3, r3, #16
 8001774:	2b00      	cmp	r3, #0
 8001776:	f040 8188 	bne.w	8001a8a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	2b00      	cmp	r3, #0
 800177e:	f040 8184 	bne.w	8001a8a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001786:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800178a:	f043 0202 	orr.w	r2, r3, #2
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ff4a 	bl	8001630 <LL_ADC_IsEnabled>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d136      	bne.n	8001810 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a6c      	ldr	r2, [pc, #432]	@ (8001958 <HAL_ADC_Init+0x2b4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d004      	beq.n	80017b6 <HAL_ADC_Init+0x112>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a6a      	ldr	r2, [pc, #424]	@ (800195c <HAL_ADC_Init+0x2b8>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d10e      	bne.n	80017d4 <HAL_ADC_Init+0x130>
 80017b6:	4868      	ldr	r0, [pc, #416]	@ (8001958 <HAL_ADC_Init+0x2b4>)
 80017b8:	f7ff ff3a 	bl	8001630 <LL_ADC_IsEnabled>
 80017bc:	4604      	mov	r4, r0
 80017be:	4867      	ldr	r0, [pc, #412]	@ (800195c <HAL_ADC_Init+0x2b8>)
 80017c0:	f7ff ff36 	bl	8001630 <LL_ADC_IsEnabled>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4323      	orrs	r3, r4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	bf0c      	ite	eq
 80017cc:	2301      	moveq	r3, #1
 80017ce:	2300      	movne	r3, #0
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	e008      	b.n	80017e6 <HAL_ADC_Init+0x142>
 80017d4:	4862      	ldr	r0, [pc, #392]	@ (8001960 <HAL_ADC_Init+0x2bc>)
 80017d6:	f7ff ff2b 	bl	8001630 <LL_ADC_IsEnabled>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	bf0c      	ite	eq
 80017e0:	2301      	moveq	r3, #1
 80017e2:	2300      	movne	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d012      	beq.n	8001810 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a5a      	ldr	r2, [pc, #360]	@ (8001958 <HAL_ADC_Init+0x2b4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d004      	beq.n	80017fe <HAL_ADC_Init+0x15a>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a58      	ldr	r2, [pc, #352]	@ (800195c <HAL_ADC_Init+0x2b8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d101      	bne.n	8001802 <HAL_ADC_Init+0x15e>
 80017fe:	4a59      	ldr	r2, [pc, #356]	@ (8001964 <HAL_ADC_Init+0x2c0>)
 8001800:	e000      	b.n	8001804 <HAL_ADC_Init+0x160>
 8001802:	4a59      	ldr	r2, [pc, #356]	@ (8001968 <HAL_ADC_Init+0x2c4>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	4619      	mov	r1, r3
 800180a:	4610      	mov	r0, r2
 800180c:	f7ff fcc2 	bl	8001194 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a52      	ldr	r2, [pc, #328]	@ (8001960 <HAL_ADC_Init+0x2bc>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d129      	bne.n	800186e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	7e5b      	ldrb	r3, [r3, #25]
 800181e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001824:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800182a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b08      	cmp	r3, #8
 8001832:	d013      	beq.n	800185c <HAL_ADC_Init+0x1b8>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2b0c      	cmp	r3, #12
 800183a:	d00d      	beq.n	8001858 <HAL_ADC_Init+0x1b4>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b1c      	cmp	r3, #28
 8001842:	d007      	beq.n	8001854 <HAL_ADC_Init+0x1b0>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2b18      	cmp	r3, #24
 800184a:	d101      	bne.n	8001850 <HAL_ADC_Init+0x1ac>
 800184c:	2318      	movs	r3, #24
 800184e:	e006      	b.n	800185e <HAL_ADC_Init+0x1ba>
 8001850:	2300      	movs	r3, #0
 8001852:	e004      	b.n	800185e <HAL_ADC_Init+0x1ba>
 8001854:	2310      	movs	r3, #16
 8001856:	e002      	b.n	800185e <HAL_ADC_Init+0x1ba>
 8001858:	2308      	movs	r3, #8
 800185a:	e000      	b.n	800185e <HAL_ADC_Init+0x1ba>
 800185c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800185e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001866:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	e00e      	b.n	800188c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	7e5b      	ldrb	r3, [r3, #25]
 8001872:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001878:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800187e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001886:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d106      	bne.n	80018a4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189a:	3b01      	subs	r3, #1
 800189c:	045b      	lsls	r3, r3, #17
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d009      	beq.n	80018c0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a26      	ldr	r2, [pc, #152]	@ (8001960 <HAL_ADC_Init+0x2bc>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d115      	bne.n	80018f6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	4b26      	ldr	r3, [pc, #152]	@ (800196c <HAL_ADC_Init+0x2c8>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	69b9      	ldr	r1, [r7, #24]
 80018da:	430b      	orrs	r3, r1
 80018dc:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	611a      	str	r2, [r3, #16]
 80018f4:	e009      	b.n	800190a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001970 <HAL_ADC_Init+0x2cc>)
 80018fe:	4013      	ands	r3, r2
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	69b9      	ldr	r1, [r7, #24]
 8001906:	430b      	orrs	r3, r1
 8001908:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fea1 	bl	8001656 <LL_ADC_REG_IsConversionOngoing>
 8001914:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff feae 	bl	800167c <LL_ADC_INJ_IsConversionOngoing>
 8001920:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	2b00      	cmp	r3, #0
 8001926:	f040 808e 	bne.w	8001a46 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	f040 808a 	bne.w	8001a46 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <HAL_ADC_Init+0x2bc>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d11b      	bne.n	8001974 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7e1b      	ldrb	r3, [r3, #24]
 8001940:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001948:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
 800194e:	e018      	b.n	8001982 <HAL_ADC_Init+0x2de>
 8001950:	24000000 	.word	0x24000000
 8001954:	053e2d63 	.word	0x053e2d63
 8001958:	40022000 	.word	0x40022000
 800195c:	40022100 	.word	0x40022100
 8001960:	58026000 	.word	0x58026000
 8001964:	40022300 	.word	0x40022300
 8001968:	58026300 	.word	0x58026300
 800196c:	fff04007 	.word	0xfff04007
 8001970:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7e1b      	ldrb	r3, [r3, #24]
 8001978:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	4b46      	ldr	r3, [pc, #280]	@ (8001aa4 <HAL_ADC_Init+0x400>)
 800198a:	4013      	ands	r3, r2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	69b9      	ldr	r1, [r7, #24]
 8001992:	430b      	orrs	r3, r1
 8001994:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800199c:	2b01      	cmp	r3, #1
 800199e:	d137      	bne.n	8001a10 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a3f      	ldr	r2, [pc, #252]	@ (8001aa8 <HAL_ADC_Init+0x404>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d116      	bne.n	80019de <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	691a      	ldr	r2, [r3, #16]
 80019b6:	4b3d      	ldr	r3, [pc, #244]	@ (8001aac <HAL_ADC_Init+0x408>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80019c2:	4311      	orrs	r1, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019c8:	4311      	orrs	r1, r2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80019ce:	430a      	orrs	r2, r1
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0201 	orr.w	r2, r2, #1
 80019da:	611a      	str	r2, [r3, #16]
 80019dc:	e020      	b.n	8001a20 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	4b32      	ldr	r3, [pc, #200]	@ (8001ab0 <HAL_ADC_Init+0x40c>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019ec:	3a01      	subs	r2, #1
 80019ee:	0411      	lsls	r1, r2, #16
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80019f4:	4311      	orrs	r1, r2
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019fa:	4311      	orrs	r1, r2
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001a00:	430a      	orrs	r2, r1
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f042 0201 	orr.w	r2, r2, #1
 8001a0c:	611a      	str	r2, [r3, #16]
 8001a0e:	e007      	b.n	8001a20 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	691a      	ldr	r2, [r3, #16]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0201 	bic.w	r2, r2, #1
 8001a1e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a1b      	ldr	r2, [pc, #108]	@ (8001aa8 <HAL_ADC_Init+0x404>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d002      	beq.n	8001a46 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 ffb5 	bl	80029b0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d10c      	bne.n	8001a68 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a54:	f023 010f 	bic.w	r1, r3, #15
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	1e5a      	subs	r2, r3, #1
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a66:	e007      	b.n	8001a78 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 020f 	bic.w	r2, r2, #15
 8001a76:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a7c:	f023 0303 	bic.w	r3, r3, #3
 8001a80:	f043 0201 	orr.w	r2, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	661a      	str	r2, [r3, #96]	@ 0x60
 8001a88:	e007      	b.n	8001a9a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a8e:	f043 0210 	orr.w	r2, r3, #16
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3724      	adds	r7, #36	@ 0x24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd90      	pop	{r4, r7, pc}
 8001aa4:	ffffbffc 	.word	0xffffbffc
 8001aa8:	58026000 	.word	0x58026000
 8001aac:	fc00f81f 	.word	0xfc00f81f
 8001ab0:	fc00f81e 	.word	0xfc00f81e

08001ab4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	@ 0x28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a87      	ldr	r2, [pc, #540]	@ (8001cf4 <HAL_ADC_IRQHandler+0x240>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d004      	beq.n	8001ae4 <HAL_ADC_IRQHandler+0x30>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a86      	ldr	r2, [pc, #536]	@ (8001cf8 <HAL_ADC_IRQHandler+0x244>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d101      	bne.n	8001ae8 <HAL_ADC_IRQHandler+0x34>
 8001ae4:	4b85      	ldr	r3, [pc, #532]	@ (8001cfc <HAL_ADC_IRQHandler+0x248>)
 8001ae6:	e000      	b.n	8001aea <HAL_ADC_IRQHandler+0x36>
 8001ae8:	4b85      	ldr	r3, [pc, #532]	@ (8001d00 <HAL_ADC_IRQHandler+0x24c>)
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fd36 	bl	800155c <LL_ADC_GetMultimode>
 8001af0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d017      	beq.n	8001b2c <HAL_ADC_IRQHandler+0x78>
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d012      	beq.n	8001b2c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b0a:	f003 0310 	and.w	r3, r3, #16
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d105      	bne.n	8001b1e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b16:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f001 f882 	bl	8002c28 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2202      	movs	r2, #2
 8001b2a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d004      	beq.n	8001b40 <HAL_ADC_IRQHandler+0x8c>
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10a      	bne.n	8001b56 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 8083 	beq.w	8001c52 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d07d      	beq.n	8001c52 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d105      	bne.n	8001b6e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b66:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fc34 	bl	80013e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d062      	beq.n	8001c44 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a5d      	ldr	r2, [pc, #372]	@ (8001cf8 <HAL_ADC_IRQHandler+0x244>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d002      	beq.n	8001b8e <HAL_ADC_IRQHandler+0xda>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	e000      	b.n	8001b90 <HAL_ADC_IRQHandler+0xdc>
 8001b8e:	4b59      	ldr	r3, [pc, #356]	@ (8001cf4 <HAL_ADC_IRQHandler+0x240>)
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d008      	beq.n	8001baa <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d005      	beq.n	8001baa <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2b05      	cmp	r3, #5
 8001ba2:	d002      	beq.n	8001baa <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	2b09      	cmp	r3, #9
 8001ba8:	d104      	bne.n	8001bb4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	623b      	str	r3, [r7, #32]
 8001bb2:	e00c      	b.n	8001bce <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a4f      	ldr	r2, [pc, #316]	@ (8001cf8 <HAL_ADC_IRQHandler+0x244>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d002      	beq.n	8001bc4 <HAL_ADC_IRQHandler+0x110>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	e000      	b.n	8001bc6 <HAL_ADC_IRQHandler+0x112>
 8001bc4:	4b4b      	ldr	r3, [pc, #300]	@ (8001cf4 <HAL_ADC_IRQHandler+0x240>)
 8001bc6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d135      	bne.n	8001c44 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d12e      	bne.n	8001c44 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fd33 	bl	8001656 <LL_ADC_REG_IsConversionOngoing>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d11a      	bne.n	8001c2c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 020c 	bic.w	r2, r2, #12
 8001c04:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c0a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d112      	bne.n	8001c44 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c22:	f043 0201 	orr.w	r2, r3, #1
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	661a      	str	r2, [r3, #96]	@ 0x60
 8001c2a:	e00b      	b.n	8001c44 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c30:	f043 0210 	orr.w	r2, r3, #16
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c3c:	f043 0201 	orr.w	r2, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7fe fb9b 	bl	8000380 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	220c      	movs	r2, #12
 8001c50:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	f003 0320 	and.w	r3, r3, #32
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d004      	beq.n	8001c66 <HAL_ADC_IRQHandler+0x1b2>
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10b      	bne.n	8001c7e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80a0 	beq.w	8001db2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 809a 	beq.w	8001db2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c82:	f003 0310 	and.w	r3, r3, #16
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d105      	bne.n	8001c96 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c8e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fbdf 	bl	800145e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001ca0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fb9a 	bl	80013e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cac:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a11      	ldr	r2, [pc, #68]	@ (8001cf8 <HAL_ADC_IRQHandler+0x244>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d002      	beq.n	8001cbe <HAL_ADC_IRQHandler+0x20a>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	e000      	b.n	8001cc0 <HAL_ADC_IRQHandler+0x20c>
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf4 <HAL_ADC_IRQHandler+0x240>)
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d008      	beq.n	8001cda <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2b06      	cmp	r3, #6
 8001cd2:	d002      	beq.n	8001cda <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	2b07      	cmp	r3, #7
 8001cd8:	d104      	bne.n	8001ce4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	623b      	str	r3, [r7, #32]
 8001ce2:	e014      	b.n	8001d0e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a03      	ldr	r2, [pc, #12]	@ (8001cf8 <HAL_ADC_IRQHandler+0x244>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00a      	beq.n	8001d04 <HAL_ADC_IRQHandler+0x250>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	e008      	b.n	8001d06 <HAL_ADC_IRQHandler+0x252>
 8001cf4:	40022000 	.word	0x40022000
 8001cf8:	40022100 	.word	0x40022100
 8001cfc:	40022300 	.word	0x40022300
 8001d00:	58026300 	.word	0x58026300
 8001d04:	4b84      	ldr	r3, [pc, #528]	@ (8001f18 <HAL_ADC_IRQHandler+0x464>)
 8001d06:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d047      	beq.n	8001da4 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d007      	beq.n	8001d2e <HAL_ADC_IRQHandler+0x27a>
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d03f      	beq.n	8001da4 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d13a      	bne.n	8001da4 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d38:	2b40      	cmp	r3, #64	@ 0x40
 8001d3a:	d133      	bne.n	8001da4 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d12e      	bne.n	8001da4 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fc96 	bl	800167c <LL_ADC_INJ_IsConversionOngoing>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d11a      	bne.n	8001d8c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001d64:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d112      	bne.n	8001da4 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d82:	f043 0201 	orr.w	r2, r3, #1
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	661a      	str	r2, [r3, #96]	@ 0x60
 8001d8a:	e00b      	b.n	8001da4 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d90:	f043 0210 	orr.w	r2, r3, #16
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d9c:	f043 0201 	orr.w	r2, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 ff17 	bl	8002bd8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2260      	movs	r2, #96	@ 0x60
 8001db0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d011      	beq.n	8001de0 <HAL_ADC_IRQHandler+0x32c>
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00c      	beq.n	8001de0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f8a8 	bl	8001f28 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2280      	movs	r2, #128	@ 0x80
 8001dde:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d012      	beq.n	8001e10 <HAL_ADC_IRQHandler+0x35c>
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00d      	beq.n	8001e10 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 fefd 	bl	8002c00 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e0e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d012      	beq.n	8001e40 <HAL_ADC_IRQHandler+0x38c>
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00d      	beq.n	8001e40 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e28:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 feef 	bl	8002c14 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e3e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d043      	beq.n	8001ed2 <HAL_ADC_IRQHandler+0x41e>
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	f003 0310 	and.w	r3, r3, #16
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d03e      	beq.n	8001ed2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e60:	e021      	b.n	8001ea6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d015      	beq.n	8001e94 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a2a      	ldr	r2, [pc, #168]	@ (8001f18 <HAL_ADC_IRQHandler+0x464>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d004      	beq.n	8001e7c <HAL_ADC_IRQHandler+0x3c8>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a29      	ldr	r2, [pc, #164]	@ (8001f1c <HAL_ADC_IRQHandler+0x468>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d101      	bne.n	8001e80 <HAL_ADC_IRQHandler+0x3cc>
 8001e7c:	4b28      	ldr	r3, [pc, #160]	@ (8001f20 <HAL_ADC_IRQHandler+0x46c>)
 8001e7e:	e000      	b.n	8001e82 <HAL_ADC_IRQHandler+0x3ce>
 8001e80:	4b28      	ldr	r3, [pc, #160]	@ (8001f24 <HAL_ADC_IRQHandler+0x470>)
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fb78 	bl	8001578 <LL_ADC_GetMultiDMATransfer>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00b      	beq.n	8001ea6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e92:	e008      	b.n	8001ea6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d10e      	bne.n	8001eca <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eb0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ebc:	f043 0202 	orr.w	r2, r3, #2
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f839 	bl	8001f3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2210      	movs	r2, #16
 8001ed0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d018      	beq.n	8001f0e <HAL_ADC_IRQHandler+0x45a>
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d013      	beq.n	8001f0e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eea:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ef6:	f043 0208 	orr.w	r2, r3, #8
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f06:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 fe6f 	bl	8002bec <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001f0e:	bf00      	nop
 8001f10:	3728      	adds	r7, #40	@ 0x28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40022000 	.word	0x40022000
 8001f1c:	40022100 	.word	0x40022100
 8001f20:	40022300 	.word	0x40022300
 8001f24:	58026300 	.word	0x58026300

08001f28 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f50:	b590      	push	{r4, r7, lr}
 8001f52:	b0b9      	sub	sp, #228	@ 0xe4
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001f6a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	4aab      	ldr	r2, [pc, #684]	@ (8002220 <HAL_ADC_ConfigChannel+0x2d0>)
 8001f72:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d102      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x34>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	f000 bcfe 	b.w	8002980 <HAL_ADC_ConfigChannel+0xa30>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fb60 	bl	8001656 <LL_ADC_REG_IsConversionOngoing>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f040 84e2 	bne.w	8002962 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	db38      	blt.n	8002018 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a9e      	ldr	r2, [pc, #632]	@ (8002224 <HAL_ADC_ConfigChannel+0x2d4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d033      	beq.n	8002018 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d108      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x7e>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	0e9b      	lsrs	r3, r3, #26
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	e01d      	b.n	800200a <HAL_ADC_ConfigChannel+0xba>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fe2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001fe6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8001ff2:	2320      	movs	r3, #32
 8001ff4:	e004      	b.n	8002000 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8001ff6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001ffa:	fab3 f383 	clz	r3, r3
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	f003 031f 	and.w	r3, r3, #31
 8002004:	2201      	movs	r2, #1
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	69d1      	ldr	r1, [r2, #28]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	430b      	orrs	r3, r1
 8002016:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6818      	ldr	r0, [r3, #0]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	6859      	ldr	r1, [r3, #4]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	f7ff f9ee 	bl	8001406 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fb11 	bl	8001656 <LL_ADC_REG_IsConversionOngoing>
 8002034:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fb1d 	bl	800167c <LL_ADC_INJ_IsConversionOngoing>
 8002042:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800204a:	2b00      	cmp	r3, #0
 800204c:	f040 8270 	bne.w	8002530 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002050:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002054:	2b00      	cmp	r3, #0
 8002056:	f040 826b 	bne.w	8002530 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	6819      	ldr	r1, [r3, #0]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	461a      	mov	r2, r3
 8002068:	f7ff fa0c 	bl	8001484 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a6c      	ldr	r2, [pc, #432]	@ (8002224 <HAL_ADC_ConfigChannel+0x2d4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d10d      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	695a      	ldr	r2, [r3, #20]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	08db      	lsrs	r3, r3, #3
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002090:	e032      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002092:	4b65      	ldr	r3, [pc, #404]	@ (8002228 <HAL_ADC_ConfigChannel+0x2d8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800209a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800209e:	d10b      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x168>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	695a      	ldr	r2, [r3, #20]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	089b      	lsrs	r3, r3, #2
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	e01d      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x1a4>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10b      	bne.n	80020de <HAL_ADC_ConfigChannel+0x18e>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	695a      	ldr	r2, [r3, #20]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	089b      	lsrs	r3, r3, #2
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	e00a      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x1a4>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	089b      	lsrs	r3, r3, #2
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d048      	beq.n	8002192 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	6919      	ldr	r1, [r3, #16]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002110:	f7ff f874 	bl	80011fc <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a42      	ldr	r2, [pc, #264]	@ (8002224 <HAL_ADC_ConfigChannel+0x2d4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d119      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	6919      	ldr	r1, [r3, #16]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	461a      	mov	r2, r3
 800212c:	f7ff f90c 	bl	8001348 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	6919      	ldr	r1, [r3, #16]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d102      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x1f8>
 8002142:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002146:	e000      	b.n	800214a <HAL_ADC_ConfigChannel+0x1fa>
 8002148:	2300      	movs	r3, #0
 800214a:	461a      	mov	r2, r3
 800214c:	f7ff f8da 	bl	8001304 <LL_ADC_SetOffsetSaturation>
 8002150:	e1ee      	b.n	8002530 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	6919      	ldr	r1, [r3, #16]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002160:	2b01      	cmp	r3, #1
 8002162:	d102      	bne.n	800216a <HAL_ADC_ConfigChannel+0x21a>
 8002164:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002168:	e000      	b.n	800216c <HAL_ADC_ConfigChannel+0x21c>
 800216a:	2300      	movs	r3, #0
 800216c:	461a      	mov	r2, r3
 800216e:	f7ff f8a7 	bl	80012c0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	6919      	ldr	r1, [r3, #16]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	7e1b      	ldrb	r3, [r3, #24]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d102      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x238>
 8002182:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002186:	e000      	b.n	800218a <HAL_ADC_ConfigChannel+0x23a>
 8002188:	2300      	movs	r3, #0
 800218a:	461a      	mov	r2, r3
 800218c:	f7ff f87e 	bl	800128c <LL_ADC_SetDataRightShift>
 8002190:	e1ce      	b.n	8002530 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a23      	ldr	r2, [pc, #140]	@ (8002224 <HAL_ADC_ConfigChannel+0x2d4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	f040 8181 	bne.w	80024a0 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff f85b 	bl	8001260 <LL_ADC_GetOffsetChannel>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10a      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x27a>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2100      	movs	r1, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff f850 	bl	8001260 <LL_ADC_GetOffsetChannel>
 80021c0:	4603      	mov	r3, r0
 80021c2:	0e9b      	lsrs	r3, r3, #26
 80021c4:	f003 021f 	and.w	r2, r3, #31
 80021c8:	e01e      	b.n	8002208 <HAL_ADC_ConfigChannel+0x2b8>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2100      	movs	r1, #0
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff f845 	bl	8001260 <LL_ADC_GetOffsetChannel>
 80021d6:	4603      	mov	r3, r0
 80021d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80021e0:	fa93 f3a3 	rbit	r3, r3
 80021e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80021e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80021f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80021f8:	2320      	movs	r3, #32
 80021fa:	e004      	b.n	8002206 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 80021fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002200:	fab3 f383 	clz	r3, r3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10b      	bne.n	800222c <HAL_ADC_ConfigChannel+0x2dc>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	0e9b      	lsrs	r3, r3, #26
 800221a:	f003 031f 	and.w	r3, r3, #31
 800221e:	e01e      	b.n	800225e <HAL_ADC_ConfigChannel+0x30e>
 8002220:	47ff0000 	.word	0x47ff0000
 8002224:	58026000 	.word	0x58026000
 8002228:	5c001000 	.word	0x5c001000
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002238:	fa93 f3a3 	rbit	r3, r3
 800223c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002240:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002244:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002248:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8002250:	2320      	movs	r3, #32
 8002252:	e004      	b.n	800225e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8002254:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002258:	fab3 f383 	clz	r3, r3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	429a      	cmp	r2, r3
 8002260:	d106      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2200      	movs	r2, #0
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff f88e 	bl	800138c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2101      	movs	r1, #1
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe fff2 	bl	8001260 <LL_ADC_GetOffsetChannel>
 800227c:	4603      	mov	r3, r0
 800227e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10a      	bne.n	800229c <HAL_ADC_ConfigChannel+0x34c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2101      	movs	r1, #1
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe ffe7 	bl	8001260 <LL_ADC_GetOffsetChannel>
 8002292:	4603      	mov	r3, r0
 8002294:	0e9b      	lsrs	r3, r3, #26
 8002296:	f003 021f 	and.w	r2, r3, #31
 800229a:	e01e      	b.n	80022da <HAL_ADC_ConfigChannel+0x38a>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2101      	movs	r1, #1
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe ffdc 	bl	8001260 <LL_ADC_GetOffsetChannel>
 80022a8:	4603      	mov	r3, r0
 80022aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022b2:	fa93 f3a3 	rbit	r3, r3
 80022b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80022ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80022c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80022ca:	2320      	movs	r3, #32
 80022cc:	e004      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 80022ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022d2:	fab3 f383 	clz	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d105      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x3a2>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	0e9b      	lsrs	r3, r3, #26
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	e018      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3d4>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002306:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800230a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800230e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8002316:	2320      	movs	r3, #32
 8002318:	e004      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 800231a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800231e:	fab3 f383 	clz	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	429a      	cmp	r2, r3
 8002326:	d106      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2200      	movs	r2, #0
 800232e:	2101      	movs	r1, #1
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff f82b 	bl	800138c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2102      	movs	r1, #2
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe ff8f 	bl	8001260 <LL_ADC_GetOffsetChannel>
 8002342:	4603      	mov	r3, r0
 8002344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10a      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x412>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2102      	movs	r1, #2
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe ff84 	bl	8001260 <LL_ADC_GetOffsetChannel>
 8002358:	4603      	mov	r3, r0
 800235a:	0e9b      	lsrs	r3, r3, #26
 800235c:	f003 021f 	and.w	r2, r3, #31
 8002360:	e01e      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x450>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2102      	movs	r1, #2
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe ff79 	bl	8001260 <LL_ADC_GetOffsetChannel>
 800236e:	4603      	mov	r3, r0
 8002370:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002378:	fa93 f3a3 	rbit	r3, r3
 800237c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002380:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002384:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002388:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8002390:	2320      	movs	r3, #32
 8002392:	e004      	b.n	800239e <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8002394:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d105      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x468>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	0e9b      	lsrs	r3, r3, #26
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	e014      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x492>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023c0:	fa93 f3a3 	rbit	r3, r3
 80023c4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80023c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80023cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80023d4:	2320      	movs	r3, #32
 80023d6:	e004      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80023d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023dc:	fab3 f383 	clz	r3, r3
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d106      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2200      	movs	r2, #0
 80023ec:	2102      	movs	r1, #2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe ffcc 	bl	800138c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2103      	movs	r1, #3
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe ff30 	bl	8001260 <LL_ADC_GetOffsetChannel>
 8002400:	4603      	mov	r3, r0
 8002402:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10a      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x4d0>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2103      	movs	r1, #3
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe ff25 	bl	8001260 <LL_ADC_GetOffsetChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	0e9b      	lsrs	r3, r3, #26
 800241a:	f003 021f 	and.w	r2, r3, #31
 800241e:	e017      	b.n	8002450 <HAL_ADC_ConfigChannel+0x500>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2103      	movs	r1, #3
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe ff1a 	bl	8001260 <LL_ADC_GetOffsetChannel>
 800242c:	4603      	mov	r3, r0
 800242e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002438:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800243a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800243c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8002442:	2320      	movs	r3, #32
 8002444:	e003      	b.n	800244e <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8002446:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002448:	fab3 f383 	clz	r3, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	461a      	mov	r2, r3
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002458:	2b00      	cmp	r3, #0
 800245a:	d105      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x518>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	0e9b      	lsrs	r3, r3, #26
 8002462:	f003 031f 	and.w	r3, r3, #31
 8002466:	e011      	b.n	800248c <HAL_ADC_ConfigChannel+0x53c>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002470:	fa93 f3a3 	rbit	r3, r3
 8002474:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002476:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002478:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800247a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8002480:	2320      	movs	r3, #32
 8002482:	e003      	b.n	800248c <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8002484:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002486:	fab3 f383 	clz	r3, r3
 800248a:	b2db      	uxtb	r3, r3
 800248c:	429a      	cmp	r2, r3
 800248e:	d14f      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2200      	movs	r2, #0
 8002496:	2103      	movs	r1, #3
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe ff77 	bl	800138c <LL_ADC_SetOffsetState>
 800249e:	e047      	b.n	8002530 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	069b      	lsls	r3, r3, #26
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d107      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80024c2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	069b      	lsls	r3, r3, #26
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d107      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80024e6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	069b      	lsls	r3, r3, #26
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d107      	bne.n	800250c <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800250a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002512:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	069b      	lsls	r3, r3, #26
 800251c:	429a      	cmp	r2, r3
 800251e:	d107      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800252e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff f87b 	bl	8001630 <LL_ADC_IsEnabled>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	f040 8219 	bne.w	8002974 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	6819      	ldr	r1, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	461a      	mov	r2, r3
 8002550:	f7fe ffc4 	bl	80014dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	4aa1      	ldr	r2, [pc, #644]	@ (80027e0 <HAL_ADC_ConfigChannel+0x890>)
 800255a:	4293      	cmp	r3, r2
 800255c:	f040 812e 	bne.w	80027bc <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10b      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x638>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	0e9b      	lsrs	r3, r3, #26
 8002576:	3301      	adds	r3, #1
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	2b09      	cmp	r3, #9
 800257e:	bf94      	ite	ls
 8002580:	2301      	movls	r3, #1
 8002582:	2300      	movhi	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	e019      	b.n	80025bc <HAL_ADC_ConfigChannel+0x66c>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002598:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800259a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80025a0:	2320      	movs	r3, #32
 80025a2:	e003      	b.n	80025ac <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80025a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025a6:	fab3 f383 	clz	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	3301      	adds	r3, #1
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	2b09      	cmp	r3, #9
 80025b4:	bf94      	ite	ls
 80025b6:	2301      	movls	r3, #1
 80025b8:	2300      	movhi	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d079      	beq.n	80026b4 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d107      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x68c>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	0e9b      	lsrs	r3, r3, #26
 80025d2:	3301      	adds	r3, #1
 80025d4:	069b      	lsls	r3, r3, #26
 80025d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025da:	e015      	b.n	8002608 <HAL_ADC_ConfigChannel+0x6b8>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80025ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025ec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80025ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80025f4:	2320      	movs	r3, #32
 80025f6:	e003      	b.n	8002600 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80025f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	3301      	adds	r3, #1
 8002602:	069b      	lsls	r3, r3, #26
 8002604:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002610:	2b00      	cmp	r3, #0
 8002612:	d109      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x6d8>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	0e9b      	lsrs	r3, r3, #26
 800261a:	3301      	adds	r3, #1
 800261c:	f003 031f 	and.w	r3, r3, #31
 8002620:	2101      	movs	r1, #1
 8002622:	fa01 f303 	lsl.w	r3, r1, r3
 8002626:	e017      	b.n	8002658 <HAL_ADC_ConfigChannel+0x708>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002630:	fa93 f3a3 	rbit	r3, r3
 8002634:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002638:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800263a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8002640:	2320      	movs	r3, #32
 8002642:	e003      	b.n	800264c <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8002644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	3301      	adds	r3, #1
 800264e:	f003 031f 	and.w	r3, r3, #31
 8002652:	2101      	movs	r1, #1
 8002654:	fa01 f303 	lsl.w	r3, r1, r3
 8002658:	ea42 0103 	orr.w	r1, r2, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10a      	bne.n	800267e <HAL_ADC_ConfigChannel+0x72e>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	0e9b      	lsrs	r3, r3, #26
 800266e:	3301      	adds	r3, #1
 8002670:	f003 021f 	and.w	r2, r3, #31
 8002674:	4613      	mov	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4413      	add	r3, r2
 800267a:	051b      	lsls	r3, r3, #20
 800267c:	e018      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x760>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800268c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800268e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8002696:	2320      	movs	r3, #32
 8002698:	e003      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800269a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800269c:	fab3 f383 	clz	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	3301      	adds	r3, #1
 80026a4:	f003 021f 	and.w	r2, r3, #31
 80026a8:	4613      	mov	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4413      	add	r3, r2
 80026ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026b0:	430b      	orrs	r3, r1
 80026b2:	e07e      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d107      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x780>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	0e9b      	lsrs	r3, r3, #26
 80026c6:	3301      	adds	r3, #1
 80026c8:	069b      	lsls	r3, r3, #26
 80026ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026ce:	e015      	b.n	80026fc <HAL_ADC_ConfigChannel+0x7ac>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d8:	fa93 f3a3 	rbit	r3, r3
 80026dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80026de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80026e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80026e8:	2320      	movs	r3, #32
 80026ea:	e003      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80026ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ee:	fab3 f383 	clz	r3, r3
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	3301      	adds	r3, #1
 80026f6:	069b      	lsls	r3, r3, #26
 80026f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002704:	2b00      	cmp	r3, #0
 8002706:	d109      	bne.n	800271c <HAL_ADC_ConfigChannel+0x7cc>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	0e9b      	lsrs	r3, r3, #26
 800270e:	3301      	adds	r3, #1
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	2101      	movs	r1, #1
 8002716:	fa01 f303 	lsl.w	r3, r1, r3
 800271a:	e017      	b.n	800274c <HAL_ADC_ConfigChannel+0x7fc>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	fa93 f3a3 	rbit	r3, r3
 8002728:	61bb      	str	r3, [r7, #24]
  return result;
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8002734:	2320      	movs	r3, #32
 8002736:	e003      	b.n	8002740 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	3301      	adds	r3, #1
 8002742:	f003 031f 	and.w	r3, r3, #31
 8002746:	2101      	movs	r1, #1
 8002748:	fa01 f303 	lsl.w	r3, r1, r3
 800274c:	ea42 0103 	orr.w	r1, r2, r3
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10d      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x828>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	0e9b      	lsrs	r3, r3, #26
 8002762:	3301      	adds	r3, #1
 8002764:	f003 021f 	and.w	r2, r3, #31
 8002768:	4613      	mov	r3, r2
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	4413      	add	r3, r2
 800276e:	3b1e      	subs	r3, #30
 8002770:	051b      	lsls	r3, r3, #20
 8002772:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002776:	e01b      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x860>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	fa93 f3a3 	rbit	r3, r3
 8002784:	60fb      	str	r3, [r7, #12]
  return result;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8002790:	2320      	movs	r3, #32
 8002792:	e003      	b.n	800279c <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	3301      	adds	r3, #1
 800279e:	f003 021f 	and.w	r2, r3, #31
 80027a2:	4613      	mov	r3, r2
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4413      	add	r3, r2
 80027a8:	3b1e      	subs	r3, #30
 80027aa:	051b      	lsls	r3, r3, #20
 80027ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027b0:	430b      	orrs	r3, r1
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	6892      	ldr	r2, [r2, #8]
 80027b6:	4619      	mov	r1, r3
 80027b8:	f7fe fe64 	bl	8001484 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f280 80d7 	bge.w	8002974 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a06      	ldr	r2, [pc, #24]	@ (80027e4 <HAL_ADC_ConfigChannel+0x894>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d004      	beq.n	80027da <HAL_ADC_ConfigChannel+0x88a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a04      	ldr	r2, [pc, #16]	@ (80027e8 <HAL_ADC_ConfigChannel+0x898>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d10a      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x8a0>
 80027da:	4b04      	ldr	r3, [pc, #16]	@ (80027ec <HAL_ADC_ConfigChannel+0x89c>)
 80027dc:	e009      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x8a2>
 80027de:	bf00      	nop
 80027e0:	47ff0000 	.word	0x47ff0000
 80027e4:	40022000 	.word	0x40022000
 80027e8:	40022100 	.word	0x40022100
 80027ec:	40022300 	.word	0x40022300
 80027f0:	4b65      	ldr	r3, [pc, #404]	@ (8002988 <HAL_ADC_ConfigChannel+0xa38>)
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fcf4 	bl	80011e0 <LL_ADC_GetCommonPathInternalCh>
 80027f8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a62      	ldr	r2, [pc, #392]	@ (800298c <HAL_ADC_ConfigChannel+0xa3c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d004      	beq.n	8002810 <HAL_ADC_ConfigChannel+0x8c0>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a61      	ldr	r2, [pc, #388]	@ (8002990 <HAL_ADC_ConfigChannel+0xa40>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d10e      	bne.n	800282e <HAL_ADC_ConfigChannel+0x8de>
 8002810:	485e      	ldr	r0, [pc, #376]	@ (800298c <HAL_ADC_ConfigChannel+0xa3c>)
 8002812:	f7fe ff0d 	bl	8001630 <LL_ADC_IsEnabled>
 8002816:	4604      	mov	r4, r0
 8002818:	485d      	ldr	r0, [pc, #372]	@ (8002990 <HAL_ADC_ConfigChannel+0xa40>)
 800281a:	f7fe ff09 	bl	8001630 <LL_ADC_IsEnabled>
 800281e:	4603      	mov	r3, r0
 8002820:	4323      	orrs	r3, r4
 8002822:	2b00      	cmp	r3, #0
 8002824:	bf0c      	ite	eq
 8002826:	2301      	moveq	r3, #1
 8002828:	2300      	movne	r3, #0
 800282a:	b2db      	uxtb	r3, r3
 800282c:	e008      	b.n	8002840 <HAL_ADC_ConfigChannel+0x8f0>
 800282e:	4859      	ldr	r0, [pc, #356]	@ (8002994 <HAL_ADC_ConfigChannel+0xa44>)
 8002830:	f7fe fefe 	bl	8001630 <LL_ADC_IsEnabled>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	bf0c      	ite	eq
 800283a:	2301      	moveq	r3, #1
 800283c:	2300      	movne	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 8084 	beq.w	800294e <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a53      	ldr	r2, [pc, #332]	@ (8002998 <HAL_ADC_ConfigChannel+0xa48>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d132      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x966>
 8002850:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002854:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d12c      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a4c      	ldr	r2, [pc, #304]	@ (8002994 <HAL_ADC_ConfigChannel+0xa44>)
 8002862:	4293      	cmp	r3, r2
 8002864:	f040 8086 	bne.w	8002974 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a47      	ldr	r2, [pc, #284]	@ (800298c <HAL_ADC_ConfigChannel+0xa3c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d004      	beq.n	800287c <HAL_ADC_ConfigChannel+0x92c>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a46      	ldr	r2, [pc, #280]	@ (8002990 <HAL_ADC_ConfigChannel+0xa40>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d101      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x930>
 800287c:	4a47      	ldr	r2, [pc, #284]	@ (800299c <HAL_ADC_ConfigChannel+0xa4c>)
 800287e:	e000      	b.n	8002882 <HAL_ADC_ConfigChannel+0x932>
 8002880:	4a41      	ldr	r2, [pc, #260]	@ (8002988 <HAL_ADC_ConfigChannel+0xa38>)
 8002882:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002886:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800288a:	4619      	mov	r1, r3
 800288c:	4610      	mov	r0, r2
 800288e:	f7fe fc94 	bl	80011ba <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002892:	4b43      	ldr	r3, [pc, #268]	@ (80029a0 <HAL_ADC_ConfigChannel+0xa50>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	099b      	lsrs	r3, r3, #6
 8002898:	4a42      	ldr	r2, [pc, #264]	@ (80029a4 <HAL_ADC_ConfigChannel+0xa54>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	099b      	lsrs	r3, r3, #6
 80028a0:	3301      	adds	r3, #1
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80028a6:	e002      	b.n	80028ae <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f9      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028b4:	e05e      	b.n	8002974 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a3b      	ldr	r2, [pc, #236]	@ (80029a8 <HAL_ADC_ConfigChannel+0xa58>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d120      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x9b2>
 80028c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80028c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d11a      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a30      	ldr	r2, [pc, #192]	@ (8002994 <HAL_ADC_ConfigChannel+0xa44>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d14e      	bne.n	8002974 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a2c      	ldr	r2, [pc, #176]	@ (800298c <HAL_ADC_ConfigChannel+0xa3c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d004      	beq.n	80028ea <HAL_ADC_ConfigChannel+0x99a>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002990 <HAL_ADC_ConfigChannel+0xa40>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d101      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x99e>
 80028ea:	4a2c      	ldr	r2, [pc, #176]	@ (800299c <HAL_ADC_ConfigChannel+0xa4c>)
 80028ec:	e000      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x9a0>
 80028ee:	4a26      	ldr	r2, [pc, #152]	@ (8002988 <HAL_ADC_ConfigChannel+0xa38>)
 80028f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80028f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028f8:	4619      	mov	r1, r3
 80028fa:	4610      	mov	r0, r2
 80028fc:	f7fe fc5d 	bl	80011ba <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002900:	e038      	b.n	8002974 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a29      	ldr	r2, [pc, #164]	@ (80029ac <HAL_ADC_ConfigChannel+0xa5c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d133      	bne.n	8002974 <HAL_ADC_ConfigChannel+0xa24>
 800290c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002910:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d12d      	bne.n	8002974 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a1d      	ldr	r2, [pc, #116]	@ (8002994 <HAL_ADC_ConfigChannel+0xa44>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d128      	bne.n	8002974 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a19      	ldr	r2, [pc, #100]	@ (800298c <HAL_ADC_ConfigChannel+0xa3c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d004      	beq.n	8002936 <HAL_ADC_ConfigChannel+0x9e6>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a17      	ldr	r2, [pc, #92]	@ (8002990 <HAL_ADC_ConfigChannel+0xa40>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d101      	bne.n	800293a <HAL_ADC_ConfigChannel+0x9ea>
 8002936:	4a19      	ldr	r2, [pc, #100]	@ (800299c <HAL_ADC_ConfigChannel+0xa4c>)
 8002938:	e000      	b.n	800293c <HAL_ADC_ConfigChannel+0x9ec>
 800293a:	4a13      	ldr	r2, [pc, #76]	@ (8002988 <HAL_ADC_ConfigChannel+0xa38>)
 800293c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002940:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002944:	4619      	mov	r1, r3
 8002946:	4610      	mov	r0, r2
 8002948:	f7fe fc37 	bl	80011ba <LL_ADC_SetCommonPathInternalCh>
 800294c:	e012      	b.n	8002974 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002952:	f043 0220 	orr.w	r2, r3, #32
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8002960:	e008      	b.n	8002974 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002966:	f043 0220 	orr.w	r2, r3, #32
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800297c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8002980:	4618      	mov	r0, r3
 8002982:	37e4      	adds	r7, #228	@ 0xe4
 8002984:	46bd      	mov	sp, r7
 8002986:	bd90      	pop	{r4, r7, pc}
 8002988:	58026300 	.word	0x58026300
 800298c:	40022000 	.word	0x40022000
 8002990:	40022100 	.word	0x40022100
 8002994:	58026000 	.word	0x58026000
 8002998:	c7520000 	.word	0xc7520000
 800299c:	40022300 	.word	0x40022300
 80029a0:	24000000 	.word	0x24000000
 80029a4:	053e2d63 	.word	0x053e2d63
 80029a8:	c3210000 	.word	0xc3210000
 80029ac:	cb840000 	.word	0xcb840000

080029b0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a6c      	ldr	r2, [pc, #432]	@ (8002b70 <ADC_ConfigureBoostMode+0x1c0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d004      	beq.n	80029cc <ADC_ConfigureBoostMode+0x1c>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a6b      	ldr	r2, [pc, #428]	@ (8002b74 <ADC_ConfigureBoostMode+0x1c4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d109      	bne.n	80029e0 <ADC_ConfigureBoostMode+0x30>
 80029cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002b78 <ADC_ConfigureBoostMode+0x1c8>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf14      	ite	ne
 80029d8:	2301      	movne	r3, #1
 80029da:	2300      	moveq	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	e008      	b.n	80029f2 <ADC_ConfigureBoostMode+0x42>
 80029e0:	4b66      	ldr	r3, [pc, #408]	@ (8002b7c <ADC_ConfigureBoostMode+0x1cc>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf14      	ite	ne
 80029ec:	2301      	movne	r3, #1
 80029ee:	2300      	moveq	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d01c      	beq.n	8002a30 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80029f6:	f004 fad5 	bl	8006fa4 <HAL_RCC_GetHCLKFreq>
 80029fa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002a04:	d010      	beq.n	8002a28 <ADC_ConfigureBoostMode+0x78>
 8002a06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002a0a:	d873      	bhi.n	8002af4 <ADC_ConfigureBoostMode+0x144>
 8002a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a10:	d002      	beq.n	8002a18 <ADC_ConfigureBoostMode+0x68>
 8002a12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a16:	d16d      	bne.n	8002af4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	0c1b      	lsrs	r3, r3, #16
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a24:	60fb      	str	r3, [r7, #12]
        break;
 8002a26:	e068      	b.n	8002afa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	089b      	lsrs	r3, r3, #2
 8002a2c:	60fb      	str	r3, [r7, #12]
        break;
 8002a2e:	e064      	b.n	8002afa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002a30:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002a34:	f04f 0100 	mov.w	r1, #0
 8002a38:	f005 fc9a 	bl	8008370 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a3c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002a46:	d051      	beq.n	8002aec <ADC_ConfigureBoostMode+0x13c>
 8002a48:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002a4c:	d854      	bhi.n	8002af8 <ADC_ConfigureBoostMode+0x148>
 8002a4e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002a52:	d047      	beq.n	8002ae4 <ADC_ConfigureBoostMode+0x134>
 8002a54:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002a58:	d84e      	bhi.n	8002af8 <ADC_ConfigureBoostMode+0x148>
 8002a5a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002a5e:	d03d      	beq.n	8002adc <ADC_ConfigureBoostMode+0x12c>
 8002a60:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002a64:	d848      	bhi.n	8002af8 <ADC_ConfigureBoostMode+0x148>
 8002a66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a6a:	d033      	beq.n	8002ad4 <ADC_ConfigureBoostMode+0x124>
 8002a6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a70:	d842      	bhi.n	8002af8 <ADC_ConfigureBoostMode+0x148>
 8002a72:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002a76:	d029      	beq.n	8002acc <ADC_ConfigureBoostMode+0x11c>
 8002a78:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002a7c:	d83c      	bhi.n	8002af8 <ADC_ConfigureBoostMode+0x148>
 8002a7e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002a82:	d01a      	beq.n	8002aba <ADC_ConfigureBoostMode+0x10a>
 8002a84:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002a88:	d836      	bhi.n	8002af8 <ADC_ConfigureBoostMode+0x148>
 8002a8a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002a8e:	d014      	beq.n	8002aba <ADC_ConfigureBoostMode+0x10a>
 8002a90:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002a94:	d830      	bhi.n	8002af8 <ADC_ConfigureBoostMode+0x148>
 8002a96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a9a:	d00e      	beq.n	8002aba <ADC_ConfigureBoostMode+0x10a>
 8002a9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002aa0:	d82a      	bhi.n	8002af8 <ADC_ConfigureBoostMode+0x148>
 8002aa2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002aa6:	d008      	beq.n	8002aba <ADC_ConfigureBoostMode+0x10a>
 8002aa8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002aac:	d824      	bhi.n	8002af8 <ADC_ConfigureBoostMode+0x148>
 8002aae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ab2:	d002      	beq.n	8002aba <ADC_ConfigureBoostMode+0x10a>
 8002ab4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002ab8:	d11e      	bne.n	8002af8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	0c9b      	lsrs	r3, r3, #18
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac8:	60fb      	str	r3, [r7, #12]
        break;
 8002aca:	e016      	b.n	8002afa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	091b      	lsrs	r3, r3, #4
 8002ad0:	60fb      	str	r3, [r7, #12]
        break;
 8002ad2:	e012      	b.n	8002afa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	60fb      	str	r3, [r7, #12]
        break;
 8002ada:	e00e      	b.n	8002afa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	099b      	lsrs	r3, r3, #6
 8002ae0:	60fb      	str	r3, [r7, #12]
        break;
 8002ae2:	e00a      	b.n	8002afa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	09db      	lsrs	r3, r3, #7
 8002ae8:	60fb      	str	r3, [r7, #12]
        break;
 8002aea:	e006      	b.n	8002afa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	60fb      	str	r3, [r7, #12]
        break;
 8002af2:	e002      	b.n	8002afa <ADC_ConfigureBoostMode+0x14a>
        break;
 8002af4:	bf00      	nop
 8002af6:	e000      	b.n	8002afa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002af8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	085b      	lsrs	r3, r3, #1
 8002afe:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4a1f      	ldr	r2, [pc, #124]	@ (8002b80 <ADC_ConfigureBoostMode+0x1d0>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d808      	bhi.n	8002b1a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002b16:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002b18:	e025      	b.n	8002b66 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4a19      	ldr	r2, [pc, #100]	@ (8002b84 <ADC_ConfigureBoostMode+0x1d4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d80a      	bhi.n	8002b38 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b34:	609a      	str	r2, [r3, #8]
}
 8002b36:	e016      	b.n	8002b66 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4a13      	ldr	r2, [pc, #76]	@ (8002b88 <ADC_ConfigureBoostMode+0x1d8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d80a      	bhi.n	8002b56 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b52:	609a      	str	r2, [r3, #8]
}
 8002b54:	e007      	b.n	8002b66 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002b64:	609a      	str	r2, [r3, #8]
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40022000 	.word	0x40022000
 8002b74:	40022100 	.word	0x40022100
 8002b78:	40022300 	.word	0x40022300
 8002b7c:	58026300 	.word	0x58026300
 8002b80:	005f5e10 	.word	0x005f5e10
 8002b84:	00bebc20 	.word	0x00bebc20
 8002b88:	017d7840 	.word	0x017d7840

08002b8c <LL_ADC_IsEnabled>:
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <LL_ADC_IsEnabled+0x18>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <LL_ADC_IsEnabled+0x1a>
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d101      	bne.n	8002bca <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b0a3      	sub	sp, #140	@ 0x8c
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e0c1      	b.n	8002dde <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002c62:	2300      	movs	r3, #0
 8002c64:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002c66:	2300      	movs	r3, #0
 8002c68:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a5e      	ldr	r2, [pc, #376]	@ (8002de8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d102      	bne.n	8002c7a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c74:	4b5d      	ldr	r3, [pc, #372]	@ (8002dec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	e001      	b.n	8002c7e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10b      	bne.n	8002c9c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c88:	f043 0220 	orr.w	r2, r3, #32
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0a0      	b.n	8002dde <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff ff87 	bl	8002bb2 <LL_ADC_REG_IsConversionOngoing>
 8002ca4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff80 	bl	8002bb2 <LL_ADC_REG_IsConversionOngoing>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f040 8081 	bne.w	8002dbc <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002cba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d17c      	bne.n	8002dbc <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a48      	ldr	r2, [pc, #288]	@ (8002de8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d004      	beq.n	8002cd6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a46      	ldr	r2, [pc, #280]	@ (8002dec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d101      	bne.n	8002cda <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8002cd6:	4b46      	ldr	r3, [pc, #280]	@ (8002df0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002cd8:	e000      	b.n	8002cdc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8002cda:	4b46      	ldr	r3, [pc, #280]	@ (8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002cdc:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d039      	beq.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002ce6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cf6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a3a      	ldr	r2, [pc, #232]	@ (8002de8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d004      	beq.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a39      	ldr	r2, [pc, #228]	@ (8002dec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d10e      	bne.n	8002d2a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8002d0c:	4836      	ldr	r0, [pc, #216]	@ (8002de8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002d0e:	f7ff ff3d 	bl	8002b8c <LL_ADC_IsEnabled>
 8002d12:	4604      	mov	r4, r0
 8002d14:	4835      	ldr	r0, [pc, #212]	@ (8002dec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002d16:	f7ff ff39 	bl	8002b8c <LL_ADC_IsEnabled>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4323      	orrs	r3, r4
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	bf0c      	ite	eq
 8002d22:	2301      	moveq	r3, #1
 8002d24:	2300      	movne	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	e008      	b.n	8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002d2a:	4833      	ldr	r0, [pc, #204]	@ (8002df8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8002d2c:	f7ff ff2e 	bl	8002b8c <LL_ADC_IsEnabled>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	bf0c      	ite	eq
 8002d36:	2301      	moveq	r3, #1
 8002d38:	2300      	movne	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d047      	beq.n	8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	4b2d      	ldr	r3, [pc, #180]	@ (8002dfc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	6811      	ldr	r1, [r2, #0]
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	6892      	ldr	r2, [r2, #8]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	431a      	orrs	r2, r3
 8002d54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d56:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d58:	e03a      	b.n	8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002d5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d64:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8002de8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d004      	beq.n	8002d7a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a1d      	ldr	r2, [pc, #116]	@ (8002dec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d10e      	bne.n	8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8002d7a:	481b      	ldr	r0, [pc, #108]	@ (8002de8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002d7c:	f7ff ff06 	bl	8002b8c <LL_ADC_IsEnabled>
 8002d80:	4604      	mov	r4, r0
 8002d82:	481a      	ldr	r0, [pc, #104]	@ (8002dec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002d84:	f7ff ff02 	bl	8002b8c <LL_ADC_IsEnabled>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	4323      	orrs	r3, r4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	e008      	b.n	8002daa <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8002d98:	4817      	ldr	r0, [pc, #92]	@ (8002df8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8002d9a:	f7ff fef7 	bl	8002b8c <LL_ADC_IsEnabled>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d010      	beq.n	8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002dae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	4b12      	ldr	r3, [pc, #72]	@ (8002dfc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002db8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dba:	e009      	b.n	8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dc0:	f043 0220 	orr.w	r2, r3, #32
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002dce:	e000      	b.n	8002dd2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dd0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002dda:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	378c      	adds	r7, #140	@ 0x8c
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd90      	pop	{r4, r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40022000 	.word	0x40022000
 8002dec:	40022100 	.word	0x40022100
 8002df0:	40022300 	.word	0x40022300
 8002df4:	58026300 	.word	0x58026300
 8002df8:	58026000 	.word	0x58026000
 8002dfc:	fffff0e0 	.word	0xfffff0e0

08002e00 <__NVIC_SetPriorityGrouping>:
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e10:	4b0b      	ldr	r3, [pc, #44]	@ (8002e40 <__NVIC_SetPriorityGrouping+0x40>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e28:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <__NVIC_SetPriorityGrouping+0x44>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e2e:	4a04      	ldr	r2, [pc, #16]	@ (8002e40 <__NVIC_SetPriorityGrouping+0x40>)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	60d3      	str	r3, [r2, #12]
}
 8002e34:	bf00      	nop
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	e000ed00 	.word	0xe000ed00
 8002e44:	05fa0000 	.word	0x05fa0000

08002e48 <__NVIC_GetPriorityGrouping>:
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e4c:	4b04      	ldr	r3, [pc, #16]	@ (8002e60 <__NVIC_GetPriorityGrouping+0x18>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	0a1b      	lsrs	r3, r3, #8
 8002e52:	f003 0307 	and.w	r3, r3, #7
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <__NVIC_EnableIRQ>:
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	db0b      	blt.n	8002e8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	f003 021f 	and.w	r2, r3, #31
 8002e7c:	4907      	ldr	r1, [pc, #28]	@ (8002e9c <__NVIC_EnableIRQ+0x38>)
 8002e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	2001      	movs	r0, #1
 8002e86:	fa00 f202 	lsl.w	r2, r0, r2
 8002e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	e000e100 	.word	0xe000e100

08002ea0 <__NVIC_SetPriority>:
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	6039      	str	r1, [r7, #0]
 8002eaa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002eac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	db0a      	blt.n	8002eca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	490c      	ldr	r1, [pc, #48]	@ (8002eec <__NVIC_SetPriority+0x4c>)
 8002eba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ebe:	0112      	lsls	r2, r2, #4
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002ec8:	e00a      	b.n	8002ee0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	4908      	ldr	r1, [pc, #32]	@ (8002ef0 <__NVIC_SetPriority+0x50>)
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	3b04      	subs	r3, #4
 8002ed8:	0112      	lsls	r2, r2, #4
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	440b      	add	r3, r1
 8002ede:	761a      	strb	r2, [r3, #24]
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000e100 	.word	0xe000e100
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <NVIC_EncodePriority>:
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b089      	sub	sp, #36	@ 0x24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f1c3 0307 	rsb	r3, r3, #7
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	bf28      	it	cs
 8002f12:	2304      	movcs	r3, #4
 8002f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	2b06      	cmp	r3, #6
 8002f1c:	d902      	bls.n	8002f24 <NVIC_EncodePriority+0x30>
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3b03      	subs	r3, #3
 8002f22:	e000      	b.n	8002f26 <NVIC_EncodePriority+0x32>
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f28:	f04f 32ff 	mov.w	r2, #4294967295
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43da      	mvns	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	401a      	ands	r2, r3
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	fa01 f303 	lsl.w	r3, r1, r3
 8002f46:	43d9      	mvns	r1, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f4c:	4313      	orrs	r3, r2
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3724      	adds	r7, #36	@ 0x24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
	...

08002f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f6c:	d301      	bcc.n	8002f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e00f      	b.n	8002f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f72:	4a0a      	ldr	r2, [pc, #40]	@ (8002f9c <SysTick_Config+0x40>)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f7a:	210f      	movs	r1, #15
 8002f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f80:	f7ff ff8e 	bl	8002ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f84:	4b05      	ldr	r3, [pc, #20]	@ (8002f9c <SysTick_Config+0x40>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f8a:	4b04      	ldr	r3, [pc, #16]	@ (8002f9c <SysTick_Config+0x40>)
 8002f8c:	2207      	movs	r2, #7
 8002f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	e000e010 	.word	0xe000e010

08002fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff ff29 	bl	8002e00 <__NVIC_SetPriorityGrouping>
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b086      	sub	sp, #24
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	607a      	str	r2, [r7, #4]
 8002fc2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fc4:	f7ff ff40 	bl	8002e48 <__NVIC_GetPriorityGrouping>
 8002fc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	6978      	ldr	r0, [r7, #20]
 8002fd0:	f7ff ff90 	bl	8002ef4 <NVIC_EncodePriority>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff ff5f 	bl	8002ea0 <__NVIC_SetPriority>
}
 8002fe2:	bf00      	nop
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ff4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff ff33 	bl	8002e64 <__NVIC_EnableIRQ>
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff ffa4 	bl	8002f5c <SysTick_Config>
 8003014:	4603      	mov	r3, r0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003024:	f3bf 8f5f 	dmb	sy
}
 8003028:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800302a:	4b07      	ldr	r3, [pc, #28]	@ (8003048 <HAL_MPU_Disable+0x28>)
 800302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302e:	4a06      	ldr	r2, [pc, #24]	@ (8003048 <HAL_MPU_Disable+0x28>)
 8003030:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003034:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003036:	4b05      	ldr	r3, [pc, #20]	@ (800304c <HAL_MPU_Disable+0x2c>)
 8003038:	2200      	movs	r2, #0
 800303a:	605a      	str	r2, [r3, #4]
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	e000ed00 	.word	0xe000ed00
 800304c:	e000ed90 	.word	0xe000ed90

08003050 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003058:	4a0b      	ldr	r2, [pc, #44]	@ (8003088 <HAL_MPU_Enable+0x38>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003062:	4b0a      	ldr	r3, [pc, #40]	@ (800308c <HAL_MPU_Enable+0x3c>)
 8003064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003066:	4a09      	ldr	r2, [pc, #36]	@ (800308c <HAL_MPU_Enable+0x3c>)
 8003068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800306c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800306e:	f3bf 8f4f 	dsb	sy
}
 8003072:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003074:	f3bf 8f6f 	isb	sy
}
 8003078:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	e000ed90 	.word	0xe000ed90
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	785a      	ldrb	r2, [r3, #1]
 800309c:	4b1b      	ldr	r3, [pc, #108]	@ (800310c <HAL_MPU_ConfigRegion+0x7c>)
 800309e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80030a0:	4b1a      	ldr	r3, [pc, #104]	@ (800310c <HAL_MPU_ConfigRegion+0x7c>)
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	4a19      	ldr	r2, [pc, #100]	@ (800310c <HAL_MPU_ConfigRegion+0x7c>)
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80030ac:	4a17      	ldr	r2, [pc, #92]	@ (800310c <HAL_MPU_ConfigRegion+0x7c>)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	7b1b      	ldrb	r3, [r3, #12]
 80030b8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	7adb      	ldrb	r3, [r3, #11]
 80030be:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	7a9b      	ldrb	r3, [r3, #10]
 80030c6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80030c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	7b5b      	ldrb	r3, [r3, #13]
 80030ce:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80030d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	7b9b      	ldrb	r3, [r3, #14]
 80030d6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80030d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	7bdb      	ldrb	r3, [r3, #15]
 80030de:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80030e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	7a5b      	ldrb	r3, [r3, #9]
 80030e6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80030e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	7a1b      	ldrb	r3, [r3, #8]
 80030ee:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80030f0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	7812      	ldrb	r2, [r2, #0]
 80030f6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030f8:	4a04      	ldr	r2, [pc, #16]	@ (800310c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80030fa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030fc:	6113      	str	r3, [r2, #16]
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	e000ed90 	.word	0xe000ed90

08003110 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003118:	f7fe f830 	bl	800117c <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e312      	b.n	800374e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a66      	ldr	r2, [pc, #408]	@ (80032c8 <HAL_DMA_Init+0x1b8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d04a      	beq.n	80031c8 <HAL_DMA_Init+0xb8>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a65      	ldr	r2, [pc, #404]	@ (80032cc <HAL_DMA_Init+0x1bc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d045      	beq.n	80031c8 <HAL_DMA_Init+0xb8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a63      	ldr	r2, [pc, #396]	@ (80032d0 <HAL_DMA_Init+0x1c0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d040      	beq.n	80031c8 <HAL_DMA_Init+0xb8>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a62      	ldr	r2, [pc, #392]	@ (80032d4 <HAL_DMA_Init+0x1c4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d03b      	beq.n	80031c8 <HAL_DMA_Init+0xb8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a60      	ldr	r2, [pc, #384]	@ (80032d8 <HAL_DMA_Init+0x1c8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d036      	beq.n	80031c8 <HAL_DMA_Init+0xb8>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a5f      	ldr	r2, [pc, #380]	@ (80032dc <HAL_DMA_Init+0x1cc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d031      	beq.n	80031c8 <HAL_DMA_Init+0xb8>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a5d      	ldr	r2, [pc, #372]	@ (80032e0 <HAL_DMA_Init+0x1d0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d02c      	beq.n	80031c8 <HAL_DMA_Init+0xb8>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a5c      	ldr	r2, [pc, #368]	@ (80032e4 <HAL_DMA_Init+0x1d4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d027      	beq.n	80031c8 <HAL_DMA_Init+0xb8>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a5a      	ldr	r2, [pc, #360]	@ (80032e8 <HAL_DMA_Init+0x1d8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d022      	beq.n	80031c8 <HAL_DMA_Init+0xb8>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a59      	ldr	r2, [pc, #356]	@ (80032ec <HAL_DMA_Init+0x1dc>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d01d      	beq.n	80031c8 <HAL_DMA_Init+0xb8>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a57      	ldr	r2, [pc, #348]	@ (80032f0 <HAL_DMA_Init+0x1e0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d018      	beq.n	80031c8 <HAL_DMA_Init+0xb8>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a56      	ldr	r2, [pc, #344]	@ (80032f4 <HAL_DMA_Init+0x1e4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d013      	beq.n	80031c8 <HAL_DMA_Init+0xb8>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a54      	ldr	r2, [pc, #336]	@ (80032f8 <HAL_DMA_Init+0x1e8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00e      	beq.n	80031c8 <HAL_DMA_Init+0xb8>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a53      	ldr	r2, [pc, #332]	@ (80032fc <HAL_DMA_Init+0x1ec>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d009      	beq.n	80031c8 <HAL_DMA_Init+0xb8>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a51      	ldr	r2, [pc, #324]	@ (8003300 <HAL_DMA_Init+0x1f0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d004      	beq.n	80031c8 <HAL_DMA_Init+0xb8>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a50      	ldr	r2, [pc, #320]	@ (8003304 <HAL_DMA_Init+0x1f4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d101      	bne.n	80031cc <HAL_DMA_Init+0xbc>
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <HAL_DMA_Init+0xbe>
 80031cc:	2300      	movs	r3, #0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 813c 	beq.w	800344c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a37      	ldr	r2, [pc, #220]	@ (80032c8 <HAL_DMA_Init+0x1b8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d04a      	beq.n	8003284 <HAL_DMA_Init+0x174>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a36      	ldr	r2, [pc, #216]	@ (80032cc <HAL_DMA_Init+0x1bc>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d045      	beq.n	8003284 <HAL_DMA_Init+0x174>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a34      	ldr	r2, [pc, #208]	@ (80032d0 <HAL_DMA_Init+0x1c0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d040      	beq.n	8003284 <HAL_DMA_Init+0x174>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a33      	ldr	r2, [pc, #204]	@ (80032d4 <HAL_DMA_Init+0x1c4>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d03b      	beq.n	8003284 <HAL_DMA_Init+0x174>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a31      	ldr	r2, [pc, #196]	@ (80032d8 <HAL_DMA_Init+0x1c8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d036      	beq.n	8003284 <HAL_DMA_Init+0x174>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a30      	ldr	r2, [pc, #192]	@ (80032dc <HAL_DMA_Init+0x1cc>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d031      	beq.n	8003284 <HAL_DMA_Init+0x174>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a2e      	ldr	r2, [pc, #184]	@ (80032e0 <HAL_DMA_Init+0x1d0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d02c      	beq.n	8003284 <HAL_DMA_Init+0x174>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a2d      	ldr	r2, [pc, #180]	@ (80032e4 <HAL_DMA_Init+0x1d4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d027      	beq.n	8003284 <HAL_DMA_Init+0x174>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a2b      	ldr	r2, [pc, #172]	@ (80032e8 <HAL_DMA_Init+0x1d8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d022      	beq.n	8003284 <HAL_DMA_Init+0x174>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a2a      	ldr	r2, [pc, #168]	@ (80032ec <HAL_DMA_Init+0x1dc>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d01d      	beq.n	8003284 <HAL_DMA_Init+0x174>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a28      	ldr	r2, [pc, #160]	@ (80032f0 <HAL_DMA_Init+0x1e0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d018      	beq.n	8003284 <HAL_DMA_Init+0x174>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a27      	ldr	r2, [pc, #156]	@ (80032f4 <HAL_DMA_Init+0x1e4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d013      	beq.n	8003284 <HAL_DMA_Init+0x174>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a25      	ldr	r2, [pc, #148]	@ (80032f8 <HAL_DMA_Init+0x1e8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00e      	beq.n	8003284 <HAL_DMA_Init+0x174>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a24      	ldr	r2, [pc, #144]	@ (80032fc <HAL_DMA_Init+0x1ec>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d009      	beq.n	8003284 <HAL_DMA_Init+0x174>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a22      	ldr	r2, [pc, #136]	@ (8003300 <HAL_DMA_Init+0x1f0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d004      	beq.n	8003284 <HAL_DMA_Init+0x174>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a21      	ldr	r2, [pc, #132]	@ (8003304 <HAL_DMA_Init+0x1f4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d108      	bne.n	8003296 <HAL_DMA_Init+0x186>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0201 	bic.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	e007      	b.n	80032a6 <HAL_DMA_Init+0x196>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0201 	bic.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032a6:	e02f      	b.n	8003308 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032a8:	f7fd ff68 	bl	800117c <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b05      	cmp	r3, #5
 80032b4:	d928      	bls.n	8003308 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2220      	movs	r2, #32
 80032ba:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2203      	movs	r2, #3
 80032c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e242      	b.n	800374e <HAL_DMA_Init+0x63e>
 80032c8:	40020010 	.word	0x40020010
 80032cc:	40020028 	.word	0x40020028
 80032d0:	40020040 	.word	0x40020040
 80032d4:	40020058 	.word	0x40020058
 80032d8:	40020070 	.word	0x40020070
 80032dc:	40020088 	.word	0x40020088
 80032e0:	400200a0 	.word	0x400200a0
 80032e4:	400200b8 	.word	0x400200b8
 80032e8:	40020410 	.word	0x40020410
 80032ec:	40020428 	.word	0x40020428
 80032f0:	40020440 	.word	0x40020440
 80032f4:	40020458 	.word	0x40020458
 80032f8:	40020470 	.word	0x40020470
 80032fc:	40020488 	.word	0x40020488
 8003300:	400204a0 	.word	0x400204a0
 8003304:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1c8      	bne.n	80032a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4b83      	ldr	r3, [pc, #524]	@ (8003530 <HAL_DMA_Init+0x420>)
 8003322:	4013      	ands	r3, r2
 8003324:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800332e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800333a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003346:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4313      	orrs	r3, r2
 8003352:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003358:	2b04      	cmp	r3, #4
 800335a:	d107      	bne.n	800336c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003364:	4313      	orrs	r3, r2
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	4313      	orrs	r3, r2
 800336a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b28      	cmp	r3, #40	@ 0x28
 8003372:	d903      	bls.n	800337c <HAL_DMA_Init+0x26c>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b2e      	cmp	r3, #46	@ 0x2e
 800337a:	d91f      	bls.n	80033bc <HAL_DMA_Init+0x2ac>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b3e      	cmp	r3, #62	@ 0x3e
 8003382:	d903      	bls.n	800338c <HAL_DMA_Init+0x27c>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b42      	cmp	r3, #66	@ 0x42
 800338a:	d917      	bls.n	80033bc <HAL_DMA_Init+0x2ac>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b46      	cmp	r3, #70	@ 0x46
 8003392:	d903      	bls.n	800339c <HAL_DMA_Init+0x28c>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b48      	cmp	r3, #72	@ 0x48
 800339a:	d90f      	bls.n	80033bc <HAL_DMA_Init+0x2ac>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b4e      	cmp	r3, #78	@ 0x4e
 80033a2:	d903      	bls.n	80033ac <HAL_DMA_Init+0x29c>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b52      	cmp	r3, #82	@ 0x52
 80033aa:	d907      	bls.n	80033bc <HAL_DMA_Init+0x2ac>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b73      	cmp	r3, #115	@ 0x73
 80033b2:	d905      	bls.n	80033c0 <HAL_DMA_Init+0x2b0>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b77      	cmp	r3, #119	@ 0x77
 80033ba:	d801      	bhi.n	80033c0 <HAL_DMA_Init+0x2b0>
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <HAL_DMA_Init+0x2b2>
 80033c0:	2300      	movs	r3, #0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033cc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f023 0307 	bic.w	r3, r3, #7
 80033e4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d117      	bne.n	8003428 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00e      	beq.n	8003428 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f002 fb3a 	bl	8005a84 <DMA_CheckFifoParam>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d008      	beq.n	8003428 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2240      	movs	r2, #64	@ 0x40
 800341a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e192      	b.n	800374e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f002 fa75 	bl	8005920 <DMA_CalcBaseAndBitshift>
 8003436:	4603      	mov	r3, r0
 8003438:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	223f      	movs	r2, #63	@ 0x3f
 8003444:	409a      	lsls	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	609a      	str	r2, [r3, #8]
 800344a:	e0c8      	b.n	80035de <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a38      	ldr	r2, [pc, #224]	@ (8003534 <HAL_DMA_Init+0x424>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d022      	beq.n	800349c <HAL_DMA_Init+0x38c>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a37      	ldr	r2, [pc, #220]	@ (8003538 <HAL_DMA_Init+0x428>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d01d      	beq.n	800349c <HAL_DMA_Init+0x38c>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a35      	ldr	r2, [pc, #212]	@ (800353c <HAL_DMA_Init+0x42c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d018      	beq.n	800349c <HAL_DMA_Init+0x38c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a34      	ldr	r2, [pc, #208]	@ (8003540 <HAL_DMA_Init+0x430>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d013      	beq.n	800349c <HAL_DMA_Init+0x38c>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a32      	ldr	r2, [pc, #200]	@ (8003544 <HAL_DMA_Init+0x434>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00e      	beq.n	800349c <HAL_DMA_Init+0x38c>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a31      	ldr	r2, [pc, #196]	@ (8003548 <HAL_DMA_Init+0x438>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d009      	beq.n	800349c <HAL_DMA_Init+0x38c>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a2f      	ldr	r2, [pc, #188]	@ (800354c <HAL_DMA_Init+0x43c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d004      	beq.n	800349c <HAL_DMA_Init+0x38c>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a2e      	ldr	r2, [pc, #184]	@ (8003550 <HAL_DMA_Init+0x440>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d101      	bne.n	80034a0 <HAL_DMA_Init+0x390>
 800349c:	2301      	movs	r3, #1
 800349e:	e000      	b.n	80034a2 <HAL_DMA_Init+0x392>
 80034a0:	2300      	movs	r3, #0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 8092 	beq.w	80035cc <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a21      	ldr	r2, [pc, #132]	@ (8003534 <HAL_DMA_Init+0x424>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d021      	beq.n	80034f6 <HAL_DMA_Init+0x3e6>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a20      	ldr	r2, [pc, #128]	@ (8003538 <HAL_DMA_Init+0x428>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d01c      	beq.n	80034f6 <HAL_DMA_Init+0x3e6>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1e      	ldr	r2, [pc, #120]	@ (800353c <HAL_DMA_Init+0x42c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d017      	beq.n	80034f6 <HAL_DMA_Init+0x3e6>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003540 <HAL_DMA_Init+0x430>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d012      	beq.n	80034f6 <HAL_DMA_Init+0x3e6>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003544 <HAL_DMA_Init+0x434>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00d      	beq.n	80034f6 <HAL_DMA_Init+0x3e6>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1a      	ldr	r2, [pc, #104]	@ (8003548 <HAL_DMA_Init+0x438>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d008      	beq.n	80034f6 <HAL_DMA_Init+0x3e6>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a18      	ldr	r2, [pc, #96]	@ (800354c <HAL_DMA_Init+0x43c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d003      	beq.n	80034f6 <HAL_DMA_Init+0x3e6>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a17      	ldr	r2, [pc, #92]	@ (8003550 <HAL_DMA_Init+0x440>)
 80034f4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2202      	movs	r2, #2
 80034fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4b10      	ldr	r3, [pc, #64]	@ (8003554 <HAL_DMA_Init+0x444>)
 8003512:	4013      	ands	r3, r2
 8003514:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	2b40      	cmp	r3, #64	@ 0x40
 800351c:	d01c      	beq.n	8003558 <HAL_DMA_Init+0x448>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b80      	cmp	r3, #128	@ 0x80
 8003524:	d102      	bne.n	800352c <HAL_DMA_Init+0x41c>
 8003526:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800352a:	e016      	b.n	800355a <HAL_DMA_Init+0x44a>
 800352c:	2300      	movs	r3, #0
 800352e:	e014      	b.n	800355a <HAL_DMA_Init+0x44a>
 8003530:	fe10803f 	.word	0xfe10803f
 8003534:	58025408 	.word	0x58025408
 8003538:	5802541c 	.word	0x5802541c
 800353c:	58025430 	.word	0x58025430
 8003540:	58025444 	.word	0x58025444
 8003544:	58025458 	.word	0x58025458
 8003548:	5802546c 	.word	0x5802546c
 800354c:	58025480 	.word	0x58025480
 8003550:	58025494 	.word	0x58025494
 8003554:	fffe000f 	.word	0xfffe000f
 8003558:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	68d2      	ldr	r2, [r2, #12]
 800355e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003560:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003568:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003570:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003578:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003580:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003588:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4313      	orrs	r3, r2
 800358e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	461a      	mov	r2, r3
 800359e:	4b6e      	ldr	r3, [pc, #440]	@ (8003758 <HAL_DMA_Init+0x648>)
 80035a0:	4413      	add	r3, r2
 80035a2:	4a6e      	ldr	r2, [pc, #440]	@ (800375c <HAL_DMA_Init+0x64c>)
 80035a4:	fba2 2303 	umull	r2, r3, r2, r3
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	009a      	lsls	r2, r3, #2
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f002 f9b5 	bl	8005920 <DMA_CalcBaseAndBitshift>
 80035b6:	4603      	mov	r3, r0
 80035b8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035be:	f003 031f 	and.w	r3, r3, #31
 80035c2:	2201      	movs	r2, #1
 80035c4:	409a      	lsls	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	e008      	b.n	80035de <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2240      	movs	r2, #64	@ 0x40
 80035d0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2203      	movs	r2, #3
 80035d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e0b7      	b.n	800374e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a5f      	ldr	r2, [pc, #380]	@ (8003760 <HAL_DMA_Init+0x650>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d072      	beq.n	80036ce <HAL_DMA_Init+0x5be>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a5d      	ldr	r2, [pc, #372]	@ (8003764 <HAL_DMA_Init+0x654>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d06d      	beq.n	80036ce <HAL_DMA_Init+0x5be>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a5c      	ldr	r2, [pc, #368]	@ (8003768 <HAL_DMA_Init+0x658>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d068      	beq.n	80036ce <HAL_DMA_Init+0x5be>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a5a      	ldr	r2, [pc, #360]	@ (800376c <HAL_DMA_Init+0x65c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d063      	beq.n	80036ce <HAL_DMA_Init+0x5be>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a59      	ldr	r2, [pc, #356]	@ (8003770 <HAL_DMA_Init+0x660>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d05e      	beq.n	80036ce <HAL_DMA_Init+0x5be>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a57      	ldr	r2, [pc, #348]	@ (8003774 <HAL_DMA_Init+0x664>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d059      	beq.n	80036ce <HAL_DMA_Init+0x5be>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a56      	ldr	r2, [pc, #344]	@ (8003778 <HAL_DMA_Init+0x668>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d054      	beq.n	80036ce <HAL_DMA_Init+0x5be>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a54      	ldr	r2, [pc, #336]	@ (800377c <HAL_DMA_Init+0x66c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d04f      	beq.n	80036ce <HAL_DMA_Init+0x5be>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a53      	ldr	r2, [pc, #332]	@ (8003780 <HAL_DMA_Init+0x670>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d04a      	beq.n	80036ce <HAL_DMA_Init+0x5be>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a51      	ldr	r2, [pc, #324]	@ (8003784 <HAL_DMA_Init+0x674>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d045      	beq.n	80036ce <HAL_DMA_Init+0x5be>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a50      	ldr	r2, [pc, #320]	@ (8003788 <HAL_DMA_Init+0x678>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d040      	beq.n	80036ce <HAL_DMA_Init+0x5be>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a4e      	ldr	r2, [pc, #312]	@ (800378c <HAL_DMA_Init+0x67c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d03b      	beq.n	80036ce <HAL_DMA_Init+0x5be>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a4d      	ldr	r2, [pc, #308]	@ (8003790 <HAL_DMA_Init+0x680>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d036      	beq.n	80036ce <HAL_DMA_Init+0x5be>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a4b      	ldr	r2, [pc, #300]	@ (8003794 <HAL_DMA_Init+0x684>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d031      	beq.n	80036ce <HAL_DMA_Init+0x5be>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a4a      	ldr	r2, [pc, #296]	@ (8003798 <HAL_DMA_Init+0x688>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d02c      	beq.n	80036ce <HAL_DMA_Init+0x5be>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a48      	ldr	r2, [pc, #288]	@ (800379c <HAL_DMA_Init+0x68c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d027      	beq.n	80036ce <HAL_DMA_Init+0x5be>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a47      	ldr	r2, [pc, #284]	@ (80037a0 <HAL_DMA_Init+0x690>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d022      	beq.n	80036ce <HAL_DMA_Init+0x5be>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a45      	ldr	r2, [pc, #276]	@ (80037a4 <HAL_DMA_Init+0x694>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d01d      	beq.n	80036ce <HAL_DMA_Init+0x5be>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a44      	ldr	r2, [pc, #272]	@ (80037a8 <HAL_DMA_Init+0x698>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d018      	beq.n	80036ce <HAL_DMA_Init+0x5be>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a42      	ldr	r2, [pc, #264]	@ (80037ac <HAL_DMA_Init+0x69c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d013      	beq.n	80036ce <HAL_DMA_Init+0x5be>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a41      	ldr	r2, [pc, #260]	@ (80037b0 <HAL_DMA_Init+0x6a0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00e      	beq.n	80036ce <HAL_DMA_Init+0x5be>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a3f      	ldr	r2, [pc, #252]	@ (80037b4 <HAL_DMA_Init+0x6a4>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d009      	beq.n	80036ce <HAL_DMA_Init+0x5be>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a3e      	ldr	r2, [pc, #248]	@ (80037b8 <HAL_DMA_Init+0x6a8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d004      	beq.n	80036ce <HAL_DMA_Init+0x5be>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a3c      	ldr	r2, [pc, #240]	@ (80037bc <HAL_DMA_Init+0x6ac>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d101      	bne.n	80036d2 <HAL_DMA_Init+0x5c2>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <HAL_DMA_Init+0x5c4>
 80036d2:	2300      	movs	r3, #0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d032      	beq.n	800373e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f002 fa4f 	bl	8005b7c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b80      	cmp	r3, #128	@ 0x80
 80036e4:	d102      	bne.n	80036ec <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003700:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d010      	beq.n	800372c <HAL_DMA_Init+0x61c>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b08      	cmp	r3, #8
 8003710:	d80c      	bhi.n	800372c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f002 facc 	bl	8005cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003728:	605a      	str	r2, [r3, #4]
 800372a:	e008      	b.n	800373e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	a7fdabf8 	.word	0xa7fdabf8
 800375c:	cccccccd 	.word	0xcccccccd
 8003760:	40020010 	.word	0x40020010
 8003764:	40020028 	.word	0x40020028
 8003768:	40020040 	.word	0x40020040
 800376c:	40020058 	.word	0x40020058
 8003770:	40020070 	.word	0x40020070
 8003774:	40020088 	.word	0x40020088
 8003778:	400200a0 	.word	0x400200a0
 800377c:	400200b8 	.word	0x400200b8
 8003780:	40020410 	.word	0x40020410
 8003784:	40020428 	.word	0x40020428
 8003788:	40020440 	.word	0x40020440
 800378c:	40020458 	.word	0x40020458
 8003790:	40020470 	.word	0x40020470
 8003794:	40020488 	.word	0x40020488
 8003798:	400204a0 	.word	0x400204a0
 800379c:	400204b8 	.word	0x400204b8
 80037a0:	58025408 	.word	0x58025408
 80037a4:	5802541c 	.word	0x5802541c
 80037a8:	58025430 	.word	0x58025430
 80037ac:	58025444 	.word	0x58025444
 80037b0:	58025458 	.word	0x58025458
 80037b4:	5802546c 	.word	0x5802546c
 80037b8:	58025480 	.word	0x58025480
 80037bc:	58025494 	.word	0x58025494

080037c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e226      	b.n	8003c2a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_DMA_Start_IT+0x2a>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e21f      	b.n	8003c2a <HAL_DMA_Start_IT+0x46a>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	f040 820a 	bne.w	8003c14 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a68      	ldr	r2, [pc, #416]	@ (80039b4 <HAL_DMA_Start_IT+0x1f4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d04a      	beq.n	80038ae <HAL_DMA_Start_IT+0xee>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a66      	ldr	r2, [pc, #408]	@ (80039b8 <HAL_DMA_Start_IT+0x1f8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d045      	beq.n	80038ae <HAL_DMA_Start_IT+0xee>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a65      	ldr	r2, [pc, #404]	@ (80039bc <HAL_DMA_Start_IT+0x1fc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d040      	beq.n	80038ae <HAL_DMA_Start_IT+0xee>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a63      	ldr	r2, [pc, #396]	@ (80039c0 <HAL_DMA_Start_IT+0x200>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d03b      	beq.n	80038ae <HAL_DMA_Start_IT+0xee>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a62      	ldr	r2, [pc, #392]	@ (80039c4 <HAL_DMA_Start_IT+0x204>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d036      	beq.n	80038ae <HAL_DMA_Start_IT+0xee>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a60      	ldr	r2, [pc, #384]	@ (80039c8 <HAL_DMA_Start_IT+0x208>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d031      	beq.n	80038ae <HAL_DMA_Start_IT+0xee>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a5f      	ldr	r2, [pc, #380]	@ (80039cc <HAL_DMA_Start_IT+0x20c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d02c      	beq.n	80038ae <HAL_DMA_Start_IT+0xee>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a5d      	ldr	r2, [pc, #372]	@ (80039d0 <HAL_DMA_Start_IT+0x210>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d027      	beq.n	80038ae <HAL_DMA_Start_IT+0xee>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a5c      	ldr	r2, [pc, #368]	@ (80039d4 <HAL_DMA_Start_IT+0x214>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d022      	beq.n	80038ae <HAL_DMA_Start_IT+0xee>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a5a      	ldr	r2, [pc, #360]	@ (80039d8 <HAL_DMA_Start_IT+0x218>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d01d      	beq.n	80038ae <HAL_DMA_Start_IT+0xee>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a59      	ldr	r2, [pc, #356]	@ (80039dc <HAL_DMA_Start_IT+0x21c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d018      	beq.n	80038ae <HAL_DMA_Start_IT+0xee>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a57      	ldr	r2, [pc, #348]	@ (80039e0 <HAL_DMA_Start_IT+0x220>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d013      	beq.n	80038ae <HAL_DMA_Start_IT+0xee>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a56      	ldr	r2, [pc, #344]	@ (80039e4 <HAL_DMA_Start_IT+0x224>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d00e      	beq.n	80038ae <HAL_DMA_Start_IT+0xee>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a54      	ldr	r2, [pc, #336]	@ (80039e8 <HAL_DMA_Start_IT+0x228>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d009      	beq.n	80038ae <HAL_DMA_Start_IT+0xee>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a53      	ldr	r2, [pc, #332]	@ (80039ec <HAL_DMA_Start_IT+0x22c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d004      	beq.n	80038ae <HAL_DMA_Start_IT+0xee>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a51      	ldr	r2, [pc, #324]	@ (80039f0 <HAL_DMA_Start_IT+0x230>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d108      	bne.n	80038c0 <HAL_DMA_Start_IT+0x100>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	e007      	b.n	80038d0 <HAL_DMA_Start_IT+0x110>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0201 	bic.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68b9      	ldr	r1, [r7, #8]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f001 fe76 	bl	80055c8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a34      	ldr	r2, [pc, #208]	@ (80039b4 <HAL_DMA_Start_IT+0x1f4>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d04a      	beq.n	800397c <HAL_DMA_Start_IT+0x1bc>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a33      	ldr	r2, [pc, #204]	@ (80039b8 <HAL_DMA_Start_IT+0x1f8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d045      	beq.n	800397c <HAL_DMA_Start_IT+0x1bc>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a31      	ldr	r2, [pc, #196]	@ (80039bc <HAL_DMA_Start_IT+0x1fc>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d040      	beq.n	800397c <HAL_DMA_Start_IT+0x1bc>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a30      	ldr	r2, [pc, #192]	@ (80039c0 <HAL_DMA_Start_IT+0x200>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d03b      	beq.n	800397c <HAL_DMA_Start_IT+0x1bc>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a2e      	ldr	r2, [pc, #184]	@ (80039c4 <HAL_DMA_Start_IT+0x204>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d036      	beq.n	800397c <HAL_DMA_Start_IT+0x1bc>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a2d      	ldr	r2, [pc, #180]	@ (80039c8 <HAL_DMA_Start_IT+0x208>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d031      	beq.n	800397c <HAL_DMA_Start_IT+0x1bc>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a2b      	ldr	r2, [pc, #172]	@ (80039cc <HAL_DMA_Start_IT+0x20c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d02c      	beq.n	800397c <HAL_DMA_Start_IT+0x1bc>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2a      	ldr	r2, [pc, #168]	@ (80039d0 <HAL_DMA_Start_IT+0x210>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d027      	beq.n	800397c <HAL_DMA_Start_IT+0x1bc>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a28      	ldr	r2, [pc, #160]	@ (80039d4 <HAL_DMA_Start_IT+0x214>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d022      	beq.n	800397c <HAL_DMA_Start_IT+0x1bc>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a27      	ldr	r2, [pc, #156]	@ (80039d8 <HAL_DMA_Start_IT+0x218>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d01d      	beq.n	800397c <HAL_DMA_Start_IT+0x1bc>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a25      	ldr	r2, [pc, #148]	@ (80039dc <HAL_DMA_Start_IT+0x21c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d018      	beq.n	800397c <HAL_DMA_Start_IT+0x1bc>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a24      	ldr	r2, [pc, #144]	@ (80039e0 <HAL_DMA_Start_IT+0x220>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d013      	beq.n	800397c <HAL_DMA_Start_IT+0x1bc>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a22      	ldr	r2, [pc, #136]	@ (80039e4 <HAL_DMA_Start_IT+0x224>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d00e      	beq.n	800397c <HAL_DMA_Start_IT+0x1bc>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a21      	ldr	r2, [pc, #132]	@ (80039e8 <HAL_DMA_Start_IT+0x228>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d009      	beq.n	800397c <HAL_DMA_Start_IT+0x1bc>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a1f      	ldr	r2, [pc, #124]	@ (80039ec <HAL_DMA_Start_IT+0x22c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d004      	beq.n	800397c <HAL_DMA_Start_IT+0x1bc>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a1e      	ldr	r2, [pc, #120]	@ (80039f0 <HAL_DMA_Start_IT+0x230>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d101      	bne.n	8003980 <HAL_DMA_Start_IT+0x1c0>
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <HAL_DMA_Start_IT+0x1c2>
 8003980:	2300      	movs	r3, #0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d036      	beq.n	80039f4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f023 021e 	bic.w	r2, r3, #30
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f042 0216 	orr.w	r2, r2, #22
 8003998:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d03e      	beq.n	8003a20 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0208 	orr.w	r2, r2, #8
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	e035      	b.n	8003a20 <HAL_DMA_Start_IT+0x260>
 80039b4:	40020010 	.word	0x40020010
 80039b8:	40020028 	.word	0x40020028
 80039bc:	40020040 	.word	0x40020040
 80039c0:	40020058 	.word	0x40020058
 80039c4:	40020070 	.word	0x40020070
 80039c8:	40020088 	.word	0x40020088
 80039cc:	400200a0 	.word	0x400200a0
 80039d0:	400200b8 	.word	0x400200b8
 80039d4:	40020410 	.word	0x40020410
 80039d8:	40020428 	.word	0x40020428
 80039dc:	40020440 	.word	0x40020440
 80039e0:	40020458 	.word	0x40020458
 80039e4:	40020470 	.word	0x40020470
 80039e8:	40020488 	.word	0x40020488
 80039ec:	400204a0 	.word	0x400204a0
 80039f0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f023 020e 	bic.w	r2, r3, #14
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 020a 	orr.w	r2, r2, #10
 8003a06:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d007      	beq.n	8003a20 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0204 	orr.w	r2, r2, #4
 8003a1e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a83      	ldr	r2, [pc, #524]	@ (8003c34 <HAL_DMA_Start_IT+0x474>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d072      	beq.n	8003b10 <HAL_DMA_Start_IT+0x350>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a82      	ldr	r2, [pc, #520]	@ (8003c38 <HAL_DMA_Start_IT+0x478>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d06d      	beq.n	8003b10 <HAL_DMA_Start_IT+0x350>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a80      	ldr	r2, [pc, #512]	@ (8003c3c <HAL_DMA_Start_IT+0x47c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d068      	beq.n	8003b10 <HAL_DMA_Start_IT+0x350>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a7f      	ldr	r2, [pc, #508]	@ (8003c40 <HAL_DMA_Start_IT+0x480>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d063      	beq.n	8003b10 <HAL_DMA_Start_IT+0x350>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a7d      	ldr	r2, [pc, #500]	@ (8003c44 <HAL_DMA_Start_IT+0x484>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d05e      	beq.n	8003b10 <HAL_DMA_Start_IT+0x350>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a7c      	ldr	r2, [pc, #496]	@ (8003c48 <HAL_DMA_Start_IT+0x488>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d059      	beq.n	8003b10 <HAL_DMA_Start_IT+0x350>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a7a      	ldr	r2, [pc, #488]	@ (8003c4c <HAL_DMA_Start_IT+0x48c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d054      	beq.n	8003b10 <HAL_DMA_Start_IT+0x350>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a79      	ldr	r2, [pc, #484]	@ (8003c50 <HAL_DMA_Start_IT+0x490>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d04f      	beq.n	8003b10 <HAL_DMA_Start_IT+0x350>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a77      	ldr	r2, [pc, #476]	@ (8003c54 <HAL_DMA_Start_IT+0x494>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d04a      	beq.n	8003b10 <HAL_DMA_Start_IT+0x350>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a76      	ldr	r2, [pc, #472]	@ (8003c58 <HAL_DMA_Start_IT+0x498>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d045      	beq.n	8003b10 <HAL_DMA_Start_IT+0x350>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a74      	ldr	r2, [pc, #464]	@ (8003c5c <HAL_DMA_Start_IT+0x49c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d040      	beq.n	8003b10 <HAL_DMA_Start_IT+0x350>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a73      	ldr	r2, [pc, #460]	@ (8003c60 <HAL_DMA_Start_IT+0x4a0>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d03b      	beq.n	8003b10 <HAL_DMA_Start_IT+0x350>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a71      	ldr	r2, [pc, #452]	@ (8003c64 <HAL_DMA_Start_IT+0x4a4>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d036      	beq.n	8003b10 <HAL_DMA_Start_IT+0x350>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a70      	ldr	r2, [pc, #448]	@ (8003c68 <HAL_DMA_Start_IT+0x4a8>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d031      	beq.n	8003b10 <HAL_DMA_Start_IT+0x350>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a6e      	ldr	r2, [pc, #440]	@ (8003c6c <HAL_DMA_Start_IT+0x4ac>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d02c      	beq.n	8003b10 <HAL_DMA_Start_IT+0x350>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a6d      	ldr	r2, [pc, #436]	@ (8003c70 <HAL_DMA_Start_IT+0x4b0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d027      	beq.n	8003b10 <HAL_DMA_Start_IT+0x350>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a6b      	ldr	r2, [pc, #428]	@ (8003c74 <HAL_DMA_Start_IT+0x4b4>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d022      	beq.n	8003b10 <HAL_DMA_Start_IT+0x350>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a6a      	ldr	r2, [pc, #424]	@ (8003c78 <HAL_DMA_Start_IT+0x4b8>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d01d      	beq.n	8003b10 <HAL_DMA_Start_IT+0x350>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a68      	ldr	r2, [pc, #416]	@ (8003c7c <HAL_DMA_Start_IT+0x4bc>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d018      	beq.n	8003b10 <HAL_DMA_Start_IT+0x350>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a67      	ldr	r2, [pc, #412]	@ (8003c80 <HAL_DMA_Start_IT+0x4c0>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d013      	beq.n	8003b10 <HAL_DMA_Start_IT+0x350>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a65      	ldr	r2, [pc, #404]	@ (8003c84 <HAL_DMA_Start_IT+0x4c4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00e      	beq.n	8003b10 <HAL_DMA_Start_IT+0x350>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a64      	ldr	r2, [pc, #400]	@ (8003c88 <HAL_DMA_Start_IT+0x4c8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d009      	beq.n	8003b10 <HAL_DMA_Start_IT+0x350>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a62      	ldr	r2, [pc, #392]	@ (8003c8c <HAL_DMA_Start_IT+0x4cc>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d004      	beq.n	8003b10 <HAL_DMA_Start_IT+0x350>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a61      	ldr	r2, [pc, #388]	@ (8003c90 <HAL_DMA_Start_IT+0x4d0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d101      	bne.n	8003b14 <HAL_DMA_Start_IT+0x354>
 8003b10:	2301      	movs	r3, #1
 8003b12:	e000      	b.n	8003b16 <HAL_DMA_Start_IT+0x356>
 8003b14:	2300      	movs	r3, #0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d01a      	beq.n	8003b50 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d007      	beq.n	8003b38 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b36:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d007      	beq.n	8003b50 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b4e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a37      	ldr	r2, [pc, #220]	@ (8003c34 <HAL_DMA_Start_IT+0x474>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d04a      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x430>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a36      	ldr	r2, [pc, #216]	@ (8003c38 <HAL_DMA_Start_IT+0x478>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d045      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x430>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a34      	ldr	r2, [pc, #208]	@ (8003c3c <HAL_DMA_Start_IT+0x47c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d040      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x430>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a33      	ldr	r2, [pc, #204]	@ (8003c40 <HAL_DMA_Start_IT+0x480>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d03b      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x430>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a31      	ldr	r2, [pc, #196]	@ (8003c44 <HAL_DMA_Start_IT+0x484>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d036      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x430>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a30      	ldr	r2, [pc, #192]	@ (8003c48 <HAL_DMA_Start_IT+0x488>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d031      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x430>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a2e      	ldr	r2, [pc, #184]	@ (8003c4c <HAL_DMA_Start_IT+0x48c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d02c      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x430>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8003c50 <HAL_DMA_Start_IT+0x490>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d027      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x430>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a2b      	ldr	r2, [pc, #172]	@ (8003c54 <HAL_DMA_Start_IT+0x494>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d022      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x430>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a2a      	ldr	r2, [pc, #168]	@ (8003c58 <HAL_DMA_Start_IT+0x498>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d01d      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x430>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a28      	ldr	r2, [pc, #160]	@ (8003c5c <HAL_DMA_Start_IT+0x49c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d018      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x430>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a27      	ldr	r2, [pc, #156]	@ (8003c60 <HAL_DMA_Start_IT+0x4a0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d013      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x430>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a25      	ldr	r2, [pc, #148]	@ (8003c64 <HAL_DMA_Start_IT+0x4a4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00e      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x430>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a24      	ldr	r2, [pc, #144]	@ (8003c68 <HAL_DMA_Start_IT+0x4a8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d009      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x430>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a22      	ldr	r2, [pc, #136]	@ (8003c6c <HAL_DMA_Start_IT+0x4ac>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d004      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x430>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a21      	ldr	r2, [pc, #132]	@ (8003c70 <HAL_DMA_Start_IT+0x4b0>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d108      	bne.n	8003c02 <HAL_DMA_Start_IT+0x442>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0201 	orr.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	e012      	b.n	8003c28 <HAL_DMA_Start_IT+0x468>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f042 0201 	orr.w	r2, r2, #1
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	e009      	b.n	8003c28 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c1a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40020010 	.word	0x40020010
 8003c38:	40020028 	.word	0x40020028
 8003c3c:	40020040 	.word	0x40020040
 8003c40:	40020058 	.word	0x40020058
 8003c44:	40020070 	.word	0x40020070
 8003c48:	40020088 	.word	0x40020088
 8003c4c:	400200a0 	.word	0x400200a0
 8003c50:	400200b8 	.word	0x400200b8
 8003c54:	40020410 	.word	0x40020410
 8003c58:	40020428 	.word	0x40020428
 8003c5c:	40020440 	.word	0x40020440
 8003c60:	40020458 	.word	0x40020458
 8003c64:	40020470 	.word	0x40020470
 8003c68:	40020488 	.word	0x40020488
 8003c6c:	400204a0 	.word	0x400204a0
 8003c70:	400204b8 	.word	0x400204b8
 8003c74:	58025408 	.word	0x58025408
 8003c78:	5802541c 	.word	0x5802541c
 8003c7c:	58025430 	.word	0x58025430
 8003c80:	58025444 	.word	0x58025444
 8003c84:	58025458 	.word	0x58025458
 8003c88:	5802546c 	.word	0x5802546c
 8003c8c:	58025480 	.word	0x58025480
 8003c90:	58025494 	.word	0x58025494

08003c94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003c9c:	f7fd fa6e 	bl	800117c <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e2dc      	b.n	8004266 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d008      	beq.n	8003cca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2280      	movs	r2, #128	@ 0x80
 8003cbc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e2cd      	b.n	8004266 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a76      	ldr	r2, [pc, #472]	@ (8003ea8 <HAL_DMA_Abort+0x214>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d04a      	beq.n	8003d6a <HAL_DMA_Abort+0xd6>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a74      	ldr	r2, [pc, #464]	@ (8003eac <HAL_DMA_Abort+0x218>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d045      	beq.n	8003d6a <HAL_DMA_Abort+0xd6>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a73      	ldr	r2, [pc, #460]	@ (8003eb0 <HAL_DMA_Abort+0x21c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d040      	beq.n	8003d6a <HAL_DMA_Abort+0xd6>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a71      	ldr	r2, [pc, #452]	@ (8003eb4 <HAL_DMA_Abort+0x220>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d03b      	beq.n	8003d6a <HAL_DMA_Abort+0xd6>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a70      	ldr	r2, [pc, #448]	@ (8003eb8 <HAL_DMA_Abort+0x224>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d036      	beq.n	8003d6a <HAL_DMA_Abort+0xd6>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a6e      	ldr	r2, [pc, #440]	@ (8003ebc <HAL_DMA_Abort+0x228>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d031      	beq.n	8003d6a <HAL_DMA_Abort+0xd6>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a6d      	ldr	r2, [pc, #436]	@ (8003ec0 <HAL_DMA_Abort+0x22c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d02c      	beq.n	8003d6a <HAL_DMA_Abort+0xd6>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a6b      	ldr	r2, [pc, #428]	@ (8003ec4 <HAL_DMA_Abort+0x230>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d027      	beq.n	8003d6a <HAL_DMA_Abort+0xd6>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a6a      	ldr	r2, [pc, #424]	@ (8003ec8 <HAL_DMA_Abort+0x234>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d022      	beq.n	8003d6a <HAL_DMA_Abort+0xd6>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a68      	ldr	r2, [pc, #416]	@ (8003ecc <HAL_DMA_Abort+0x238>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d01d      	beq.n	8003d6a <HAL_DMA_Abort+0xd6>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a67      	ldr	r2, [pc, #412]	@ (8003ed0 <HAL_DMA_Abort+0x23c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d018      	beq.n	8003d6a <HAL_DMA_Abort+0xd6>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a65      	ldr	r2, [pc, #404]	@ (8003ed4 <HAL_DMA_Abort+0x240>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d013      	beq.n	8003d6a <HAL_DMA_Abort+0xd6>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a64      	ldr	r2, [pc, #400]	@ (8003ed8 <HAL_DMA_Abort+0x244>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00e      	beq.n	8003d6a <HAL_DMA_Abort+0xd6>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a62      	ldr	r2, [pc, #392]	@ (8003edc <HAL_DMA_Abort+0x248>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d009      	beq.n	8003d6a <HAL_DMA_Abort+0xd6>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a61      	ldr	r2, [pc, #388]	@ (8003ee0 <HAL_DMA_Abort+0x24c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d004      	beq.n	8003d6a <HAL_DMA_Abort+0xd6>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a5f      	ldr	r2, [pc, #380]	@ (8003ee4 <HAL_DMA_Abort+0x250>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d101      	bne.n	8003d6e <HAL_DMA_Abort+0xda>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <HAL_DMA_Abort+0xdc>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d013      	beq.n	8003d9c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 021e 	bic.w	r2, r2, #30
 8003d82:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695a      	ldr	r2, [r3, #20]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d92:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	e00a      	b.n	8003db2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 020e 	bic.w	r2, r2, #14
 8003daa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a3c      	ldr	r2, [pc, #240]	@ (8003ea8 <HAL_DMA_Abort+0x214>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d072      	beq.n	8003ea2 <HAL_DMA_Abort+0x20e>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a3a      	ldr	r2, [pc, #232]	@ (8003eac <HAL_DMA_Abort+0x218>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d06d      	beq.n	8003ea2 <HAL_DMA_Abort+0x20e>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a39      	ldr	r2, [pc, #228]	@ (8003eb0 <HAL_DMA_Abort+0x21c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d068      	beq.n	8003ea2 <HAL_DMA_Abort+0x20e>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a37      	ldr	r2, [pc, #220]	@ (8003eb4 <HAL_DMA_Abort+0x220>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d063      	beq.n	8003ea2 <HAL_DMA_Abort+0x20e>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a36      	ldr	r2, [pc, #216]	@ (8003eb8 <HAL_DMA_Abort+0x224>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d05e      	beq.n	8003ea2 <HAL_DMA_Abort+0x20e>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a34      	ldr	r2, [pc, #208]	@ (8003ebc <HAL_DMA_Abort+0x228>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d059      	beq.n	8003ea2 <HAL_DMA_Abort+0x20e>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a33      	ldr	r2, [pc, #204]	@ (8003ec0 <HAL_DMA_Abort+0x22c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d054      	beq.n	8003ea2 <HAL_DMA_Abort+0x20e>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a31      	ldr	r2, [pc, #196]	@ (8003ec4 <HAL_DMA_Abort+0x230>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d04f      	beq.n	8003ea2 <HAL_DMA_Abort+0x20e>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a30      	ldr	r2, [pc, #192]	@ (8003ec8 <HAL_DMA_Abort+0x234>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d04a      	beq.n	8003ea2 <HAL_DMA_Abort+0x20e>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a2e      	ldr	r2, [pc, #184]	@ (8003ecc <HAL_DMA_Abort+0x238>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d045      	beq.n	8003ea2 <HAL_DMA_Abort+0x20e>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ed0 <HAL_DMA_Abort+0x23c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d040      	beq.n	8003ea2 <HAL_DMA_Abort+0x20e>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a2b      	ldr	r2, [pc, #172]	@ (8003ed4 <HAL_DMA_Abort+0x240>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d03b      	beq.n	8003ea2 <HAL_DMA_Abort+0x20e>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a2a      	ldr	r2, [pc, #168]	@ (8003ed8 <HAL_DMA_Abort+0x244>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d036      	beq.n	8003ea2 <HAL_DMA_Abort+0x20e>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a28      	ldr	r2, [pc, #160]	@ (8003edc <HAL_DMA_Abort+0x248>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d031      	beq.n	8003ea2 <HAL_DMA_Abort+0x20e>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a27      	ldr	r2, [pc, #156]	@ (8003ee0 <HAL_DMA_Abort+0x24c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d02c      	beq.n	8003ea2 <HAL_DMA_Abort+0x20e>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a25      	ldr	r2, [pc, #148]	@ (8003ee4 <HAL_DMA_Abort+0x250>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d027      	beq.n	8003ea2 <HAL_DMA_Abort+0x20e>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a24      	ldr	r2, [pc, #144]	@ (8003ee8 <HAL_DMA_Abort+0x254>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d022      	beq.n	8003ea2 <HAL_DMA_Abort+0x20e>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a22      	ldr	r2, [pc, #136]	@ (8003eec <HAL_DMA_Abort+0x258>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d01d      	beq.n	8003ea2 <HAL_DMA_Abort+0x20e>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a21      	ldr	r2, [pc, #132]	@ (8003ef0 <HAL_DMA_Abort+0x25c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d018      	beq.n	8003ea2 <HAL_DMA_Abort+0x20e>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a1f      	ldr	r2, [pc, #124]	@ (8003ef4 <HAL_DMA_Abort+0x260>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d013      	beq.n	8003ea2 <HAL_DMA_Abort+0x20e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ef8 <HAL_DMA_Abort+0x264>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d00e      	beq.n	8003ea2 <HAL_DMA_Abort+0x20e>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a1c      	ldr	r2, [pc, #112]	@ (8003efc <HAL_DMA_Abort+0x268>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d009      	beq.n	8003ea2 <HAL_DMA_Abort+0x20e>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a1b      	ldr	r2, [pc, #108]	@ (8003f00 <HAL_DMA_Abort+0x26c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d004      	beq.n	8003ea2 <HAL_DMA_Abort+0x20e>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a19      	ldr	r2, [pc, #100]	@ (8003f04 <HAL_DMA_Abort+0x270>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d132      	bne.n	8003f08 <HAL_DMA_Abort+0x274>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e031      	b.n	8003f0a <HAL_DMA_Abort+0x276>
 8003ea6:	bf00      	nop
 8003ea8:	40020010 	.word	0x40020010
 8003eac:	40020028 	.word	0x40020028
 8003eb0:	40020040 	.word	0x40020040
 8003eb4:	40020058 	.word	0x40020058
 8003eb8:	40020070 	.word	0x40020070
 8003ebc:	40020088 	.word	0x40020088
 8003ec0:	400200a0 	.word	0x400200a0
 8003ec4:	400200b8 	.word	0x400200b8
 8003ec8:	40020410 	.word	0x40020410
 8003ecc:	40020428 	.word	0x40020428
 8003ed0:	40020440 	.word	0x40020440
 8003ed4:	40020458 	.word	0x40020458
 8003ed8:	40020470 	.word	0x40020470
 8003edc:	40020488 	.word	0x40020488
 8003ee0:	400204a0 	.word	0x400204a0
 8003ee4:	400204b8 	.word	0x400204b8
 8003ee8:	58025408 	.word	0x58025408
 8003eec:	5802541c 	.word	0x5802541c
 8003ef0:	58025430 	.word	0x58025430
 8003ef4:	58025444 	.word	0x58025444
 8003ef8:	58025458 	.word	0x58025458
 8003efc:	5802546c 	.word	0x5802546c
 8003f00:	58025480 	.word	0x58025480
 8003f04:	58025494 	.word	0x58025494
 8003f08:	2300      	movs	r3, #0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d007      	beq.n	8003f1e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a6d      	ldr	r2, [pc, #436]	@ (80040d8 <HAL_DMA_Abort+0x444>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d04a      	beq.n	8003fbe <HAL_DMA_Abort+0x32a>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a6b      	ldr	r2, [pc, #428]	@ (80040dc <HAL_DMA_Abort+0x448>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d045      	beq.n	8003fbe <HAL_DMA_Abort+0x32a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a6a      	ldr	r2, [pc, #424]	@ (80040e0 <HAL_DMA_Abort+0x44c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d040      	beq.n	8003fbe <HAL_DMA_Abort+0x32a>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a68      	ldr	r2, [pc, #416]	@ (80040e4 <HAL_DMA_Abort+0x450>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d03b      	beq.n	8003fbe <HAL_DMA_Abort+0x32a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a67      	ldr	r2, [pc, #412]	@ (80040e8 <HAL_DMA_Abort+0x454>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d036      	beq.n	8003fbe <HAL_DMA_Abort+0x32a>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a65      	ldr	r2, [pc, #404]	@ (80040ec <HAL_DMA_Abort+0x458>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d031      	beq.n	8003fbe <HAL_DMA_Abort+0x32a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a64      	ldr	r2, [pc, #400]	@ (80040f0 <HAL_DMA_Abort+0x45c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d02c      	beq.n	8003fbe <HAL_DMA_Abort+0x32a>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a62      	ldr	r2, [pc, #392]	@ (80040f4 <HAL_DMA_Abort+0x460>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d027      	beq.n	8003fbe <HAL_DMA_Abort+0x32a>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a61      	ldr	r2, [pc, #388]	@ (80040f8 <HAL_DMA_Abort+0x464>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d022      	beq.n	8003fbe <HAL_DMA_Abort+0x32a>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a5f      	ldr	r2, [pc, #380]	@ (80040fc <HAL_DMA_Abort+0x468>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d01d      	beq.n	8003fbe <HAL_DMA_Abort+0x32a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a5e      	ldr	r2, [pc, #376]	@ (8004100 <HAL_DMA_Abort+0x46c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d018      	beq.n	8003fbe <HAL_DMA_Abort+0x32a>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a5c      	ldr	r2, [pc, #368]	@ (8004104 <HAL_DMA_Abort+0x470>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d013      	beq.n	8003fbe <HAL_DMA_Abort+0x32a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a5b      	ldr	r2, [pc, #364]	@ (8004108 <HAL_DMA_Abort+0x474>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d00e      	beq.n	8003fbe <HAL_DMA_Abort+0x32a>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a59      	ldr	r2, [pc, #356]	@ (800410c <HAL_DMA_Abort+0x478>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d009      	beq.n	8003fbe <HAL_DMA_Abort+0x32a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a58      	ldr	r2, [pc, #352]	@ (8004110 <HAL_DMA_Abort+0x47c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d004      	beq.n	8003fbe <HAL_DMA_Abort+0x32a>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a56      	ldr	r2, [pc, #344]	@ (8004114 <HAL_DMA_Abort+0x480>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d108      	bne.n	8003fd0 <HAL_DMA_Abort+0x33c>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0201 	bic.w	r2, r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	e007      	b.n	8003fe0 <HAL_DMA_Abort+0x34c>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0201 	bic.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003fe0:	e013      	b.n	800400a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fe2:	f7fd f8cb 	bl	800117c <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b05      	cmp	r3, #5
 8003fee:	d90c      	bls.n	800400a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2203      	movs	r2, #3
 8003ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e12d      	b.n	8004266 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e5      	bne.n	8003fe2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a2f      	ldr	r2, [pc, #188]	@ (80040d8 <HAL_DMA_Abort+0x444>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d04a      	beq.n	80040b6 <HAL_DMA_Abort+0x422>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a2d      	ldr	r2, [pc, #180]	@ (80040dc <HAL_DMA_Abort+0x448>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d045      	beq.n	80040b6 <HAL_DMA_Abort+0x422>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a2c      	ldr	r2, [pc, #176]	@ (80040e0 <HAL_DMA_Abort+0x44c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d040      	beq.n	80040b6 <HAL_DMA_Abort+0x422>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a2a      	ldr	r2, [pc, #168]	@ (80040e4 <HAL_DMA_Abort+0x450>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d03b      	beq.n	80040b6 <HAL_DMA_Abort+0x422>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a29      	ldr	r2, [pc, #164]	@ (80040e8 <HAL_DMA_Abort+0x454>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d036      	beq.n	80040b6 <HAL_DMA_Abort+0x422>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a27      	ldr	r2, [pc, #156]	@ (80040ec <HAL_DMA_Abort+0x458>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d031      	beq.n	80040b6 <HAL_DMA_Abort+0x422>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a26      	ldr	r2, [pc, #152]	@ (80040f0 <HAL_DMA_Abort+0x45c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d02c      	beq.n	80040b6 <HAL_DMA_Abort+0x422>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a24      	ldr	r2, [pc, #144]	@ (80040f4 <HAL_DMA_Abort+0x460>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d027      	beq.n	80040b6 <HAL_DMA_Abort+0x422>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a23      	ldr	r2, [pc, #140]	@ (80040f8 <HAL_DMA_Abort+0x464>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d022      	beq.n	80040b6 <HAL_DMA_Abort+0x422>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a21      	ldr	r2, [pc, #132]	@ (80040fc <HAL_DMA_Abort+0x468>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d01d      	beq.n	80040b6 <HAL_DMA_Abort+0x422>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a20      	ldr	r2, [pc, #128]	@ (8004100 <HAL_DMA_Abort+0x46c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d018      	beq.n	80040b6 <HAL_DMA_Abort+0x422>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1e      	ldr	r2, [pc, #120]	@ (8004104 <HAL_DMA_Abort+0x470>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d013      	beq.n	80040b6 <HAL_DMA_Abort+0x422>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a1d      	ldr	r2, [pc, #116]	@ (8004108 <HAL_DMA_Abort+0x474>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00e      	beq.n	80040b6 <HAL_DMA_Abort+0x422>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1b      	ldr	r2, [pc, #108]	@ (800410c <HAL_DMA_Abort+0x478>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d009      	beq.n	80040b6 <HAL_DMA_Abort+0x422>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004110 <HAL_DMA_Abort+0x47c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d004      	beq.n	80040b6 <HAL_DMA_Abort+0x422>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a18      	ldr	r2, [pc, #96]	@ (8004114 <HAL_DMA_Abort+0x480>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d101      	bne.n	80040ba <HAL_DMA_Abort+0x426>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <HAL_DMA_Abort+0x428>
 80040ba:	2300      	movs	r3, #0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d02b      	beq.n	8004118 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	223f      	movs	r2, #63	@ 0x3f
 80040d0:	409a      	lsls	r2, r3
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	609a      	str	r2, [r3, #8]
 80040d6:	e02a      	b.n	800412e <HAL_DMA_Abort+0x49a>
 80040d8:	40020010 	.word	0x40020010
 80040dc:	40020028 	.word	0x40020028
 80040e0:	40020040 	.word	0x40020040
 80040e4:	40020058 	.word	0x40020058
 80040e8:	40020070 	.word	0x40020070
 80040ec:	40020088 	.word	0x40020088
 80040f0:	400200a0 	.word	0x400200a0
 80040f4:	400200b8 	.word	0x400200b8
 80040f8:	40020410 	.word	0x40020410
 80040fc:	40020428 	.word	0x40020428
 8004100:	40020440 	.word	0x40020440
 8004104:	40020458 	.word	0x40020458
 8004108:	40020470 	.word	0x40020470
 800410c:	40020488 	.word	0x40020488
 8004110:	400204a0 	.word	0x400204a0
 8004114:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	2201      	movs	r2, #1
 8004128:	409a      	lsls	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a4f      	ldr	r2, [pc, #316]	@ (8004270 <HAL_DMA_Abort+0x5dc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d072      	beq.n	800421e <HAL_DMA_Abort+0x58a>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a4d      	ldr	r2, [pc, #308]	@ (8004274 <HAL_DMA_Abort+0x5e0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d06d      	beq.n	800421e <HAL_DMA_Abort+0x58a>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a4c      	ldr	r2, [pc, #304]	@ (8004278 <HAL_DMA_Abort+0x5e4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d068      	beq.n	800421e <HAL_DMA_Abort+0x58a>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a4a      	ldr	r2, [pc, #296]	@ (800427c <HAL_DMA_Abort+0x5e8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d063      	beq.n	800421e <HAL_DMA_Abort+0x58a>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a49      	ldr	r2, [pc, #292]	@ (8004280 <HAL_DMA_Abort+0x5ec>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d05e      	beq.n	800421e <HAL_DMA_Abort+0x58a>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a47      	ldr	r2, [pc, #284]	@ (8004284 <HAL_DMA_Abort+0x5f0>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d059      	beq.n	800421e <HAL_DMA_Abort+0x58a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a46      	ldr	r2, [pc, #280]	@ (8004288 <HAL_DMA_Abort+0x5f4>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d054      	beq.n	800421e <HAL_DMA_Abort+0x58a>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a44      	ldr	r2, [pc, #272]	@ (800428c <HAL_DMA_Abort+0x5f8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d04f      	beq.n	800421e <HAL_DMA_Abort+0x58a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a43      	ldr	r2, [pc, #268]	@ (8004290 <HAL_DMA_Abort+0x5fc>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d04a      	beq.n	800421e <HAL_DMA_Abort+0x58a>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a41      	ldr	r2, [pc, #260]	@ (8004294 <HAL_DMA_Abort+0x600>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d045      	beq.n	800421e <HAL_DMA_Abort+0x58a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a40      	ldr	r2, [pc, #256]	@ (8004298 <HAL_DMA_Abort+0x604>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d040      	beq.n	800421e <HAL_DMA_Abort+0x58a>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a3e      	ldr	r2, [pc, #248]	@ (800429c <HAL_DMA_Abort+0x608>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d03b      	beq.n	800421e <HAL_DMA_Abort+0x58a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a3d      	ldr	r2, [pc, #244]	@ (80042a0 <HAL_DMA_Abort+0x60c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d036      	beq.n	800421e <HAL_DMA_Abort+0x58a>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a3b      	ldr	r2, [pc, #236]	@ (80042a4 <HAL_DMA_Abort+0x610>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d031      	beq.n	800421e <HAL_DMA_Abort+0x58a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a3a      	ldr	r2, [pc, #232]	@ (80042a8 <HAL_DMA_Abort+0x614>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d02c      	beq.n	800421e <HAL_DMA_Abort+0x58a>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a38      	ldr	r2, [pc, #224]	@ (80042ac <HAL_DMA_Abort+0x618>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d027      	beq.n	800421e <HAL_DMA_Abort+0x58a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a37      	ldr	r2, [pc, #220]	@ (80042b0 <HAL_DMA_Abort+0x61c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d022      	beq.n	800421e <HAL_DMA_Abort+0x58a>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a35      	ldr	r2, [pc, #212]	@ (80042b4 <HAL_DMA_Abort+0x620>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01d      	beq.n	800421e <HAL_DMA_Abort+0x58a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a34      	ldr	r2, [pc, #208]	@ (80042b8 <HAL_DMA_Abort+0x624>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d018      	beq.n	800421e <HAL_DMA_Abort+0x58a>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a32      	ldr	r2, [pc, #200]	@ (80042bc <HAL_DMA_Abort+0x628>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d013      	beq.n	800421e <HAL_DMA_Abort+0x58a>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a31      	ldr	r2, [pc, #196]	@ (80042c0 <HAL_DMA_Abort+0x62c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d00e      	beq.n	800421e <HAL_DMA_Abort+0x58a>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a2f      	ldr	r2, [pc, #188]	@ (80042c4 <HAL_DMA_Abort+0x630>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d009      	beq.n	800421e <HAL_DMA_Abort+0x58a>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a2e      	ldr	r2, [pc, #184]	@ (80042c8 <HAL_DMA_Abort+0x634>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d004      	beq.n	800421e <HAL_DMA_Abort+0x58a>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a2c      	ldr	r2, [pc, #176]	@ (80042cc <HAL_DMA_Abort+0x638>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d101      	bne.n	8004222 <HAL_DMA_Abort+0x58e>
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <HAL_DMA_Abort+0x590>
 8004222:	2300      	movs	r3, #0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d015      	beq.n	8004254 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004230:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00c      	beq.n	8004254 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004244:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004248:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004252:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40020010 	.word	0x40020010
 8004274:	40020028 	.word	0x40020028
 8004278:	40020040 	.word	0x40020040
 800427c:	40020058 	.word	0x40020058
 8004280:	40020070 	.word	0x40020070
 8004284:	40020088 	.word	0x40020088
 8004288:	400200a0 	.word	0x400200a0
 800428c:	400200b8 	.word	0x400200b8
 8004290:	40020410 	.word	0x40020410
 8004294:	40020428 	.word	0x40020428
 8004298:	40020440 	.word	0x40020440
 800429c:	40020458 	.word	0x40020458
 80042a0:	40020470 	.word	0x40020470
 80042a4:	40020488 	.word	0x40020488
 80042a8:	400204a0 	.word	0x400204a0
 80042ac:	400204b8 	.word	0x400204b8
 80042b0:	58025408 	.word	0x58025408
 80042b4:	5802541c 	.word	0x5802541c
 80042b8:	58025430 	.word	0x58025430
 80042bc:	58025444 	.word	0x58025444
 80042c0:	58025458 	.word	0x58025458
 80042c4:	5802546c 	.word	0x5802546c
 80042c8:	58025480 	.word	0x58025480
 80042cc:	58025494 	.word	0x58025494

080042d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e237      	b.n	8004752 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d004      	beq.n	80042f8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2280      	movs	r2, #128	@ 0x80
 80042f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e22c      	b.n	8004752 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a5c      	ldr	r2, [pc, #368]	@ (8004470 <HAL_DMA_Abort_IT+0x1a0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d04a      	beq.n	8004398 <HAL_DMA_Abort_IT+0xc8>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a5b      	ldr	r2, [pc, #364]	@ (8004474 <HAL_DMA_Abort_IT+0x1a4>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d045      	beq.n	8004398 <HAL_DMA_Abort_IT+0xc8>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a59      	ldr	r2, [pc, #356]	@ (8004478 <HAL_DMA_Abort_IT+0x1a8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d040      	beq.n	8004398 <HAL_DMA_Abort_IT+0xc8>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a58      	ldr	r2, [pc, #352]	@ (800447c <HAL_DMA_Abort_IT+0x1ac>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d03b      	beq.n	8004398 <HAL_DMA_Abort_IT+0xc8>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a56      	ldr	r2, [pc, #344]	@ (8004480 <HAL_DMA_Abort_IT+0x1b0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d036      	beq.n	8004398 <HAL_DMA_Abort_IT+0xc8>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a55      	ldr	r2, [pc, #340]	@ (8004484 <HAL_DMA_Abort_IT+0x1b4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d031      	beq.n	8004398 <HAL_DMA_Abort_IT+0xc8>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a53      	ldr	r2, [pc, #332]	@ (8004488 <HAL_DMA_Abort_IT+0x1b8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d02c      	beq.n	8004398 <HAL_DMA_Abort_IT+0xc8>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a52      	ldr	r2, [pc, #328]	@ (800448c <HAL_DMA_Abort_IT+0x1bc>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d027      	beq.n	8004398 <HAL_DMA_Abort_IT+0xc8>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a50      	ldr	r2, [pc, #320]	@ (8004490 <HAL_DMA_Abort_IT+0x1c0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d022      	beq.n	8004398 <HAL_DMA_Abort_IT+0xc8>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a4f      	ldr	r2, [pc, #316]	@ (8004494 <HAL_DMA_Abort_IT+0x1c4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d01d      	beq.n	8004398 <HAL_DMA_Abort_IT+0xc8>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a4d      	ldr	r2, [pc, #308]	@ (8004498 <HAL_DMA_Abort_IT+0x1c8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d018      	beq.n	8004398 <HAL_DMA_Abort_IT+0xc8>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a4c      	ldr	r2, [pc, #304]	@ (800449c <HAL_DMA_Abort_IT+0x1cc>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d013      	beq.n	8004398 <HAL_DMA_Abort_IT+0xc8>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a4a      	ldr	r2, [pc, #296]	@ (80044a0 <HAL_DMA_Abort_IT+0x1d0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d00e      	beq.n	8004398 <HAL_DMA_Abort_IT+0xc8>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a49      	ldr	r2, [pc, #292]	@ (80044a4 <HAL_DMA_Abort_IT+0x1d4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d009      	beq.n	8004398 <HAL_DMA_Abort_IT+0xc8>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a47      	ldr	r2, [pc, #284]	@ (80044a8 <HAL_DMA_Abort_IT+0x1d8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d004      	beq.n	8004398 <HAL_DMA_Abort_IT+0xc8>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a46      	ldr	r2, [pc, #280]	@ (80044ac <HAL_DMA_Abort_IT+0x1dc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d101      	bne.n	800439c <HAL_DMA_Abort_IT+0xcc>
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <HAL_DMA_Abort_IT+0xce>
 800439c:	2300      	movs	r3, #0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 8086 	beq.w	80044b0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2204      	movs	r2, #4
 80043a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a2f      	ldr	r2, [pc, #188]	@ (8004470 <HAL_DMA_Abort_IT+0x1a0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d04a      	beq.n	800444c <HAL_DMA_Abort_IT+0x17c>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a2e      	ldr	r2, [pc, #184]	@ (8004474 <HAL_DMA_Abort_IT+0x1a4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d045      	beq.n	800444c <HAL_DMA_Abort_IT+0x17c>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a2c      	ldr	r2, [pc, #176]	@ (8004478 <HAL_DMA_Abort_IT+0x1a8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d040      	beq.n	800444c <HAL_DMA_Abort_IT+0x17c>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a2b      	ldr	r2, [pc, #172]	@ (800447c <HAL_DMA_Abort_IT+0x1ac>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d03b      	beq.n	800444c <HAL_DMA_Abort_IT+0x17c>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a29      	ldr	r2, [pc, #164]	@ (8004480 <HAL_DMA_Abort_IT+0x1b0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d036      	beq.n	800444c <HAL_DMA_Abort_IT+0x17c>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a28      	ldr	r2, [pc, #160]	@ (8004484 <HAL_DMA_Abort_IT+0x1b4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d031      	beq.n	800444c <HAL_DMA_Abort_IT+0x17c>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a26      	ldr	r2, [pc, #152]	@ (8004488 <HAL_DMA_Abort_IT+0x1b8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d02c      	beq.n	800444c <HAL_DMA_Abort_IT+0x17c>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a25      	ldr	r2, [pc, #148]	@ (800448c <HAL_DMA_Abort_IT+0x1bc>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d027      	beq.n	800444c <HAL_DMA_Abort_IT+0x17c>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a23      	ldr	r2, [pc, #140]	@ (8004490 <HAL_DMA_Abort_IT+0x1c0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d022      	beq.n	800444c <HAL_DMA_Abort_IT+0x17c>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a22      	ldr	r2, [pc, #136]	@ (8004494 <HAL_DMA_Abort_IT+0x1c4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d01d      	beq.n	800444c <HAL_DMA_Abort_IT+0x17c>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a20      	ldr	r2, [pc, #128]	@ (8004498 <HAL_DMA_Abort_IT+0x1c8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d018      	beq.n	800444c <HAL_DMA_Abort_IT+0x17c>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a1f      	ldr	r2, [pc, #124]	@ (800449c <HAL_DMA_Abort_IT+0x1cc>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d013      	beq.n	800444c <HAL_DMA_Abort_IT+0x17c>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a1d      	ldr	r2, [pc, #116]	@ (80044a0 <HAL_DMA_Abort_IT+0x1d0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d00e      	beq.n	800444c <HAL_DMA_Abort_IT+0x17c>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a1c      	ldr	r2, [pc, #112]	@ (80044a4 <HAL_DMA_Abort_IT+0x1d4>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d009      	beq.n	800444c <HAL_DMA_Abort_IT+0x17c>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a1a      	ldr	r2, [pc, #104]	@ (80044a8 <HAL_DMA_Abort_IT+0x1d8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d004      	beq.n	800444c <HAL_DMA_Abort_IT+0x17c>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a19      	ldr	r2, [pc, #100]	@ (80044ac <HAL_DMA_Abort_IT+0x1dc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d108      	bne.n	800445e <HAL_DMA_Abort_IT+0x18e>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0201 	bic.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	e178      	b.n	8004750 <HAL_DMA_Abort_IT+0x480>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0201 	bic.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	e16f      	b.n	8004750 <HAL_DMA_Abort_IT+0x480>
 8004470:	40020010 	.word	0x40020010
 8004474:	40020028 	.word	0x40020028
 8004478:	40020040 	.word	0x40020040
 800447c:	40020058 	.word	0x40020058
 8004480:	40020070 	.word	0x40020070
 8004484:	40020088 	.word	0x40020088
 8004488:	400200a0 	.word	0x400200a0
 800448c:	400200b8 	.word	0x400200b8
 8004490:	40020410 	.word	0x40020410
 8004494:	40020428 	.word	0x40020428
 8004498:	40020440 	.word	0x40020440
 800449c:	40020458 	.word	0x40020458
 80044a0:	40020470 	.word	0x40020470
 80044a4:	40020488 	.word	0x40020488
 80044a8:	400204a0 	.word	0x400204a0
 80044ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 020e 	bic.w	r2, r2, #14
 80044be:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a6c      	ldr	r2, [pc, #432]	@ (8004678 <HAL_DMA_Abort_IT+0x3a8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d04a      	beq.n	8004560 <HAL_DMA_Abort_IT+0x290>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a6b      	ldr	r2, [pc, #428]	@ (800467c <HAL_DMA_Abort_IT+0x3ac>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d045      	beq.n	8004560 <HAL_DMA_Abort_IT+0x290>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a69      	ldr	r2, [pc, #420]	@ (8004680 <HAL_DMA_Abort_IT+0x3b0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d040      	beq.n	8004560 <HAL_DMA_Abort_IT+0x290>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a68      	ldr	r2, [pc, #416]	@ (8004684 <HAL_DMA_Abort_IT+0x3b4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d03b      	beq.n	8004560 <HAL_DMA_Abort_IT+0x290>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a66      	ldr	r2, [pc, #408]	@ (8004688 <HAL_DMA_Abort_IT+0x3b8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d036      	beq.n	8004560 <HAL_DMA_Abort_IT+0x290>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a65      	ldr	r2, [pc, #404]	@ (800468c <HAL_DMA_Abort_IT+0x3bc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d031      	beq.n	8004560 <HAL_DMA_Abort_IT+0x290>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a63      	ldr	r2, [pc, #396]	@ (8004690 <HAL_DMA_Abort_IT+0x3c0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d02c      	beq.n	8004560 <HAL_DMA_Abort_IT+0x290>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a62      	ldr	r2, [pc, #392]	@ (8004694 <HAL_DMA_Abort_IT+0x3c4>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d027      	beq.n	8004560 <HAL_DMA_Abort_IT+0x290>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a60      	ldr	r2, [pc, #384]	@ (8004698 <HAL_DMA_Abort_IT+0x3c8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d022      	beq.n	8004560 <HAL_DMA_Abort_IT+0x290>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a5f      	ldr	r2, [pc, #380]	@ (800469c <HAL_DMA_Abort_IT+0x3cc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d01d      	beq.n	8004560 <HAL_DMA_Abort_IT+0x290>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a5d      	ldr	r2, [pc, #372]	@ (80046a0 <HAL_DMA_Abort_IT+0x3d0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d018      	beq.n	8004560 <HAL_DMA_Abort_IT+0x290>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a5c      	ldr	r2, [pc, #368]	@ (80046a4 <HAL_DMA_Abort_IT+0x3d4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d013      	beq.n	8004560 <HAL_DMA_Abort_IT+0x290>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a5a      	ldr	r2, [pc, #360]	@ (80046a8 <HAL_DMA_Abort_IT+0x3d8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00e      	beq.n	8004560 <HAL_DMA_Abort_IT+0x290>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a59      	ldr	r2, [pc, #356]	@ (80046ac <HAL_DMA_Abort_IT+0x3dc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d009      	beq.n	8004560 <HAL_DMA_Abort_IT+0x290>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a57      	ldr	r2, [pc, #348]	@ (80046b0 <HAL_DMA_Abort_IT+0x3e0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d004      	beq.n	8004560 <HAL_DMA_Abort_IT+0x290>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a56      	ldr	r2, [pc, #344]	@ (80046b4 <HAL_DMA_Abort_IT+0x3e4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d108      	bne.n	8004572 <HAL_DMA_Abort_IT+0x2a2>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0201 	bic.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	e007      	b.n	8004582 <HAL_DMA_Abort_IT+0x2b2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0201 	bic.w	r2, r2, #1
 8004580:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a3c      	ldr	r2, [pc, #240]	@ (8004678 <HAL_DMA_Abort_IT+0x3a8>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d072      	beq.n	8004672 <HAL_DMA_Abort_IT+0x3a2>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a3a      	ldr	r2, [pc, #232]	@ (800467c <HAL_DMA_Abort_IT+0x3ac>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d06d      	beq.n	8004672 <HAL_DMA_Abort_IT+0x3a2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a39      	ldr	r2, [pc, #228]	@ (8004680 <HAL_DMA_Abort_IT+0x3b0>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d068      	beq.n	8004672 <HAL_DMA_Abort_IT+0x3a2>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a37      	ldr	r2, [pc, #220]	@ (8004684 <HAL_DMA_Abort_IT+0x3b4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d063      	beq.n	8004672 <HAL_DMA_Abort_IT+0x3a2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a36      	ldr	r2, [pc, #216]	@ (8004688 <HAL_DMA_Abort_IT+0x3b8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d05e      	beq.n	8004672 <HAL_DMA_Abort_IT+0x3a2>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a34      	ldr	r2, [pc, #208]	@ (800468c <HAL_DMA_Abort_IT+0x3bc>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d059      	beq.n	8004672 <HAL_DMA_Abort_IT+0x3a2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a33      	ldr	r2, [pc, #204]	@ (8004690 <HAL_DMA_Abort_IT+0x3c0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d054      	beq.n	8004672 <HAL_DMA_Abort_IT+0x3a2>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a31      	ldr	r2, [pc, #196]	@ (8004694 <HAL_DMA_Abort_IT+0x3c4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d04f      	beq.n	8004672 <HAL_DMA_Abort_IT+0x3a2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a30      	ldr	r2, [pc, #192]	@ (8004698 <HAL_DMA_Abort_IT+0x3c8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d04a      	beq.n	8004672 <HAL_DMA_Abort_IT+0x3a2>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a2e      	ldr	r2, [pc, #184]	@ (800469c <HAL_DMA_Abort_IT+0x3cc>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d045      	beq.n	8004672 <HAL_DMA_Abort_IT+0x3a2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a2d      	ldr	r2, [pc, #180]	@ (80046a0 <HAL_DMA_Abort_IT+0x3d0>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d040      	beq.n	8004672 <HAL_DMA_Abort_IT+0x3a2>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a2b      	ldr	r2, [pc, #172]	@ (80046a4 <HAL_DMA_Abort_IT+0x3d4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d03b      	beq.n	8004672 <HAL_DMA_Abort_IT+0x3a2>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a2a      	ldr	r2, [pc, #168]	@ (80046a8 <HAL_DMA_Abort_IT+0x3d8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d036      	beq.n	8004672 <HAL_DMA_Abort_IT+0x3a2>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a28      	ldr	r2, [pc, #160]	@ (80046ac <HAL_DMA_Abort_IT+0x3dc>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d031      	beq.n	8004672 <HAL_DMA_Abort_IT+0x3a2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a27      	ldr	r2, [pc, #156]	@ (80046b0 <HAL_DMA_Abort_IT+0x3e0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d02c      	beq.n	8004672 <HAL_DMA_Abort_IT+0x3a2>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a25      	ldr	r2, [pc, #148]	@ (80046b4 <HAL_DMA_Abort_IT+0x3e4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d027      	beq.n	8004672 <HAL_DMA_Abort_IT+0x3a2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a24      	ldr	r2, [pc, #144]	@ (80046b8 <HAL_DMA_Abort_IT+0x3e8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d022      	beq.n	8004672 <HAL_DMA_Abort_IT+0x3a2>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a22      	ldr	r2, [pc, #136]	@ (80046bc <HAL_DMA_Abort_IT+0x3ec>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d01d      	beq.n	8004672 <HAL_DMA_Abort_IT+0x3a2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a21      	ldr	r2, [pc, #132]	@ (80046c0 <HAL_DMA_Abort_IT+0x3f0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d018      	beq.n	8004672 <HAL_DMA_Abort_IT+0x3a2>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a1f      	ldr	r2, [pc, #124]	@ (80046c4 <HAL_DMA_Abort_IT+0x3f4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d013      	beq.n	8004672 <HAL_DMA_Abort_IT+0x3a2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a1e      	ldr	r2, [pc, #120]	@ (80046c8 <HAL_DMA_Abort_IT+0x3f8>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d00e      	beq.n	8004672 <HAL_DMA_Abort_IT+0x3a2>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a1c      	ldr	r2, [pc, #112]	@ (80046cc <HAL_DMA_Abort_IT+0x3fc>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d009      	beq.n	8004672 <HAL_DMA_Abort_IT+0x3a2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a1b      	ldr	r2, [pc, #108]	@ (80046d0 <HAL_DMA_Abort_IT+0x400>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d004      	beq.n	8004672 <HAL_DMA_Abort_IT+0x3a2>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a19      	ldr	r2, [pc, #100]	@ (80046d4 <HAL_DMA_Abort_IT+0x404>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d132      	bne.n	80046d8 <HAL_DMA_Abort_IT+0x408>
 8004672:	2301      	movs	r3, #1
 8004674:	e031      	b.n	80046da <HAL_DMA_Abort_IT+0x40a>
 8004676:	bf00      	nop
 8004678:	40020010 	.word	0x40020010
 800467c:	40020028 	.word	0x40020028
 8004680:	40020040 	.word	0x40020040
 8004684:	40020058 	.word	0x40020058
 8004688:	40020070 	.word	0x40020070
 800468c:	40020088 	.word	0x40020088
 8004690:	400200a0 	.word	0x400200a0
 8004694:	400200b8 	.word	0x400200b8
 8004698:	40020410 	.word	0x40020410
 800469c:	40020428 	.word	0x40020428
 80046a0:	40020440 	.word	0x40020440
 80046a4:	40020458 	.word	0x40020458
 80046a8:	40020470 	.word	0x40020470
 80046ac:	40020488 	.word	0x40020488
 80046b0:	400204a0 	.word	0x400204a0
 80046b4:	400204b8 	.word	0x400204b8
 80046b8:	58025408 	.word	0x58025408
 80046bc:	5802541c 	.word	0x5802541c
 80046c0:	58025430 	.word	0x58025430
 80046c4:	58025444 	.word	0x58025444
 80046c8:	58025458 	.word	0x58025458
 80046cc:	5802546c 	.word	0x5802546c
 80046d0:	58025480 	.word	0x58025480
 80046d4:	58025494 	.word	0x58025494
 80046d8:	2300      	movs	r3, #0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d028      	beq.n	8004730 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046ec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	2201      	movs	r2, #1
 80046fe:	409a      	lsls	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800470c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00c      	beq.n	8004730 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004720:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004724:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800472e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop

0800475c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08a      	sub	sp, #40	@ 0x28
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004768:	4b67      	ldr	r3, [pc, #412]	@ (8004908 <HAL_DMA_IRQHandler+0x1ac>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a67      	ldr	r2, [pc, #412]	@ (800490c <HAL_DMA_IRQHandler+0x1b0>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	0a9b      	lsrs	r3, r3, #10
 8004774:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800477a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004780:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a5f      	ldr	r2, [pc, #380]	@ (8004910 <HAL_DMA_IRQHandler+0x1b4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d04a      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a5d      	ldr	r2, [pc, #372]	@ (8004914 <HAL_DMA_IRQHandler+0x1b8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d045      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a5c      	ldr	r2, [pc, #368]	@ (8004918 <HAL_DMA_IRQHandler+0x1bc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d040      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a5a      	ldr	r2, [pc, #360]	@ (800491c <HAL_DMA_IRQHandler+0x1c0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d03b      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a59      	ldr	r2, [pc, #356]	@ (8004920 <HAL_DMA_IRQHandler+0x1c4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d036      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a57      	ldr	r2, [pc, #348]	@ (8004924 <HAL_DMA_IRQHandler+0x1c8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d031      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a56      	ldr	r2, [pc, #344]	@ (8004928 <HAL_DMA_IRQHandler+0x1cc>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d02c      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a54      	ldr	r2, [pc, #336]	@ (800492c <HAL_DMA_IRQHandler+0x1d0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d027      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a53      	ldr	r2, [pc, #332]	@ (8004930 <HAL_DMA_IRQHandler+0x1d4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d022      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a51      	ldr	r2, [pc, #324]	@ (8004934 <HAL_DMA_IRQHandler+0x1d8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d01d      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a50      	ldr	r2, [pc, #320]	@ (8004938 <HAL_DMA_IRQHandler+0x1dc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d018      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a4e      	ldr	r2, [pc, #312]	@ (800493c <HAL_DMA_IRQHandler+0x1e0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d013      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a4d      	ldr	r2, [pc, #308]	@ (8004940 <HAL_DMA_IRQHandler+0x1e4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00e      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a4b      	ldr	r2, [pc, #300]	@ (8004944 <HAL_DMA_IRQHandler+0x1e8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d009      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a4a      	ldr	r2, [pc, #296]	@ (8004948 <HAL_DMA_IRQHandler+0x1ec>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d004      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a48      	ldr	r2, [pc, #288]	@ (800494c <HAL_DMA_IRQHandler+0x1f0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d101      	bne.n	8004832 <HAL_DMA_IRQHandler+0xd6>
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <HAL_DMA_IRQHandler+0xd8>
 8004832:	2300      	movs	r3, #0
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 842b 	beq.w	8005090 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800483e:	f003 031f 	and.w	r3, r3, #31
 8004842:	2208      	movs	r2, #8
 8004844:	409a      	lsls	r2, r3
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	4013      	ands	r3, r2
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 80a2 	beq.w	8004994 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a2e      	ldr	r2, [pc, #184]	@ (8004910 <HAL_DMA_IRQHandler+0x1b4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d04a      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a2d      	ldr	r2, [pc, #180]	@ (8004914 <HAL_DMA_IRQHandler+0x1b8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d045      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a2b      	ldr	r2, [pc, #172]	@ (8004918 <HAL_DMA_IRQHandler+0x1bc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d040      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a2a      	ldr	r2, [pc, #168]	@ (800491c <HAL_DMA_IRQHandler+0x1c0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d03b      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a28      	ldr	r2, [pc, #160]	@ (8004920 <HAL_DMA_IRQHandler+0x1c4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d036      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a27      	ldr	r2, [pc, #156]	@ (8004924 <HAL_DMA_IRQHandler+0x1c8>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d031      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a25      	ldr	r2, [pc, #148]	@ (8004928 <HAL_DMA_IRQHandler+0x1cc>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d02c      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a24      	ldr	r2, [pc, #144]	@ (800492c <HAL_DMA_IRQHandler+0x1d0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d027      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a22      	ldr	r2, [pc, #136]	@ (8004930 <HAL_DMA_IRQHandler+0x1d4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d022      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a21      	ldr	r2, [pc, #132]	@ (8004934 <HAL_DMA_IRQHandler+0x1d8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d01d      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004938 <HAL_DMA_IRQHandler+0x1dc>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d018      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1e      	ldr	r2, [pc, #120]	@ (800493c <HAL_DMA_IRQHandler+0x1e0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d013      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004940 <HAL_DMA_IRQHandler+0x1e4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00e      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004944 <HAL_DMA_IRQHandler+0x1e8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d009      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a19      	ldr	r2, [pc, #100]	@ (8004948 <HAL_DMA_IRQHandler+0x1ec>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a18      	ldr	r2, [pc, #96]	@ (800494c <HAL_DMA_IRQHandler+0x1f0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d12f      	bne.n	8004950 <HAL_DMA_IRQHandler+0x1f4>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	bf14      	ite	ne
 80048fe:	2301      	movne	r3, #1
 8004900:	2300      	moveq	r3, #0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	e02e      	b.n	8004964 <HAL_DMA_IRQHandler+0x208>
 8004906:	bf00      	nop
 8004908:	24000000 	.word	0x24000000
 800490c:	1b4e81b5 	.word	0x1b4e81b5
 8004910:	40020010 	.word	0x40020010
 8004914:	40020028 	.word	0x40020028
 8004918:	40020040 	.word	0x40020040
 800491c:	40020058 	.word	0x40020058
 8004920:	40020070 	.word	0x40020070
 8004924:	40020088 	.word	0x40020088
 8004928:	400200a0 	.word	0x400200a0
 800492c:	400200b8 	.word	0x400200b8
 8004930:	40020410 	.word	0x40020410
 8004934:	40020428 	.word	0x40020428
 8004938:	40020440 	.word	0x40020440
 800493c:	40020458 	.word	0x40020458
 8004940:	40020470 	.word	0x40020470
 8004944:	40020488 	.word	0x40020488
 8004948:	400204a0 	.word	0x400204a0
 800494c:	400204b8 	.word	0x400204b8
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	bf14      	ite	ne
 800495e:	2301      	movne	r3, #1
 8004960:	2300      	moveq	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d015      	beq.n	8004994 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0204 	bic.w	r2, r2, #4
 8004976:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800497c:	f003 031f 	and.w	r3, r3, #31
 8004980:	2208      	movs	r2, #8
 8004982:	409a      	lsls	r2, r3
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800498c:	f043 0201 	orr.w	r2, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	fa22 f303 	lsr.w	r3, r2, r3
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d06e      	beq.n	8004a88 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a69      	ldr	r2, [pc, #420]	@ (8004b54 <HAL_DMA_IRQHandler+0x3f8>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d04a      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a67      	ldr	r2, [pc, #412]	@ (8004b58 <HAL_DMA_IRQHandler+0x3fc>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d045      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a66      	ldr	r2, [pc, #408]	@ (8004b5c <HAL_DMA_IRQHandler+0x400>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d040      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a64      	ldr	r2, [pc, #400]	@ (8004b60 <HAL_DMA_IRQHandler+0x404>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d03b      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a63      	ldr	r2, [pc, #396]	@ (8004b64 <HAL_DMA_IRQHandler+0x408>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d036      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a61      	ldr	r2, [pc, #388]	@ (8004b68 <HAL_DMA_IRQHandler+0x40c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d031      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a60      	ldr	r2, [pc, #384]	@ (8004b6c <HAL_DMA_IRQHandler+0x410>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d02c      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a5e      	ldr	r2, [pc, #376]	@ (8004b70 <HAL_DMA_IRQHandler+0x414>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d027      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a5d      	ldr	r2, [pc, #372]	@ (8004b74 <HAL_DMA_IRQHandler+0x418>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d022      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a5b      	ldr	r2, [pc, #364]	@ (8004b78 <HAL_DMA_IRQHandler+0x41c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d01d      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a5a      	ldr	r2, [pc, #360]	@ (8004b7c <HAL_DMA_IRQHandler+0x420>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d018      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a58      	ldr	r2, [pc, #352]	@ (8004b80 <HAL_DMA_IRQHandler+0x424>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d013      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a57      	ldr	r2, [pc, #348]	@ (8004b84 <HAL_DMA_IRQHandler+0x428>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d00e      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a55      	ldr	r2, [pc, #340]	@ (8004b88 <HAL_DMA_IRQHandler+0x42c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d009      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a54      	ldr	r2, [pc, #336]	@ (8004b8c <HAL_DMA_IRQHandler+0x430>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d004      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a52      	ldr	r2, [pc, #328]	@ (8004b90 <HAL_DMA_IRQHandler+0x434>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d10a      	bne.n	8004a60 <HAL_DMA_IRQHandler+0x304>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	bf14      	ite	ne
 8004a58:	2301      	movne	r3, #1
 8004a5a:	2300      	moveq	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	e003      	b.n	8004a68 <HAL_DMA_IRQHandler+0x30c>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2300      	movs	r3, #0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00d      	beq.n	8004a88 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	2201      	movs	r2, #1
 8004a76:	409a      	lsls	r2, r3
 8004a78:	6a3b      	ldr	r3, [r7, #32]
 8004a7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a80:	f043 0202 	orr.w	r2, r3, #2
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a8c:	f003 031f 	and.w	r3, r3, #31
 8004a90:	2204      	movs	r2, #4
 8004a92:	409a      	lsls	r2, r3
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 808f 	beq.w	8004bbc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8004b54 <HAL_DMA_IRQHandler+0x3f8>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d04a      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a2a      	ldr	r2, [pc, #168]	@ (8004b58 <HAL_DMA_IRQHandler+0x3fc>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d045      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a29      	ldr	r2, [pc, #164]	@ (8004b5c <HAL_DMA_IRQHandler+0x400>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d040      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a27      	ldr	r2, [pc, #156]	@ (8004b60 <HAL_DMA_IRQHandler+0x404>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d03b      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a26      	ldr	r2, [pc, #152]	@ (8004b64 <HAL_DMA_IRQHandler+0x408>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d036      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a24      	ldr	r2, [pc, #144]	@ (8004b68 <HAL_DMA_IRQHandler+0x40c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d031      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a23      	ldr	r2, [pc, #140]	@ (8004b6c <HAL_DMA_IRQHandler+0x410>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d02c      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a21      	ldr	r2, [pc, #132]	@ (8004b70 <HAL_DMA_IRQHandler+0x414>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d027      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a20      	ldr	r2, [pc, #128]	@ (8004b74 <HAL_DMA_IRQHandler+0x418>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d022      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1e      	ldr	r2, [pc, #120]	@ (8004b78 <HAL_DMA_IRQHandler+0x41c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d01d      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1d      	ldr	r2, [pc, #116]	@ (8004b7c <HAL_DMA_IRQHandler+0x420>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d018      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1b      	ldr	r2, [pc, #108]	@ (8004b80 <HAL_DMA_IRQHandler+0x424>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d013      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8004b84 <HAL_DMA_IRQHandler+0x428>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00e      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a18      	ldr	r2, [pc, #96]	@ (8004b88 <HAL_DMA_IRQHandler+0x42c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d009      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a17      	ldr	r2, [pc, #92]	@ (8004b8c <HAL_DMA_IRQHandler+0x430>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d004      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a15      	ldr	r2, [pc, #84]	@ (8004b90 <HAL_DMA_IRQHandler+0x434>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d12a      	bne.n	8004b94 <HAL_DMA_IRQHandler+0x438>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	bf14      	ite	ne
 8004b4c:	2301      	movne	r3, #1
 8004b4e:	2300      	moveq	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	e023      	b.n	8004b9c <HAL_DMA_IRQHandler+0x440>
 8004b54:	40020010 	.word	0x40020010
 8004b58:	40020028 	.word	0x40020028
 8004b5c:	40020040 	.word	0x40020040
 8004b60:	40020058 	.word	0x40020058
 8004b64:	40020070 	.word	0x40020070
 8004b68:	40020088 	.word	0x40020088
 8004b6c:	400200a0 	.word	0x400200a0
 8004b70:	400200b8 	.word	0x400200b8
 8004b74:	40020410 	.word	0x40020410
 8004b78:	40020428 	.word	0x40020428
 8004b7c:	40020440 	.word	0x40020440
 8004b80:	40020458 	.word	0x40020458
 8004b84:	40020470 	.word	0x40020470
 8004b88:	40020488 	.word	0x40020488
 8004b8c:	400204a0 	.word	0x400204a0
 8004b90:	400204b8 	.word	0x400204b8
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00d      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba4:	f003 031f 	and.w	r3, r3, #31
 8004ba8:	2204      	movs	r2, #4
 8004baa:	409a      	lsls	r2, r3
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb4:	f043 0204 	orr.w	r2, r3, #4
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc0:	f003 031f 	and.w	r3, r3, #31
 8004bc4:	2210      	movs	r2, #16
 8004bc6:	409a      	lsls	r2, r3
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 80a6 	beq.w	8004d1e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a85      	ldr	r2, [pc, #532]	@ (8004dec <HAL_DMA_IRQHandler+0x690>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d04a      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a83      	ldr	r2, [pc, #524]	@ (8004df0 <HAL_DMA_IRQHandler+0x694>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d045      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a82      	ldr	r2, [pc, #520]	@ (8004df4 <HAL_DMA_IRQHandler+0x698>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d040      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a80      	ldr	r2, [pc, #512]	@ (8004df8 <HAL_DMA_IRQHandler+0x69c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d03b      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a7f      	ldr	r2, [pc, #508]	@ (8004dfc <HAL_DMA_IRQHandler+0x6a0>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d036      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a7d      	ldr	r2, [pc, #500]	@ (8004e00 <HAL_DMA_IRQHandler+0x6a4>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d031      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a7c      	ldr	r2, [pc, #496]	@ (8004e04 <HAL_DMA_IRQHandler+0x6a8>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d02c      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a7a      	ldr	r2, [pc, #488]	@ (8004e08 <HAL_DMA_IRQHandler+0x6ac>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d027      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a79      	ldr	r2, [pc, #484]	@ (8004e0c <HAL_DMA_IRQHandler+0x6b0>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d022      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a77      	ldr	r2, [pc, #476]	@ (8004e10 <HAL_DMA_IRQHandler+0x6b4>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d01d      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a76      	ldr	r2, [pc, #472]	@ (8004e14 <HAL_DMA_IRQHandler+0x6b8>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d018      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a74      	ldr	r2, [pc, #464]	@ (8004e18 <HAL_DMA_IRQHandler+0x6bc>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d013      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a73      	ldr	r2, [pc, #460]	@ (8004e1c <HAL_DMA_IRQHandler+0x6c0>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d00e      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a71      	ldr	r2, [pc, #452]	@ (8004e20 <HAL_DMA_IRQHandler+0x6c4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d009      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a70      	ldr	r2, [pc, #448]	@ (8004e24 <HAL_DMA_IRQHandler+0x6c8>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d004      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a6e      	ldr	r2, [pc, #440]	@ (8004e28 <HAL_DMA_IRQHandler+0x6cc>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d10a      	bne.n	8004c88 <HAL_DMA_IRQHandler+0x52c>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	bf14      	ite	ne
 8004c80:	2301      	movne	r3, #1
 8004c82:	2300      	moveq	r3, #0
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	e009      	b.n	8004c9c <HAL_DMA_IRQHandler+0x540>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	bf14      	ite	ne
 8004c96:	2301      	movne	r3, #1
 8004c98:	2300      	moveq	r3, #0
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d03e      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca4:	f003 031f 	and.w	r3, r3, #31
 8004ca8:	2210      	movs	r2, #16
 8004caa:	409a      	lsls	r2, r3
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d018      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d108      	bne.n	8004cde <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d024      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	4798      	blx	r3
 8004cdc:	e01f      	b.n	8004d1e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d01b      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	4798      	blx	r3
 8004cee:	e016      	b.n	8004d1e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d107      	bne.n	8004d0e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0208 	bic.w	r2, r2, #8
 8004d0c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	2220      	movs	r2, #32
 8004d28:	409a      	lsls	r2, r3
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 8110 	beq.w	8004f54 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a2c      	ldr	r2, [pc, #176]	@ (8004dec <HAL_DMA_IRQHandler+0x690>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d04a      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a2b      	ldr	r2, [pc, #172]	@ (8004df0 <HAL_DMA_IRQHandler+0x694>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d045      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a29      	ldr	r2, [pc, #164]	@ (8004df4 <HAL_DMA_IRQHandler+0x698>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d040      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a28      	ldr	r2, [pc, #160]	@ (8004df8 <HAL_DMA_IRQHandler+0x69c>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d03b      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a26      	ldr	r2, [pc, #152]	@ (8004dfc <HAL_DMA_IRQHandler+0x6a0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d036      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a25      	ldr	r2, [pc, #148]	@ (8004e00 <HAL_DMA_IRQHandler+0x6a4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d031      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a23      	ldr	r2, [pc, #140]	@ (8004e04 <HAL_DMA_IRQHandler+0x6a8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d02c      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a22      	ldr	r2, [pc, #136]	@ (8004e08 <HAL_DMA_IRQHandler+0x6ac>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d027      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a20      	ldr	r2, [pc, #128]	@ (8004e0c <HAL_DMA_IRQHandler+0x6b0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d022      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a1f      	ldr	r2, [pc, #124]	@ (8004e10 <HAL_DMA_IRQHandler+0x6b4>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d01d      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8004e14 <HAL_DMA_IRQHandler+0x6b8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d018      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a1c      	ldr	r2, [pc, #112]	@ (8004e18 <HAL_DMA_IRQHandler+0x6bc>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d013      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a1a      	ldr	r2, [pc, #104]	@ (8004e1c <HAL_DMA_IRQHandler+0x6c0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00e      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a19      	ldr	r2, [pc, #100]	@ (8004e20 <HAL_DMA_IRQHandler+0x6c4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d009      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a17      	ldr	r2, [pc, #92]	@ (8004e24 <HAL_DMA_IRQHandler+0x6c8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d004      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a16      	ldr	r2, [pc, #88]	@ (8004e28 <HAL_DMA_IRQHandler+0x6cc>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d12b      	bne.n	8004e2c <HAL_DMA_IRQHandler+0x6d0>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0310 	and.w	r3, r3, #16
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	bf14      	ite	ne
 8004de2:	2301      	movne	r3, #1
 8004de4:	2300      	moveq	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	e02a      	b.n	8004e40 <HAL_DMA_IRQHandler+0x6e4>
 8004dea:	bf00      	nop
 8004dec:	40020010 	.word	0x40020010
 8004df0:	40020028 	.word	0x40020028
 8004df4:	40020040 	.word	0x40020040
 8004df8:	40020058 	.word	0x40020058
 8004dfc:	40020070 	.word	0x40020070
 8004e00:	40020088 	.word	0x40020088
 8004e04:	400200a0 	.word	0x400200a0
 8004e08:	400200b8 	.word	0x400200b8
 8004e0c:	40020410 	.word	0x40020410
 8004e10:	40020428 	.word	0x40020428
 8004e14:	40020440 	.word	0x40020440
 8004e18:	40020458 	.word	0x40020458
 8004e1c:	40020470 	.word	0x40020470
 8004e20:	40020488 	.word	0x40020488
 8004e24:	400204a0 	.word	0x400204a0
 8004e28:	400204b8 	.word	0x400204b8
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	bf14      	ite	ne
 8004e3a:	2301      	movne	r3, #1
 8004e3c:	2300      	moveq	r3, #0
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 8087 	beq.w	8004f54 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e4a:	f003 031f 	and.w	r3, r3, #31
 8004e4e:	2220      	movs	r2, #32
 8004e50:	409a      	lsls	r2, r3
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d139      	bne.n	8004ed6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0216 	bic.w	r2, r2, #22
 8004e70:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	695a      	ldr	r2, [r3, #20]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e80:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d103      	bne.n	8004e92 <HAL_DMA_IRQHandler+0x736>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d007      	beq.n	8004ea2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0208 	bic.w	r2, r2, #8
 8004ea0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea6:	f003 031f 	and.w	r3, r3, #31
 8004eaa:	223f      	movs	r2, #63	@ 0x3f
 8004eac:	409a      	lsls	r2, r3
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 834a 	beq.w	8005560 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	4798      	blx	r3
          }
          return;
 8004ed4:	e344      	b.n	8005560 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d018      	beq.n	8004f16 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d108      	bne.n	8004f04 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d02c      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	4798      	blx	r3
 8004f02:	e027      	b.n	8004f54 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d023      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	4798      	blx	r3
 8004f14:	e01e      	b.n	8004f54 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10f      	bne.n	8004f44 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0210 	bic.w	r2, r2, #16
 8004f32:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 8306 	beq.w	800556a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 8088 	beq.w	800507c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2204      	movs	r2, #4
 8004f70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a7a      	ldr	r2, [pc, #488]	@ (8005164 <HAL_DMA_IRQHandler+0xa08>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d04a      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a79      	ldr	r2, [pc, #484]	@ (8005168 <HAL_DMA_IRQHandler+0xa0c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d045      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a77      	ldr	r2, [pc, #476]	@ (800516c <HAL_DMA_IRQHandler+0xa10>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d040      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a76      	ldr	r2, [pc, #472]	@ (8005170 <HAL_DMA_IRQHandler+0xa14>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d03b      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a74      	ldr	r2, [pc, #464]	@ (8005174 <HAL_DMA_IRQHandler+0xa18>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d036      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a73      	ldr	r2, [pc, #460]	@ (8005178 <HAL_DMA_IRQHandler+0xa1c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d031      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a71      	ldr	r2, [pc, #452]	@ (800517c <HAL_DMA_IRQHandler+0xa20>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d02c      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a70      	ldr	r2, [pc, #448]	@ (8005180 <HAL_DMA_IRQHandler+0xa24>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d027      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a6e      	ldr	r2, [pc, #440]	@ (8005184 <HAL_DMA_IRQHandler+0xa28>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d022      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a6d      	ldr	r2, [pc, #436]	@ (8005188 <HAL_DMA_IRQHandler+0xa2c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d01d      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a6b      	ldr	r2, [pc, #428]	@ (800518c <HAL_DMA_IRQHandler+0xa30>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d018      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a6a      	ldr	r2, [pc, #424]	@ (8005190 <HAL_DMA_IRQHandler+0xa34>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d013      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a68      	ldr	r2, [pc, #416]	@ (8005194 <HAL_DMA_IRQHandler+0xa38>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d00e      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a67      	ldr	r2, [pc, #412]	@ (8005198 <HAL_DMA_IRQHandler+0xa3c>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d009      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a65      	ldr	r2, [pc, #404]	@ (800519c <HAL_DMA_IRQHandler+0xa40>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d004      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a64      	ldr	r2, [pc, #400]	@ (80051a0 <HAL_DMA_IRQHandler+0xa44>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d108      	bne.n	8005026 <HAL_DMA_IRQHandler+0x8ca>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0201 	bic.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	e007      	b.n	8005036 <HAL_DMA_IRQHandler+0x8da>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0201 	bic.w	r2, r2, #1
 8005034:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	3301      	adds	r3, #1
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800503e:	429a      	cmp	r2, r3
 8005040:	d307      	bcc.n	8005052 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1f2      	bne.n	8005036 <HAL_DMA_IRQHandler+0x8da>
 8005050:	e000      	b.n	8005054 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005052:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d004      	beq.n	800506c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2203      	movs	r2, #3
 8005066:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800506a:	e003      	b.n	8005074 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 8272 	beq.w	800556a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	4798      	blx	r3
 800508e:	e26c      	b.n	800556a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a43      	ldr	r2, [pc, #268]	@ (80051a4 <HAL_DMA_IRQHandler+0xa48>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d022      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x984>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a42      	ldr	r2, [pc, #264]	@ (80051a8 <HAL_DMA_IRQHandler+0xa4c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d01d      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x984>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a40      	ldr	r2, [pc, #256]	@ (80051ac <HAL_DMA_IRQHandler+0xa50>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d018      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x984>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a3f      	ldr	r2, [pc, #252]	@ (80051b0 <HAL_DMA_IRQHandler+0xa54>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d013      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x984>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a3d      	ldr	r2, [pc, #244]	@ (80051b4 <HAL_DMA_IRQHandler+0xa58>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00e      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x984>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a3c      	ldr	r2, [pc, #240]	@ (80051b8 <HAL_DMA_IRQHandler+0xa5c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d009      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x984>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a3a      	ldr	r2, [pc, #232]	@ (80051bc <HAL_DMA_IRQHandler+0xa60>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d004      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x984>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a39      	ldr	r2, [pc, #228]	@ (80051c0 <HAL_DMA_IRQHandler+0xa64>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d101      	bne.n	80050e4 <HAL_DMA_IRQHandler+0x988>
 80050e0:	2301      	movs	r3, #1
 80050e2:	e000      	b.n	80050e6 <HAL_DMA_IRQHandler+0x98a>
 80050e4:	2300      	movs	r3, #0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f000 823f 	beq.w	800556a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f8:	f003 031f 	and.w	r3, r3, #31
 80050fc:	2204      	movs	r2, #4
 80050fe:	409a      	lsls	r2, r3
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	4013      	ands	r3, r2
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 80cd 	beq.w	80052a4 <HAL_DMA_IRQHandler+0xb48>
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 80c7 	beq.w	80052a4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800511a:	f003 031f 	and.w	r3, r3, #31
 800511e:	2204      	movs	r2, #4
 8005120:	409a      	lsls	r2, r3
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d049      	beq.n	80051c4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d109      	bne.n	800514e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 8210 	beq.w	8005564 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800514c:	e20a      	b.n	8005564 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 8206 	beq.w	8005564 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005160:	e200      	b.n	8005564 <HAL_DMA_IRQHandler+0xe08>
 8005162:	bf00      	nop
 8005164:	40020010 	.word	0x40020010
 8005168:	40020028 	.word	0x40020028
 800516c:	40020040 	.word	0x40020040
 8005170:	40020058 	.word	0x40020058
 8005174:	40020070 	.word	0x40020070
 8005178:	40020088 	.word	0x40020088
 800517c:	400200a0 	.word	0x400200a0
 8005180:	400200b8 	.word	0x400200b8
 8005184:	40020410 	.word	0x40020410
 8005188:	40020428 	.word	0x40020428
 800518c:	40020440 	.word	0x40020440
 8005190:	40020458 	.word	0x40020458
 8005194:	40020470 	.word	0x40020470
 8005198:	40020488 	.word	0x40020488
 800519c:	400204a0 	.word	0x400204a0
 80051a0:	400204b8 	.word	0x400204b8
 80051a4:	58025408 	.word	0x58025408
 80051a8:	5802541c 	.word	0x5802541c
 80051ac:	58025430 	.word	0x58025430
 80051b0:	58025444 	.word	0x58025444
 80051b4:	58025458 	.word	0x58025458
 80051b8:	5802546c 	.word	0x5802546c
 80051bc:	58025480 	.word	0x58025480
 80051c0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f003 0320 	and.w	r3, r3, #32
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d160      	bne.n	8005290 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a7f      	ldr	r2, [pc, #508]	@ (80053d0 <HAL_DMA_IRQHandler+0xc74>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d04a      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a7d      	ldr	r2, [pc, #500]	@ (80053d4 <HAL_DMA_IRQHandler+0xc78>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d045      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a7c      	ldr	r2, [pc, #496]	@ (80053d8 <HAL_DMA_IRQHandler+0xc7c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d040      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a7a      	ldr	r2, [pc, #488]	@ (80053dc <HAL_DMA_IRQHandler+0xc80>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d03b      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a79      	ldr	r2, [pc, #484]	@ (80053e0 <HAL_DMA_IRQHandler+0xc84>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d036      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a77      	ldr	r2, [pc, #476]	@ (80053e4 <HAL_DMA_IRQHandler+0xc88>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d031      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a76      	ldr	r2, [pc, #472]	@ (80053e8 <HAL_DMA_IRQHandler+0xc8c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d02c      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a74      	ldr	r2, [pc, #464]	@ (80053ec <HAL_DMA_IRQHandler+0xc90>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d027      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a73      	ldr	r2, [pc, #460]	@ (80053f0 <HAL_DMA_IRQHandler+0xc94>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d022      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a71      	ldr	r2, [pc, #452]	@ (80053f4 <HAL_DMA_IRQHandler+0xc98>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d01d      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a70      	ldr	r2, [pc, #448]	@ (80053f8 <HAL_DMA_IRQHandler+0xc9c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d018      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a6e      	ldr	r2, [pc, #440]	@ (80053fc <HAL_DMA_IRQHandler+0xca0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d013      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a6d      	ldr	r2, [pc, #436]	@ (8005400 <HAL_DMA_IRQHandler+0xca4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00e      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a6b      	ldr	r2, [pc, #428]	@ (8005404 <HAL_DMA_IRQHandler+0xca8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d009      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a6a      	ldr	r2, [pc, #424]	@ (8005408 <HAL_DMA_IRQHandler+0xcac>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d004      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a68      	ldr	r2, [pc, #416]	@ (800540c <HAL_DMA_IRQHandler+0xcb0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d108      	bne.n	8005280 <HAL_DMA_IRQHandler+0xb24>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0208 	bic.w	r2, r2, #8
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	e007      	b.n	8005290 <HAL_DMA_IRQHandler+0xb34>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f022 0204 	bic.w	r2, r2, #4
 800528e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 8165 	beq.w	8005564 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052a2:	e15f      	b.n	8005564 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a8:	f003 031f 	and.w	r3, r3, #31
 80052ac:	2202      	movs	r2, #2
 80052ae:	409a      	lsls	r2, r3
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	4013      	ands	r3, r2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 80c5 	beq.w	8005444 <HAL_DMA_IRQHandler+0xce8>
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 80bf 	beq.w	8005444 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ca:	f003 031f 	and.w	r3, r3, #31
 80052ce:	2202      	movs	r2, #2
 80052d0:	409a      	lsls	r2, r3
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d018      	beq.n	8005312 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d109      	bne.n	80052fe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 813a 	beq.w	8005568 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052fc:	e134      	b.n	8005568 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 8130 	beq.w	8005568 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005310:	e12a      	b.n	8005568 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b00      	cmp	r3, #0
 800531a:	f040 8089 	bne.w	8005430 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a2b      	ldr	r2, [pc, #172]	@ (80053d0 <HAL_DMA_IRQHandler+0xc74>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d04a      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a29      	ldr	r2, [pc, #164]	@ (80053d4 <HAL_DMA_IRQHandler+0xc78>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d045      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a28      	ldr	r2, [pc, #160]	@ (80053d8 <HAL_DMA_IRQHandler+0xc7c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d040      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a26      	ldr	r2, [pc, #152]	@ (80053dc <HAL_DMA_IRQHandler+0xc80>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d03b      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a25      	ldr	r2, [pc, #148]	@ (80053e0 <HAL_DMA_IRQHandler+0xc84>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d036      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a23      	ldr	r2, [pc, #140]	@ (80053e4 <HAL_DMA_IRQHandler+0xc88>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d031      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a22      	ldr	r2, [pc, #136]	@ (80053e8 <HAL_DMA_IRQHandler+0xc8c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d02c      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a20      	ldr	r2, [pc, #128]	@ (80053ec <HAL_DMA_IRQHandler+0xc90>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d027      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1f      	ldr	r2, [pc, #124]	@ (80053f0 <HAL_DMA_IRQHandler+0xc94>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d022      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a1d      	ldr	r2, [pc, #116]	@ (80053f4 <HAL_DMA_IRQHandler+0xc98>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d01d      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a1c      	ldr	r2, [pc, #112]	@ (80053f8 <HAL_DMA_IRQHandler+0xc9c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d018      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1a      	ldr	r2, [pc, #104]	@ (80053fc <HAL_DMA_IRQHandler+0xca0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d013      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a19      	ldr	r2, [pc, #100]	@ (8005400 <HAL_DMA_IRQHandler+0xca4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00e      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a17      	ldr	r2, [pc, #92]	@ (8005404 <HAL_DMA_IRQHandler+0xca8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d009      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a16      	ldr	r2, [pc, #88]	@ (8005408 <HAL_DMA_IRQHandler+0xcac>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d004      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a14      	ldr	r2, [pc, #80]	@ (800540c <HAL_DMA_IRQHandler+0xcb0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d128      	bne.n	8005410 <HAL_DMA_IRQHandler+0xcb4>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0214 	bic.w	r2, r2, #20
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	e027      	b.n	8005420 <HAL_DMA_IRQHandler+0xcc4>
 80053d0:	40020010 	.word	0x40020010
 80053d4:	40020028 	.word	0x40020028
 80053d8:	40020040 	.word	0x40020040
 80053dc:	40020058 	.word	0x40020058
 80053e0:	40020070 	.word	0x40020070
 80053e4:	40020088 	.word	0x40020088
 80053e8:	400200a0 	.word	0x400200a0
 80053ec:	400200b8 	.word	0x400200b8
 80053f0:	40020410 	.word	0x40020410
 80053f4:	40020428 	.word	0x40020428
 80053f8:	40020440 	.word	0x40020440
 80053fc:	40020458 	.word	0x40020458
 8005400:	40020470 	.word	0x40020470
 8005404:	40020488 	.word	0x40020488
 8005408:	400204a0 	.word	0x400204a0
 800540c:	400204b8 	.word	0x400204b8
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 020a 	bic.w	r2, r2, #10
 800541e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 8097 	beq.w	8005568 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005442:	e091      	b.n	8005568 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005448:	f003 031f 	and.w	r3, r3, #31
 800544c:	2208      	movs	r2, #8
 800544e:	409a      	lsls	r2, r3
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	4013      	ands	r3, r2
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 8088 	beq.w	800556a <HAL_DMA_IRQHandler+0xe0e>
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 8082 	beq.w	800556a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a41      	ldr	r2, [pc, #260]	@ (8005570 <HAL_DMA_IRQHandler+0xe14>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d04a      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a3f      	ldr	r2, [pc, #252]	@ (8005574 <HAL_DMA_IRQHandler+0xe18>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d045      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a3e      	ldr	r2, [pc, #248]	@ (8005578 <HAL_DMA_IRQHandler+0xe1c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d040      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a3c      	ldr	r2, [pc, #240]	@ (800557c <HAL_DMA_IRQHandler+0xe20>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d03b      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a3b      	ldr	r2, [pc, #236]	@ (8005580 <HAL_DMA_IRQHandler+0xe24>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d036      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a39      	ldr	r2, [pc, #228]	@ (8005584 <HAL_DMA_IRQHandler+0xe28>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d031      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a38      	ldr	r2, [pc, #224]	@ (8005588 <HAL_DMA_IRQHandler+0xe2c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d02c      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a36      	ldr	r2, [pc, #216]	@ (800558c <HAL_DMA_IRQHandler+0xe30>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d027      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a35      	ldr	r2, [pc, #212]	@ (8005590 <HAL_DMA_IRQHandler+0xe34>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d022      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a33      	ldr	r2, [pc, #204]	@ (8005594 <HAL_DMA_IRQHandler+0xe38>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d01d      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a32      	ldr	r2, [pc, #200]	@ (8005598 <HAL_DMA_IRQHandler+0xe3c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d018      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a30      	ldr	r2, [pc, #192]	@ (800559c <HAL_DMA_IRQHandler+0xe40>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d013      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a2f      	ldr	r2, [pc, #188]	@ (80055a0 <HAL_DMA_IRQHandler+0xe44>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00e      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a2d      	ldr	r2, [pc, #180]	@ (80055a4 <HAL_DMA_IRQHandler+0xe48>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d009      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a2c      	ldr	r2, [pc, #176]	@ (80055a8 <HAL_DMA_IRQHandler+0xe4c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d004      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a2a      	ldr	r2, [pc, #168]	@ (80055ac <HAL_DMA_IRQHandler+0xe50>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d108      	bne.n	8005518 <HAL_DMA_IRQHandler+0xdbc>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 021c 	bic.w	r2, r2, #28
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	e007      	b.n	8005528 <HAL_DMA_IRQHandler+0xdcc>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 020e 	bic.w	r2, r2, #14
 8005526:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800552c:	f003 031f 	and.w	r3, r3, #31
 8005530:	2201      	movs	r2, #1
 8005532:	409a      	lsls	r2, r3
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005552:	2b00      	cmp	r3, #0
 8005554:	d009      	beq.n	800556a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	4798      	blx	r3
 800555e:	e004      	b.n	800556a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005560:	bf00      	nop
 8005562:	e002      	b.n	800556a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005564:	bf00      	nop
 8005566:	e000      	b.n	800556a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005568:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800556a:	3728      	adds	r7, #40	@ 0x28
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40020010 	.word	0x40020010
 8005574:	40020028 	.word	0x40020028
 8005578:	40020040 	.word	0x40020040
 800557c:	40020058 	.word	0x40020058
 8005580:	40020070 	.word	0x40020070
 8005584:	40020088 	.word	0x40020088
 8005588:	400200a0 	.word	0x400200a0
 800558c:	400200b8 	.word	0x400200b8
 8005590:	40020410 	.word	0x40020410
 8005594:	40020428 	.word	0x40020428
 8005598:	40020440 	.word	0x40020440
 800559c:	40020458 	.word	0x40020458
 80055a0:	40020470 	.word	0x40020470
 80055a4:	40020488 	.word	0x40020488
 80055a8:	400204a0 	.word	0x400204a0
 80055ac:	400204b8 	.word	0x400204b8

080055b0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055da:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055e0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a7f      	ldr	r2, [pc, #508]	@ (80057e4 <DMA_SetConfig+0x21c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d072      	beq.n	80056d2 <DMA_SetConfig+0x10a>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a7d      	ldr	r2, [pc, #500]	@ (80057e8 <DMA_SetConfig+0x220>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d06d      	beq.n	80056d2 <DMA_SetConfig+0x10a>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a7c      	ldr	r2, [pc, #496]	@ (80057ec <DMA_SetConfig+0x224>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d068      	beq.n	80056d2 <DMA_SetConfig+0x10a>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a7a      	ldr	r2, [pc, #488]	@ (80057f0 <DMA_SetConfig+0x228>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d063      	beq.n	80056d2 <DMA_SetConfig+0x10a>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a79      	ldr	r2, [pc, #484]	@ (80057f4 <DMA_SetConfig+0x22c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d05e      	beq.n	80056d2 <DMA_SetConfig+0x10a>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a77      	ldr	r2, [pc, #476]	@ (80057f8 <DMA_SetConfig+0x230>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d059      	beq.n	80056d2 <DMA_SetConfig+0x10a>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a76      	ldr	r2, [pc, #472]	@ (80057fc <DMA_SetConfig+0x234>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d054      	beq.n	80056d2 <DMA_SetConfig+0x10a>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a74      	ldr	r2, [pc, #464]	@ (8005800 <DMA_SetConfig+0x238>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d04f      	beq.n	80056d2 <DMA_SetConfig+0x10a>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a73      	ldr	r2, [pc, #460]	@ (8005804 <DMA_SetConfig+0x23c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d04a      	beq.n	80056d2 <DMA_SetConfig+0x10a>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a71      	ldr	r2, [pc, #452]	@ (8005808 <DMA_SetConfig+0x240>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d045      	beq.n	80056d2 <DMA_SetConfig+0x10a>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a70      	ldr	r2, [pc, #448]	@ (800580c <DMA_SetConfig+0x244>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d040      	beq.n	80056d2 <DMA_SetConfig+0x10a>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a6e      	ldr	r2, [pc, #440]	@ (8005810 <DMA_SetConfig+0x248>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d03b      	beq.n	80056d2 <DMA_SetConfig+0x10a>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a6d      	ldr	r2, [pc, #436]	@ (8005814 <DMA_SetConfig+0x24c>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d036      	beq.n	80056d2 <DMA_SetConfig+0x10a>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a6b      	ldr	r2, [pc, #428]	@ (8005818 <DMA_SetConfig+0x250>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d031      	beq.n	80056d2 <DMA_SetConfig+0x10a>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a6a      	ldr	r2, [pc, #424]	@ (800581c <DMA_SetConfig+0x254>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d02c      	beq.n	80056d2 <DMA_SetConfig+0x10a>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a68      	ldr	r2, [pc, #416]	@ (8005820 <DMA_SetConfig+0x258>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d027      	beq.n	80056d2 <DMA_SetConfig+0x10a>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a67      	ldr	r2, [pc, #412]	@ (8005824 <DMA_SetConfig+0x25c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d022      	beq.n	80056d2 <DMA_SetConfig+0x10a>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a65      	ldr	r2, [pc, #404]	@ (8005828 <DMA_SetConfig+0x260>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d01d      	beq.n	80056d2 <DMA_SetConfig+0x10a>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a64      	ldr	r2, [pc, #400]	@ (800582c <DMA_SetConfig+0x264>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d018      	beq.n	80056d2 <DMA_SetConfig+0x10a>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a62      	ldr	r2, [pc, #392]	@ (8005830 <DMA_SetConfig+0x268>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d013      	beq.n	80056d2 <DMA_SetConfig+0x10a>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a61      	ldr	r2, [pc, #388]	@ (8005834 <DMA_SetConfig+0x26c>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d00e      	beq.n	80056d2 <DMA_SetConfig+0x10a>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a5f      	ldr	r2, [pc, #380]	@ (8005838 <DMA_SetConfig+0x270>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d009      	beq.n	80056d2 <DMA_SetConfig+0x10a>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a5e      	ldr	r2, [pc, #376]	@ (800583c <DMA_SetConfig+0x274>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d004      	beq.n	80056d2 <DMA_SetConfig+0x10a>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a5c      	ldr	r2, [pc, #368]	@ (8005840 <DMA_SetConfig+0x278>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d101      	bne.n	80056d6 <DMA_SetConfig+0x10e>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e000      	b.n	80056d8 <DMA_SetConfig+0x110>
 80056d6:	2300      	movs	r3, #0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00d      	beq.n	80056f8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80056e4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d004      	beq.n	80056f8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80056f6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a39      	ldr	r2, [pc, #228]	@ (80057e4 <DMA_SetConfig+0x21c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d04a      	beq.n	8005798 <DMA_SetConfig+0x1d0>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a38      	ldr	r2, [pc, #224]	@ (80057e8 <DMA_SetConfig+0x220>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d045      	beq.n	8005798 <DMA_SetConfig+0x1d0>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a36      	ldr	r2, [pc, #216]	@ (80057ec <DMA_SetConfig+0x224>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d040      	beq.n	8005798 <DMA_SetConfig+0x1d0>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a35      	ldr	r2, [pc, #212]	@ (80057f0 <DMA_SetConfig+0x228>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d03b      	beq.n	8005798 <DMA_SetConfig+0x1d0>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a33      	ldr	r2, [pc, #204]	@ (80057f4 <DMA_SetConfig+0x22c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d036      	beq.n	8005798 <DMA_SetConfig+0x1d0>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a32      	ldr	r2, [pc, #200]	@ (80057f8 <DMA_SetConfig+0x230>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d031      	beq.n	8005798 <DMA_SetConfig+0x1d0>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a30      	ldr	r2, [pc, #192]	@ (80057fc <DMA_SetConfig+0x234>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d02c      	beq.n	8005798 <DMA_SetConfig+0x1d0>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a2f      	ldr	r2, [pc, #188]	@ (8005800 <DMA_SetConfig+0x238>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d027      	beq.n	8005798 <DMA_SetConfig+0x1d0>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a2d      	ldr	r2, [pc, #180]	@ (8005804 <DMA_SetConfig+0x23c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d022      	beq.n	8005798 <DMA_SetConfig+0x1d0>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a2c      	ldr	r2, [pc, #176]	@ (8005808 <DMA_SetConfig+0x240>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d01d      	beq.n	8005798 <DMA_SetConfig+0x1d0>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a2a      	ldr	r2, [pc, #168]	@ (800580c <DMA_SetConfig+0x244>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d018      	beq.n	8005798 <DMA_SetConfig+0x1d0>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a29      	ldr	r2, [pc, #164]	@ (8005810 <DMA_SetConfig+0x248>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d013      	beq.n	8005798 <DMA_SetConfig+0x1d0>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a27      	ldr	r2, [pc, #156]	@ (8005814 <DMA_SetConfig+0x24c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00e      	beq.n	8005798 <DMA_SetConfig+0x1d0>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a26      	ldr	r2, [pc, #152]	@ (8005818 <DMA_SetConfig+0x250>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d009      	beq.n	8005798 <DMA_SetConfig+0x1d0>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a24      	ldr	r2, [pc, #144]	@ (800581c <DMA_SetConfig+0x254>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d004      	beq.n	8005798 <DMA_SetConfig+0x1d0>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a23      	ldr	r2, [pc, #140]	@ (8005820 <DMA_SetConfig+0x258>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d101      	bne.n	800579c <DMA_SetConfig+0x1d4>
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <DMA_SetConfig+0x1d6>
 800579c:	2300      	movs	r3, #0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d059      	beq.n	8005856 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	223f      	movs	r2, #63	@ 0x3f
 80057ac:	409a      	lsls	r2, r3
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80057c0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	2b40      	cmp	r3, #64	@ 0x40
 80057d0:	d138      	bne.n	8005844 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80057e2:	e086      	b.n	80058f2 <DMA_SetConfig+0x32a>
 80057e4:	40020010 	.word	0x40020010
 80057e8:	40020028 	.word	0x40020028
 80057ec:	40020040 	.word	0x40020040
 80057f0:	40020058 	.word	0x40020058
 80057f4:	40020070 	.word	0x40020070
 80057f8:	40020088 	.word	0x40020088
 80057fc:	400200a0 	.word	0x400200a0
 8005800:	400200b8 	.word	0x400200b8
 8005804:	40020410 	.word	0x40020410
 8005808:	40020428 	.word	0x40020428
 800580c:	40020440 	.word	0x40020440
 8005810:	40020458 	.word	0x40020458
 8005814:	40020470 	.word	0x40020470
 8005818:	40020488 	.word	0x40020488
 800581c:	400204a0 	.word	0x400204a0
 8005820:	400204b8 	.word	0x400204b8
 8005824:	58025408 	.word	0x58025408
 8005828:	5802541c 	.word	0x5802541c
 800582c:	58025430 	.word	0x58025430
 8005830:	58025444 	.word	0x58025444
 8005834:	58025458 	.word	0x58025458
 8005838:	5802546c 	.word	0x5802546c
 800583c:	58025480 	.word	0x58025480
 8005840:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	60da      	str	r2, [r3, #12]
}
 8005854:	e04d      	b.n	80058f2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a29      	ldr	r2, [pc, #164]	@ (8005900 <DMA_SetConfig+0x338>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d022      	beq.n	80058a6 <DMA_SetConfig+0x2de>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a27      	ldr	r2, [pc, #156]	@ (8005904 <DMA_SetConfig+0x33c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d01d      	beq.n	80058a6 <DMA_SetConfig+0x2de>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a26      	ldr	r2, [pc, #152]	@ (8005908 <DMA_SetConfig+0x340>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d018      	beq.n	80058a6 <DMA_SetConfig+0x2de>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a24      	ldr	r2, [pc, #144]	@ (800590c <DMA_SetConfig+0x344>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d013      	beq.n	80058a6 <DMA_SetConfig+0x2de>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a23      	ldr	r2, [pc, #140]	@ (8005910 <DMA_SetConfig+0x348>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00e      	beq.n	80058a6 <DMA_SetConfig+0x2de>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a21      	ldr	r2, [pc, #132]	@ (8005914 <DMA_SetConfig+0x34c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d009      	beq.n	80058a6 <DMA_SetConfig+0x2de>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a20      	ldr	r2, [pc, #128]	@ (8005918 <DMA_SetConfig+0x350>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d004      	beq.n	80058a6 <DMA_SetConfig+0x2de>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a1e      	ldr	r2, [pc, #120]	@ (800591c <DMA_SetConfig+0x354>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d101      	bne.n	80058aa <DMA_SetConfig+0x2e2>
 80058a6:	2301      	movs	r3, #1
 80058a8:	e000      	b.n	80058ac <DMA_SetConfig+0x2e4>
 80058aa:	2300      	movs	r3, #0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d020      	beq.n	80058f2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b4:	f003 031f 	and.w	r3, r3, #31
 80058b8:	2201      	movs	r2, #1
 80058ba:	409a      	lsls	r2, r3
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	2b40      	cmp	r3, #64	@ 0x40
 80058ce:	d108      	bne.n	80058e2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	60da      	str	r2, [r3, #12]
}
 80058e0:	e007      	b.n	80058f2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	60da      	str	r2, [r3, #12]
}
 80058f2:	bf00      	nop
 80058f4:	371c      	adds	r7, #28
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	58025408 	.word	0x58025408
 8005904:	5802541c 	.word	0x5802541c
 8005908:	58025430 	.word	0x58025430
 800590c:	58025444 	.word	0x58025444
 8005910:	58025458 	.word	0x58025458
 8005914:	5802546c 	.word	0x5802546c
 8005918:	58025480 	.word	0x58025480
 800591c:	58025494 	.word	0x58025494

08005920 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a42      	ldr	r2, [pc, #264]	@ (8005a38 <DMA_CalcBaseAndBitshift+0x118>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d04a      	beq.n	80059c8 <DMA_CalcBaseAndBitshift+0xa8>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a41      	ldr	r2, [pc, #260]	@ (8005a3c <DMA_CalcBaseAndBitshift+0x11c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d045      	beq.n	80059c8 <DMA_CalcBaseAndBitshift+0xa8>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a3f      	ldr	r2, [pc, #252]	@ (8005a40 <DMA_CalcBaseAndBitshift+0x120>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d040      	beq.n	80059c8 <DMA_CalcBaseAndBitshift+0xa8>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a3e      	ldr	r2, [pc, #248]	@ (8005a44 <DMA_CalcBaseAndBitshift+0x124>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d03b      	beq.n	80059c8 <DMA_CalcBaseAndBitshift+0xa8>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a3c      	ldr	r2, [pc, #240]	@ (8005a48 <DMA_CalcBaseAndBitshift+0x128>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d036      	beq.n	80059c8 <DMA_CalcBaseAndBitshift+0xa8>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a3b      	ldr	r2, [pc, #236]	@ (8005a4c <DMA_CalcBaseAndBitshift+0x12c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d031      	beq.n	80059c8 <DMA_CalcBaseAndBitshift+0xa8>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a39      	ldr	r2, [pc, #228]	@ (8005a50 <DMA_CalcBaseAndBitshift+0x130>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d02c      	beq.n	80059c8 <DMA_CalcBaseAndBitshift+0xa8>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a38      	ldr	r2, [pc, #224]	@ (8005a54 <DMA_CalcBaseAndBitshift+0x134>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d027      	beq.n	80059c8 <DMA_CalcBaseAndBitshift+0xa8>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a36      	ldr	r2, [pc, #216]	@ (8005a58 <DMA_CalcBaseAndBitshift+0x138>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d022      	beq.n	80059c8 <DMA_CalcBaseAndBitshift+0xa8>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a35      	ldr	r2, [pc, #212]	@ (8005a5c <DMA_CalcBaseAndBitshift+0x13c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d01d      	beq.n	80059c8 <DMA_CalcBaseAndBitshift+0xa8>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a33      	ldr	r2, [pc, #204]	@ (8005a60 <DMA_CalcBaseAndBitshift+0x140>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d018      	beq.n	80059c8 <DMA_CalcBaseAndBitshift+0xa8>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a32      	ldr	r2, [pc, #200]	@ (8005a64 <DMA_CalcBaseAndBitshift+0x144>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d013      	beq.n	80059c8 <DMA_CalcBaseAndBitshift+0xa8>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a30      	ldr	r2, [pc, #192]	@ (8005a68 <DMA_CalcBaseAndBitshift+0x148>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00e      	beq.n	80059c8 <DMA_CalcBaseAndBitshift+0xa8>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a2f      	ldr	r2, [pc, #188]	@ (8005a6c <DMA_CalcBaseAndBitshift+0x14c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d009      	beq.n	80059c8 <DMA_CalcBaseAndBitshift+0xa8>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a2d      	ldr	r2, [pc, #180]	@ (8005a70 <DMA_CalcBaseAndBitshift+0x150>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d004      	beq.n	80059c8 <DMA_CalcBaseAndBitshift+0xa8>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005a74 <DMA_CalcBaseAndBitshift+0x154>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d101      	bne.n	80059cc <DMA_CalcBaseAndBitshift+0xac>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e000      	b.n	80059ce <DMA_CalcBaseAndBitshift+0xae>
 80059cc:	2300      	movs	r3, #0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d024      	beq.n	8005a1c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	3b10      	subs	r3, #16
 80059da:	4a27      	ldr	r2, [pc, #156]	@ (8005a78 <DMA_CalcBaseAndBitshift+0x158>)
 80059dc:	fba2 2303 	umull	r2, r3, r2, r3
 80059e0:	091b      	lsrs	r3, r3, #4
 80059e2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	4a24      	ldr	r2, [pc, #144]	@ (8005a7c <DMA_CalcBaseAndBitshift+0x15c>)
 80059ec:	5cd3      	ldrb	r3, [r2, r3]
 80059ee:	461a      	mov	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d908      	bls.n	8005a0c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	4b1f      	ldr	r3, [pc, #124]	@ (8005a80 <DMA_CalcBaseAndBitshift+0x160>)
 8005a02:	4013      	ands	r3, r2
 8005a04:	1d1a      	adds	r2, r3, #4
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	659a      	str	r2, [r3, #88]	@ 0x58
 8005a0a:	e00d      	b.n	8005a28 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	461a      	mov	r2, r3
 8005a12:	4b1b      	ldr	r3, [pc, #108]	@ (8005a80 <DMA_CalcBaseAndBitshift+0x160>)
 8005a14:	4013      	ands	r3, r2
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a1a:	e005      	b.n	8005a28 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	40020010 	.word	0x40020010
 8005a3c:	40020028 	.word	0x40020028
 8005a40:	40020040 	.word	0x40020040
 8005a44:	40020058 	.word	0x40020058
 8005a48:	40020070 	.word	0x40020070
 8005a4c:	40020088 	.word	0x40020088
 8005a50:	400200a0 	.word	0x400200a0
 8005a54:	400200b8 	.word	0x400200b8
 8005a58:	40020410 	.word	0x40020410
 8005a5c:	40020428 	.word	0x40020428
 8005a60:	40020440 	.word	0x40020440
 8005a64:	40020458 	.word	0x40020458
 8005a68:	40020470 	.word	0x40020470
 8005a6c:	40020488 	.word	0x40020488
 8005a70:	400204a0 	.word	0x400204a0
 8005a74:	400204b8 	.word	0x400204b8
 8005a78:	aaaaaaab 	.word	0xaaaaaaab
 8005a7c:	0800a62c 	.word	0x0800a62c
 8005a80:	fffffc00 	.word	0xfffffc00

08005a84 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d120      	bne.n	8005ada <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d858      	bhi.n	8005b52 <DMA_CheckFifoParam+0xce>
 8005aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa8 <DMA_CheckFifoParam+0x24>)
 8005aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa6:	bf00      	nop
 8005aa8:	08005ab9 	.word	0x08005ab9
 8005aac:	08005acb 	.word	0x08005acb
 8005ab0:	08005ab9 	.word	0x08005ab9
 8005ab4:	08005b53 	.word	0x08005b53
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005abc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d048      	beq.n	8005b56 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ac8:	e045      	b.n	8005b56 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ace:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ad2:	d142      	bne.n	8005b5a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ad8:	e03f      	b.n	8005b5a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ae2:	d123      	bne.n	8005b2c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d838      	bhi.n	8005b5e <DMA_CheckFifoParam+0xda>
 8005aec:	a201      	add	r2, pc, #4	@ (adr r2, 8005af4 <DMA_CheckFifoParam+0x70>)
 8005aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af2:	bf00      	nop
 8005af4:	08005b05 	.word	0x08005b05
 8005af8:	08005b0b 	.word	0x08005b0b
 8005afc:	08005b05 	.word	0x08005b05
 8005b00:	08005b1d 	.word	0x08005b1d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	73fb      	strb	r3, [r7, #15]
        break;
 8005b08:	e030      	b.n	8005b6c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d025      	beq.n	8005b62 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b1a:	e022      	b.n	8005b62 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b20:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005b24:	d11f      	bne.n	8005b66 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b2a:	e01c      	b.n	8005b66 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d902      	bls.n	8005b3a <DMA_CheckFifoParam+0xb6>
 8005b34:	2b03      	cmp	r3, #3
 8005b36:	d003      	beq.n	8005b40 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005b38:	e018      	b.n	8005b6c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	73fb      	strb	r3, [r7, #15]
        break;
 8005b3e:	e015      	b.n	8005b6c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00e      	beq.n	8005b6a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	73fb      	strb	r3, [r7, #15]
    break;
 8005b50:	e00b      	b.n	8005b6a <DMA_CheckFifoParam+0xe6>
        break;
 8005b52:	bf00      	nop
 8005b54:	e00a      	b.n	8005b6c <DMA_CheckFifoParam+0xe8>
        break;
 8005b56:	bf00      	nop
 8005b58:	e008      	b.n	8005b6c <DMA_CheckFifoParam+0xe8>
        break;
 8005b5a:	bf00      	nop
 8005b5c:	e006      	b.n	8005b6c <DMA_CheckFifoParam+0xe8>
        break;
 8005b5e:	bf00      	nop
 8005b60:	e004      	b.n	8005b6c <DMA_CheckFifoParam+0xe8>
        break;
 8005b62:	bf00      	nop
 8005b64:	e002      	b.n	8005b6c <DMA_CheckFifoParam+0xe8>
        break;
 8005b66:	bf00      	nop
 8005b68:	e000      	b.n	8005b6c <DMA_CheckFifoParam+0xe8>
    break;
 8005b6a:	bf00      	nop
    }
  }

  return status;
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop

08005b7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a38      	ldr	r2, [pc, #224]	@ (8005c70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d022      	beq.n	8005bda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a36      	ldr	r2, [pc, #216]	@ (8005c74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d01d      	beq.n	8005bda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a35      	ldr	r2, [pc, #212]	@ (8005c78 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d018      	beq.n	8005bda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a33      	ldr	r2, [pc, #204]	@ (8005c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d013      	beq.n	8005bda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a32      	ldr	r2, [pc, #200]	@ (8005c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00e      	beq.n	8005bda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a30      	ldr	r2, [pc, #192]	@ (8005c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d009      	beq.n	8005bda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a2f      	ldr	r2, [pc, #188]	@ (8005c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d004      	beq.n	8005bda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a2d      	ldr	r2, [pc, #180]	@ (8005c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d101      	bne.n	8005bde <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e000      	b.n	8005be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005bde:	2300      	movs	r3, #0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d01a      	beq.n	8005c1a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	3b08      	subs	r3, #8
 8005bec:	4a28      	ldr	r2, [pc, #160]	@ (8005c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005bee:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf2:	091b      	lsrs	r3, r3, #4
 8005bf4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4b26      	ldr	r3, [pc, #152]	@ (8005c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005bfa:	4413      	add	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	461a      	mov	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a24      	ldr	r2, [pc, #144]	@ (8005c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005c08:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f003 031f 	and.w	r3, r3, #31
 8005c10:	2201      	movs	r2, #1
 8005c12:	409a      	lsls	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005c18:	e024      	b.n	8005c64 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	3b10      	subs	r3, #16
 8005c22:	4a1e      	ldr	r2, [pc, #120]	@ (8005c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005c24:	fba2 2303 	umull	r2, r3, r2, r3
 8005c28:	091b      	lsrs	r3, r3, #4
 8005c2a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d806      	bhi.n	8005c42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4a1b      	ldr	r2, [pc, #108]	@ (8005ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d902      	bls.n	8005c42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	3308      	adds	r3, #8
 8005c40:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	4b18      	ldr	r3, [pc, #96]	@ (8005ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005c46:	4413      	add	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a16      	ldr	r2, [pc, #88]	@ (8005cac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005c54:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f003 031f 	and.w	r3, r3, #31
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	409a      	lsls	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005c64:	bf00      	nop
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	58025408 	.word	0x58025408
 8005c74:	5802541c 	.word	0x5802541c
 8005c78:	58025430 	.word	0x58025430
 8005c7c:	58025444 	.word	0x58025444
 8005c80:	58025458 	.word	0x58025458
 8005c84:	5802546c 	.word	0x5802546c
 8005c88:	58025480 	.word	0x58025480
 8005c8c:	58025494 	.word	0x58025494
 8005c90:	cccccccd 	.word	0xcccccccd
 8005c94:	16009600 	.word	0x16009600
 8005c98:	58025880 	.word	0x58025880
 8005c9c:	aaaaaaab 	.word	0xaaaaaaab
 8005ca0:	400204b8 	.word	0x400204b8
 8005ca4:	4002040f 	.word	0x4002040f
 8005ca8:	10008200 	.word	0x10008200
 8005cac:	40020880 	.word	0x40020880

08005cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d04a      	beq.n	8005d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d847      	bhi.n	8005d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a25      	ldr	r2, [pc, #148]	@ (8005d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d022      	beq.n	8005d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a24      	ldr	r2, [pc, #144]	@ (8005d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d01d      	beq.n	8005d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a22      	ldr	r2, [pc, #136]	@ (8005d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d018      	beq.n	8005d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a21      	ldr	r2, [pc, #132]	@ (8005d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d013      	beq.n	8005d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a1f      	ldr	r2, [pc, #124]	@ (8005d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d00e      	beq.n	8005d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a1e      	ldr	r2, [pc, #120]	@ (8005d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d009      	beq.n	8005d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a1c      	ldr	r2, [pc, #112]	@ (8005d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d004      	beq.n	8005d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a1b      	ldr	r2, [pc, #108]	@ (8005d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d101      	bne.n	8005d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e000      	b.n	8005d22 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005d20:	2300      	movs	r3, #0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00a      	beq.n	8005d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	4b17      	ldr	r3, [pc, #92]	@ (8005d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005d2a:	4413      	add	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	461a      	mov	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a15      	ldr	r2, [pc, #84]	@ (8005d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005d38:	671a      	str	r2, [r3, #112]	@ 0x70
 8005d3a:	e009      	b.n	8005d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4b14      	ldr	r3, [pc, #80]	@ (8005d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005d40:	4413      	add	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	461a      	mov	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a11      	ldr	r2, [pc, #68]	@ (8005d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005d4e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	2201      	movs	r2, #1
 8005d56:	409a      	lsls	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005d5c:	bf00      	nop
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	58025408 	.word	0x58025408
 8005d6c:	5802541c 	.word	0x5802541c
 8005d70:	58025430 	.word	0x58025430
 8005d74:	58025444 	.word	0x58025444
 8005d78:	58025458 	.word	0x58025458
 8005d7c:	5802546c 	.word	0x5802546c
 8005d80:	58025480 	.word	0x58025480
 8005d84:	58025494 	.word	0x58025494
 8005d88:	1600963f 	.word	0x1600963f
 8005d8c:	58025940 	.word	0x58025940
 8005d90:	1000823f 	.word	0x1000823f
 8005d94:	40020940 	.word	0x40020940

08005d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b089      	sub	sp, #36	@ 0x24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005da6:	4b86      	ldr	r3, [pc, #536]	@ (8005fc0 <HAL_GPIO_Init+0x228>)
 8005da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005daa:	e18c      	b.n	80060c6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	2101      	movs	r1, #1
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	fa01 f303 	lsl.w	r3, r1, r3
 8005db8:	4013      	ands	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 817e 	beq.w	80060c0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f003 0303 	and.w	r3, r3, #3
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d005      	beq.n	8005ddc <HAL_GPIO_Init+0x44>
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f003 0303 	and.w	r3, r3, #3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d130      	bne.n	8005e3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	2203      	movs	r2, #3
 8005de8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dec:	43db      	mvns	r3, r3
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	4013      	ands	r3, r2
 8005df2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	68da      	ldr	r2, [r3, #12]
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e12:	2201      	movs	r2, #1
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1a:	43db      	mvns	r3, r3
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	091b      	lsrs	r3, r3, #4
 8005e28:	f003 0201 	and.w	r2, r3, #1
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f003 0303 	and.w	r3, r3, #3
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	d017      	beq.n	8005e7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	2203      	movs	r2, #3
 8005e56:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5a:	43db      	mvns	r3, r3
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	4013      	ands	r3, r2
 8005e60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	689a      	ldr	r2, [r3, #8]
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	69ba      	ldr	r2, [r7, #24]
 8005e78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f003 0303 	and.w	r3, r3, #3
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d123      	bne.n	8005ece <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	08da      	lsrs	r2, r3, #3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	3208      	adds	r2, #8
 8005e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	220f      	movs	r2, #15
 8005e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea2:	43db      	mvns	r3, r3
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	691a      	ldr	r2, [r3, #16]
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	f003 0307 	and.w	r3, r3, #7
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	08da      	lsrs	r2, r3, #3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	3208      	adds	r2, #8
 8005ec8:	69b9      	ldr	r1, [r7, #24]
 8005eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	2203      	movs	r2, #3
 8005eda:	fa02 f303 	lsl.w	r3, r2, r3
 8005ede:	43db      	mvns	r3, r3
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f003 0203 	and.w	r2, r3, #3
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 80d8 	beq.w	80060c0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f10:	4b2c      	ldr	r3, [pc, #176]	@ (8005fc4 <HAL_GPIO_Init+0x22c>)
 8005f12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f16:	4a2b      	ldr	r2, [pc, #172]	@ (8005fc4 <HAL_GPIO_Init+0x22c>)
 8005f18:	f043 0302 	orr.w	r3, r3, #2
 8005f1c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005f20:	4b28      	ldr	r3, [pc, #160]	@ (8005fc4 <HAL_GPIO_Init+0x22c>)
 8005f22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	60fb      	str	r3, [r7, #12]
 8005f2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f2e:	4a26      	ldr	r2, [pc, #152]	@ (8005fc8 <HAL_GPIO_Init+0x230>)
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	089b      	lsrs	r3, r3, #2
 8005f34:	3302      	adds	r3, #2
 8005f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	f003 0303 	and.w	r3, r3, #3
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	220f      	movs	r2, #15
 8005f46:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4a:	43db      	mvns	r3, r3
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a1d      	ldr	r2, [pc, #116]	@ (8005fcc <HAL_GPIO_Init+0x234>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d04a      	beq.n	8005ff0 <HAL_GPIO_Init+0x258>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a1c      	ldr	r2, [pc, #112]	@ (8005fd0 <HAL_GPIO_Init+0x238>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d02b      	beq.n	8005fba <HAL_GPIO_Init+0x222>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a1b      	ldr	r2, [pc, #108]	@ (8005fd4 <HAL_GPIO_Init+0x23c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d025      	beq.n	8005fb6 <HAL_GPIO_Init+0x21e>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a1a      	ldr	r2, [pc, #104]	@ (8005fd8 <HAL_GPIO_Init+0x240>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d01f      	beq.n	8005fb2 <HAL_GPIO_Init+0x21a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a19      	ldr	r2, [pc, #100]	@ (8005fdc <HAL_GPIO_Init+0x244>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d019      	beq.n	8005fae <HAL_GPIO_Init+0x216>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a18      	ldr	r2, [pc, #96]	@ (8005fe0 <HAL_GPIO_Init+0x248>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d013      	beq.n	8005faa <HAL_GPIO_Init+0x212>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a17      	ldr	r2, [pc, #92]	@ (8005fe4 <HAL_GPIO_Init+0x24c>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00d      	beq.n	8005fa6 <HAL_GPIO_Init+0x20e>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a16      	ldr	r2, [pc, #88]	@ (8005fe8 <HAL_GPIO_Init+0x250>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d007      	beq.n	8005fa2 <HAL_GPIO_Init+0x20a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a15      	ldr	r2, [pc, #84]	@ (8005fec <HAL_GPIO_Init+0x254>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d101      	bne.n	8005f9e <HAL_GPIO_Init+0x206>
 8005f9a:	2309      	movs	r3, #9
 8005f9c:	e029      	b.n	8005ff2 <HAL_GPIO_Init+0x25a>
 8005f9e:	230a      	movs	r3, #10
 8005fa0:	e027      	b.n	8005ff2 <HAL_GPIO_Init+0x25a>
 8005fa2:	2307      	movs	r3, #7
 8005fa4:	e025      	b.n	8005ff2 <HAL_GPIO_Init+0x25a>
 8005fa6:	2306      	movs	r3, #6
 8005fa8:	e023      	b.n	8005ff2 <HAL_GPIO_Init+0x25a>
 8005faa:	2305      	movs	r3, #5
 8005fac:	e021      	b.n	8005ff2 <HAL_GPIO_Init+0x25a>
 8005fae:	2304      	movs	r3, #4
 8005fb0:	e01f      	b.n	8005ff2 <HAL_GPIO_Init+0x25a>
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e01d      	b.n	8005ff2 <HAL_GPIO_Init+0x25a>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	e01b      	b.n	8005ff2 <HAL_GPIO_Init+0x25a>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e019      	b.n	8005ff2 <HAL_GPIO_Init+0x25a>
 8005fbe:	bf00      	nop
 8005fc0:	58000080 	.word	0x58000080
 8005fc4:	58024400 	.word	0x58024400
 8005fc8:	58000400 	.word	0x58000400
 8005fcc:	58020000 	.word	0x58020000
 8005fd0:	58020400 	.word	0x58020400
 8005fd4:	58020800 	.word	0x58020800
 8005fd8:	58020c00 	.word	0x58020c00
 8005fdc:	58021000 	.word	0x58021000
 8005fe0:	58021400 	.word	0x58021400
 8005fe4:	58021800 	.word	0x58021800
 8005fe8:	58021c00 	.word	0x58021c00
 8005fec:	58022400 	.word	0x58022400
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	69fa      	ldr	r2, [r7, #28]
 8005ff4:	f002 0203 	and.w	r2, r2, #3
 8005ff8:	0092      	lsls	r2, r2, #2
 8005ffa:	4093      	lsls	r3, r2
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006002:	4938      	ldr	r1, [pc, #224]	@ (80060e4 <HAL_GPIO_Init+0x34c>)
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	089b      	lsrs	r3, r3, #2
 8006008:	3302      	adds	r3, #2
 800600a:	69ba      	ldr	r2, [r7, #24]
 800600c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006010:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	43db      	mvns	r3, r3
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	4013      	ands	r3, r2
 8006020:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	4313      	orrs	r3, r2
 8006034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006036:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800603e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	43db      	mvns	r3, r3
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	4013      	ands	r3, r2
 800604e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d003      	beq.n	8006064 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	4313      	orrs	r3, r2
 8006062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006064:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	43db      	mvns	r3, r3
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	4013      	ands	r3, r2
 800607a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	4313      	orrs	r3, r2
 800608e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	43db      	mvns	r3, r3
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	4013      	ands	r3, r2
 80060a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	3301      	adds	r3, #1
 80060c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	fa22 f303 	lsr.w	r3, r2, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f47f ae6b 	bne.w	8005dac <HAL_GPIO_Init+0x14>
  }
}
 80060d6:	bf00      	nop
 80060d8:	bf00      	nop
 80060da:	3724      	adds	r7, #36	@ 0x24
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	58000400 	.word	0x58000400

080060e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	460b      	mov	r3, r1
 80060f2:	807b      	strh	r3, [r7, #2]
 80060f4:	4613      	mov	r3, r2
 80060f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80060f8:	787b      	ldrb	r3, [r7, #1]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060fe:	887a      	ldrh	r2, [r7, #2]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006104:	e003      	b.n	800610e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006106:	887b      	ldrh	r3, [r7, #2]
 8006108:	041a      	lsls	r2, r3, #16
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	619a      	str	r2, [r3, #24]
}
 800610e:	bf00      	nop
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
	...

0800611c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006124:	4b19      	ldr	r3, [pc, #100]	@ (800618c <HAL_PWREx_ConfigSupply+0x70>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b04      	cmp	r3, #4
 800612e:	d00a      	beq.n	8006146 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006130:	4b16      	ldr	r3, [pc, #88]	@ (800618c <HAL_PWREx_ConfigSupply+0x70>)
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	429a      	cmp	r2, r3
 800613c:	d001      	beq.n	8006142 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e01f      	b.n	8006182 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006142:	2300      	movs	r3, #0
 8006144:	e01d      	b.n	8006182 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006146:	4b11      	ldr	r3, [pc, #68]	@ (800618c <HAL_PWREx_ConfigSupply+0x70>)
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f023 0207 	bic.w	r2, r3, #7
 800614e:	490f      	ldr	r1, [pc, #60]	@ (800618c <HAL_PWREx_ConfigSupply+0x70>)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4313      	orrs	r3, r2
 8006154:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006156:	f7fb f811 	bl	800117c <HAL_GetTick>
 800615a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800615c:	e009      	b.n	8006172 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800615e:	f7fb f80d 	bl	800117c <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800616c:	d901      	bls.n	8006172 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e007      	b.n	8006182 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006172:	4b06      	ldr	r3, [pc, #24]	@ (800618c <HAL_PWREx_ConfigSupply+0x70>)
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800617a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800617e:	d1ee      	bne.n	800615e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	58024800 	.word	0x58024800

08006190 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08c      	sub	sp, #48	@ 0x30
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e3c8      	b.n	8006934 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f000 8087 	beq.w	80062be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061b0:	4b88      	ldr	r3, [pc, #544]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061ba:	4b86      	ldr	r3, [pc, #536]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 80061bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061be:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80061c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c2:	2b10      	cmp	r3, #16
 80061c4:	d007      	beq.n	80061d6 <HAL_RCC_OscConfig+0x46>
 80061c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c8:	2b18      	cmp	r3, #24
 80061ca:	d110      	bne.n	80061ee <HAL_RCC_OscConfig+0x5e>
 80061cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d10b      	bne.n	80061ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061d6:	4b7f      	ldr	r3, [pc, #508]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d06c      	beq.n	80062bc <HAL_RCC_OscConfig+0x12c>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d168      	bne.n	80062bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e3a2      	b.n	8006934 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061f6:	d106      	bne.n	8006206 <HAL_RCC_OscConfig+0x76>
 80061f8:	4b76      	ldr	r3, [pc, #472]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a75      	ldr	r2, [pc, #468]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 80061fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	e02e      	b.n	8006264 <HAL_RCC_OscConfig+0xd4>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10c      	bne.n	8006228 <HAL_RCC_OscConfig+0x98>
 800620e:	4b71      	ldr	r3, [pc, #452]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a70      	ldr	r2, [pc, #448]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 8006214:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	4b6e      	ldr	r3, [pc, #440]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a6d      	ldr	r2, [pc, #436]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 8006220:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	e01d      	b.n	8006264 <HAL_RCC_OscConfig+0xd4>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006230:	d10c      	bne.n	800624c <HAL_RCC_OscConfig+0xbc>
 8006232:	4b68      	ldr	r3, [pc, #416]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a67      	ldr	r2, [pc, #412]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 8006238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	4b65      	ldr	r3, [pc, #404]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a64      	ldr	r2, [pc, #400]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 8006244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	e00b      	b.n	8006264 <HAL_RCC_OscConfig+0xd4>
 800624c:	4b61      	ldr	r3, [pc, #388]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a60      	ldr	r2, [pc, #384]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 8006252:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	4b5e      	ldr	r3, [pc, #376]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a5d      	ldr	r2, [pc, #372]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 800625e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d013      	beq.n	8006294 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800626c:	f7fa ff86 	bl	800117c <HAL_GetTick>
 8006270:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006272:	e008      	b.n	8006286 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006274:	f7fa ff82 	bl	800117c <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b64      	cmp	r3, #100	@ 0x64
 8006280:	d901      	bls.n	8006286 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e356      	b.n	8006934 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006286:	4b53      	ldr	r3, [pc, #332]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d0f0      	beq.n	8006274 <HAL_RCC_OscConfig+0xe4>
 8006292:	e014      	b.n	80062be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006294:	f7fa ff72 	bl	800117c <HAL_GetTick>
 8006298:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800629a:	e008      	b.n	80062ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800629c:	f7fa ff6e 	bl	800117c <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b64      	cmp	r3, #100	@ 0x64
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e342      	b.n	8006934 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062ae:	4b49      	ldr	r3, [pc, #292]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1f0      	bne.n	800629c <HAL_RCC_OscConfig+0x10c>
 80062ba:	e000      	b.n	80062be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 808c 	beq.w	80063e4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062cc:	4b41      	ldr	r3, [pc, #260]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062d6:	4b3f      	ldr	r3, [pc, #252]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 80062d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062da:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d007      	beq.n	80062f2 <HAL_RCC_OscConfig+0x162>
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	2b18      	cmp	r3, #24
 80062e6:	d137      	bne.n	8006358 <HAL_RCC_OscConfig+0x1c8>
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	f003 0303 	and.w	r3, r3, #3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d132      	bne.n	8006358 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062f2:	4b38      	ldr	r3, [pc, #224]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0304 	and.w	r3, r3, #4
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d005      	beq.n	800630a <HAL_RCC_OscConfig+0x17a>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e314      	b.n	8006934 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800630a:	4b32      	ldr	r3, [pc, #200]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f023 0219 	bic.w	r2, r3, #25
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	492f      	ldr	r1, [pc, #188]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 8006318:	4313      	orrs	r3, r2
 800631a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800631c:	f7fa ff2e 	bl	800117c <HAL_GetTick>
 8006320:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006322:	e008      	b.n	8006336 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006324:	f7fa ff2a 	bl	800117c <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b02      	cmp	r3, #2
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e2fe      	b.n	8006934 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006336:	4b27      	ldr	r3, [pc, #156]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0304 	and.w	r3, r3, #4
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0f0      	beq.n	8006324 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006342:	4b24      	ldr	r3, [pc, #144]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	061b      	lsls	r3, r3, #24
 8006350:	4920      	ldr	r1, [pc, #128]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 8006352:	4313      	orrs	r3, r2
 8006354:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006356:	e045      	b.n	80063e4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d026      	beq.n	80063ae <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006360:	4b1c      	ldr	r3, [pc, #112]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f023 0219 	bic.w	r2, r3, #25
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	4919      	ldr	r1, [pc, #100]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 800636e:	4313      	orrs	r3, r2
 8006370:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006372:	f7fa ff03 	bl	800117c <HAL_GetTick>
 8006376:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006378:	e008      	b.n	800638c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800637a:	f7fa feff 	bl	800117c <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	2b02      	cmp	r3, #2
 8006386:	d901      	bls.n	800638c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e2d3      	b.n	8006934 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800638c:	4b11      	ldr	r3, [pc, #68]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b00      	cmp	r3, #0
 8006396:	d0f0      	beq.n	800637a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006398:	4b0e      	ldr	r3, [pc, #56]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	061b      	lsls	r3, r3, #24
 80063a6:	490b      	ldr	r1, [pc, #44]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	604b      	str	r3, [r1, #4]
 80063ac:	e01a      	b.n	80063e4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063ae:	4b09      	ldr	r3, [pc, #36]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a08      	ldr	r2, [pc, #32]	@ (80063d4 <HAL_RCC_OscConfig+0x244>)
 80063b4:	f023 0301 	bic.w	r3, r3, #1
 80063b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ba:	f7fa fedf 	bl	800117c <HAL_GetTick>
 80063be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80063c0:	e00a      	b.n	80063d8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063c2:	f7fa fedb 	bl	800117c <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d903      	bls.n	80063d8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e2af      	b.n	8006934 <HAL_RCC_OscConfig+0x7a4>
 80063d4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80063d8:	4b96      	ldr	r3, [pc, #600]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1ee      	bne.n	80063c2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0310 	and.w	r3, r3, #16
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d06a      	beq.n	80064c6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063f0:	4b90      	ldr	r3, [pc, #576]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063f8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063fa:	4b8e      	ldr	r3, [pc, #568]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 80063fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063fe:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	2b08      	cmp	r3, #8
 8006404:	d007      	beq.n	8006416 <HAL_RCC_OscConfig+0x286>
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	2b18      	cmp	r3, #24
 800640a:	d11b      	bne.n	8006444 <HAL_RCC_OscConfig+0x2b4>
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f003 0303 	and.w	r3, r3, #3
 8006412:	2b01      	cmp	r3, #1
 8006414:	d116      	bne.n	8006444 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006416:	4b87      	ldr	r3, [pc, #540]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800641e:	2b00      	cmp	r3, #0
 8006420:	d005      	beq.n	800642e <HAL_RCC_OscConfig+0x29e>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	2b80      	cmp	r3, #128	@ 0x80
 8006428:	d001      	beq.n	800642e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e282      	b.n	8006934 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800642e:	4b81      	ldr	r3, [pc, #516]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	061b      	lsls	r3, r3, #24
 800643c:	497d      	ldr	r1, [pc, #500]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 800643e:	4313      	orrs	r3, r2
 8006440:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006442:	e040      	b.n	80064c6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d023      	beq.n	8006494 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800644c:	4b79      	ldr	r3, [pc, #484]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a78      	ldr	r2, [pc, #480]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 8006452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006458:	f7fa fe90 	bl	800117c <HAL_GetTick>
 800645c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800645e:	e008      	b.n	8006472 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006460:	f7fa fe8c 	bl	800117c <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b02      	cmp	r3, #2
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e260      	b.n	8006934 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006472:	4b70      	ldr	r3, [pc, #448]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0f0      	beq.n	8006460 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800647e:	4b6d      	ldr	r3, [pc, #436]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	061b      	lsls	r3, r3, #24
 800648c:	4969      	ldr	r1, [pc, #420]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 800648e:	4313      	orrs	r3, r2
 8006490:	60cb      	str	r3, [r1, #12]
 8006492:	e018      	b.n	80064c6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006494:	4b67      	ldr	r3, [pc, #412]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a66      	ldr	r2, [pc, #408]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 800649a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800649e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a0:	f7fa fe6c 	bl	800117c <HAL_GetTick>
 80064a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064a6:	e008      	b.n	80064ba <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80064a8:	f7fa fe68 	bl	800117c <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e23c      	b.n	8006934 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064ba:	4b5e      	ldr	r3, [pc, #376]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1f0      	bne.n	80064a8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0308 	and.w	r3, r3, #8
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d036      	beq.n	8006540 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d019      	beq.n	800650e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064da:	4b56      	ldr	r3, [pc, #344]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 80064dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064de:	4a55      	ldr	r2, [pc, #340]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 80064e0:	f043 0301 	orr.w	r3, r3, #1
 80064e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064e6:	f7fa fe49 	bl	800117c <HAL_GetTick>
 80064ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80064ec:	e008      	b.n	8006500 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064ee:	f7fa fe45 	bl	800117c <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d901      	bls.n	8006500 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e219      	b.n	8006934 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006500:	4b4c      	ldr	r3, [pc, #304]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 8006502:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b00      	cmp	r3, #0
 800650a:	d0f0      	beq.n	80064ee <HAL_RCC_OscConfig+0x35e>
 800650c:	e018      	b.n	8006540 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800650e:	4b49      	ldr	r3, [pc, #292]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 8006510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006512:	4a48      	ldr	r2, [pc, #288]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 8006514:	f023 0301 	bic.w	r3, r3, #1
 8006518:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800651a:	f7fa fe2f 	bl	800117c <HAL_GetTick>
 800651e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006520:	e008      	b.n	8006534 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006522:	f7fa fe2b 	bl	800117c <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d901      	bls.n	8006534 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e1ff      	b.n	8006934 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006534:	4b3f      	ldr	r3, [pc, #252]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 8006536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006538:	f003 0302 	and.w	r3, r3, #2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1f0      	bne.n	8006522 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0320 	and.w	r3, r3, #32
 8006548:	2b00      	cmp	r3, #0
 800654a:	d036      	beq.n	80065ba <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d019      	beq.n	8006588 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006554:	4b37      	ldr	r3, [pc, #220]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a36      	ldr	r2, [pc, #216]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 800655a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800655e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006560:	f7fa fe0c 	bl	800117c <HAL_GetTick>
 8006564:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006566:	e008      	b.n	800657a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006568:	f7fa fe08 	bl	800117c <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	2b02      	cmp	r3, #2
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e1dc      	b.n	8006934 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800657a:	4b2e      	ldr	r3, [pc, #184]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d0f0      	beq.n	8006568 <HAL_RCC_OscConfig+0x3d8>
 8006586:	e018      	b.n	80065ba <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006588:	4b2a      	ldr	r3, [pc, #168]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a29      	ldr	r2, [pc, #164]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 800658e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006592:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006594:	f7fa fdf2 	bl	800117c <HAL_GetTick>
 8006598:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800659c:	f7fa fdee 	bl	800117c <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e1c2      	b.n	8006934 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065ae:	4b21      	ldr	r3, [pc, #132]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1f0      	bne.n	800659c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0304 	and.w	r3, r3, #4
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 8086 	beq.w	80066d4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80065c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006638 <HAL_RCC_OscConfig+0x4a8>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a1a      	ldr	r2, [pc, #104]	@ (8006638 <HAL_RCC_OscConfig+0x4a8>)
 80065ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065d4:	f7fa fdd2 	bl	800117c <HAL_GetTick>
 80065d8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065da:	e008      	b.n	80065ee <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065dc:	f7fa fdce 	bl	800117c <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b64      	cmp	r3, #100	@ 0x64
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e1a2      	b.n	8006934 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065ee:	4b12      	ldr	r3, [pc, #72]	@ (8006638 <HAL_RCC_OscConfig+0x4a8>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0f0      	beq.n	80065dc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d106      	bne.n	8006610 <HAL_RCC_OscConfig+0x480>
 8006602:	4b0c      	ldr	r3, [pc, #48]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 8006604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006606:	4a0b      	ldr	r2, [pc, #44]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 8006608:	f043 0301 	orr.w	r3, r3, #1
 800660c:	6713      	str	r3, [r2, #112]	@ 0x70
 800660e:	e032      	b.n	8006676 <HAL_RCC_OscConfig+0x4e6>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d111      	bne.n	800663c <HAL_RCC_OscConfig+0x4ac>
 8006618:	4b06      	ldr	r3, [pc, #24]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 800661a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800661c:	4a05      	ldr	r2, [pc, #20]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 800661e:	f023 0301 	bic.w	r3, r3, #1
 8006622:	6713      	str	r3, [r2, #112]	@ 0x70
 8006624:	4b03      	ldr	r3, [pc, #12]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 8006626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006628:	4a02      	ldr	r2, [pc, #8]	@ (8006634 <HAL_RCC_OscConfig+0x4a4>)
 800662a:	f023 0304 	bic.w	r3, r3, #4
 800662e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006630:	e021      	b.n	8006676 <HAL_RCC_OscConfig+0x4e6>
 8006632:	bf00      	nop
 8006634:	58024400 	.word	0x58024400
 8006638:	58024800 	.word	0x58024800
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	2b05      	cmp	r3, #5
 8006642:	d10c      	bne.n	800665e <HAL_RCC_OscConfig+0x4ce>
 8006644:	4b83      	ldr	r3, [pc, #524]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 8006646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006648:	4a82      	ldr	r2, [pc, #520]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 800664a:	f043 0304 	orr.w	r3, r3, #4
 800664e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006650:	4b80      	ldr	r3, [pc, #512]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 8006652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006654:	4a7f      	ldr	r2, [pc, #508]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 8006656:	f043 0301 	orr.w	r3, r3, #1
 800665a:	6713      	str	r3, [r2, #112]	@ 0x70
 800665c:	e00b      	b.n	8006676 <HAL_RCC_OscConfig+0x4e6>
 800665e:	4b7d      	ldr	r3, [pc, #500]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 8006660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006662:	4a7c      	ldr	r2, [pc, #496]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 8006664:	f023 0301 	bic.w	r3, r3, #1
 8006668:	6713      	str	r3, [r2, #112]	@ 0x70
 800666a:	4b7a      	ldr	r3, [pc, #488]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 800666c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800666e:	4a79      	ldr	r2, [pc, #484]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 8006670:	f023 0304 	bic.w	r3, r3, #4
 8006674:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d015      	beq.n	80066aa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800667e:	f7fa fd7d 	bl	800117c <HAL_GetTick>
 8006682:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006684:	e00a      	b.n	800669c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006686:	f7fa fd79 	bl	800117c <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006694:	4293      	cmp	r3, r2
 8006696:	d901      	bls.n	800669c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e14b      	b.n	8006934 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800669c:	4b6d      	ldr	r3, [pc, #436]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 800669e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0ee      	beq.n	8006686 <HAL_RCC_OscConfig+0x4f6>
 80066a8:	e014      	b.n	80066d4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066aa:	f7fa fd67 	bl	800117c <HAL_GetTick>
 80066ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066b0:	e00a      	b.n	80066c8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066b2:	f7fa fd63 	bl	800117c <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d901      	bls.n	80066c8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e135      	b.n	8006934 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066c8:	4b62      	ldr	r3, [pc, #392]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 80066ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1ee      	bne.n	80066b2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 812a 	beq.w	8006932 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80066de:	4b5d      	ldr	r3, [pc, #372]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066e6:	2b18      	cmp	r3, #24
 80066e8:	f000 80ba 	beq.w	8006860 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	f040 8095 	bne.w	8006820 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066f6:	4b57      	ldr	r3, [pc, #348]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a56      	ldr	r2, [pc, #344]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 80066fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006702:	f7fa fd3b 	bl	800117c <HAL_GetTick>
 8006706:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006708:	e008      	b.n	800671c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800670a:	f7fa fd37 	bl	800117c <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e10b      	b.n	8006934 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800671c:	4b4d      	ldr	r3, [pc, #308]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1f0      	bne.n	800670a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006728:	4b4a      	ldr	r3, [pc, #296]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 800672a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800672c:	4b4a      	ldr	r3, [pc, #296]	@ (8006858 <HAL_RCC_OscConfig+0x6c8>)
 800672e:	4013      	ands	r3, r2
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006738:	0112      	lsls	r2, r2, #4
 800673a:	430a      	orrs	r2, r1
 800673c:	4945      	ldr	r1, [pc, #276]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 800673e:	4313      	orrs	r3, r2
 8006740:	628b      	str	r3, [r1, #40]	@ 0x28
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006746:	3b01      	subs	r3, #1
 8006748:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006750:	3b01      	subs	r3, #1
 8006752:	025b      	lsls	r3, r3, #9
 8006754:	b29b      	uxth	r3, r3
 8006756:	431a      	orrs	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800675c:	3b01      	subs	r3, #1
 800675e:	041b      	lsls	r3, r3, #16
 8006760:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006764:	431a      	orrs	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800676a:	3b01      	subs	r3, #1
 800676c:	061b      	lsls	r3, r3, #24
 800676e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006772:	4938      	ldr	r1, [pc, #224]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 8006774:	4313      	orrs	r3, r2
 8006776:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006778:	4b36      	ldr	r3, [pc, #216]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 800677a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677c:	4a35      	ldr	r2, [pc, #212]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 800677e:	f023 0301 	bic.w	r3, r3, #1
 8006782:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006784:	4b33      	ldr	r3, [pc, #204]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 8006786:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006788:	4b34      	ldr	r3, [pc, #208]	@ (800685c <HAL_RCC_OscConfig+0x6cc>)
 800678a:	4013      	ands	r3, r2
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006790:	00d2      	lsls	r2, r2, #3
 8006792:	4930      	ldr	r1, [pc, #192]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 8006794:	4313      	orrs	r3, r2
 8006796:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006798:	4b2e      	ldr	r3, [pc, #184]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 800679a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679c:	f023 020c 	bic.w	r2, r3, #12
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a4:	492b      	ldr	r1, [pc, #172]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80067aa:	4b2a      	ldr	r3, [pc, #168]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 80067ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ae:	f023 0202 	bic.w	r2, r3, #2
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067b6:	4927      	ldr	r1, [pc, #156]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067bc:	4b25      	ldr	r3, [pc, #148]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 80067be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c0:	4a24      	ldr	r2, [pc, #144]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 80067c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067c8:	4b22      	ldr	r3, [pc, #136]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 80067ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067cc:	4a21      	ldr	r2, [pc, #132]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 80067ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80067d4:	4b1f      	ldr	r3, [pc, #124]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 80067d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d8:	4a1e      	ldr	r2, [pc, #120]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 80067da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80067e0:	4b1c      	ldr	r3, [pc, #112]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 80067e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 80067e6:	f043 0301 	orr.w	r3, r3, #1
 80067ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067ec:	4b19      	ldr	r3, [pc, #100]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a18      	ldr	r2, [pc, #96]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 80067f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f8:	f7fa fcc0 	bl	800117c <HAL_GetTick>
 80067fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80067fe:	e008      	b.n	8006812 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006800:	f7fa fcbc 	bl	800117c <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	2b02      	cmp	r3, #2
 800680c:	d901      	bls.n	8006812 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e090      	b.n	8006934 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006812:	4b10      	ldr	r3, [pc, #64]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0f0      	beq.n	8006800 <HAL_RCC_OscConfig+0x670>
 800681e:	e088      	b.n	8006932 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006820:	4b0c      	ldr	r3, [pc, #48]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a0b      	ldr	r2, [pc, #44]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 8006826:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800682a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800682c:	f7fa fca6 	bl	800117c <HAL_GetTick>
 8006830:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006832:	e008      	b.n	8006846 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006834:	f7fa fca2 	bl	800117c <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	2b02      	cmp	r3, #2
 8006840:	d901      	bls.n	8006846 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e076      	b.n	8006934 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006846:	4b03      	ldr	r3, [pc, #12]	@ (8006854 <HAL_RCC_OscConfig+0x6c4>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1f0      	bne.n	8006834 <HAL_RCC_OscConfig+0x6a4>
 8006852:	e06e      	b.n	8006932 <HAL_RCC_OscConfig+0x7a2>
 8006854:	58024400 	.word	0x58024400
 8006858:	fffffc0c 	.word	0xfffffc0c
 800685c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006860:	4b36      	ldr	r3, [pc, #216]	@ (800693c <HAL_RCC_OscConfig+0x7ac>)
 8006862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006864:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006866:	4b35      	ldr	r3, [pc, #212]	@ (800693c <HAL_RCC_OscConfig+0x7ac>)
 8006868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800686a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006870:	2b01      	cmp	r3, #1
 8006872:	d031      	beq.n	80068d8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f003 0203 	and.w	r2, r3, #3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800687e:	429a      	cmp	r2, r3
 8006880:	d12a      	bne.n	80068d8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	091b      	lsrs	r3, r3, #4
 8006886:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800688e:	429a      	cmp	r2, r3
 8006890:	d122      	bne.n	80068d8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800689e:	429a      	cmp	r2, r3
 80068a0:	d11a      	bne.n	80068d8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	0a5b      	lsrs	r3, r3, #9
 80068a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d111      	bne.n	80068d8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	0c1b      	lsrs	r3, r3, #16
 80068b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d108      	bne.n	80068d8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	0e1b      	lsrs	r3, r3, #24
 80068ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d001      	beq.n	80068dc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e02b      	b.n	8006934 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80068dc:	4b17      	ldr	r3, [pc, #92]	@ (800693c <HAL_RCC_OscConfig+0x7ac>)
 80068de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068e0:	08db      	lsrs	r3, r3, #3
 80068e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068e6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d01f      	beq.n	8006932 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80068f2:	4b12      	ldr	r3, [pc, #72]	@ (800693c <HAL_RCC_OscConfig+0x7ac>)
 80068f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f6:	4a11      	ldr	r2, [pc, #68]	@ (800693c <HAL_RCC_OscConfig+0x7ac>)
 80068f8:	f023 0301 	bic.w	r3, r3, #1
 80068fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80068fe:	f7fa fc3d 	bl	800117c <HAL_GetTick>
 8006902:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006904:	bf00      	nop
 8006906:	f7fa fc39 	bl	800117c <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690e:	4293      	cmp	r3, r2
 8006910:	d0f9      	beq.n	8006906 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006912:	4b0a      	ldr	r3, [pc, #40]	@ (800693c <HAL_RCC_OscConfig+0x7ac>)
 8006914:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006916:	4b0a      	ldr	r3, [pc, #40]	@ (8006940 <HAL_RCC_OscConfig+0x7b0>)
 8006918:	4013      	ands	r3, r2
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800691e:	00d2      	lsls	r2, r2, #3
 8006920:	4906      	ldr	r1, [pc, #24]	@ (800693c <HAL_RCC_OscConfig+0x7ac>)
 8006922:	4313      	orrs	r3, r2
 8006924:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006926:	4b05      	ldr	r3, [pc, #20]	@ (800693c <HAL_RCC_OscConfig+0x7ac>)
 8006928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692a:	4a04      	ldr	r2, [pc, #16]	@ (800693c <HAL_RCC_OscConfig+0x7ac>)
 800692c:	f043 0301 	orr.w	r3, r3, #1
 8006930:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3730      	adds	r7, #48	@ 0x30
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	58024400 	.word	0x58024400
 8006940:	ffff0007 	.word	0xffff0007

08006944 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e19c      	b.n	8006c92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006958:	4b8a      	ldr	r3, [pc, #552]	@ (8006b84 <HAL_RCC_ClockConfig+0x240>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 030f 	and.w	r3, r3, #15
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	429a      	cmp	r2, r3
 8006964:	d910      	bls.n	8006988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006966:	4b87      	ldr	r3, [pc, #540]	@ (8006b84 <HAL_RCC_ClockConfig+0x240>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f023 020f 	bic.w	r2, r3, #15
 800696e:	4985      	ldr	r1, [pc, #532]	@ (8006b84 <HAL_RCC_ClockConfig+0x240>)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	4313      	orrs	r3, r2
 8006974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006976:	4b83      	ldr	r3, [pc, #524]	@ (8006b84 <HAL_RCC_ClockConfig+0x240>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 030f 	and.w	r3, r3, #15
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	429a      	cmp	r2, r3
 8006982:	d001      	beq.n	8006988 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e184      	b.n	8006c92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0304 	and.w	r3, r3, #4
 8006990:	2b00      	cmp	r3, #0
 8006992:	d010      	beq.n	80069b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	691a      	ldr	r2, [r3, #16]
 8006998:	4b7b      	ldr	r3, [pc, #492]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d908      	bls.n	80069b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069a4:	4b78      	ldr	r3, [pc, #480]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	4975      	ldr	r1, [pc, #468]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0308 	and.w	r3, r3, #8
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d010      	beq.n	80069e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	695a      	ldr	r2, [r3, #20]
 80069c6:	4b70      	ldr	r3, [pc, #448]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d908      	bls.n	80069e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069d2:	4b6d      	ldr	r3, [pc, #436]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	496a      	ldr	r1, [pc, #424]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0310 	and.w	r3, r3, #16
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d010      	beq.n	8006a12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	699a      	ldr	r2, [r3, #24]
 80069f4:	4b64      	ldr	r3, [pc, #400]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d908      	bls.n	8006a12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a00:	4b61      	ldr	r3, [pc, #388]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 8006a02:	69db      	ldr	r3, [r3, #28]
 8006a04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	495e      	ldr	r1, [pc, #376]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d010      	beq.n	8006a40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	69da      	ldr	r2, [r3, #28]
 8006a22:	4b59      	ldr	r3, [pc, #356]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d908      	bls.n	8006a40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006a2e:	4b56      	ldr	r3, [pc, #344]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	4953      	ldr	r1, [pc, #332]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0302 	and.w	r3, r3, #2
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d010      	beq.n	8006a6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	4b4d      	ldr	r3, [pc, #308]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	f003 030f 	and.w	r3, r3, #15
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d908      	bls.n	8006a6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a5c:	4b4a      	ldr	r3, [pc, #296]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	f023 020f 	bic.w	r2, r3, #15
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	4947      	ldr	r1, [pc, #284]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d055      	beq.n	8006b26 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006a7a:	4b43      	ldr	r3, [pc, #268]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	4940      	ldr	r1, [pc, #256]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d107      	bne.n	8006aa4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a94:	4b3c      	ldr	r3, [pc, #240]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d121      	bne.n	8006ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e0f6      	b.n	8006c92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	2b03      	cmp	r3, #3
 8006aaa:	d107      	bne.n	8006abc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006aac:	4b36      	ldr	r3, [pc, #216]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d115      	bne.n	8006ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e0ea      	b.n	8006c92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d107      	bne.n	8006ad4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ac4:	4b30      	ldr	r3, [pc, #192]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d109      	bne.n	8006ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e0de      	b.n	8006c92 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d101      	bne.n	8006ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e0d6      	b.n	8006c92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ae4:	4b28      	ldr	r3, [pc, #160]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	f023 0207 	bic.w	r2, r3, #7
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	4925      	ldr	r1, [pc, #148]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006af6:	f7fa fb41 	bl	800117c <HAL_GetTick>
 8006afa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006afc:	e00a      	b.n	8006b14 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006afe:	f7fa fb3d 	bl	800117c <HAL_GetTick>
 8006b02:	4602      	mov	r2, r0
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d901      	bls.n	8006b14 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e0be      	b.n	8006c92 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b14:	4b1c      	ldr	r3, [pc, #112]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	00db      	lsls	r3, r3, #3
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d1eb      	bne.n	8006afe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d010      	beq.n	8006b54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68da      	ldr	r2, [r3, #12]
 8006b36:	4b14      	ldr	r3, [pc, #80]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	f003 030f 	and.w	r3, r3, #15
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d208      	bcs.n	8006b54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b42:	4b11      	ldr	r3, [pc, #68]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	f023 020f 	bic.w	r2, r3, #15
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	490e      	ldr	r1, [pc, #56]	@ (8006b88 <HAL_RCC_ClockConfig+0x244>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b54:	4b0b      	ldr	r3, [pc, #44]	@ (8006b84 <HAL_RCC_ClockConfig+0x240>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 030f 	and.w	r3, r3, #15
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d214      	bcs.n	8006b8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b62:	4b08      	ldr	r3, [pc, #32]	@ (8006b84 <HAL_RCC_ClockConfig+0x240>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f023 020f 	bic.w	r2, r3, #15
 8006b6a:	4906      	ldr	r1, [pc, #24]	@ (8006b84 <HAL_RCC_ClockConfig+0x240>)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b72:	4b04      	ldr	r3, [pc, #16]	@ (8006b84 <HAL_RCC_ClockConfig+0x240>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 030f 	and.w	r3, r3, #15
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d005      	beq.n	8006b8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e086      	b.n	8006c92 <HAL_RCC_ClockConfig+0x34e>
 8006b84:	52002000 	.word	0x52002000
 8006b88:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0304 	and.w	r3, r3, #4
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d010      	beq.n	8006bba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691a      	ldr	r2, [r3, #16]
 8006b9c:	4b3f      	ldr	r3, [pc, #252]	@ (8006c9c <HAL_RCC_ClockConfig+0x358>)
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d208      	bcs.n	8006bba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ba8:	4b3c      	ldr	r3, [pc, #240]	@ (8006c9c <HAL_RCC_ClockConfig+0x358>)
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	4939      	ldr	r1, [pc, #228]	@ (8006c9c <HAL_RCC_ClockConfig+0x358>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0308 	and.w	r3, r3, #8
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d010      	beq.n	8006be8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	695a      	ldr	r2, [r3, #20]
 8006bca:	4b34      	ldr	r3, [pc, #208]	@ (8006c9c <HAL_RCC_ClockConfig+0x358>)
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d208      	bcs.n	8006be8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006bd6:	4b31      	ldr	r3, [pc, #196]	@ (8006c9c <HAL_RCC_ClockConfig+0x358>)
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	492e      	ldr	r1, [pc, #184]	@ (8006c9c <HAL_RCC_ClockConfig+0x358>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0310 	and.w	r3, r3, #16
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d010      	beq.n	8006c16 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	699a      	ldr	r2, [r3, #24]
 8006bf8:	4b28      	ldr	r3, [pc, #160]	@ (8006c9c <HAL_RCC_ClockConfig+0x358>)
 8006bfa:	69db      	ldr	r3, [r3, #28]
 8006bfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d208      	bcs.n	8006c16 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c04:	4b25      	ldr	r3, [pc, #148]	@ (8006c9c <HAL_RCC_ClockConfig+0x358>)
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	4922      	ldr	r1, [pc, #136]	@ (8006c9c <HAL_RCC_ClockConfig+0x358>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0320 	and.w	r3, r3, #32
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d010      	beq.n	8006c44 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	69da      	ldr	r2, [r3, #28]
 8006c26:	4b1d      	ldr	r3, [pc, #116]	@ (8006c9c <HAL_RCC_ClockConfig+0x358>)
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d208      	bcs.n	8006c44 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006c32:	4b1a      	ldr	r3, [pc, #104]	@ (8006c9c <HAL_RCC_ClockConfig+0x358>)
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	4917      	ldr	r1, [pc, #92]	@ (8006c9c <HAL_RCC_ClockConfig+0x358>)
 8006c40:	4313      	orrs	r3, r2
 8006c42:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c44:	f000 f834 	bl	8006cb0 <HAL_RCC_GetSysClockFreq>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	4b14      	ldr	r3, [pc, #80]	@ (8006c9c <HAL_RCC_ClockConfig+0x358>)
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	0a1b      	lsrs	r3, r3, #8
 8006c50:	f003 030f 	and.w	r3, r3, #15
 8006c54:	4912      	ldr	r1, [pc, #72]	@ (8006ca0 <HAL_RCC_ClockConfig+0x35c>)
 8006c56:	5ccb      	ldrb	r3, [r1, r3]
 8006c58:	f003 031f 	and.w	r3, r3, #31
 8006c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c60:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c62:	4b0e      	ldr	r3, [pc, #56]	@ (8006c9c <HAL_RCC_ClockConfig+0x358>)
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	f003 030f 	and.w	r3, r3, #15
 8006c6a:	4a0d      	ldr	r2, [pc, #52]	@ (8006ca0 <HAL_RCC_ClockConfig+0x35c>)
 8006c6c:	5cd3      	ldrb	r3, [r2, r3]
 8006c6e:	f003 031f 	and.w	r3, r3, #31
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	fa22 f303 	lsr.w	r3, r2, r3
 8006c78:	4a0a      	ldr	r2, [pc, #40]	@ (8006ca4 <HAL_RCC_ClockConfig+0x360>)
 8006c7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8006ca8 <HAL_RCC_ClockConfig+0x364>)
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006c82:	4b0a      	ldr	r3, [pc, #40]	@ (8006cac <HAL_RCC_ClockConfig+0x368>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fa fa2e 	bl	80010e8 <HAL_InitTick>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	58024400 	.word	0x58024400
 8006ca0:	0800a61c 	.word	0x0800a61c
 8006ca4:	24000004 	.word	0x24000004
 8006ca8:	24000000 	.word	0x24000000
 8006cac:	24000008 	.word	0x24000008

08006cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b089      	sub	sp, #36	@ 0x24
 8006cb4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cb6:	4bb3      	ldr	r3, [pc, #716]	@ (8006f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cbe:	2b18      	cmp	r3, #24
 8006cc0:	f200 8155 	bhi.w	8006f6e <HAL_RCC_GetSysClockFreq+0x2be>
 8006cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8006ccc <HAL_RCC_GetSysClockFreq+0x1c>)
 8006cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cca:	bf00      	nop
 8006ccc:	08006d31 	.word	0x08006d31
 8006cd0:	08006f6f 	.word	0x08006f6f
 8006cd4:	08006f6f 	.word	0x08006f6f
 8006cd8:	08006f6f 	.word	0x08006f6f
 8006cdc:	08006f6f 	.word	0x08006f6f
 8006ce0:	08006f6f 	.word	0x08006f6f
 8006ce4:	08006f6f 	.word	0x08006f6f
 8006ce8:	08006f6f 	.word	0x08006f6f
 8006cec:	08006d57 	.word	0x08006d57
 8006cf0:	08006f6f 	.word	0x08006f6f
 8006cf4:	08006f6f 	.word	0x08006f6f
 8006cf8:	08006f6f 	.word	0x08006f6f
 8006cfc:	08006f6f 	.word	0x08006f6f
 8006d00:	08006f6f 	.word	0x08006f6f
 8006d04:	08006f6f 	.word	0x08006f6f
 8006d08:	08006f6f 	.word	0x08006f6f
 8006d0c:	08006d5d 	.word	0x08006d5d
 8006d10:	08006f6f 	.word	0x08006f6f
 8006d14:	08006f6f 	.word	0x08006f6f
 8006d18:	08006f6f 	.word	0x08006f6f
 8006d1c:	08006f6f 	.word	0x08006f6f
 8006d20:	08006f6f 	.word	0x08006f6f
 8006d24:	08006f6f 	.word	0x08006f6f
 8006d28:	08006f6f 	.word	0x08006f6f
 8006d2c:	08006d63 	.word	0x08006d63
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d30:	4b94      	ldr	r3, [pc, #592]	@ (8006f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0320 	and.w	r3, r3, #32
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d009      	beq.n	8006d50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d3c:	4b91      	ldr	r3, [pc, #580]	@ (8006f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	08db      	lsrs	r3, r3, #3
 8006d42:	f003 0303 	and.w	r3, r3, #3
 8006d46:	4a90      	ldr	r2, [pc, #576]	@ (8006f88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d48:	fa22 f303 	lsr.w	r3, r2, r3
 8006d4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006d4e:	e111      	b.n	8006f74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006d50:	4b8d      	ldr	r3, [pc, #564]	@ (8006f88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d52:	61bb      	str	r3, [r7, #24]
      break;
 8006d54:	e10e      	b.n	8006f74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006d56:	4b8d      	ldr	r3, [pc, #564]	@ (8006f8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d58:	61bb      	str	r3, [r7, #24]
      break;
 8006d5a:	e10b      	b.n	8006f74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006d5c:	4b8c      	ldr	r3, [pc, #560]	@ (8006f90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006d5e:	61bb      	str	r3, [r7, #24]
      break;
 8006d60:	e108      	b.n	8006f74 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d62:	4b88      	ldr	r3, [pc, #544]	@ (8006f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d66:	f003 0303 	and.w	r3, r3, #3
 8006d6a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006d6c:	4b85      	ldr	r3, [pc, #532]	@ (8006f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d70:	091b      	lsrs	r3, r3, #4
 8006d72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d76:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006d78:	4b82      	ldr	r3, [pc, #520]	@ (8006f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006d82:	4b80      	ldr	r3, [pc, #512]	@ (8006f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d86:	08db      	lsrs	r3, r3, #3
 8006d88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	fb02 f303 	mul.w	r3, r2, r3
 8006d92:	ee07 3a90 	vmov	s15, r3
 8006d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d9a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 80e1 	beq.w	8006f68 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	f000 8083 	beq.w	8006eb4 <HAL_RCC_GetSysClockFreq+0x204>
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	f200 80a1 	bhi.w	8006ef8 <HAL_RCC_GetSysClockFreq+0x248>
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <HAL_RCC_GetSysClockFreq+0x114>
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d056      	beq.n	8006e70 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006dc2:	e099      	b.n	8006ef8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dc4:	4b6f      	ldr	r3, [pc, #444]	@ (8006f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0320 	and.w	r3, r3, #32
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d02d      	beq.n	8006e2c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dd0:	4b6c      	ldr	r3, [pc, #432]	@ (8006f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	08db      	lsrs	r3, r3, #3
 8006dd6:	f003 0303 	and.w	r3, r3, #3
 8006dda:	4a6b      	ldr	r2, [pc, #428]	@ (8006f88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8006de0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	ee07 3a90 	vmov	s15, r3
 8006de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dfa:	4b62      	ldr	r3, [pc, #392]	@ (8006f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e02:	ee07 3a90 	vmov	s15, r3
 8006e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e0e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e26:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006e2a:	e087      	b.n	8006f3c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	ee07 3a90 	vmov	s15, r3
 8006e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e36:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006f98 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e3e:	4b51      	ldr	r3, [pc, #324]	@ (8006f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e46:	ee07 3a90 	vmov	s15, r3
 8006e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e52:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e6e:	e065      	b.n	8006f3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	ee07 3a90 	vmov	s15, r3
 8006e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006f9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e82:	4b40      	ldr	r3, [pc, #256]	@ (8006f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e8a:	ee07 3a90 	vmov	s15, r3
 8006e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e92:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e96:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ea2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006eb2:	e043      	b.n	8006f3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	ee07 3a90 	vmov	s15, r3
 8006eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ebe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006fa0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ec6:	4b2f      	ldr	r3, [pc, #188]	@ (8006f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ece:	ee07 3a90 	vmov	s15, r3
 8006ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ed6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006eda:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006ef6:	e021      	b.n	8006f3c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	ee07 3a90 	vmov	s15, r3
 8006efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f02:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006f9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8006f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f12:	ee07 3a90 	vmov	s15, r3
 8006f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f1e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f3a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006f3c:	4b11      	ldr	r3, [pc, #68]	@ (8006f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f40:	0a5b      	lsrs	r3, r3, #9
 8006f42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f46:	3301      	adds	r3, #1
 8006f48:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	ee07 3a90 	vmov	s15, r3
 8006f50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f54:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f60:	ee17 3a90 	vmov	r3, s15
 8006f64:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006f66:	e005      	b.n	8006f74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	61bb      	str	r3, [r7, #24]
      break;
 8006f6c:	e002      	b.n	8006f74 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006f6e:	4b07      	ldr	r3, [pc, #28]	@ (8006f8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f70:	61bb      	str	r3, [r7, #24]
      break;
 8006f72:	bf00      	nop
  }

  return sysclockfreq;
 8006f74:	69bb      	ldr	r3, [r7, #24]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3724      	adds	r7, #36	@ 0x24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	58024400 	.word	0x58024400
 8006f88:	03d09000 	.word	0x03d09000
 8006f8c:	003d0900 	.word	0x003d0900
 8006f90:	017d7840 	.word	0x017d7840
 8006f94:	46000000 	.word	0x46000000
 8006f98:	4c742400 	.word	0x4c742400
 8006f9c:	4a742400 	.word	0x4a742400
 8006fa0:	4bbebc20 	.word	0x4bbebc20

08006fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006faa:	f7ff fe81 	bl	8006cb0 <HAL_RCC_GetSysClockFreq>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	4b10      	ldr	r3, [pc, #64]	@ (8006ff4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	0a1b      	lsrs	r3, r3, #8
 8006fb6:	f003 030f 	and.w	r3, r3, #15
 8006fba:	490f      	ldr	r1, [pc, #60]	@ (8006ff8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006fbc:	5ccb      	ldrb	r3, [r1, r3]
 8006fbe:	f003 031f 	and.w	r3, r3, #31
 8006fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8006ff4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	f003 030f 	and.w	r3, r3, #15
 8006fd0:	4a09      	ldr	r2, [pc, #36]	@ (8006ff8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006fd2:	5cd3      	ldrb	r3, [r2, r3]
 8006fd4:	f003 031f 	and.w	r3, r3, #31
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	fa22 f303 	lsr.w	r3, r2, r3
 8006fde:	4a07      	ldr	r2, [pc, #28]	@ (8006ffc <HAL_RCC_GetHCLKFreq+0x58>)
 8006fe0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006fe2:	4a07      	ldr	r2, [pc, #28]	@ (8007000 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006fe8:	4b04      	ldr	r3, [pc, #16]	@ (8006ffc <HAL_RCC_GetHCLKFreq+0x58>)
 8006fea:	681b      	ldr	r3, [r3, #0]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	58024400 	.word	0x58024400
 8006ff8:	0800a61c 	.word	0x0800a61c
 8006ffc:	24000004 	.word	0x24000004
 8007000:	24000000 	.word	0x24000000

08007004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007008:	f7ff ffcc 	bl	8006fa4 <HAL_RCC_GetHCLKFreq>
 800700c:	4602      	mov	r2, r0
 800700e:	4b06      	ldr	r3, [pc, #24]	@ (8007028 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	091b      	lsrs	r3, r3, #4
 8007014:	f003 0307 	and.w	r3, r3, #7
 8007018:	4904      	ldr	r1, [pc, #16]	@ (800702c <HAL_RCC_GetPCLK1Freq+0x28>)
 800701a:	5ccb      	ldrb	r3, [r1, r3]
 800701c:	f003 031f 	and.w	r3, r3, #31
 8007020:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007024:	4618      	mov	r0, r3
 8007026:	bd80      	pop	{r7, pc}
 8007028:	58024400 	.word	0x58024400
 800702c:	0800a61c 	.word	0x0800a61c

08007030 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007034:	b0c6      	sub	sp, #280	@ 0x118
 8007036:	af00      	add	r7, sp, #0
 8007038:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800703c:	2300      	movs	r3, #0
 800703e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007042:	2300      	movs	r3, #0
 8007044:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800704c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007050:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007054:	2500      	movs	r5, #0
 8007056:	ea54 0305 	orrs.w	r3, r4, r5
 800705a:	d049      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800705c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007060:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007062:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007066:	d02f      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007068:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800706c:	d828      	bhi.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800706e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007072:	d01a      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007074:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007078:	d822      	bhi.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800707e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007082:	d007      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007084:	e01c      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007086:	4bab      	ldr	r3, [pc, #684]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708a:	4aaa      	ldr	r2, [pc, #680]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800708c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007090:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007092:	e01a      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007098:	3308      	adds	r3, #8
 800709a:	2102      	movs	r1, #2
 800709c:	4618      	mov	r0, r3
 800709e:	f002 fa49 	bl	8009534 <RCCEx_PLL2_Config>
 80070a2:	4603      	mov	r3, r0
 80070a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80070a8:	e00f      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ae:	3328      	adds	r3, #40	@ 0x28
 80070b0:	2102      	movs	r1, #2
 80070b2:	4618      	mov	r0, r3
 80070b4:	f002 faf0 	bl	8009698 <RCCEx_PLL3_Config>
 80070b8:	4603      	mov	r3, r0
 80070ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80070be:	e004      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80070c6:	e000      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80070c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10a      	bne.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80070d2:	4b98      	ldr	r3, [pc, #608]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80070d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070d6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80070da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070e0:	4a94      	ldr	r2, [pc, #592]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80070e2:	430b      	orrs	r3, r1
 80070e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80070e6:	e003      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80070f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80070fc:	f04f 0900 	mov.w	r9, #0
 8007100:	ea58 0309 	orrs.w	r3, r8, r9
 8007104:	d047      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800710a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800710c:	2b04      	cmp	r3, #4
 800710e:	d82a      	bhi.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007110:	a201      	add	r2, pc, #4	@ (adr r2, 8007118 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007116:	bf00      	nop
 8007118:	0800712d 	.word	0x0800712d
 800711c:	0800713b 	.word	0x0800713b
 8007120:	08007151 	.word	0x08007151
 8007124:	0800716f 	.word	0x0800716f
 8007128:	0800716f 	.word	0x0800716f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800712c:	4b81      	ldr	r3, [pc, #516]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800712e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007130:	4a80      	ldr	r2, [pc, #512]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007136:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007138:	e01a      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800713a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800713e:	3308      	adds	r3, #8
 8007140:	2100      	movs	r1, #0
 8007142:	4618      	mov	r0, r3
 8007144:	f002 f9f6 	bl	8009534 <RCCEx_PLL2_Config>
 8007148:	4603      	mov	r3, r0
 800714a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800714e:	e00f      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007154:	3328      	adds	r3, #40	@ 0x28
 8007156:	2100      	movs	r1, #0
 8007158:	4618      	mov	r0, r3
 800715a:	f002 fa9d 	bl	8009698 <RCCEx_PLL3_Config>
 800715e:	4603      	mov	r3, r0
 8007160:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007164:	e004      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800716c:	e000      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800716e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007170:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10a      	bne.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007178:	4b6e      	ldr	r3, [pc, #440]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800717a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800717c:	f023 0107 	bic.w	r1, r3, #7
 8007180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007186:	4a6b      	ldr	r2, [pc, #428]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007188:	430b      	orrs	r3, r1
 800718a:	6513      	str	r3, [r2, #80]	@ 0x50
 800718c:	e003      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800718e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007192:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80071a2:	f04f 0b00 	mov.w	fp, #0
 80071a6:	ea5a 030b 	orrs.w	r3, sl, fp
 80071aa:	d05b      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80071ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80071b4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80071b8:	d03b      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80071ba:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80071be:	d834      	bhi.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80071c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80071c4:	d037      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80071c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80071ca:	d82e      	bhi.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80071cc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80071d0:	d033      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80071d2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80071d6:	d828      	bhi.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80071d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071dc:	d01a      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80071de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071e2:	d822      	bhi.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d003      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80071e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071ec:	d007      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80071ee:	e01c      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071f0:	4b50      	ldr	r3, [pc, #320]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80071f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f4:	4a4f      	ldr	r2, [pc, #316]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80071f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071fc:	e01e      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007202:	3308      	adds	r3, #8
 8007204:	2100      	movs	r1, #0
 8007206:	4618      	mov	r0, r3
 8007208:	f002 f994 	bl	8009534 <RCCEx_PLL2_Config>
 800720c:	4603      	mov	r3, r0
 800720e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007212:	e013      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007218:	3328      	adds	r3, #40	@ 0x28
 800721a:	2100      	movs	r1, #0
 800721c:	4618      	mov	r0, r3
 800721e:	f002 fa3b 	bl	8009698 <RCCEx_PLL3_Config>
 8007222:	4603      	mov	r3, r0
 8007224:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007228:	e008      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007230:	e004      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007232:	bf00      	nop
 8007234:	e002      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007236:	bf00      	nop
 8007238:	e000      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800723a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800723c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10b      	bne.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007244:	4b3b      	ldr	r3, [pc, #236]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007248:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800724c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007250:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007254:	4a37      	ldr	r2, [pc, #220]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007256:	430b      	orrs	r3, r1
 8007258:	6593      	str	r3, [r2, #88]	@ 0x58
 800725a:	e003      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800725c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007260:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007270:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007274:	2300      	movs	r3, #0
 8007276:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800727a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800727e:	460b      	mov	r3, r1
 8007280:	4313      	orrs	r3, r2
 8007282:	d05d      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007288:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800728c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007290:	d03b      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007292:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007296:	d834      	bhi.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007298:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800729c:	d037      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800729e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072a2:	d82e      	bhi.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80072a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80072a8:	d033      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80072aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80072ae:	d828      	bhi.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80072b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072b4:	d01a      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80072b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072ba:	d822      	bhi.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d003      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80072c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072c4:	d007      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80072c6:	e01c      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80072ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072cc:	4a19      	ldr	r2, [pc, #100]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80072ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072d4:	e01e      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072da:	3308      	adds	r3, #8
 80072dc:	2100      	movs	r1, #0
 80072de:	4618      	mov	r0, r3
 80072e0:	f002 f928 	bl	8009534 <RCCEx_PLL2_Config>
 80072e4:	4603      	mov	r3, r0
 80072e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80072ea:	e013      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f0:	3328      	adds	r3, #40	@ 0x28
 80072f2:	2100      	movs	r1, #0
 80072f4:	4618      	mov	r0, r3
 80072f6:	f002 f9cf 	bl	8009698 <RCCEx_PLL3_Config>
 80072fa:	4603      	mov	r3, r0
 80072fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007300:	e008      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007308:	e004      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800730a:	bf00      	nop
 800730c:	e002      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800730e:	bf00      	nop
 8007310:	e000      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007312:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007314:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10d      	bne.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800731c:	4b05      	ldr	r3, [pc, #20]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800731e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007320:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007328:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800732c:	4a01      	ldr	r2, [pc, #4]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800732e:	430b      	orrs	r3, r1
 8007330:	6593      	str	r3, [r2, #88]	@ 0x58
 8007332:	e005      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007334:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007338:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800733c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007348:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800734c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007350:	2300      	movs	r3, #0
 8007352:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007356:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800735a:	460b      	mov	r3, r1
 800735c:	4313      	orrs	r3, r2
 800735e:	d03a      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007366:	2b30      	cmp	r3, #48	@ 0x30
 8007368:	d01f      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800736a:	2b30      	cmp	r3, #48	@ 0x30
 800736c:	d819      	bhi.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800736e:	2b20      	cmp	r3, #32
 8007370:	d00c      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007372:	2b20      	cmp	r3, #32
 8007374:	d815      	bhi.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007376:	2b00      	cmp	r3, #0
 8007378:	d019      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800737a:	2b10      	cmp	r3, #16
 800737c:	d111      	bne.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800737e:	4baa      	ldr	r3, [pc, #680]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007382:	4aa9      	ldr	r2, [pc, #676]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007388:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800738a:	e011      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800738c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007390:	3308      	adds	r3, #8
 8007392:	2102      	movs	r1, #2
 8007394:	4618      	mov	r0, r3
 8007396:	f002 f8cd 	bl	8009534 <RCCEx_PLL2_Config>
 800739a:	4603      	mov	r3, r0
 800739c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80073a0:	e006      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80073a8:	e002      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80073aa:	bf00      	nop
 80073ac:	e000      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80073ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10a      	bne.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80073b8:	4b9b      	ldr	r3, [pc, #620]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80073ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073bc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80073c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073c6:	4a98      	ldr	r2, [pc, #608]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80073c8:	430b      	orrs	r3, r1
 80073ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80073cc:	e003      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80073d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073de:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80073e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80073e6:	2300      	movs	r3, #0
 80073e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80073ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80073f0:	460b      	mov	r3, r1
 80073f2:	4313      	orrs	r3, r2
 80073f4:	d051      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80073f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007400:	d035      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8007402:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007406:	d82e      	bhi.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007408:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800740c:	d031      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800740e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007412:	d828      	bhi.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007414:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007418:	d01a      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800741a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800741e:	d822      	bhi.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007420:	2b00      	cmp	r3, #0
 8007422:	d003      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007428:	d007      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800742a:	e01c      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800742c:	4b7e      	ldr	r3, [pc, #504]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800742e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007430:	4a7d      	ldr	r2, [pc, #500]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007432:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007436:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007438:	e01c      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800743a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800743e:	3308      	adds	r3, #8
 8007440:	2100      	movs	r1, #0
 8007442:	4618      	mov	r0, r3
 8007444:	f002 f876 	bl	8009534 <RCCEx_PLL2_Config>
 8007448:	4603      	mov	r3, r0
 800744a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800744e:	e011      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007454:	3328      	adds	r3, #40	@ 0x28
 8007456:	2100      	movs	r1, #0
 8007458:	4618      	mov	r0, r3
 800745a:	f002 f91d 	bl	8009698 <RCCEx_PLL3_Config>
 800745e:	4603      	mov	r3, r0
 8007460:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007464:	e006      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800746c:	e002      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800746e:	bf00      	nop
 8007470:	e000      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007472:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007474:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10a      	bne.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800747c:	4b6a      	ldr	r3, [pc, #424]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800747e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007480:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800748a:	4a67      	ldr	r2, [pc, #412]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800748c:	430b      	orrs	r3, r1
 800748e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007490:	e003      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007492:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007496:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800749a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80074a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074aa:	2300      	movs	r3, #0
 80074ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80074b0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80074b4:	460b      	mov	r3, r1
 80074b6:	4313      	orrs	r3, r2
 80074b8:	d053      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80074ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074c4:	d033      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80074c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074ca:	d82c      	bhi.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80074cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074d0:	d02f      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80074d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074d6:	d826      	bhi.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80074d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074dc:	d02b      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80074de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074e2:	d820      	bhi.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80074e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074e8:	d012      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80074ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074ee:	d81a      	bhi.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d022      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80074f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074f8:	d115      	bne.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074fe:	3308      	adds	r3, #8
 8007500:	2101      	movs	r1, #1
 8007502:	4618      	mov	r0, r3
 8007504:	f002 f816 	bl	8009534 <RCCEx_PLL2_Config>
 8007508:	4603      	mov	r3, r0
 800750a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800750e:	e015      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007514:	3328      	adds	r3, #40	@ 0x28
 8007516:	2101      	movs	r1, #1
 8007518:	4618      	mov	r0, r3
 800751a:	f002 f8bd 	bl	8009698 <RCCEx_PLL3_Config>
 800751e:	4603      	mov	r3, r0
 8007520:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007524:	e00a      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800752c:	e006      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800752e:	bf00      	nop
 8007530:	e004      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007532:	bf00      	nop
 8007534:	e002      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007536:	bf00      	nop
 8007538:	e000      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800753a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800753c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10a      	bne.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007544:	4b38      	ldr	r3, [pc, #224]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007548:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800754c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007552:	4a35      	ldr	r2, [pc, #212]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007554:	430b      	orrs	r3, r1
 8007556:	6513      	str	r3, [r2, #80]	@ 0x50
 8007558:	e003      	b.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800755a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800755e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800756e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007572:	2300      	movs	r3, #0
 8007574:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007578:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800757c:	460b      	mov	r3, r1
 800757e:	4313      	orrs	r3, r2
 8007580:	d058      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007586:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800758a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800758e:	d033      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007590:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007594:	d82c      	bhi.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800759a:	d02f      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800759c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075a0:	d826      	bhi.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80075a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075a6:	d02b      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80075a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075ac:	d820      	bhi.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80075ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075b2:	d012      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80075b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075b8:	d81a      	bhi.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d022      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80075be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075c2:	d115      	bne.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c8:	3308      	adds	r3, #8
 80075ca:	2101      	movs	r1, #1
 80075cc:	4618      	mov	r0, r3
 80075ce:	f001 ffb1 	bl	8009534 <RCCEx_PLL2_Config>
 80075d2:	4603      	mov	r3, r0
 80075d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80075d8:	e015      	b.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075de:	3328      	adds	r3, #40	@ 0x28
 80075e0:	2101      	movs	r1, #1
 80075e2:	4618      	mov	r0, r3
 80075e4:	f002 f858 	bl	8009698 <RCCEx_PLL3_Config>
 80075e8:	4603      	mov	r3, r0
 80075ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80075ee:	e00a      	b.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075f6:	e006      	b.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80075f8:	bf00      	nop
 80075fa:	e004      	b.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80075fc:	bf00      	nop
 80075fe:	e002      	b.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007600:	bf00      	nop
 8007602:	e000      	b.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007604:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007606:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10e      	bne.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800760e:	4b06      	ldr	r3, [pc, #24]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007612:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800761a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800761e:	4a02      	ldr	r2, [pc, #8]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007620:	430b      	orrs	r3, r1
 8007622:	6593      	str	r3, [r2, #88]	@ 0x58
 8007624:	e006      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007626:	bf00      	nop
 8007628:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800762c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007630:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007640:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007644:	2300      	movs	r3, #0
 8007646:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800764a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800764e:	460b      	mov	r3, r1
 8007650:	4313      	orrs	r3, r2
 8007652:	d037      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007658:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800765a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800765e:	d00e      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007660:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007664:	d816      	bhi.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007666:	2b00      	cmp	r3, #0
 8007668:	d018      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800766a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800766e:	d111      	bne.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007670:	4bc4      	ldr	r3, [pc, #784]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007674:	4ac3      	ldr	r2, [pc, #780]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007676:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800767a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800767c:	e00f      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800767e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007682:	3308      	adds	r3, #8
 8007684:	2101      	movs	r1, #1
 8007686:	4618      	mov	r0, r3
 8007688:	f001 ff54 	bl	8009534 <RCCEx_PLL2_Config>
 800768c:	4603      	mov	r3, r0
 800768e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007692:	e004      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800769a:	e000      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800769c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800769e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10a      	bne.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80076a6:	4bb7      	ldr	r3, [pc, #732]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076aa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80076ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076b4:	4ab3      	ldr	r2, [pc, #716]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076b6:	430b      	orrs	r3, r1
 80076b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80076ba:	e003      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80076c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076cc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80076d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80076d4:	2300      	movs	r3, #0
 80076d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80076da:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80076de:	460b      	mov	r3, r1
 80076e0:	4313      	orrs	r3, r2
 80076e2:	d039      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80076e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d81c      	bhi.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80076ee:	a201      	add	r2, pc, #4	@ (adr r2, 80076f4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80076f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f4:	08007731 	.word	0x08007731
 80076f8:	08007705 	.word	0x08007705
 80076fc:	08007713 	.word	0x08007713
 8007700:	08007731 	.word	0x08007731
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007704:	4b9f      	ldr	r3, [pc, #636]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007708:	4a9e      	ldr	r2, [pc, #632]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800770a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800770e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007710:	e00f      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007716:	3308      	adds	r3, #8
 8007718:	2102      	movs	r1, #2
 800771a:	4618      	mov	r0, r3
 800771c:	f001 ff0a 	bl	8009534 <RCCEx_PLL2_Config>
 8007720:	4603      	mov	r3, r0
 8007722:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007726:	e004      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800772e:	e000      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007732:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10a      	bne.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800773a:	4b92      	ldr	r3, [pc, #584]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800773c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800773e:	f023 0103 	bic.w	r1, r3, #3
 8007742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007746:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007748:	4a8e      	ldr	r2, [pc, #568]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800774a:	430b      	orrs	r3, r1
 800774c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800774e:	e003      	b.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007750:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007754:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800775c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007760:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007764:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007768:	2300      	movs	r3, #0
 800776a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800776e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007772:	460b      	mov	r3, r1
 8007774:	4313      	orrs	r3, r2
 8007776:	f000 8099 	beq.w	80078ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800777a:	4b83      	ldr	r3, [pc, #524]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a82      	ldr	r2, [pc, #520]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007784:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007786:	f7f9 fcf9 	bl	800117c <HAL_GetTick>
 800778a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800778e:	e00b      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007790:	f7f9 fcf4 	bl	800117c <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	2b64      	cmp	r3, #100	@ 0x64
 800779e:	d903      	bls.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80077a6:	e005      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077a8:	4b77      	ldr	r3, [pc, #476]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d0ed      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80077b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d173      	bne.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80077bc:	4b71      	ldr	r3, [pc, #452]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80077c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80077c8:	4053      	eors	r3, r2
 80077ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d015      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077d2:	4b6c      	ldr	r3, [pc, #432]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077da:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80077de:	4b69      	ldr	r3, [pc, #420]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077e2:	4a68      	ldr	r2, [pc, #416]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077e8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80077ea:	4b66      	ldr	r3, [pc, #408]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ee:	4a65      	ldr	r2, [pc, #404]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077f4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80077f6:	4a63      	ldr	r2, [pc, #396]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077fc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80077fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007802:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800780a:	d118      	bne.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800780c:	f7f9 fcb6 	bl	800117c <HAL_GetTick>
 8007810:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007814:	e00d      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007816:	f7f9 fcb1 	bl	800117c <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007820:	1ad2      	subs	r2, r2, r3
 8007822:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007826:	429a      	cmp	r2, r3
 8007828:	d903      	bls.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007830:	e005      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007832:	4b54      	ldr	r3, [pc, #336]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d0eb      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800783e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007842:	2b00      	cmp	r3, #0
 8007844:	d129      	bne.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800784a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800784e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007852:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007856:	d10e      	bne.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007858:	4b4a      	ldr	r3, [pc, #296]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007864:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007868:	091a      	lsrs	r2, r3, #4
 800786a:	4b48      	ldr	r3, [pc, #288]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800786c:	4013      	ands	r3, r2
 800786e:	4a45      	ldr	r2, [pc, #276]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007870:	430b      	orrs	r3, r1
 8007872:	6113      	str	r3, [r2, #16]
 8007874:	e005      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007876:	4b43      	ldr	r3, [pc, #268]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	4a42      	ldr	r2, [pc, #264]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800787c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007880:	6113      	str	r3, [r2, #16]
 8007882:	4b40      	ldr	r3, [pc, #256]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007884:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800788a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800788e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007892:	4a3c      	ldr	r2, [pc, #240]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007894:	430b      	orrs	r3, r1
 8007896:	6713      	str	r3, [r2, #112]	@ 0x70
 8007898:	e008      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800789a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800789e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80078a2:	e003      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80078ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b4:	f002 0301 	and.w	r3, r2, #1
 80078b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078bc:	2300      	movs	r3, #0
 80078be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80078c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80078c6:	460b      	mov	r3, r1
 80078c8:	4313      	orrs	r3, r2
 80078ca:	f000 808f 	beq.w	80079ec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80078ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078d4:	2b28      	cmp	r3, #40	@ 0x28
 80078d6:	d871      	bhi.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80078d8:	a201      	add	r2, pc, #4	@ (adr r2, 80078e0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80078da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078de:	bf00      	nop
 80078e0:	080079c5 	.word	0x080079c5
 80078e4:	080079bd 	.word	0x080079bd
 80078e8:	080079bd 	.word	0x080079bd
 80078ec:	080079bd 	.word	0x080079bd
 80078f0:	080079bd 	.word	0x080079bd
 80078f4:	080079bd 	.word	0x080079bd
 80078f8:	080079bd 	.word	0x080079bd
 80078fc:	080079bd 	.word	0x080079bd
 8007900:	08007991 	.word	0x08007991
 8007904:	080079bd 	.word	0x080079bd
 8007908:	080079bd 	.word	0x080079bd
 800790c:	080079bd 	.word	0x080079bd
 8007910:	080079bd 	.word	0x080079bd
 8007914:	080079bd 	.word	0x080079bd
 8007918:	080079bd 	.word	0x080079bd
 800791c:	080079bd 	.word	0x080079bd
 8007920:	080079a7 	.word	0x080079a7
 8007924:	080079bd 	.word	0x080079bd
 8007928:	080079bd 	.word	0x080079bd
 800792c:	080079bd 	.word	0x080079bd
 8007930:	080079bd 	.word	0x080079bd
 8007934:	080079bd 	.word	0x080079bd
 8007938:	080079bd 	.word	0x080079bd
 800793c:	080079bd 	.word	0x080079bd
 8007940:	080079c5 	.word	0x080079c5
 8007944:	080079bd 	.word	0x080079bd
 8007948:	080079bd 	.word	0x080079bd
 800794c:	080079bd 	.word	0x080079bd
 8007950:	080079bd 	.word	0x080079bd
 8007954:	080079bd 	.word	0x080079bd
 8007958:	080079bd 	.word	0x080079bd
 800795c:	080079bd 	.word	0x080079bd
 8007960:	080079c5 	.word	0x080079c5
 8007964:	080079bd 	.word	0x080079bd
 8007968:	080079bd 	.word	0x080079bd
 800796c:	080079bd 	.word	0x080079bd
 8007970:	080079bd 	.word	0x080079bd
 8007974:	080079bd 	.word	0x080079bd
 8007978:	080079bd 	.word	0x080079bd
 800797c:	080079bd 	.word	0x080079bd
 8007980:	080079c5 	.word	0x080079c5
 8007984:	58024400 	.word	0x58024400
 8007988:	58024800 	.word	0x58024800
 800798c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007994:	3308      	adds	r3, #8
 8007996:	2101      	movs	r1, #1
 8007998:	4618      	mov	r0, r3
 800799a:	f001 fdcb 	bl	8009534 <RCCEx_PLL2_Config>
 800799e:	4603      	mov	r3, r0
 80079a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80079a4:	e00f      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079aa:	3328      	adds	r3, #40	@ 0x28
 80079ac:	2101      	movs	r1, #1
 80079ae:	4618      	mov	r0, r3
 80079b0:	f001 fe72 	bl	8009698 <RCCEx_PLL3_Config>
 80079b4:	4603      	mov	r3, r0
 80079b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80079ba:	e004      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079c2:	e000      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80079c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10a      	bne.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80079ce:	4bbf      	ldr	r3, [pc, #764]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80079d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079d2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80079d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079dc:	4abb      	ldr	r2, [pc, #748]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80079de:	430b      	orrs	r3, r1
 80079e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80079e2:	e003      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80079ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f4:	f002 0302 	and.w	r3, r2, #2
 80079f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079fc:	2300      	movs	r3, #0
 80079fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a02:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007a06:	460b      	mov	r3, r1
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	d041      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a12:	2b05      	cmp	r3, #5
 8007a14:	d824      	bhi.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007a16:	a201      	add	r2, pc, #4	@ (adr r2, 8007a1c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1c:	08007a69 	.word	0x08007a69
 8007a20:	08007a35 	.word	0x08007a35
 8007a24:	08007a4b 	.word	0x08007a4b
 8007a28:	08007a69 	.word	0x08007a69
 8007a2c:	08007a69 	.word	0x08007a69
 8007a30:	08007a69 	.word	0x08007a69
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a38:	3308      	adds	r3, #8
 8007a3a:	2101      	movs	r1, #1
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f001 fd79 	bl	8009534 <RCCEx_PLL2_Config>
 8007a42:	4603      	mov	r3, r0
 8007a44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007a48:	e00f      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a4e:	3328      	adds	r3, #40	@ 0x28
 8007a50:	2101      	movs	r1, #1
 8007a52:	4618      	mov	r0, r3
 8007a54:	f001 fe20 	bl	8009698 <RCCEx_PLL3_Config>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007a5e:	e004      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a66:	e000      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10a      	bne.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007a72:	4b96      	ldr	r3, [pc, #600]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a76:	f023 0107 	bic.w	r1, r3, #7
 8007a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a80:	4a92      	ldr	r2, [pc, #584]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a82:	430b      	orrs	r3, r1
 8007a84:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a86:	e003      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a98:	f002 0304 	and.w	r3, r2, #4
 8007a9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007aa6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007aaa:	460b      	mov	r3, r1
 8007aac:	4313      	orrs	r3, r2
 8007aae:	d044      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ab8:	2b05      	cmp	r3, #5
 8007aba:	d825      	bhi.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007abc:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac2:	bf00      	nop
 8007ac4:	08007b11 	.word	0x08007b11
 8007ac8:	08007add 	.word	0x08007add
 8007acc:	08007af3 	.word	0x08007af3
 8007ad0:	08007b11 	.word	0x08007b11
 8007ad4:	08007b11 	.word	0x08007b11
 8007ad8:	08007b11 	.word	0x08007b11
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f001 fd25 	bl	8009534 <RCCEx_PLL2_Config>
 8007aea:	4603      	mov	r3, r0
 8007aec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007af0:	e00f      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af6:	3328      	adds	r3, #40	@ 0x28
 8007af8:	2101      	movs	r1, #1
 8007afa:	4618      	mov	r0, r3
 8007afc:	f001 fdcc 	bl	8009698 <RCCEx_PLL3_Config>
 8007b00:	4603      	mov	r3, r0
 8007b02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007b06:	e004      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b0e:	e000      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10b      	bne.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b1a:	4b6c      	ldr	r3, [pc, #432]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b1e:	f023 0107 	bic.w	r1, r3, #7
 8007b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b2a:	4a68      	ldr	r2, [pc, #416]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007b2c:	430b      	orrs	r3, r1
 8007b2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b30:	e003      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b36:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b42:	f002 0320 	and.w	r3, r2, #32
 8007b46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007b50:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007b54:	460b      	mov	r3, r1
 8007b56:	4313      	orrs	r3, r2
 8007b58:	d055      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b66:	d033      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007b68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b6c:	d82c      	bhi.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b72:	d02f      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b78:	d826      	bhi.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007b7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b7e:	d02b      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007b80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b84:	d820      	bhi.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007b86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b8a:	d012      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007b8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b90:	d81a      	bhi.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d022      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007b96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b9a:	d115      	bne.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ba0:	3308      	adds	r3, #8
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f001 fcc5 	bl	8009534 <RCCEx_PLL2_Config>
 8007baa:	4603      	mov	r3, r0
 8007bac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007bb0:	e015      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb6:	3328      	adds	r3, #40	@ 0x28
 8007bb8:	2102      	movs	r1, #2
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f001 fd6c 	bl	8009698 <RCCEx_PLL3_Config>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007bc6:	e00a      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007bce:	e006      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007bd0:	bf00      	nop
 8007bd2:	e004      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007bd4:	bf00      	nop
 8007bd6:	e002      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007bd8:	bf00      	nop
 8007bda:	e000      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10b      	bne.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007be6:	4b39      	ldr	r3, [pc, #228]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bf6:	4a35      	ldr	r2, [pc, #212]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007bf8:	430b      	orrs	r3, r1
 8007bfa:	6553      	str	r3, [r2, #84]	@ 0x54
 8007bfc:	e003      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007c12:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c16:	2300      	movs	r3, #0
 8007c18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c1c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007c20:	460b      	mov	r3, r1
 8007c22:	4313      	orrs	r3, r2
 8007c24:	d058      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c2e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007c32:	d033      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007c34:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007c38:	d82c      	bhi.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c3e:	d02f      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c44:	d826      	bhi.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007c46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c4a:	d02b      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007c4c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c50:	d820      	bhi.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007c52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c56:	d012      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007c58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c5c:	d81a      	bhi.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d022      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c66:	d115      	bne.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	2100      	movs	r1, #0
 8007c70:	4618      	mov	r0, r3
 8007c72:	f001 fc5f 	bl	8009534 <RCCEx_PLL2_Config>
 8007c76:	4603      	mov	r3, r0
 8007c78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007c7c:	e015      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c82:	3328      	adds	r3, #40	@ 0x28
 8007c84:	2102      	movs	r1, #2
 8007c86:	4618      	mov	r0, r3
 8007c88:	f001 fd06 	bl	8009698 <RCCEx_PLL3_Config>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007c92:	e00a      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c9a:	e006      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007c9c:	bf00      	nop
 8007c9e:	e004      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007ca0:	bf00      	nop
 8007ca2:	e002      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007ca4:	bf00      	nop
 8007ca6:	e000      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007caa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10e      	bne.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007cb2:	4b06      	ldr	r3, [pc, #24]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cb6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007cc2:	4a02      	ldr	r2, [pc, #8]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007cc4:	430b      	orrs	r3, r1
 8007cc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007cc8:	e006      	b.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007cca:	bf00      	nop
 8007ccc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007ce4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ce8:	2300      	movs	r3, #0
 8007cea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007cee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	d055      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d00:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007d04:	d033      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007d06:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007d0a:	d82c      	bhi.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007d0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d10:	d02f      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007d12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d16:	d826      	bhi.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007d18:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007d1c:	d02b      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007d1e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007d22:	d820      	bhi.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007d24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d28:	d012      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007d2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d2e:	d81a      	bhi.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d022      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007d34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d38:	d115      	bne.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d3e:	3308      	adds	r3, #8
 8007d40:	2100      	movs	r1, #0
 8007d42:	4618      	mov	r0, r3
 8007d44:	f001 fbf6 	bl	8009534 <RCCEx_PLL2_Config>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007d4e:	e015      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d54:	3328      	adds	r3, #40	@ 0x28
 8007d56:	2102      	movs	r1, #2
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f001 fc9d 	bl	8009698 <RCCEx_PLL3_Config>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007d64:	e00a      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d6c:	e006      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007d6e:	bf00      	nop
 8007d70:	e004      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007d72:	bf00      	nop
 8007d74:	e002      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007d76:	bf00      	nop
 8007d78:	e000      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007d7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10b      	bne.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007d84:	4ba0      	ldr	r3, [pc, #640]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d88:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d94:	4a9c      	ldr	r2, [pc, #624]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d96:	430b      	orrs	r3, r1
 8007d98:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d9a:	e003      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007da0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dac:	f002 0308 	and.w	r3, r2, #8
 8007db0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007db4:	2300      	movs	r3, #0
 8007db6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007dba:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	d01e      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dd0:	d10c      	bne.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd6:	3328      	adds	r3, #40	@ 0x28
 8007dd8:	2102      	movs	r1, #2
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f001 fc5c 	bl	8009698 <RCCEx_PLL3_Config>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d002      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007dec:	4b86      	ldr	r3, [pc, #536]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007df0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dfc:	4a82      	ldr	r2, [pc, #520]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007dfe:	430b      	orrs	r3, r1
 8007e00:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0a:	f002 0310 	and.w	r3, r2, #16
 8007e0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e12:	2300      	movs	r3, #0
 8007e14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e18:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	d01e      	beq.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e2e:	d10c      	bne.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e34:	3328      	adds	r3, #40	@ 0x28
 8007e36:	2102      	movs	r1, #2
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f001 fc2d 	bl	8009698 <RCCEx_PLL3_Config>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e4a:	4b6f      	ldr	r3, [pc, #444]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e4e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e5a:	4a6b      	ldr	r2, [pc, #428]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e5c:	430b      	orrs	r3, r1
 8007e5e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e68:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007e6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e6e:	2300      	movs	r3, #0
 8007e70:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e72:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007e76:	460b      	mov	r3, r1
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	d03e      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e88:	d022      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007e8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e8e:	d81b      	bhi.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d003      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e98:	d00b      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007e9a:	e015      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea0:	3308      	adds	r3, #8
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f001 fb45 	bl	8009534 <RCCEx_PLL2_Config>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007eb0:	e00f      	b.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eb6:	3328      	adds	r3, #40	@ 0x28
 8007eb8:	2102      	movs	r1, #2
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f001 fbec 	bl	8009698 <RCCEx_PLL3_Config>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007ec6:	e004      	b.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ece:	e000      	b.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ed2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10b      	bne.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007eda:	4b4b      	ldr	r3, [pc, #300]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ede:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ee6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007eea:	4a47      	ldr	r2, [pc, #284]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007eec:	430b      	orrs	r3, r1
 8007eee:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ef0:	e003      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ef6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f02:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007f06:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f08:	2300      	movs	r3, #0
 8007f0a:	677b      	str	r3, [r7, #116]	@ 0x74
 8007f0c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007f10:	460b      	mov	r3, r1
 8007f12:	4313      	orrs	r3, r2
 8007f14:	d03b      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f22:	d01f      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007f24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f28:	d818      	bhi.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007f2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f2e:	d003      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007f30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f34:	d007      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007f36:	e011      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f38:	4b33      	ldr	r3, [pc, #204]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3c:	4a32      	ldr	r2, [pc, #200]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007f44:	e00f      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f4a:	3328      	adds	r3, #40	@ 0x28
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f001 fba2 	bl	8009698 <RCCEx_PLL3_Config>
 8007f54:	4603      	mov	r3, r0
 8007f56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007f5a:	e004      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f62:	e000      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10b      	bne.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f6e:	4b26      	ldr	r3, [pc, #152]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f72:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f7e:	4a22      	ldr	r2, [pc, #136]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f80:	430b      	orrs	r3, r1
 8007f82:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f84:	e003      	b.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f8a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f96:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007f9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007fa0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	d034      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fb8:	d007      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007fba:	e011      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fbc:	4b12      	ldr	r3, [pc, #72]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc0:	4a11      	ldr	r2, [pc, #68]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007fc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007fc8:	e00e      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fce:	3308      	adds	r3, #8
 8007fd0:	2102      	movs	r1, #2
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f001 faae 	bl	8009534 <RCCEx_PLL2_Config>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007fde:	e003      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fe8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10d      	bne.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007ff0:	4b05      	ldr	r3, [pc, #20]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ff4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ffe:	4a02      	ldr	r2, [pc, #8]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008000:	430b      	orrs	r3, r1
 8008002:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008004:	e006      	b.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8008006:	bf00      	nop
 8008008:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800800c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008010:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008020:	663b      	str	r3, [r7, #96]	@ 0x60
 8008022:	2300      	movs	r3, #0
 8008024:	667b      	str	r3, [r7, #100]	@ 0x64
 8008026:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800802a:	460b      	mov	r3, r1
 800802c:	4313      	orrs	r3, r2
 800802e:	d00c      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008034:	3328      	adds	r3, #40	@ 0x28
 8008036:	2102      	movs	r1, #2
 8008038:	4618      	mov	r0, r3
 800803a:	f001 fb2d 	bl	8009698 <RCCEx_PLL3_Config>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d002      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800804a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800804e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008052:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008056:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008058:	2300      	movs	r3, #0
 800805a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800805c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008060:	460b      	mov	r3, r1
 8008062:	4313      	orrs	r3, r2
 8008064:	d036      	beq.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800806a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800806c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008070:	d018      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008072:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008076:	d811      	bhi.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800807c:	d014      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800807e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008082:	d80b      	bhi.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008084:	2b00      	cmp	r3, #0
 8008086:	d011      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008088:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800808c:	d106      	bne.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800808e:	4bb7      	ldr	r3, [pc, #732]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008092:	4ab6      	ldr	r2, [pc, #728]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008098:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800809a:	e008      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80080a2:	e004      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80080a4:	bf00      	nop
 80080a6:	e002      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80080a8:	bf00      	nop
 80080aa:	e000      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80080ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10a      	bne.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80080b6:	4bad      	ldr	r3, [pc, #692]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80080b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80080be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080c4:	4aa9      	ldr	r2, [pc, #676]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80080c6:	430b      	orrs	r3, r1
 80080c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80080ca:	e003      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80080d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080dc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80080e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80080e2:	2300      	movs	r3, #0
 80080e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80080e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80080ea:	460b      	mov	r3, r1
 80080ec:	4313      	orrs	r3, r2
 80080ee:	d009      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80080f0:	4b9e      	ldr	r3, [pc, #632]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80080f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80080f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080fe:	4a9b      	ldr	r2, [pc, #620]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008100:	430b      	orrs	r3, r1
 8008102:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008110:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008112:	2300      	movs	r3, #0
 8008114:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008116:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800811a:	460b      	mov	r3, r1
 800811c:	4313      	orrs	r3, r2
 800811e:	d009      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008120:	4b92      	ldr	r3, [pc, #584]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008122:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008124:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800812c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800812e:	4a8f      	ldr	r2, [pc, #572]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008130:	430b      	orrs	r3, r1
 8008132:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008140:	643b      	str	r3, [r7, #64]	@ 0x40
 8008142:	2300      	movs	r3, #0
 8008144:	647b      	str	r3, [r7, #68]	@ 0x44
 8008146:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800814a:	460b      	mov	r3, r1
 800814c:	4313      	orrs	r3, r2
 800814e:	d00e      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008150:	4b86      	ldr	r3, [pc, #536]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	4a85      	ldr	r2, [pc, #532]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008156:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800815a:	6113      	str	r3, [r2, #16]
 800815c:	4b83      	ldr	r3, [pc, #524]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800815e:	6919      	ldr	r1, [r3, #16]
 8008160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008164:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008168:	4a80      	ldr	r2, [pc, #512]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800816a:	430b      	orrs	r3, r1
 800816c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800816e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008176:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800817a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800817c:	2300      	movs	r3, #0
 800817e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008180:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008184:	460b      	mov	r3, r1
 8008186:	4313      	orrs	r3, r2
 8008188:	d009      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800818a:	4b78      	ldr	r3, [pc, #480]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800818c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800818e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008198:	4a74      	ldr	r2, [pc, #464]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800819a:	430b      	orrs	r3, r1
 800819c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800819e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80081aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80081ac:	2300      	movs	r3, #0
 80081ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80081b0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80081b4:	460b      	mov	r3, r1
 80081b6:	4313      	orrs	r3, r2
 80081b8:	d00a      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80081ba:	4b6c      	ldr	r3, [pc, #432]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80081bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081be:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80081c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081ca:	4a68      	ldr	r2, [pc, #416]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80081cc:	430b      	orrs	r3, r1
 80081ce:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80081d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d8:	2100      	movs	r1, #0
 80081da:	62b9      	str	r1, [r7, #40]	@ 0x28
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081e2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80081e6:	460b      	mov	r3, r1
 80081e8:	4313      	orrs	r3, r2
 80081ea:	d011      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f0:	3308      	adds	r3, #8
 80081f2:	2100      	movs	r1, #0
 80081f4:	4618      	mov	r0, r3
 80081f6:	f001 f99d 	bl	8009534 <RCCEx_PLL2_Config>
 80081fa:	4603      	mov	r3, r0
 80081fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008200:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008204:	2b00      	cmp	r3, #0
 8008206:	d003      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008208:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800820c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008218:	2100      	movs	r1, #0
 800821a:	6239      	str	r1, [r7, #32]
 800821c:	f003 0302 	and.w	r3, r3, #2
 8008220:	627b      	str	r3, [r7, #36]	@ 0x24
 8008222:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008226:	460b      	mov	r3, r1
 8008228:	4313      	orrs	r3, r2
 800822a:	d011      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800822c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008230:	3308      	adds	r3, #8
 8008232:	2101      	movs	r1, #1
 8008234:	4618      	mov	r0, r3
 8008236:	f001 f97d 	bl	8009534 <RCCEx_PLL2_Config>
 800823a:	4603      	mov	r3, r0
 800823c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008240:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008244:	2b00      	cmp	r3, #0
 8008246:	d003      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008248:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800824c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008258:	2100      	movs	r1, #0
 800825a:	61b9      	str	r1, [r7, #24]
 800825c:	f003 0304 	and.w	r3, r3, #4
 8008260:	61fb      	str	r3, [r7, #28]
 8008262:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008266:	460b      	mov	r3, r1
 8008268:	4313      	orrs	r3, r2
 800826a:	d011      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800826c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008270:	3308      	adds	r3, #8
 8008272:	2102      	movs	r1, #2
 8008274:	4618      	mov	r0, r3
 8008276:	f001 f95d 	bl	8009534 <RCCEx_PLL2_Config>
 800827a:	4603      	mov	r3, r0
 800827c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008280:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008284:	2b00      	cmp	r3, #0
 8008286:	d003      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008288:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800828c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008298:	2100      	movs	r1, #0
 800829a:	6139      	str	r1, [r7, #16]
 800829c:	f003 0308 	and.w	r3, r3, #8
 80082a0:	617b      	str	r3, [r7, #20]
 80082a2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80082a6:	460b      	mov	r3, r1
 80082a8:	4313      	orrs	r3, r2
 80082aa:	d011      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80082ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082b0:	3328      	adds	r3, #40	@ 0x28
 80082b2:	2100      	movs	r1, #0
 80082b4:	4618      	mov	r0, r3
 80082b6:	f001 f9ef 	bl	8009698 <RCCEx_PLL3_Config>
 80082ba:	4603      	mov	r3, r0
 80082bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80082c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d003      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80082d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d8:	2100      	movs	r1, #0
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	f003 0310 	and.w	r3, r3, #16
 80082e0:	60fb      	str	r3, [r7, #12]
 80082e2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80082e6:	460b      	mov	r3, r1
 80082e8:	4313      	orrs	r3, r2
 80082ea:	d011      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082f0:	3328      	adds	r3, #40	@ 0x28
 80082f2:	2101      	movs	r1, #1
 80082f4:	4618      	mov	r0, r3
 80082f6:	f001 f9cf 	bl	8009698 <RCCEx_PLL3_Config>
 80082fa:	4603      	mov	r3, r0
 80082fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008300:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008304:	2b00      	cmp	r3, #0
 8008306:	d003      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008308:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800830c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008318:	2100      	movs	r1, #0
 800831a:	6039      	str	r1, [r7, #0]
 800831c:	f003 0320 	and.w	r3, r3, #32
 8008320:	607b      	str	r3, [r7, #4]
 8008322:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008326:	460b      	mov	r3, r1
 8008328:	4313      	orrs	r3, r2
 800832a:	d011      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800832c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008330:	3328      	adds	r3, #40	@ 0x28
 8008332:	2102      	movs	r1, #2
 8008334:	4618      	mov	r0, r3
 8008336:	f001 f9af 	bl	8009698 <RCCEx_PLL3_Config>
 800833a:	4603      	mov	r3, r0
 800833c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008340:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008344:	2b00      	cmp	r3, #0
 8008346:	d003      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008348:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800834c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8008350:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8008354:	2b00      	cmp	r3, #0
 8008356:	d101      	bne.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8008358:	2300      	movs	r3, #0
 800835a:	e000      	b.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
}
 800835e:	4618      	mov	r0, r3
 8008360:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8008364:	46bd      	mov	sp, r7
 8008366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800836a:	bf00      	nop
 800836c:	58024400 	.word	0x58024400

08008370 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b090      	sub	sp, #64	@ 0x40
 8008374:	af00      	add	r7, sp, #0
 8008376:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800837a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800837e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008382:	430b      	orrs	r3, r1
 8008384:	f040 8094 	bne.w	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008388:	4b9b      	ldr	r3, [pc, #620]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800838a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800838c:	f003 0307 	and.w	r3, r3, #7
 8008390:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008394:	2b04      	cmp	r3, #4
 8008396:	f200 8087 	bhi.w	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800839a:	a201      	add	r2, pc, #4	@ (adr r2, 80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800839c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a0:	080083b5 	.word	0x080083b5
 80083a4:	080083dd 	.word	0x080083dd
 80083a8:	08008405 	.word	0x08008405
 80083ac:	080084a1 	.word	0x080084a1
 80083b0:	0800842d 	.word	0x0800842d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083b4:	4b90      	ldr	r3, [pc, #576]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083c0:	d108      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 ff62 	bl	8009290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083d0:	f000 bc93 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083d4:	2300      	movs	r3, #0
 80083d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083d8:	f000 bc8f 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083dc:	4b86      	ldr	r3, [pc, #536]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083e8:	d108      	bne.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083ea:	f107 0318 	add.w	r3, r7, #24
 80083ee:	4618      	mov	r0, r3
 80083f0:	f000 fca6 	bl	8008d40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083f8:	f000 bc7f 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083fc:	2300      	movs	r3, #0
 80083fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008400:	f000 bc7b 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008404:	4b7c      	ldr	r3, [pc, #496]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800840c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008410:	d108      	bne.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008412:	f107 030c 	add.w	r3, r7, #12
 8008416:	4618      	mov	r0, r3
 8008418:	f000 fde6 	bl	8008fe8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008420:	f000 bc6b 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008424:	2300      	movs	r3, #0
 8008426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008428:	f000 bc67 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800842c:	4b72      	ldr	r3, [pc, #456]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800842e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008430:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008434:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008436:	4b70      	ldr	r3, [pc, #448]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 0304 	and.w	r3, r3, #4
 800843e:	2b04      	cmp	r3, #4
 8008440:	d10c      	bne.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008444:	2b00      	cmp	r3, #0
 8008446:	d109      	bne.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008448:	4b6b      	ldr	r3, [pc, #428]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	08db      	lsrs	r3, r3, #3
 800844e:	f003 0303 	and.w	r3, r3, #3
 8008452:	4a6a      	ldr	r2, [pc, #424]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008454:	fa22 f303 	lsr.w	r3, r2, r3
 8008458:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800845a:	e01f      	b.n	800849c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800845c:	4b66      	ldr	r3, [pc, #408]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008464:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008468:	d106      	bne.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800846a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800846c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008470:	d102      	bne.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008472:	4b63      	ldr	r3, [pc, #396]	@ (8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008474:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008476:	e011      	b.n	800849c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008478:	4b5f      	ldr	r3, [pc, #380]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008480:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008484:	d106      	bne.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008488:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800848c:	d102      	bne.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800848e:	4b5d      	ldr	r3, [pc, #372]	@ (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008490:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008492:	e003      	b.n	800849c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008494:	2300      	movs	r3, #0
 8008496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008498:	f000 bc2f 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800849c:	f000 bc2d 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80084a0:	4b59      	ldr	r3, [pc, #356]	@ (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80084a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084a4:	f000 bc29 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80084a8:	2300      	movs	r3, #0
 80084aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084ac:	f000 bc25 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80084b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084b4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80084b8:	430b      	orrs	r3, r1
 80084ba:	f040 80a7 	bne.w	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80084be:	4b4e      	ldr	r3, [pc, #312]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80084c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084c2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80084c6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80084c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80084ce:	d054      	beq.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80084d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80084d6:	f200 808b 	bhi.w	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80084da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084dc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80084e0:	f000 8083 	beq.w	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80084e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80084ea:	f200 8081 	bhi.w	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80084ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084f4:	d02f      	beq.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80084f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084fc:	d878      	bhi.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80084fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008500:	2b00      	cmp	r3, #0
 8008502:	d004      	beq.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8008504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008506:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800850a:	d012      	beq.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800850c:	e070      	b.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800850e:	4b3a      	ldr	r3, [pc, #232]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008516:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800851a:	d107      	bne.n	800852c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800851c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008520:	4618      	mov	r0, r3
 8008522:	f000 feb5 	bl	8009290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800852a:	e3e6      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800852c:	2300      	movs	r3, #0
 800852e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008530:	e3e3      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008532:	4b31      	ldr	r3, [pc, #196]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800853a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800853e:	d107      	bne.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008540:	f107 0318 	add.w	r3, r7, #24
 8008544:	4618      	mov	r0, r3
 8008546:	f000 fbfb 	bl	8008d40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800854e:	e3d4      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008550:	2300      	movs	r3, #0
 8008552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008554:	e3d1      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008556:	4b28      	ldr	r3, [pc, #160]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800855e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008562:	d107      	bne.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008564:	f107 030c 	add.w	r3, r7, #12
 8008568:	4618      	mov	r0, r3
 800856a:	f000 fd3d 	bl	8008fe8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008572:	e3c2      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008574:	2300      	movs	r3, #0
 8008576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008578:	e3bf      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800857a:	4b1f      	ldr	r3, [pc, #124]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800857c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800857e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008582:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008584:	4b1c      	ldr	r3, [pc, #112]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 0304 	and.w	r3, r3, #4
 800858c:	2b04      	cmp	r3, #4
 800858e:	d10c      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008592:	2b00      	cmp	r3, #0
 8008594:	d109      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008596:	4b18      	ldr	r3, [pc, #96]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	08db      	lsrs	r3, r3, #3
 800859c:	f003 0303 	and.w	r3, r3, #3
 80085a0:	4a16      	ldr	r2, [pc, #88]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80085a2:	fa22 f303 	lsr.w	r3, r2, r3
 80085a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085a8:	e01e      	b.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085aa:	4b13      	ldr	r3, [pc, #76]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085b6:	d106      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80085b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085be:	d102      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80085c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085c4:	e010      	b.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085c6:	4b0c      	ldr	r3, [pc, #48]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085d2:	d106      	bne.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80085d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085da:	d102      	bne.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085dc:	4b09      	ldr	r3, [pc, #36]	@ (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085e0:	e002      	b.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085e2:	2300      	movs	r3, #0
 80085e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80085e6:	e388      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80085e8:	e387      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085ea:	4b07      	ldr	r3, [pc, #28]	@ (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80085ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ee:	e384      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80085f0:	2300      	movs	r3, #0
 80085f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f4:	e381      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80085f6:	bf00      	nop
 80085f8:	58024400 	.word	0x58024400
 80085fc:	03d09000 	.word	0x03d09000
 8008600:	003d0900 	.word	0x003d0900
 8008604:	017d7840 	.word	0x017d7840
 8008608:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800860c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008610:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008614:	430b      	orrs	r3, r1
 8008616:	f040 809c 	bne.w	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800861a:	4b9e      	ldr	r3, [pc, #632]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800861c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800861e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008622:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008626:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800862a:	d054      	beq.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800862c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008632:	f200 808b 	bhi.w	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008638:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800863c:	f000 8083 	beq.w	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008642:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008646:	f200 8081 	bhi.w	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800864a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008650:	d02f      	beq.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008654:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008658:	d878      	bhi.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800865a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865c:	2b00      	cmp	r3, #0
 800865e:	d004      	beq.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008662:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008666:	d012      	beq.n	800868e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008668:	e070      	b.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800866a:	4b8a      	ldr	r3, [pc, #552]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008672:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008676:	d107      	bne.n	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008678:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800867c:	4618      	mov	r0, r3
 800867e:	f000 fe07 	bl	8009290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008686:	e338      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008688:	2300      	movs	r3, #0
 800868a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800868c:	e335      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800868e:	4b81      	ldr	r3, [pc, #516]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008696:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800869a:	d107      	bne.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800869c:	f107 0318 	add.w	r3, r7, #24
 80086a0:	4618      	mov	r0, r3
 80086a2:	f000 fb4d 	bl	8008d40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086aa:	e326      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086ac:	2300      	movs	r3, #0
 80086ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086b0:	e323      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086b2:	4b78      	ldr	r3, [pc, #480]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086be:	d107      	bne.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086c0:	f107 030c 	add.w	r3, r7, #12
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 fc8f 	bl	8008fe8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ce:	e314      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086d0:	2300      	movs	r3, #0
 80086d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086d4:	e311      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086d6:	4b6f      	ldr	r3, [pc, #444]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80086d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80086de:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086e0:	4b6c      	ldr	r3, [pc, #432]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 0304 	and.w	r3, r3, #4
 80086e8:	2b04      	cmp	r3, #4
 80086ea:	d10c      	bne.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80086ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d109      	bne.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086f2:	4b68      	ldr	r3, [pc, #416]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	08db      	lsrs	r3, r3, #3
 80086f8:	f003 0303 	and.w	r3, r3, #3
 80086fc:	4a66      	ldr	r2, [pc, #408]	@ (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80086fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008702:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008704:	e01e      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008706:	4b63      	ldr	r3, [pc, #396]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800870e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008712:	d106      	bne.n	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008716:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800871a:	d102      	bne.n	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800871c:	4b5f      	ldr	r3, [pc, #380]	@ (800889c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800871e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008720:	e010      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008722:	4b5c      	ldr	r3, [pc, #368]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800872a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800872e:	d106      	bne.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008732:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008736:	d102      	bne.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008738:	4b59      	ldr	r3, [pc, #356]	@ (80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800873a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800873c:	e002      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800873e:	2300      	movs	r3, #0
 8008740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008742:	e2da      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008744:	e2d9      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008746:	4b57      	ldr	r3, [pc, #348]	@ (80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800874a:	e2d6      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800874c:	2300      	movs	r3, #0
 800874e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008750:	e2d3      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008752:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008756:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800875a:	430b      	orrs	r3, r1
 800875c:	f040 80a7 	bne.w	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008760:	4b4c      	ldr	r3, [pc, #304]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008764:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008768:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800876a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800876c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008770:	d055      	beq.n	800881e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008774:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008778:	f200 8096 	bhi.w	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800877c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008782:	f000 8084 	beq.w	800888e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008788:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800878c:	f200 808c 	bhi.w	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008792:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008796:	d030      	beq.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800879e:	f200 8083 	bhi.w	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80087a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d004      	beq.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80087a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087ae:	d012      	beq.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80087b0:	e07a      	b.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087b2:	4b38      	ldr	r3, [pc, #224]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087be:	d107      	bne.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 fd63 	bl	8009290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ce:	e294      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087d0:	2300      	movs	r3, #0
 80087d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087d4:	e291      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087d6:	4b2f      	ldr	r3, [pc, #188]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087e2:	d107      	bne.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087e4:	f107 0318 	add.w	r3, r7, #24
 80087e8:	4618      	mov	r0, r3
 80087ea:	f000 faa9 	bl	8008d40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087f2:	e282      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087f4:	2300      	movs	r3, #0
 80087f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087f8:	e27f      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087fa:	4b26      	ldr	r3, [pc, #152]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008802:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008806:	d107      	bne.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008808:	f107 030c 	add.w	r3, r7, #12
 800880c:	4618      	mov	r0, r3
 800880e:	f000 fbeb 	bl	8008fe8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008816:	e270      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008818:	2300      	movs	r3, #0
 800881a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800881c:	e26d      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800881e:	4b1d      	ldr	r3, [pc, #116]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008822:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008826:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008828:	4b1a      	ldr	r3, [pc, #104]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0304 	and.w	r3, r3, #4
 8008830:	2b04      	cmp	r3, #4
 8008832:	d10c      	bne.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008836:	2b00      	cmp	r3, #0
 8008838:	d109      	bne.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800883a:	4b16      	ldr	r3, [pc, #88]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	08db      	lsrs	r3, r3, #3
 8008840:	f003 0303 	and.w	r3, r3, #3
 8008844:	4a14      	ldr	r2, [pc, #80]	@ (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008846:	fa22 f303 	lsr.w	r3, r2, r3
 800884a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800884c:	e01e      	b.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800884e:	4b11      	ldr	r3, [pc, #68]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800885a:	d106      	bne.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800885c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800885e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008862:	d102      	bne.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008864:	4b0d      	ldr	r3, [pc, #52]	@ (800889c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008866:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008868:	e010      	b.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800886a:	4b0a      	ldr	r3, [pc, #40]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008872:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008876:	d106      	bne.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800887a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800887e:	d102      	bne.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008880:	4b07      	ldr	r3, [pc, #28]	@ (80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008882:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008884:	e002      	b.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008886:	2300      	movs	r3, #0
 8008888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800888a:	e236      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800888c:	e235      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800888e:	4b05      	ldr	r3, [pc, #20]	@ (80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008892:	e232      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008894:	58024400 	.word	0x58024400
 8008898:	03d09000 	.word	0x03d09000
 800889c:	003d0900 	.word	0x003d0900
 80088a0:	017d7840 	.word	0x017d7840
 80088a4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80088a8:	2300      	movs	r3, #0
 80088aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088ac:	e225      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80088ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088b2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80088b6:	430b      	orrs	r3, r1
 80088b8:	f040 8085 	bne.w	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80088bc:	4b9c      	ldr	r3, [pc, #624]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80088be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088c0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80088c4:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80088c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80088cc:	d06b      	beq.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80088ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80088d4:	d874      	bhi.n	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80088d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80088dc:	d056      	beq.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80088de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80088e4:	d86c      	bhi.n	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80088e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80088ec:	d03b      	beq.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80088ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80088f4:	d864      	bhi.n	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80088f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088fc:	d021      	beq.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80088fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008900:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008904:	d85c      	bhi.n	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008908:	2b00      	cmp	r3, #0
 800890a:	d004      	beq.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800890c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008912:	d004      	beq.n	800891e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008914:	e054      	b.n	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008916:	f7fe fb75 	bl	8007004 <HAL_RCC_GetPCLK1Freq>
 800891a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800891c:	e1ed      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800891e:	4b84      	ldr	r3, [pc, #528]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008926:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800892a:	d107      	bne.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800892c:	f107 0318 	add.w	r3, r7, #24
 8008930:	4618      	mov	r0, r3
 8008932:	f000 fa05 	bl	8008d40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800893a:	e1de      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800893c:	2300      	movs	r3, #0
 800893e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008940:	e1db      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008942:	4b7b      	ldr	r3, [pc, #492]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800894a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800894e:	d107      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008950:	f107 030c 	add.w	r3, r7, #12
 8008954:	4618      	mov	r0, r3
 8008956:	f000 fb47 	bl	8008fe8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800895e:	e1cc      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008960:	2300      	movs	r3, #0
 8008962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008964:	e1c9      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008966:	4b72      	ldr	r3, [pc, #456]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 0304 	and.w	r3, r3, #4
 800896e:	2b04      	cmp	r3, #4
 8008970:	d109      	bne.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008972:	4b6f      	ldr	r3, [pc, #444]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	08db      	lsrs	r3, r3, #3
 8008978:	f003 0303 	and.w	r3, r3, #3
 800897c:	4a6d      	ldr	r2, [pc, #436]	@ (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800897e:	fa22 f303 	lsr.w	r3, r2, r3
 8008982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008984:	e1b9      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008986:	2300      	movs	r3, #0
 8008988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800898a:	e1b6      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800898c:	4b68      	ldr	r3, [pc, #416]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008994:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008998:	d102      	bne.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800899a:	4b67      	ldr	r3, [pc, #412]	@ (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800899c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800899e:	e1ac      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089a0:	2300      	movs	r3, #0
 80089a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089a4:	e1a9      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80089a6:	4b62      	ldr	r3, [pc, #392]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089b2:	d102      	bne.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80089b4:	4b61      	ldr	r3, [pc, #388]	@ (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80089b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089b8:	e19f      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089ba:	2300      	movs	r3, #0
 80089bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089be:	e19c      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80089c0:	2300      	movs	r3, #0
 80089c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089c4:	e199      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80089c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089ca:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80089ce:	430b      	orrs	r3, r1
 80089d0:	d173      	bne.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80089d2:	4b57      	ldr	r3, [pc, #348]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80089d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80089da:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80089dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089e2:	d02f      	beq.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80089e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089ea:	d863      	bhi.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80089ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d004      	beq.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80089f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089f8:	d012      	beq.n	8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80089fa:	e05b      	b.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089fc:	4b4c      	ldr	r3, [pc, #304]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a08:	d107      	bne.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a0a:	f107 0318 	add.w	r3, r7, #24
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 f996 	bl	8008d40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a18:	e16f      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a1e:	e16c      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a20:	4b43      	ldr	r3, [pc, #268]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a2c:	d107      	bne.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a2e:	f107 030c 	add.w	r3, r7, #12
 8008a32:	4618      	mov	r0, r3
 8008a34:	f000 fad8 	bl	8008fe8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a3c:	e15d      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a42:	e15a      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a44:	4b3a      	ldr	r3, [pc, #232]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a4c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a4e:	4b38      	ldr	r3, [pc, #224]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 0304 	and.w	r3, r3, #4
 8008a56:	2b04      	cmp	r3, #4
 8008a58:	d10c      	bne.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d109      	bne.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a60:	4b33      	ldr	r3, [pc, #204]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	08db      	lsrs	r3, r3, #3
 8008a66:	f003 0303 	and.w	r3, r3, #3
 8008a6a:	4a32      	ldr	r2, [pc, #200]	@ (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a72:	e01e      	b.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a74:	4b2e      	ldr	r3, [pc, #184]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a80:	d106      	bne.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a88:	d102      	bne.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a8e:	e010      	b.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a90:	4b27      	ldr	r3, [pc, #156]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a9c:	d106      	bne.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008aa4:	d102      	bne.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008aa6:	4b25      	ldr	r3, [pc, #148]	@ (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008aaa:	e002      	b.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008aac:	2300      	movs	r3, #0
 8008aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008ab0:	e123      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008ab2:	e122      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ab8:	e11f      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008aba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008abe:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008ac2:	430b      	orrs	r3, r1
 8008ac4:	d13c      	bne.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008aca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ace:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d004      	beq.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008adc:	d012      	beq.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008ade:	e023      	b.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ae0:	4b13      	ldr	r3, [pc, #76]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ae8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008aec:	d107      	bne.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 fbcc 	bl	8009290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008afc:	e0fd      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008afe:	2300      	movs	r3, #0
 8008b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b02:	e0fa      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b04:	4b0a      	ldr	r3, [pc, #40]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b10:	d107      	bne.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b12:	f107 0318 	add.w	r3, r7, #24
 8008b16:	4618      	mov	r0, r3
 8008b18:	f000 f912 	bl	8008d40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b20:	e0eb      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b22:	2300      	movs	r3, #0
 8008b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b26:	e0e8      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b2c:	e0e5      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b2e:	bf00      	nop
 8008b30:	58024400 	.word	0x58024400
 8008b34:	03d09000 	.word	0x03d09000
 8008b38:	003d0900 	.word	0x003d0900
 8008b3c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b44:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008b48:	430b      	orrs	r3, r1
 8008b4a:	f040 8085 	bne.w	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008b4e:	4b6d      	ldr	r3, [pc, #436]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b52:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008b56:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b5e:	d06b      	beq.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b66:	d874      	bhi.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b6e:	d056      	beq.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b76:	d86c      	bhi.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b7e:	d03b      	beq.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b86:	d864      	bhi.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b8e:	d021      	beq.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b96:	d85c      	bhi.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d004      	beq.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8008b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ba4:	d004      	beq.n	8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008ba6:	e054      	b.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008ba8:	f000 f8b4 	bl	8008d14 <HAL_RCCEx_GetD3PCLK1Freq>
 8008bac:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008bae:	e0a4      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bb0:	4b54      	ldr	r3, [pc, #336]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bbc:	d107      	bne.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bbe:	f107 0318 	add.w	r3, r7, #24
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 f8bc 	bl	8008d40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bcc:	e095      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bd2:	e092      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bd4:	4b4b      	ldr	r3, [pc, #300]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008be0:	d107      	bne.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008be2:	f107 030c 	add.w	r3, r7, #12
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 f9fe 	bl	8008fe8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bf0:	e083      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf6:	e080      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008bf8:	4b42      	ldr	r3, [pc, #264]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 0304 	and.w	r3, r3, #4
 8008c00:	2b04      	cmp	r3, #4
 8008c02:	d109      	bne.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c04:	4b3f      	ldr	r3, [pc, #252]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	08db      	lsrs	r3, r3, #3
 8008c0a:	f003 0303 	and.w	r3, r3, #3
 8008c0e:	4a3e      	ldr	r2, [pc, #248]	@ (8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008c10:	fa22 f303 	lsr.w	r3, r2, r3
 8008c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c16:	e070      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c1c:	e06d      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008c1e:	4b39      	ldr	r3, [pc, #228]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c2a:	d102      	bne.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008c2c:	4b37      	ldr	r3, [pc, #220]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c30:	e063      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c32:	2300      	movs	r3, #0
 8008c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c36:	e060      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c38:	4b32      	ldr	r3, [pc, #200]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c44:	d102      	bne.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008c46:	4b32      	ldr	r3, [pc, #200]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c4a:	e056      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c50:	e053      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008c52:	2300      	movs	r3, #0
 8008c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c56:	e050      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008c58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c5c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008c60:	430b      	orrs	r3, r1
 8008c62:	d148      	bne.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008c64:	4b27      	ldr	r3, [pc, #156]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c6c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c74:	d02a      	beq.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c7c:	d838      	bhi.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d004      	beq.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c8a:	d00d      	beq.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008c8c:	e030      	b.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c9a:	d102      	bne.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ca0:	e02b      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ca6:	e028      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ca8:	4b16      	ldr	r3, [pc, #88]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008cb4:	d107      	bne.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f000 fae8 	bl	8009290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cc4:	e019      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cca:	e016      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cd8:	d107      	bne.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cda:	f107 0318 	add.w	r3, r7, #24
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 f82e 	bl	8008d40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ce8:	e007      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cea:	2300      	movs	r3, #0
 8008cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cee:	e004      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cf4:	e001      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3740      	adds	r7, #64	@ 0x40
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	58024400 	.word	0x58024400
 8008d08:	03d09000 	.word	0x03d09000
 8008d0c:	003d0900 	.word	0x003d0900
 8008d10:	017d7840 	.word	0x017d7840

08008d14 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008d18:	f7fe f944 	bl	8006fa4 <HAL_RCC_GetHCLKFreq>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	4b06      	ldr	r3, [pc, #24]	@ (8008d38 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008d20:	6a1b      	ldr	r3, [r3, #32]
 8008d22:	091b      	lsrs	r3, r3, #4
 8008d24:	f003 0307 	and.w	r3, r3, #7
 8008d28:	4904      	ldr	r1, [pc, #16]	@ (8008d3c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008d2a:	5ccb      	ldrb	r3, [r1, r3]
 8008d2c:	f003 031f 	and.w	r3, r3, #31
 8008d30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	58024400 	.word	0x58024400
 8008d3c:	0800a61c 	.word	0x0800a61c

08008d40 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b089      	sub	sp, #36	@ 0x24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d48:	4ba1      	ldr	r3, [pc, #644]	@ (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d4c:	f003 0303 	and.w	r3, r3, #3
 8008d50:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008d52:	4b9f      	ldr	r3, [pc, #636]	@ (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d56:	0b1b      	lsrs	r3, r3, #12
 8008d58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d5c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008d5e:	4b9c      	ldr	r3, [pc, #624]	@ (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d62:	091b      	lsrs	r3, r3, #4
 8008d64:	f003 0301 	and.w	r3, r3, #1
 8008d68:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008d6a:	4b99      	ldr	r3, [pc, #612]	@ (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d6e:	08db      	lsrs	r3, r3, #3
 8008d70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d74:	693a      	ldr	r2, [r7, #16]
 8008d76:	fb02 f303 	mul.w	r3, r2, r3
 8008d7a:	ee07 3a90 	vmov	s15, r3
 8008d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f000 8111 	beq.w	8008fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	f000 8083 	beq.w	8008e9c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	f200 80a1 	bhi.w	8008ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d003      	beq.n	8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d056      	beq.n	8008e58 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008daa:	e099      	b.n	8008ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dac:	4b88      	ldr	r3, [pc, #544]	@ (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 0320 	and.w	r3, r3, #32
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d02d      	beq.n	8008e14 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008db8:	4b85      	ldr	r3, [pc, #532]	@ (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	08db      	lsrs	r3, r3, #3
 8008dbe:	f003 0303 	and.w	r3, r3, #3
 8008dc2:	4a84      	ldr	r2, [pc, #528]	@ (8008fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8008dc8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	ee07 3a90 	vmov	s15, r3
 8008dd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	ee07 3a90 	vmov	s15, r3
 8008dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008de2:	4b7b      	ldr	r3, [pc, #492]	@ (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008df6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008e12:	e087      	b.n	8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	ee07 3a90 	vmov	s15, r3
 8008e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e1e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008fdc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e26:	4b6a      	ldr	r3, [pc, #424]	@ (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e2e:	ee07 3a90 	vmov	s15, r3
 8008e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e36:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e3a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e56:	e065      	b.n	8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	ee07 3a90 	vmov	s15, r3
 8008e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e62:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e6a:	4b59      	ldr	r3, [pc, #356]	@ (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e72:	ee07 3a90 	vmov	s15, r3
 8008e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e7e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e9a:	e043      	b.n	8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	ee07 3a90 	vmov	s15, r3
 8008ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eae:	4b48      	ldr	r3, [pc, #288]	@ (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb6:	ee07 3a90 	vmov	s15, r3
 8008eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ec2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ede:	e021      	b.n	8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	ee07 3a90 	vmov	s15, r3
 8008ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ef2:	4b37      	ldr	r3, [pc, #220]	@ (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008efa:	ee07 3a90 	vmov	s15, r3
 8008efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f06:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f22:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008f24:	4b2a      	ldr	r3, [pc, #168]	@ (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f28:	0a5b      	lsrs	r3, r3, #9
 8008f2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f2e:	ee07 3a90 	vmov	s15, r3
 8008f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f4a:	ee17 2a90 	vmov	r2, s15
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008f52:	4b1f      	ldr	r3, [pc, #124]	@ (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f56:	0c1b      	lsrs	r3, r3, #16
 8008f58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f5c:	ee07 3a90 	vmov	s15, r3
 8008f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f78:	ee17 2a90 	vmov	r2, s15
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008f80:	4b13      	ldr	r3, [pc, #76]	@ (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f84:	0e1b      	lsrs	r3, r3, #24
 8008f86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f8a:	ee07 3a90 	vmov	s15, r3
 8008f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fa6:	ee17 2a90 	vmov	r2, s15
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008fae:	e008      	b.n	8008fc2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	609a      	str	r2, [r3, #8]
}
 8008fc2:	bf00      	nop
 8008fc4:	3724      	adds	r7, #36	@ 0x24
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	58024400 	.word	0x58024400
 8008fd4:	03d09000 	.word	0x03d09000
 8008fd8:	46000000 	.word	0x46000000
 8008fdc:	4c742400 	.word	0x4c742400
 8008fe0:	4a742400 	.word	0x4a742400
 8008fe4:	4bbebc20 	.word	0x4bbebc20

08008fe8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b089      	sub	sp, #36	@ 0x24
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ff0:	4ba1      	ldr	r3, [pc, #644]	@ (8009278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ff4:	f003 0303 	and.w	r3, r3, #3
 8008ff8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008ffa:	4b9f      	ldr	r3, [pc, #636]	@ (8009278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ffe:	0d1b      	lsrs	r3, r3, #20
 8009000:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009004:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009006:	4b9c      	ldr	r3, [pc, #624]	@ (8009278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800900a:	0a1b      	lsrs	r3, r3, #8
 800900c:	f003 0301 	and.w	r3, r3, #1
 8009010:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009012:	4b99      	ldr	r3, [pc, #612]	@ (8009278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009016:	08db      	lsrs	r3, r3, #3
 8009018:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800901c:	693a      	ldr	r2, [r7, #16]
 800901e:	fb02 f303 	mul.w	r3, r2, r3
 8009022:	ee07 3a90 	vmov	s15, r3
 8009026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800902a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	2b00      	cmp	r3, #0
 8009032:	f000 8111 	beq.w	8009258 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	2b02      	cmp	r3, #2
 800903a:	f000 8083 	beq.w	8009144 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	2b02      	cmp	r3, #2
 8009042:	f200 80a1 	bhi.w	8009188 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d003      	beq.n	8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	2b01      	cmp	r3, #1
 8009050:	d056      	beq.n	8009100 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009052:	e099      	b.n	8009188 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009054:	4b88      	ldr	r3, [pc, #544]	@ (8009278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 0320 	and.w	r3, r3, #32
 800905c:	2b00      	cmp	r3, #0
 800905e:	d02d      	beq.n	80090bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009060:	4b85      	ldr	r3, [pc, #532]	@ (8009278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	08db      	lsrs	r3, r3, #3
 8009066:	f003 0303 	and.w	r3, r3, #3
 800906a:	4a84      	ldr	r2, [pc, #528]	@ (800927c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800906c:	fa22 f303 	lsr.w	r3, r2, r3
 8009070:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	ee07 3a90 	vmov	s15, r3
 8009078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	ee07 3a90 	vmov	s15, r3
 8009082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800908a:	4b7b      	ldr	r3, [pc, #492]	@ (8009278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800908c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800908e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009092:	ee07 3a90 	vmov	s15, r3
 8009096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800909a:	ed97 6a03 	vldr	s12, [r7, #12]
 800909e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009280 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80090ba:	e087      	b.n	80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	ee07 3a90 	vmov	s15, r3
 80090c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090c6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009284 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80090ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ce:	4b6a      	ldr	r3, [pc, #424]	@ (8009278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090d6:	ee07 3a90 	vmov	s15, r3
 80090da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090de:	ed97 6a03 	vldr	s12, [r7, #12]
 80090e2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009280 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090fe:	e065      	b.n	80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	ee07 3a90 	vmov	s15, r3
 8009106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800910a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009288 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800910e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009112:	4b59      	ldr	r3, [pc, #356]	@ (8009278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800911a:	ee07 3a90 	vmov	s15, r3
 800911e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009122:	ed97 6a03 	vldr	s12, [r7, #12]
 8009126:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009280 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800912a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800912e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009132:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800913a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800913e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009142:	e043      	b.n	80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	ee07 3a90 	vmov	s15, r3
 800914a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800914e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800928c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009156:	4b48      	ldr	r3, [pc, #288]	@ (8009278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800915a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800915e:	ee07 3a90 	vmov	s15, r3
 8009162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009166:	ed97 6a03 	vldr	s12, [r7, #12]
 800916a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009280 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800916e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800917a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800917e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009186:	e021      	b.n	80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	ee07 3a90 	vmov	s15, r3
 800918e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009192:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009288 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800919a:	4b37      	ldr	r3, [pc, #220]	@ (8009278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800919c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800919e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091a2:	ee07 3a90 	vmov	s15, r3
 80091a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80091ae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009280 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091ca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80091cc:	4b2a      	ldr	r3, [pc, #168]	@ (8009278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091d0:	0a5b      	lsrs	r3, r3, #9
 80091d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091d6:	ee07 3a90 	vmov	s15, r3
 80091da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80091ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091f2:	ee17 2a90 	vmov	r2, s15
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80091fa:	4b1f      	ldr	r3, [pc, #124]	@ (8009278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091fe:	0c1b      	lsrs	r3, r3, #16
 8009200:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009204:	ee07 3a90 	vmov	s15, r3
 8009208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800920c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009210:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009214:	edd7 6a07 	vldr	s13, [r7, #28]
 8009218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800921c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009220:	ee17 2a90 	vmov	r2, s15
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009228:	4b13      	ldr	r3, [pc, #76]	@ (8009278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800922a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800922c:	0e1b      	lsrs	r3, r3, #24
 800922e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009232:	ee07 3a90 	vmov	s15, r3
 8009236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800923a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800923e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009242:	edd7 6a07 	vldr	s13, [r7, #28]
 8009246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800924a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800924e:	ee17 2a90 	vmov	r2, s15
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009256:	e008      	b.n	800926a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	609a      	str	r2, [r3, #8]
}
 800926a:	bf00      	nop
 800926c:	3724      	adds	r7, #36	@ 0x24
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	58024400 	.word	0x58024400
 800927c:	03d09000 	.word	0x03d09000
 8009280:	46000000 	.word	0x46000000
 8009284:	4c742400 	.word	0x4c742400
 8009288:	4a742400 	.word	0x4a742400
 800928c:	4bbebc20 	.word	0x4bbebc20

08009290 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009290:	b480      	push	{r7}
 8009292:	b089      	sub	sp, #36	@ 0x24
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009298:	4ba0      	ldr	r3, [pc, #640]	@ (800951c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800929a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800929c:	f003 0303 	and.w	r3, r3, #3
 80092a0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80092a2:	4b9e      	ldr	r3, [pc, #632]	@ (800951c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092a6:	091b      	lsrs	r3, r3, #4
 80092a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092ac:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80092ae:	4b9b      	ldr	r3, [pc, #620]	@ (800951c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b2:	f003 0301 	and.w	r3, r3, #1
 80092b6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80092b8:	4b98      	ldr	r3, [pc, #608]	@ (800951c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092bc:	08db      	lsrs	r3, r3, #3
 80092be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092c2:	693a      	ldr	r2, [r7, #16]
 80092c4:	fb02 f303 	mul.w	r3, r2, r3
 80092c8:	ee07 3a90 	vmov	s15, r3
 80092cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f000 8111 	beq.w	80094fe <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	2b02      	cmp	r3, #2
 80092e0:	f000 8083 	beq.w	80093ea <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	f200 80a1 	bhi.w	800942e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d003      	beq.n	80092fa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d056      	beq.n	80093a6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80092f8:	e099      	b.n	800942e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092fa:	4b88      	ldr	r3, [pc, #544]	@ (800951c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f003 0320 	and.w	r3, r3, #32
 8009302:	2b00      	cmp	r3, #0
 8009304:	d02d      	beq.n	8009362 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009306:	4b85      	ldr	r3, [pc, #532]	@ (800951c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	08db      	lsrs	r3, r3, #3
 800930c:	f003 0303 	and.w	r3, r3, #3
 8009310:	4a83      	ldr	r2, [pc, #524]	@ (8009520 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009312:	fa22 f303 	lsr.w	r3, r2, r3
 8009316:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	ee07 3a90 	vmov	s15, r3
 800931e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	ee07 3a90 	vmov	s15, r3
 8009328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800932c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009330:	4b7a      	ldr	r3, [pc, #488]	@ (800951c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009338:	ee07 3a90 	vmov	s15, r3
 800933c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009340:	ed97 6a03 	vldr	s12, [r7, #12]
 8009344:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009524 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009348:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800934c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009350:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009354:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800935c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009360:	e087      	b.n	8009472 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	ee07 3a90 	vmov	s15, r3
 8009368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800936c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009528 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009370:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009374:	4b69      	ldr	r3, [pc, #420]	@ (800951c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800937c:	ee07 3a90 	vmov	s15, r3
 8009380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009384:	ed97 6a03 	vldr	s12, [r7, #12]
 8009388:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009524 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800938c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009390:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009394:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009398:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800939c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093a4:	e065      	b.n	8009472 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	ee07 3a90 	vmov	s15, r3
 80093ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800952c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80093b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093b8:	4b58      	ldr	r3, [pc, #352]	@ (800951c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093c0:	ee07 3a90 	vmov	s15, r3
 80093c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80093cc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009524 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093e8:	e043      	b.n	8009472 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	ee07 3a90 	vmov	s15, r3
 80093f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009530 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80093f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093fc:	4b47      	ldr	r3, [pc, #284]	@ (800951c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009404:	ee07 3a90 	vmov	s15, r3
 8009408:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800940c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009410:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009524 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009414:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009418:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800941c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009420:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009428:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800942c:	e021      	b.n	8009472 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	ee07 3a90 	vmov	s15, r3
 8009434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009438:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009528 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800943c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009440:	4b36      	ldr	r3, [pc, #216]	@ (800951c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009448:	ee07 3a90 	vmov	s15, r3
 800944c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009450:	ed97 6a03 	vldr	s12, [r7, #12]
 8009454:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009524 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009458:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800945c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009460:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009464:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800946c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009470:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009472:	4b2a      	ldr	r3, [pc, #168]	@ (800951c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009476:	0a5b      	lsrs	r3, r3, #9
 8009478:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800947c:	ee07 3a90 	vmov	s15, r3
 8009480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009484:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009488:	ee37 7a87 	vadd.f32	s14, s15, s14
 800948c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009498:	ee17 2a90 	vmov	r2, s15
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80094a0:	4b1e      	ldr	r3, [pc, #120]	@ (800951c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094a4:	0c1b      	lsrs	r3, r3, #16
 80094a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094aa:	ee07 3a90 	vmov	s15, r3
 80094ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80094be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094c6:	ee17 2a90 	vmov	r2, s15
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80094ce:	4b13      	ldr	r3, [pc, #76]	@ (800951c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094d2:	0e1b      	lsrs	r3, r3, #24
 80094d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094d8:	ee07 3a90 	vmov	s15, r3
 80094dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80094ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094f4:	ee17 2a90 	vmov	r2, s15
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80094fc:	e008      	b.n	8009510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	609a      	str	r2, [r3, #8]
}
 8009510:	bf00      	nop
 8009512:	3724      	adds	r7, #36	@ 0x24
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr
 800951c:	58024400 	.word	0x58024400
 8009520:	03d09000 	.word	0x03d09000
 8009524:	46000000 	.word	0x46000000
 8009528:	4c742400 	.word	0x4c742400
 800952c:	4a742400 	.word	0x4a742400
 8009530:	4bbebc20 	.word	0x4bbebc20

08009534 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009542:	4b53      	ldr	r3, [pc, #332]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 8009544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009546:	f003 0303 	and.w	r3, r3, #3
 800954a:	2b03      	cmp	r3, #3
 800954c:	d101      	bne.n	8009552 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	e099      	b.n	8009686 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009552:	4b4f      	ldr	r3, [pc, #316]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a4e      	ldr	r2, [pc, #312]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 8009558:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800955c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800955e:	f7f7 fe0d 	bl	800117c <HAL_GetTick>
 8009562:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009564:	e008      	b.n	8009578 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009566:	f7f7 fe09 	bl	800117c <HAL_GetTick>
 800956a:	4602      	mov	r2, r0
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	1ad3      	subs	r3, r2, r3
 8009570:	2b02      	cmp	r3, #2
 8009572:	d901      	bls.n	8009578 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009574:	2303      	movs	r3, #3
 8009576:	e086      	b.n	8009686 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009578:	4b45      	ldr	r3, [pc, #276]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1f0      	bne.n	8009566 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009584:	4b42      	ldr	r3, [pc, #264]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 8009586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009588:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	031b      	lsls	r3, r3, #12
 8009592:	493f      	ldr	r1, [pc, #252]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 8009594:	4313      	orrs	r3, r2
 8009596:	628b      	str	r3, [r1, #40]	@ 0x28
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	3b01      	subs	r3, #1
 800959e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	3b01      	subs	r3, #1
 80095a8:	025b      	lsls	r3, r3, #9
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	431a      	orrs	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	041b      	lsls	r3, r3, #16
 80095b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80095ba:	431a      	orrs	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	3b01      	subs	r3, #1
 80095c2:	061b      	lsls	r3, r3, #24
 80095c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80095c8:	4931      	ldr	r1, [pc, #196]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 80095ca:	4313      	orrs	r3, r2
 80095cc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80095ce:	4b30      	ldr	r3, [pc, #192]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 80095d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	695b      	ldr	r3, [r3, #20]
 80095da:	492d      	ldr	r1, [pc, #180]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 80095dc:	4313      	orrs	r3, r2
 80095de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80095e0:	4b2b      	ldr	r3, [pc, #172]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 80095e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e4:	f023 0220 	bic.w	r2, r3, #32
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	4928      	ldr	r1, [pc, #160]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 80095ee:	4313      	orrs	r3, r2
 80095f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80095f2:	4b27      	ldr	r3, [pc, #156]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 80095f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095f6:	4a26      	ldr	r2, [pc, #152]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 80095f8:	f023 0310 	bic.w	r3, r3, #16
 80095fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80095fe:	4b24      	ldr	r3, [pc, #144]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 8009600:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009602:	4b24      	ldr	r3, [pc, #144]	@ (8009694 <RCCEx_PLL2_Config+0x160>)
 8009604:	4013      	ands	r3, r2
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	69d2      	ldr	r2, [r2, #28]
 800960a:	00d2      	lsls	r2, r2, #3
 800960c:	4920      	ldr	r1, [pc, #128]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 800960e:	4313      	orrs	r3, r2
 8009610:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009612:	4b1f      	ldr	r3, [pc, #124]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 8009614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009616:	4a1e      	ldr	r2, [pc, #120]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 8009618:	f043 0310 	orr.w	r3, r3, #16
 800961c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d106      	bne.n	8009632 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009624:	4b1a      	ldr	r3, [pc, #104]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 8009626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009628:	4a19      	ldr	r2, [pc, #100]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 800962a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800962e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009630:	e00f      	b.n	8009652 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d106      	bne.n	8009646 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009638:	4b15      	ldr	r3, [pc, #84]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 800963a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800963c:	4a14      	ldr	r2, [pc, #80]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 800963e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009642:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009644:	e005      	b.n	8009652 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009646:	4b12      	ldr	r3, [pc, #72]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 8009648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800964a:	4a11      	ldr	r2, [pc, #68]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 800964c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009650:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009652:	4b0f      	ldr	r3, [pc, #60]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a0e      	ldr	r2, [pc, #56]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 8009658:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800965c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800965e:	f7f7 fd8d 	bl	800117c <HAL_GetTick>
 8009662:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009664:	e008      	b.n	8009678 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009666:	f7f7 fd89 	bl	800117c <HAL_GetTick>
 800966a:	4602      	mov	r2, r0
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	2b02      	cmp	r3, #2
 8009672:	d901      	bls.n	8009678 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009674:	2303      	movs	r3, #3
 8009676:	e006      	b.n	8009686 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009678:	4b05      	ldr	r3, [pc, #20]	@ (8009690 <RCCEx_PLL2_Config+0x15c>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d0f0      	beq.n	8009666 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009684:	7bfb      	ldrb	r3, [r7, #15]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	58024400 	.word	0x58024400
 8009694:	ffff0007 	.word	0xffff0007

08009698 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80096a2:	2300      	movs	r3, #0
 80096a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80096a6:	4b53      	ldr	r3, [pc, #332]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 80096a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096aa:	f003 0303 	and.w	r3, r3, #3
 80096ae:	2b03      	cmp	r3, #3
 80096b0:	d101      	bne.n	80096b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	e099      	b.n	80097ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80096b6:	4b4f      	ldr	r3, [pc, #316]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a4e      	ldr	r2, [pc, #312]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 80096bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096c2:	f7f7 fd5b 	bl	800117c <HAL_GetTick>
 80096c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80096c8:	e008      	b.n	80096dc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80096ca:	f7f7 fd57 	bl	800117c <HAL_GetTick>
 80096ce:	4602      	mov	r2, r0
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	2b02      	cmp	r3, #2
 80096d6:	d901      	bls.n	80096dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80096d8:	2303      	movs	r3, #3
 80096da:	e086      	b.n	80097ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80096dc:	4b45      	ldr	r3, [pc, #276]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1f0      	bne.n	80096ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80096e8:	4b42      	ldr	r3, [pc, #264]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 80096ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ec:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	051b      	lsls	r3, r3, #20
 80096f6:	493f      	ldr	r1, [pc, #252]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 80096f8:	4313      	orrs	r3, r2
 80096fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	3b01      	subs	r3, #1
 8009702:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	3b01      	subs	r3, #1
 800970c:	025b      	lsls	r3, r3, #9
 800970e:	b29b      	uxth	r3, r3
 8009710:	431a      	orrs	r2, r3
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	3b01      	subs	r3, #1
 8009718:	041b      	lsls	r3, r3, #16
 800971a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800971e:	431a      	orrs	r2, r3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	3b01      	subs	r3, #1
 8009726:	061b      	lsls	r3, r3, #24
 8009728:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800972c:	4931      	ldr	r1, [pc, #196]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 800972e:	4313      	orrs	r3, r2
 8009730:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009732:	4b30      	ldr	r3, [pc, #192]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 8009734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009736:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	695b      	ldr	r3, [r3, #20]
 800973e:	492d      	ldr	r1, [pc, #180]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 8009740:	4313      	orrs	r3, r2
 8009742:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009744:	4b2b      	ldr	r3, [pc, #172]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 8009746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009748:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	699b      	ldr	r3, [r3, #24]
 8009750:	4928      	ldr	r1, [pc, #160]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 8009752:	4313      	orrs	r3, r2
 8009754:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009756:	4b27      	ldr	r3, [pc, #156]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 8009758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800975a:	4a26      	ldr	r2, [pc, #152]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 800975c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009760:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009762:	4b24      	ldr	r3, [pc, #144]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 8009764:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009766:	4b24      	ldr	r3, [pc, #144]	@ (80097f8 <RCCEx_PLL3_Config+0x160>)
 8009768:	4013      	ands	r3, r2
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	69d2      	ldr	r2, [r2, #28]
 800976e:	00d2      	lsls	r2, r2, #3
 8009770:	4920      	ldr	r1, [pc, #128]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 8009772:	4313      	orrs	r3, r2
 8009774:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009776:	4b1f      	ldr	r3, [pc, #124]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 8009778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800977a:	4a1e      	ldr	r2, [pc, #120]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 800977c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009780:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d106      	bne.n	8009796 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009788:	4b1a      	ldr	r3, [pc, #104]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 800978a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800978c:	4a19      	ldr	r2, [pc, #100]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 800978e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009792:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009794:	e00f      	b.n	80097b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	2b01      	cmp	r3, #1
 800979a:	d106      	bne.n	80097aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800979c:	4b15      	ldr	r3, [pc, #84]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 800979e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a0:	4a14      	ldr	r2, [pc, #80]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 80097a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80097a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80097a8:	e005      	b.n	80097b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80097aa:	4b12      	ldr	r3, [pc, #72]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 80097ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ae:	4a11      	ldr	r2, [pc, #68]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 80097b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80097b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80097b6:	4b0f      	ldr	r3, [pc, #60]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a0e      	ldr	r2, [pc, #56]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 80097bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097c2:	f7f7 fcdb 	bl	800117c <HAL_GetTick>
 80097c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80097c8:	e008      	b.n	80097dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80097ca:	f7f7 fcd7 	bl	800117c <HAL_GetTick>
 80097ce:	4602      	mov	r2, r0
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	1ad3      	subs	r3, r2, r3
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	d901      	bls.n	80097dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80097d8:	2303      	movs	r3, #3
 80097da:	e006      	b.n	80097ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80097dc:	4b05      	ldr	r3, [pc, #20]	@ (80097f4 <RCCEx_PLL3_Config+0x15c>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d0f0      	beq.n	80097ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	58024400 	.word	0x58024400
 80097f8:	ffff0007 	.word	0xffff0007

080097fc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d101      	bne.n	800980e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	e10f      	b.n	8009a2e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a87      	ldr	r2, [pc, #540]	@ (8009a38 <HAL_SPI_Init+0x23c>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d00f      	beq.n	800983e <HAL_SPI_Init+0x42>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a86      	ldr	r2, [pc, #536]	@ (8009a3c <HAL_SPI_Init+0x240>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d00a      	beq.n	800983e <HAL_SPI_Init+0x42>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a84      	ldr	r2, [pc, #528]	@ (8009a40 <HAL_SPI_Init+0x244>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d005      	beq.n	800983e <HAL_SPI_Init+0x42>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	2b0f      	cmp	r3, #15
 8009838:	d901      	bls.n	800983e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	e0f7      	b.n	8009a2e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fe98 	bl	800a574 <SPI_GetPacketSize>
 8009844:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a7b      	ldr	r2, [pc, #492]	@ (8009a38 <HAL_SPI_Init+0x23c>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d00c      	beq.n	800986a <HAL_SPI_Init+0x6e>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a79      	ldr	r2, [pc, #484]	@ (8009a3c <HAL_SPI_Init+0x240>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d007      	beq.n	800986a <HAL_SPI_Init+0x6e>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a78      	ldr	r2, [pc, #480]	@ (8009a40 <HAL_SPI_Init+0x244>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d002      	beq.n	800986a <HAL_SPI_Init+0x6e>
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2b08      	cmp	r3, #8
 8009868:	d811      	bhi.n	800988e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800986e:	4a72      	ldr	r2, [pc, #456]	@ (8009a38 <HAL_SPI_Init+0x23c>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d009      	beq.n	8009888 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a70      	ldr	r2, [pc, #448]	@ (8009a3c <HAL_SPI_Init+0x240>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d004      	beq.n	8009888 <HAL_SPI_Init+0x8c>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a6f      	ldr	r2, [pc, #444]	@ (8009a40 <HAL_SPI_Init+0x244>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d104      	bne.n	8009892 <HAL_SPI_Init+0x96>
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2b10      	cmp	r3, #16
 800988c:	d901      	bls.n	8009892 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	e0cd      	b.n	8009a2e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2b00      	cmp	r3, #0
 800989c:	d106      	bne.n	80098ac <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f7f7 f9fa 	bl	8000ca0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2202      	movs	r2, #2
 80098b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f022 0201 	bic.w	r2, r2, #1
 80098c2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80098ce:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	699b      	ldr	r3, [r3, #24]
 80098d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80098d8:	d119      	bne.n	800990e <HAL_SPI_Init+0x112>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80098e2:	d103      	bne.n	80098ec <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d008      	beq.n	80098fe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d10c      	bne.n	800990e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80098f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098fc:	d107      	bne.n	800990e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800990c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00f      	beq.n	800993a <HAL_SPI_Init+0x13e>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	2b06      	cmp	r3, #6
 8009920:	d90b      	bls.n	800993a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	430a      	orrs	r2, r1
 8009936:	601a      	str	r2, [r3, #0]
 8009938:	e007      	b.n	800994a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009948:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	69da      	ldr	r2, [r3, #28]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009952:	431a      	orrs	r2, r3
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	431a      	orrs	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800995c:	ea42 0103 	orr.w	r1, r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	68da      	ldr	r2, [r3, #12]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	430a      	orrs	r2, r1
 800996a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009974:	431a      	orrs	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800997a:	431a      	orrs	r2, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	699b      	ldr	r3, [r3, #24]
 8009980:	431a      	orrs	r2, r3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	691b      	ldr	r3, [r3, #16]
 8009986:	431a      	orrs	r2, r3
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	695b      	ldr	r3, [r3, #20]
 800998c:	431a      	orrs	r2, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a1b      	ldr	r3, [r3, #32]
 8009992:	431a      	orrs	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	431a      	orrs	r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800999e:	431a      	orrs	r2, r3
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	431a      	orrs	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099aa:	ea42 0103 	orr.w	r1, r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	430a      	orrs	r2, r1
 80099b8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d113      	bne.n	80099ea <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099d4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80099e8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f022 0201 	bic.w	r2, r2, #1
 80099f8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00a      	beq.n	8009a1c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	430a      	orrs	r2, r1
 8009a1a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2201      	movs	r2, #1
 8009a28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	40013000 	.word	0x40013000
 8009a3c:	40003800 	.word	0x40003800
 8009a40:	40003c00 	.word	0x40003c00

08009a44 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	4613      	mov	r3, r2
 8009a50:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d001      	beq.n	8009a62 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8009a5e:	2302      	movs	r3, #2
 8009a60:	e126      	b.n	8009cb0 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d002      	beq.n	8009a6e <HAL_SPI_Transmit_DMA+0x2a>
 8009a68:	88fb      	ldrh	r3, [r7, #6]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d101      	bne.n	8009a72 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e11e      	b.n	8009cb0 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d101      	bne.n	8009a80 <HAL_SPI_Transmit_DMA+0x3c>
 8009a7c:	2302      	movs	r3, #2
 8009a7e:	e117      	b.n	8009cb0 <HAL_SPI_Transmit_DMA+0x26c>
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2201      	movs	r2, #1
 8009a84:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2203      	movs	r2, #3
 8009a8c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	68ba      	ldr	r2, [r7, #8]
 8009a9c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	88fa      	ldrh	r2, [r7, #6]
 8009aa2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	88fa      	ldrh	r2, [r7, #6]
 8009aaa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009ad8:	d108      	bne.n	8009aec <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ae8:	601a      	str	r2, [r3, #0]
 8009aea:	e009      	b.n	8009b00 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009afe:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	2b0f      	cmp	r3, #15
 8009b06:	d905      	bls.n	8009b14 <HAL_SPI_Transmit_DMA+0xd0>
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b12:	d10f      	bne.n	8009b34 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009b18:	2b07      	cmp	r3, #7
 8009b1a:	d911      	bls.n	8009b40 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b20:	699b      	ldr	r3, [r3, #24]
 8009b22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b26:	d00b      	beq.n	8009b40 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b2c:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009b2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b32:	d005      	beq.n	8009b40 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e0b7      	b.n	8009cb0 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	2b07      	cmp	r3, #7
 8009b46:	d820      	bhi.n	8009b8a <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b4c:	699b      	ldr	r3, [r3, #24]
 8009b4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b52:	d109      	bne.n	8009b68 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	105b      	asrs	r3, r3, #1
 8009b60:	b29a      	uxth	r2, r3
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b72:	d11e      	bne.n	8009bb2 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	3303      	adds	r3, #3
 8009b7e:	109b      	asrs	r3, r3, #2
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009b88:	e013      	b.n	8009bb2 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	2b0f      	cmp	r3, #15
 8009b90:	d80f      	bhi.n	8009bb2 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b96:	699b      	ldr	r3, [r3, #24]
 8009b98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b9c:	d109      	bne.n	8009bb2 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	105b      	asrs	r3, r3, #1
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bb6:	4a40      	ldr	r2, [pc, #256]	@ (8009cb8 <HAL_SPI_Transmit_DMA+0x274>)
 8009bb8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bbe:	4a3f      	ldr	r2, [pc, #252]	@ (8009cbc <HAL_SPI_Transmit_DMA+0x278>)
 8009bc0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bc6:	4a3e      	ldr	r2, [pc, #248]	@ (8009cc0 <HAL_SPI_Transmit_DMA+0x27c>)
 8009bc8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bce:	2200      	movs	r2, #0
 8009bd0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	689a      	ldr	r2, [r3, #8]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009be0:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bea:	4619      	mov	r1, r3
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3320      	adds	r3, #32
 8009bf2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009bfa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009bfc:	f7f9 fde0 	bl	80037c0 <HAL_DMA_Start_IT>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d011      	beq.n	8009c2a <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c0c:	f043 0210 	orr.w	r2, r3, #16
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	e042      	b.n	8009cb0 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c2e:	69db      	ldr	r3, [r3, #28]
 8009c30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c34:	d108      	bne.n	8009c48 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	6859      	ldr	r1, [r3, #4]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	4b20      	ldr	r3, [pc, #128]	@ (8009cc4 <HAL_SPI_Transmit_DMA+0x280>)
 8009c42:	400b      	ands	r3, r1
 8009c44:	6053      	str	r3, [r2, #4]
 8009c46:	e009      	b.n	8009c5c <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	685a      	ldr	r2, [r3, #4]
 8009c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8009cc4 <HAL_SPI_Transmit_DMA+0x280>)
 8009c50:	4013      	ands	r3, r2
 8009c52:	88f9      	ldrh	r1, [r7, #6]
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	6812      	ldr	r2, [r2, #0]
 8009c58:	430b      	orrs	r3, r1
 8009c5a:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	689a      	ldr	r2, [r3, #8]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009c6a:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	691a      	ldr	r2, [r3, #16]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8009c7a:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f042 0201 	orr.w	r2, r2, #1
 8009c8a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c94:	d107      	bne.n	8009ca6 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ca4:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	0800a2d7 	.word	0x0800a2d7
 8009cbc:	0800a291 	.word	0x0800a291
 8009cc0:	0800a2f3 	.word	0x0800a2f3
 8009cc4:	ffff0000 	.word	0xffff0000

08009cc8 <HAL_SPI_Abort>:
  *          + Set handle State to READY.
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;

  __IO uint32_t count;

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d101      	bne.n	8009cde <HAL_SPI_Abort+0x16>
 8009cda:	2302      	movs	r3, #2
 8009cdc:	e0d9      	b.n	8009e92 <HAL_SPI_Abort+0x1ca>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set hspi->state to aborting to avoid any interaction */
  hspi->State = HAL_SPI_STATE_ABORT;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2207      	movs	r2, #7
 8009cea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	73fb      	strb	r3, [r7, #15]
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 8009cf2:	4b6a      	ldr	r3, [pc, #424]	@ (8009e9c <HAL_SPI_Abort+0x1d4>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a6a      	ldr	r2, [pc, #424]	@ (8009ea0 <HAL_SPI_Abort+0x1d8>)
 8009cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8009cfc:	0a5b      	lsrs	r3, r3, #9
 8009cfe:	2264      	movs	r2, #100	@ 0x64
 8009d00:	fb02 f303 	mul.w	r3, r2, r3
 8009d04:	60bb      	str	r3, [r7, #8]

  /* If master communication on going, make sure current frame is done before closing the connection */
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d14:	d15b      	bne.n	8009dce <HAL_SPI_Abort+0x106>
  {
    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	691a      	ldr	r2, [r3, #16]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f022 0208 	bic.w	r2, r2, #8
 8009d24:	611a      	str	r2, [r3, #16]
    do
    {
      count--;
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	3b01      	subs	r3, #1
 8009d2a:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d108      	bne.n	8009d44 <HAL_SPI_Abort+0x7c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d38:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8009d42:	e006      	b.n	8009d52 <HAL_SPI_Abort+0x8a>
      }
    } while (HAL_IS_BIT_SET(hspi->Instance->IER, SPI_IT_EOT));
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	691b      	ldr	r3, [r3, #16]
 8009d4a:	f003 0308 	and.w	r3, r3, #8
 8009d4e:	2b08      	cmp	r3, #8
 8009d50:	d0e9      	beq.n	8009d26 <HAL_SPI_Abort+0x5e>

    /* Request a Suspend transfer */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009d60:	601a      	str	r2, [r3, #0]
    do
    {
      count--;
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	3b01      	subs	r3, #1
 8009d66:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d108      	bne.n	8009d80 <HAL_SPI_Abort+0xb8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d74:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8009d7e:	e007      	b.n	8009d90 <HAL_SPI_Abort+0xc8>
      }
    } while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d8e:	d0e8      	beq.n	8009d62 <HAL_SPI_Abort+0x9a>

    /* Clear SUSP flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	699a      	ldr	r2, [r3, #24]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009d9e:	619a      	str	r2, [r3, #24]
    do
    {
      count--;
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	3b01      	subs	r3, #1
 8009da4:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d108      	bne.n	8009dbe <HAL_SPI_Abort+0xf6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009db2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8009dbc:	e007      	b.n	8009dce <HAL_SPI_Abort+0x106>
      }
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_SUSP));
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	695b      	ldr	r3, [r3, #20]
 8009dc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009dc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009dcc:	d0e8      	beq.n	8009da0 <HAL_SPI_Abort+0xd8>
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009dd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ddc:	d11b      	bne.n	8009e16 <HAL_SPI_Abort+0x14e>
  {
    if (hspi->hdmatx != NULL)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d017      	beq.n	8009e16 <HAL_SPI_Abort+0x14e>
    {
      /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
      hspi->hdmatx->XferAbortCallback = NULL;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009dea:	2200      	movs	r2, #0
 8009dec:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7f9 ff4e 	bl	8003c94 <HAL_DMA_Abort>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00b      	beq.n	8009e16 <HAL_SPI_Abort+0x14e>
      {
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7fb fbd4 	bl	80055b0 <HAL_DMA_GetError>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b20      	cmp	r3, #32
 8009e0c:	d103      	bne.n	8009e16 <HAL_SPI_Abort+0x14e>
        {
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2240      	movs	r2, #64	@ 0x40
 8009e12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e24:	d11b      	bne.n	8009e5e <HAL_SPI_Abort+0x196>
  {
    if (hspi->hdmarx != NULL)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d017      	beq.n	8009e5e <HAL_SPI_Abort+0x196>
    {
      /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
      hspi->hdmarx->XferAbortCallback = NULL;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e32:	2200      	movs	r2, #0
 8009e34:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7f9 ff2a 	bl	8003c94 <HAL_DMA_Abort>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00b      	beq.n	8009e5e <HAL_SPI_Abort+0x196>
      {
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7fb fbb0 	bl	80055b0 <HAL_DMA_GetError>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b20      	cmp	r3, #32
 8009e54:	d103      	bne.n	8009e5e <HAL_SPI_Abort+0x196>
        {
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2240      	movs	r2, #64	@ 0x40
 8009e5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Proceed with abort procedure */
  SPI_AbortTransfer(hspi);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fa84 	bl	800a36c <SPI_AbortTransfer>

  /* Check error during Abort procedure */
  if (HAL_IS_BIT_SET(hspi->ErrorCode, HAL_SPI_ERROR_ABORT))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e6e:	2b40      	cmp	r3, #64	@ 0x40
 8009e70:	d102      	bne.n	8009e78 <HAL_SPI_Abort+0x1b0>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	73fb      	strb	r3, [r7, #15]
 8009e76:	e003      	b.n	8009e80 <HAL_SPI_Abort+0x1b8>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return errorcode;
 8009e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	24000000 	.word	0x24000000
 8009ea0:	057619f1 	.word	0x057619f1

08009ea4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b08a      	sub	sp, #40	@ 0x28
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	691b      	ldr	r3, [r3, #16]
 8009eb2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009ebc:	6a3a      	ldr	r2, [r7, #32]
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	4013      	ands	r3, r2
 8009ec2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009ed6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	3330      	adds	r3, #48	@ 0x30
 8009ede:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d010      	beq.n	8009f0c <HAL_SPI_IRQHandler+0x68>
 8009eea:	6a3b      	ldr	r3, [r7, #32]
 8009eec:	f003 0308 	and.w	r3, r3, #8
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00b      	beq.n	8009f0c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	699a      	ldr	r2, [r3, #24]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f02:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f9b9 	bl	800a27c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8009f0a:	e192      	b.n	800a232 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d113      	bne.n	8009f3e <HAL_SPI_IRQHandler+0x9a>
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	f003 0320 	and.w	r3, r3, #32
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d10e      	bne.n	8009f3e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d009      	beq.n	8009f3e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	4798      	blx	r3
    hspi->RxISR(hspi);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	4798      	blx	r3
    handled = 1UL;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009f3e:	69bb      	ldr	r3, [r7, #24]
 8009f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10f      	bne.n	8009f68 <HAL_SPI_IRQHandler+0xc4>
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	f003 0301 	and.w	r3, r3, #1
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00a      	beq.n	8009f68 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d105      	bne.n	8009f68 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	4798      	blx	r3
    handled = 1UL;
 8009f64:	2301      	movs	r3, #1
 8009f66:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	f003 0320 	and.w	r3, r3, #32
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10f      	bne.n	8009f92 <HAL_SPI_IRQHandler+0xee>
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	f003 0302 	and.w	r3, r3, #2
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00a      	beq.n	8009f92 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d105      	bne.n	8009f92 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	4798      	blx	r3
    handled = 1UL;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8009f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f040 8147 	bne.w	800a228 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	f003 0308 	and.w	r3, r3, #8
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f000 808b 	beq.w	800a0bc <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	699a      	ldr	r2, [r3, #24]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f042 0208 	orr.w	r2, r2, #8
 8009fb4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	699a      	ldr	r2, [r3, #24]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f042 0210 	orr.w	r2, r2, #16
 8009fc4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	699a      	ldr	r2, [r3, #24]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009fd4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	691a      	ldr	r2, [r3, #16]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f022 0208 	bic.w	r2, r2, #8
 8009fe4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d13d      	bne.n	800a070 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8009ff4:	e036      	b.n	800a064 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	2b0f      	cmp	r3, #15
 8009ffc:	d90b      	bls.n	800a016 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a006:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a008:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a00e:	1d1a      	adds	r2, r3, #4
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	665a      	str	r2, [r3, #100]	@ 0x64
 800a014:	e01d      	b.n	800a052 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	2b07      	cmp	r3, #7
 800a01c:	d90b      	bls.n	800a036 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	8812      	ldrh	r2, [r2, #0]
 800a026:	b292      	uxth	r2, r2
 800a028:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a02e:	1c9a      	adds	r2, r3, #2
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	665a      	str	r2, [r3, #100]	@ 0x64
 800a034:	e00d      	b.n	800a052 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a042:	7812      	ldrb	r2, [r2, #0]
 800a044:	b2d2      	uxtb	r2, r2
 800a046:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a04c:	1c5a      	adds	r2, r3, #1
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a058:	b29b      	uxth	r3, r3
 800a05a:	3b01      	subs	r3, #1
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1c2      	bne.n	8009ff6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f9df 	bl	800a434 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2201      	movs	r2, #1
 800a07a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a084:	2b00      	cmp	r3, #0
 800a086:	d003      	beq.n	800a090 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f7f6 fa63 	bl	8000554 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a08e:	e0d0      	b.n	800a232 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a090:	7cfb      	ldrb	r3, [r7, #19]
 800a092:	2b05      	cmp	r3, #5
 800a094:	d103      	bne.n	800a09e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 f8dc 	bl	800a254 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800a09c:	e0c6      	b.n	800a22c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a09e:	7cfb      	ldrb	r3, [r7, #19]
 800a0a0:	2b04      	cmp	r3, #4
 800a0a2:	d103      	bne.n	800a0ac <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 f8cb 	bl	800a240 <HAL_SPI_RxCpltCallback>
    return;
 800a0aa:	e0bf      	b.n	800a22c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a0ac:	7cfb      	ldrb	r3, [r7, #19]
 800a0ae:	2b03      	cmp	r3, #3
 800a0b0:	f040 80bc 	bne.w	800a22c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f7f6 fa3b 	bl	8000530 <HAL_SPI_TxCpltCallback>
    return;
 800a0ba:	e0b7      	b.n	800a22c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	f000 80b5 	beq.w	800a232 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00f      	beq.n	800a0f2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a0d8:	f043 0204 	orr.w	r2, r3, #4
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	699a      	ldr	r2, [r3, #24]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a0f0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00f      	beq.n	800a11c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a102:	f043 0201 	orr.w	r2, r3, #1
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	699a      	ldr	r2, [r3, #24]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a11a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00f      	beq.n	800a146 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a12c:	f043 0208 	orr.w	r2, r3, #8
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	699a      	ldr	r2, [r3, #24]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a144:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	f003 0320 	and.w	r3, r3, #32
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00f      	beq.n	800a170 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a156:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	699a      	ldr	r2, [r3, #24]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f042 0220 	orr.w	r2, r2, #32
 800a16e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a176:	2b00      	cmp	r3, #0
 800a178:	d05a      	beq.n	800a230 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f022 0201 	bic.w	r2, r2, #1
 800a188:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	6919      	ldr	r1, [r3, #16]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	4b28      	ldr	r3, [pc, #160]	@ (800a238 <HAL_SPI_IRQHandler+0x394>)
 800a196:	400b      	ands	r3, r1
 800a198:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a1a0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a1a4:	d138      	bne.n	800a218 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	689a      	ldr	r2, [r3, #8]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a1b4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d013      	beq.n	800a1e6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a1c2:	4a1e      	ldr	r2, [pc, #120]	@ (800a23c <HAL_SPI_IRQHandler+0x398>)
 800a1c4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7fa f880 	bl	80042d0 <HAL_DMA_Abort_IT>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d007      	beq.n	800a1e6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d020      	beq.n	800a230 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a1f2:	4a12      	ldr	r2, [pc, #72]	@ (800a23c <HAL_SPI_IRQHandler+0x398>)
 800a1f4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7fa f868 	bl	80042d0 <HAL_DMA_Abort_IT>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d014      	beq.n	800a230 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a20c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a216:	e00b      	b.n	800a230 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f7f6 f997 	bl	8000554 <HAL_SPI_ErrorCallback>
    return;
 800a226:	e003      	b.n	800a230 <HAL_SPI_IRQHandler+0x38c>
    return;
 800a228:	bf00      	nop
 800a22a:	e002      	b.n	800a232 <HAL_SPI_IRQHandler+0x38e>
    return;
 800a22c:	bf00      	nop
 800a22e:	e000      	b.n	800a232 <HAL_SPI_IRQHandler+0x38e>
    return;
 800a230:	bf00      	nop
  }
}
 800a232:	3728      	adds	r7, #40	@ 0x28
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	fffffc94 	.word	0xfffffc94
 800a23c:	0800a339 	.word	0x0800a339

0800a240 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a248:	bf00      	nop
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a270:	bf00      	nop
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800a284:	bf00      	nop
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a29c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	2b07      	cmp	r3, #7
 800a2a8:	d011      	beq.n	800a2ce <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a2ae:	69db      	ldr	r3, [r3, #28]
 800a2b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2b4:	d103      	bne.n	800a2be <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f7f6 f93a 	bl	8000530 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800a2bc:	e007      	b.n	800a2ce <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	691a      	ldr	r2, [r3, #16]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f042 0208 	orr.w	r2, r2, #8
 800a2cc:	611a      	str	r2, [r3, #16]
}
 800a2ce:	bf00      	nop
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b084      	sub	sp, #16
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2e2:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f7ff ffbf 	bl	800a268 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a2ea:	bf00      	nop
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b084      	sub	sp, #16
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2fe:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f7fb f955 	bl	80055b0 <HAL_DMA_GetError>
 800a306:	4603      	mov	r3, r0
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d011      	beq.n	800a330 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	f000 f891 	bl	800a434 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a318:	f043 0210 	orr.w	r2, r3, #16
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2201      	movs	r2, #1
 800a326:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f7f6 f912 	bl	8000554 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800a330:	bf00      	nop
 800a332:	3710      	adds	r7, #16
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a344:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2200      	movs	r2, #0
 800a34a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2200      	movs	r2, #0
 800a352:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2201      	movs	r2, #1
 800a35a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	f7f6 f8f8 	bl	8000554 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a364:	bf00      	nop
 800a366:	3710      	adds	r7, #16
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <SPI_AbortTransfer>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f022 0201 	bic.w	r2, r2, #1
 800a382:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	6919      	ldr	r1, [r3, #16]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	4b28      	ldr	r3, [pc, #160]	@ (800a430 <SPI_AbortTransfer+0xc4>)
 800a390:	400b      	ands	r3, r1
 800a392:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Clear the Status flags in the SR register */
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	699a      	ldr	r2, [r3, #24]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f042 0208 	orr.w	r2, r2, #8
 800a3a2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	699a      	ldr	r2, [r3, #24]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f042 0210 	orr.w	r2, r2, #16
 800a3b2:	619a      	str	r2, [r3, #24]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	689a      	ldr	r2, [r3, #8]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a3c2:	609a      	str	r2, [r3, #8]

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	699a      	ldr	r2, [r3, #24]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a3d2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	699a      	ldr	r2, [r3, #24]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f042 0220 	orr.w	r2, r2, #32
 800a3e2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	699a      	ldr	r2, [r3, #24]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a3f2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	699a      	ldr	r2, [r3, #24]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a402:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	699a      	ldr	r2, [r3, #24]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a412:	619a      	str	r2, [r3, #24]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800a424:	bf00      	nop
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	fffffc90 	.word	0xfffffc90

0800a434 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	695b      	ldr	r3, [r3, #20]
 800a442:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	699a      	ldr	r2, [r3, #24]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f042 0208 	orr.w	r2, r2, #8
 800a452:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	699a      	ldr	r2, [r3, #24]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f042 0210 	orr.w	r2, r2, #16
 800a462:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f022 0201 	bic.w	r2, r2, #1
 800a472:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	6919      	ldr	r1, [r3, #16]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	4b3c      	ldr	r3, [pc, #240]	@ (800a570 <SPI_CloseTransfer+0x13c>)
 800a480:	400b      	ands	r3, r1
 800a482:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	689a      	ldr	r2, [r3, #8]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a492:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	2b04      	cmp	r3, #4
 800a49e:	d014      	beq.n	800a4ca <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f003 0320 	and.w	r3, r3, #32
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00f      	beq.n	800a4ca <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4b0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	699a      	ldr	r2, [r3, #24]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f042 0220 	orr.w	r2, r2, #32
 800a4c8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	2b03      	cmp	r3, #3
 800a4d4:	d014      	beq.n	800a500 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d00f      	beq.n	800a500 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4e6:	f043 0204 	orr.w	r2, r3, #4
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	699a      	ldr	r2, [r3, #24]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a4fe:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00f      	beq.n	800a52a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a510:	f043 0201 	orr.w	r2, r3, #1
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	699a      	ldr	r2, [r3, #24]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a528:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00f      	beq.n	800a554 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a53a:	f043 0208 	orr.w	r2, r3, #8
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	699a      	ldr	r2, [r3, #24]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a552:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800a564:	bf00      	nop
 800a566:	3714      	adds	r7, #20
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr
 800a570:	fffffc90 	.word	0xfffffc90

0800a574 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a580:	095b      	lsrs	r3, r3, #5
 800a582:	3301      	adds	r3, #1
 800a584:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	3301      	adds	r3, #1
 800a58c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	3307      	adds	r3, #7
 800a592:	08db      	lsrs	r3, r3, #3
 800a594:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	fb02 f303 	mul.w	r3, r2, r3
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3714      	adds	r7, #20
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <memset>:
 800a5aa:	4402      	add	r2, r0
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d100      	bne.n	800a5b4 <memset+0xa>
 800a5b2:	4770      	bx	lr
 800a5b4:	f803 1b01 	strb.w	r1, [r3], #1
 800a5b8:	e7f9      	b.n	800a5ae <memset+0x4>
	...

0800a5bc <__libc_init_array>:
 800a5bc:	b570      	push	{r4, r5, r6, lr}
 800a5be:	4d0d      	ldr	r5, [pc, #52]	@ (800a5f4 <__libc_init_array+0x38>)
 800a5c0:	4c0d      	ldr	r4, [pc, #52]	@ (800a5f8 <__libc_init_array+0x3c>)
 800a5c2:	1b64      	subs	r4, r4, r5
 800a5c4:	10a4      	asrs	r4, r4, #2
 800a5c6:	2600      	movs	r6, #0
 800a5c8:	42a6      	cmp	r6, r4
 800a5ca:	d109      	bne.n	800a5e0 <__libc_init_array+0x24>
 800a5cc:	4d0b      	ldr	r5, [pc, #44]	@ (800a5fc <__libc_init_array+0x40>)
 800a5ce:	4c0c      	ldr	r4, [pc, #48]	@ (800a600 <__libc_init_array+0x44>)
 800a5d0:	f000 f818 	bl	800a604 <_init>
 800a5d4:	1b64      	subs	r4, r4, r5
 800a5d6:	10a4      	asrs	r4, r4, #2
 800a5d8:	2600      	movs	r6, #0
 800a5da:	42a6      	cmp	r6, r4
 800a5dc:	d105      	bne.n	800a5ea <__libc_init_array+0x2e>
 800a5de:	bd70      	pop	{r4, r5, r6, pc}
 800a5e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5e4:	4798      	blx	r3
 800a5e6:	3601      	adds	r6, #1
 800a5e8:	e7ee      	b.n	800a5c8 <__libc_init_array+0xc>
 800a5ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5ee:	4798      	blx	r3
 800a5f0:	3601      	adds	r6, #1
 800a5f2:	e7f2      	b.n	800a5da <__libc_init_array+0x1e>
 800a5f4:	0800a634 	.word	0x0800a634
 800a5f8:	0800a634 	.word	0x0800a634
 800a5fc:	0800a634 	.word	0x0800a634
 800a600:	0800a638 	.word	0x0800a638

0800a604 <_init>:
 800a604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a606:	bf00      	nop
 800a608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a60a:	bc08      	pop	{r3}
 800a60c:	469e      	mov	lr, r3
 800a60e:	4770      	bx	lr

0800a610 <_fini>:
 800a610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a612:	bf00      	nop
 800a614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a616:	bc08      	pop	{r3}
 800a618:	469e      	mov	lr, r3
 800a61a:	4770      	bx	lr
